   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PUBLIC,'public',1,0)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : PUBLIC . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7ff04d842f90> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : Modifier . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7ff04d801878> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 8
   yacc.py: 352:Stack  : Modifiers . LexToken(CLASS,'class',1,7)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : Modifiers CLASS . LexToken(IDENTIFIER,'employee',1,13)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 43
   yacc.py: 423:Result : <str @ 0x7ff04d821d20> ('class')
   yacc.py: 337:
   yacc.py: 338:State  : 24
   yacc.py: 352:Stack  : Modifiers ClassWord . LexToken(IDENTIFIER,'employee',1,13)
   yacc.py: 366:Action : Shift and goto state 37
   yacc.py: 337:
   yacc.py: 338:State  : 37
   yacc.py: 352:Stack  : Modifiers ClassWord IDENTIFIER . LexToken({,'{',1,21)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [<list @ 0x7ff04d801878>,'class','employee'] and goto state 36
   yacc.py: 423:Result : <dict @ 0x7ff04d6655c8> ({'class': 'class', 'id': 'employee', 'mo ...)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',1,21)
   yacc.py: 366:Action : Shift and goto state 33
   yacc.py: 337:
   yacc.py: 338:State  : 33
   yacc.py: 352:Stack  : ClassHeader { . LexToken(INT,'int',2,25)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { INT . LexToken(IDENTIFIER,'a',2,29)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83ef58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { PrimitiveType . LexToken(IDENTIFIER,'a',2,29)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83ef58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { TypeName . LexToken(IDENTIFIER,'a',2,29)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83ef58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 51
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier . LexToken(IDENTIFIER,'a',2,29)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier IDENTIFIER . LexToken(,,',',2,30)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName . LexToken(,,',',2,30)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['a'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'name': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarator . LexToken(,,',',2,30)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7ff04d6586e0>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7ff04d653b40> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 76
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarators . LexToken(,,',',2,30)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarators , . LexToken(IDENTIFIER,'b',2,31)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarators , IDENTIFIER . LexToken(;,';',2,33)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['b'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarators , DeclaratorName . LexToken(;,';',2,33)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['b'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7ff04d65ec58> ({'type': 'int', 'name': 'b'})
   yacc.py: 337:
   yacc.py: 338:State  : 256
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarators , VariableDeclarator . LexToken(;,';',2,33)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarators , VariableDeclarator] with [{'type': 'int'},',',<dict @ 0x7ff04d65ec58>] and goto state 58
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 76
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarators . LexToken(;,';',2,33)
   yacc.py: 389:Action : Reduce rule [FieldVariableDeclaration -> TypeSpecifier VariableDeclarators] with ['int',{'type': 'int'}] and goto state 56
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 43
   yacc.py: 352:Stack  : ClassHeader { FieldVariableDeclaration . LexToken(;,';',2,33)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { FieldVariableDeclaration ; . LexToken(PUBLIC,'public',6,74)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> FieldVariableDeclaration ;] with [None,';'] and goto state 49
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { FieldDeclaration . LexToken(PUBLIC,'public',6,74)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarationOptSemi . LexToken(PUBLIC,'public',6,74)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [None] and goto state 45
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',6,74)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations PUBLIC . LexToken(INT,'int',6,81)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7ff04d842f90> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifier . LexToken(INT,'int',6,81)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7ff04d801998> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(INT,'int',6,81)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers INT . LexToken(IDENTIFIER,'hello',6,85)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83e238> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'hello',6,85)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83e238> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'hello',6,85)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83e238> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'hello',6,85)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',6,90)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['hello'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04cd48150> ('hello')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',6,90)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(INT,'int',6,91)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( INT . LexToken(IDENTIFIER,'d',6,95)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83e260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( PrimitiveType . LexToken(IDENTIFIER,'d',6,95)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83e260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'d',6,95)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83e260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'d',6,95)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(,,',',6,96)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['d'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(,,',',6,96)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['int','d'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7ff04d658398> ({'type': 'int', 'name': 'd'})
   yacc.py: 337:
   yacc.py: 338:State  : 247
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(,,',',6,96)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [<dict @ 0x7ff04d658398>] and goto state 69
   yacc.py: 423:Result : <list @ 0x7ff04ceca2d8> ([{'type': 'int', 'name': 'd'}])
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(,,',',6,96)
   yacc.py: 366:Action : Shift and goto state 319
   yacc.py: 337:
   yacc.py: 338:State  : 319
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , . LexToken(INT,'int',6,98)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , INT . LexToken(IDENTIFIER,'c',6,102)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83e288> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , PrimitiveType . LexToken(IDENTIFIER,'c',6,102)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83e288> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeName . LexToken(IDENTIFIER,'c',6,102)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83e288> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier . LexToken(IDENTIFIER,'c',6,102)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier IDENTIFIER . LexToken(),')',6,103)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['c'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier DeclaratorName . LexToken(),')',6,103)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['int','c'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7ff04d65ec58> ({'type': 'int', 'name': 'c'})
   yacc.py: 337:
   yacc.py: 338:State  : 352
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , Parameter . LexToken(),')',6,103)
   yacc.py: 389:Action : Reduce rule [ParameterList -> ParameterList , Parameter] with [<list @ 0x7ff04ceca2d8>,',',<dict @ 0x7ff04d65ec58>] and goto state 70
   yacc.py: 423:Result : <list @ 0x7ff04ceca2d8> ([{'type': 'int', 'name': 'd'}, {'type':  ...)
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',6,103)
   yacc.py: 366:Action : Shift and goto state 324
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',6,104)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with ['hello','(',<list @ 0x7ff04ceca2d8>,')'] and goto state 67
   yacc.py: 423:Result : <dict @ 0x7ff04d654a28> ({'name': 'hello', 'plist': [{'type': 'in ...)
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',6,104)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IDENTIFIER,'a',7,110)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IDENTIFIER . LexToken(=,'=',7,112)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . LexToken(=,'=',7,112)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [<dict @ 0x7ff04d65e5c8>] and goto state 140
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PrimaryExpression . LexToken(=,'=',7,112)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d65e5c8>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PostfixExpression . LexToken(=,'=',7,112)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d65e5c8>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LogicalUnaryExpression . LexToken(=,'=',7,112)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d65e5c8>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression . LexToken(=,'=',7,112)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression = . LexToken(IDENTIFIER,'d',7,114)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7ff04ef2dfd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'d',7,114)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator IDENTIFIER . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['d'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator QualifiedName . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['d'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['d'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['d'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['d'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['d'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['d'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['d'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['d'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['d'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with ['d'] and goto state 223
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with ['d'] and goto state 226
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with ['d'] and goto state 228
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with ['d'] and goto state 230
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with ['d'] and goto state 232
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with ['d'] and goto state 234
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with ['d'] and goto state 237
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with ['d'] and goto state 240
   yacc.py: 423:Result : <str @ 0x7ff04f007710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [<dict @ 0x7ff04d65e5c8>,'=','d'] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { AssignmentExpression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d660c58>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Expression . LexToken(;,';',7,115)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7ff04d660c58>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExpressionStatement . LexToken(;,';',7,115)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExpressionStatement ; . LexToken(IDENTIFIER,'c',8,121)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d656168> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExpressionStatement ; M_instr . LexToken(IDENTIFIER,'c',8,121)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7ff04d660c58>,';',{'instr': 2}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7ff04d6605c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Statement . LexToken(IDENTIFIER,'c',8,121)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7ff04d6605c8>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7ff04d6605c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'c',8,121)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7ff04d6605c8>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7ff04d6546e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'c',8,121)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',8,123)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['c'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7ff04eff0c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',8,123)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['c'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7ff04eff0c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',8,123)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['c'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7ff04eff0c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',8,123)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['c'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7ff04eff0c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',8,123)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['c'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7ff04eff0c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',8,123)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(IDENTIFIER,'b',8,125)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7ff04ef2dfd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'b',8,125)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator IDENTIFIER . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 32
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [<dict @ 0x7ff04d660c58>] and goto state 140
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d660c58>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d660c58>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d660c58>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d660c58>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d660c58>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d660c58>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d660c58>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d660c58>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d660c58>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d660c58>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d660c58>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d660c58>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d660c58>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d660c58>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d660c58>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d660c58>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['c','=',<dict @ 0x7ff04d660c58>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7ff04d656168> ({'type': 'int', 'tempVar': 'c'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d656168>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d656168> ({'type': 'int', 'tempVar': 'c'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',8,126)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7ff04d656168>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7ff04d656168> ({'type': 'int', 'tempVar': 'c'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',8,126)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(RETURN,'return',9,132)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d6567f8> ({'instr': 4})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; M_instr . LexToken(RETURN,'return',9,132)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7ff04d656168>,';',{'instr': 4}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7ff04d663e88> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(RETURN,'return',9,132)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7ff04d663e88>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7ff04d663e88> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(RETURN,'return',9,132)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7ff04d6546e0>,<dict @ 0x7ff04d663e88>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(RETURN,'return',9,132)
   yacc.py: 366:Action : Shift and goto state 98
   yacc.py: 337:
   yacc.py: 338:State  : 98
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN . LexToken(INT_LITERAL,'1',9,139)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN INT_LITERAL . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['1'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Integer_LIT . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04d6586e0>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ComplexPrimary . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d6586e0>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN NotJustName . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d6586e0>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PrimaryExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PostfixExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN LogicalUnaryExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN UnaryExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN CastExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN MultiplicativeExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AdditiveExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ShiftExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN RelationalExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN EqualityExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AndExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ExclusiveOrExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN InclusiveOrExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalAndExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalOrExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AssignmentExpression . LexToken(;,';',9,140)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d6586e0>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression . LexToken(;,';',9,140)
   yacc.py: 366:Action : Shift and goto state 270
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression ; . LexToken(},'}',10,144)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',<dict @ 0x7ff04d6586e0>,';'] and goto state 132
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(},'}',10,144)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d65e5c8> ({'instr': 6})
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement M_instr . LexToken(},'}',10,144)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement M_instr] with [None,{'instr': 6}] and goto state 101
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',10,144)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7ff04d6586e0>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7ff04d6586e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',10,144)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7ff04d660c58>,<dict @ 0x7ff04d6586e0>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7ff04d656168> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',10,144)
   yacc.py: 366:Action : Shift and goto state 325
   yacc.py: 337:
   yacc.py: 338:State  : 325
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',12,147)
   yacc.py: 389:Action : Reduce rule [MethodBody -> { LocalVariableDeclarationsAndStatements }] with ['{',<dict @ 0x7ff04d656168>,'}'] and goto state 74
   yacc.py: 423:Result : <dict @ 0x7ff04d656168> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',12,147)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [<list @ 0x7ff04d801998>,'int',<dict @ 0x7ff04d654a28>,<dict @ 0x7ff04d656168>] and goto state 65
   yacc.py: 423:Result : <dict @ 0x7ff04d65e910> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations MethodDeclaration . LexToken(},'}',12,147)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [<dict @ 0x7ff04d65e910>] and goto state 50
   yacc.py: 423:Result : <dict @ 0x7ff04d65e910> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclaration . LexToken(},'}',12,147)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [<dict @ 0x7ff04d65e910>] and goto state 47
   yacc.py: 423:Result : <dict @ 0x7ff04d65e910> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(},'}',12,147)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,<dict @ 0x7ff04d65e910>] and goto state 46
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(},'}',12,147)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations } . LexToken(PUBLIC,'public',13,149)
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Rparen . LexToken(PUBLIC,'public',13,149)
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations Rparen] with [<dict @ 0x7ff04d6655c8>,'{',None,None] and goto state 34
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 2
   yacc.py: 352:Stack  : TypeDeclaration . LexToken(PUBLIC,'public',13,149)
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 26
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 7
   yacc.py: 352:Stack  : TypeDeclarationOptSemi . LexToken(PUBLIC,'public',13,149)
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarationOptSemi] with [None] and goto state 24
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 16
   yacc.py: 352:Stack  : TypeDeclarations . LexToken(PUBLIC,'public',13,149)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : TypeDeclarations PUBLIC . LexToken(CLASS,'class',13,156)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7ff04d842f90> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarations Modifier . LexToken(CLASS,'class',13,156)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7ff04d801908> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 8
   yacc.py: 352:Stack  : TypeDeclarations Modifiers . LexToken(CLASS,'class',13,156)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : TypeDeclarations Modifiers CLASS . LexToken(IDENTIFIER,'HelloWorld',13,162)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 43
   yacc.py: 423:Result : <str @ 0x7ff04d821d20> ('class')
   yacc.py: 337:
   yacc.py: 338:State  : 24
   yacc.py: 352:Stack  : TypeDeclarations Modifiers ClassWord . LexToken(IDENTIFIER,'HelloWorld',13,162)
   yacc.py: 366:Action : Shift and goto state 37
   yacc.py: 337:
   yacc.py: 338:State  : 37
   yacc.py: 352:Stack  : TypeDeclarations Modifiers ClassWord IDENTIFIER . LexToken({,'{',13,173)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [<list @ 0x7ff04d801908>,'class','HelloWorld'] and goto state 36
   yacc.py: 423:Result : <dict @ 0x7ff04d656e88> ({'class': 'class', 'id': 'HelloWorld', ' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader . LexToken({,'{',13,173)
   yacc.py: 366:Action : Shift and goto state 33
   yacc.py: 337:
   yacc.py: 338:State  : 33
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { . LexToken(PUBLIC,'public',15,181)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { PUBLIC . LexToken(STATIC,'static',15,188)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7ff04d842f90> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifier . LexToken(STATIC,'static',15,188)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7ff04d801b90> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers . LexToken(STATIC,'static',15,188)
   yacc.py: 366:Action : Shift and goto state 3
   yacc.py: 337:
   yacc.py: 338:State  : 3
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers STATIC . LexToken(INT,'int',15,195)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 42
   yacc.py: 423:Result : <str @ 0x7ff04cd481e0> ('static')
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers Modifier . LexToken(INT,'int',15,195)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [<list @ 0x7ff04d801b90>,'static'] and goto state 39
   yacc.py: 423:Result : <list @ 0x7ff04d801b90> (['p', 'u', 'b', 'l', 'i', 'c', 'static'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers . LexToken(INT,'int',15,195)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers INT . LexToken(IDENTIFIER,'hello',15,199)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83e0a8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers PrimitiveType . LexToken(IDENTIFIER,'hello',15,199)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83e0a8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeName . LexToken(IDENTIFIER,'hello',15,199)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83e0a8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier . LexToken(IDENTIFIER,'hello',15,199)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',15,204)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['hello'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04d842f90> ('hello')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',15,204)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( . LexToken(INT,'int',15,205)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( INT . LexToken(IDENTIFIER,'b',15,209)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83e0d0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( PrimitiveType . LexToken(IDENTIFIER,'b',15,209)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83e0d0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'b',15,209)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83e0d0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'b',15,209)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(,,',',15,210)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['b'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(,,',',15,210)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['int','b'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7ff04d656168> ({'type': 'int', 'name': 'b'})
   yacc.py: 337:
   yacc.py: 338:State  : 247
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(,,',',15,210)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [<dict @ 0x7ff04d656168>] and goto state 69
   yacc.py: 423:Result : <list @ 0x7ff04cecc0e0> ([{'type': 'int', 'name': 'b'}])
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(,,',',15,210)
   yacc.py: 366:Action : Shift and goto state 319
   yacc.py: 337:
   yacc.py: 338:State  : 319
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , . LexToken(INT,'int',15,212)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , INT . LexToken(IDENTIFIER,'c',15,216)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83e080> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , PrimitiveType . LexToken(IDENTIFIER,'c',15,216)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83e080> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeName . LexToken(IDENTIFIER,'c',15,216)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83e080> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier . LexToken(IDENTIFIER,'c',15,216)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier IDENTIFIER . LexToken(),')',15,217)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['c'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier DeclaratorName . LexToken(),')',15,217)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['int','c'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7ff04d660c58> ({'type': 'int', 'name': 'c'})
   yacc.py: 337:
   yacc.py: 338:State  : 352
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , Parameter . LexToken(),')',15,217)
   yacc.py: 389:Action : Reduce rule [ParameterList -> ParameterList , Parameter] with [<list @ 0x7ff04cecc0e0>,',',<dict @ 0x7ff04d660c58>] and goto state 70
   yacc.py: 423:Result : <list @ 0x7ff04cecc0e0> ([{'type': 'int', 'name': 'b'}, {'type':  ...)
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',15,217)
   yacc.py: 366:Action : Shift and goto state 324
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',15,219)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with ['hello','(',<list @ 0x7ff04cecc0e0>,')'] and goto state 67
   yacc.py: 423:Result : <dict @ 0x7ff04d6634b0> ({'name': 'hello', 'plist': [{'type': 'in ...)
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',15,219)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',16,227)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { INT . LexToken(IDENTIFIER,'a',16,231)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7ff04d83e0f8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken(IDENTIFIER,'a',16,231)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04d83e0f8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'a',16,231)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04d83e0f8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'a',16,231)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(;,';',16,233)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(;,';',16,233)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['a'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'name': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',16,233)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7ff04d6556e0>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7ff04d663b40> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',16,233)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(RETURN,'return',17,241)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d657910> ({'instr': 0})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; M_instr . LexToken(RETURN,'return',17,241)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['int',{'type': 'int'},';',{'instr': 0}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(RETURN,'return',17,241)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(RETURN,'return',17,241)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [{}] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7ff04d6575c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(RETURN,'return',17,241)
   yacc.py: 366:Action : Shift and goto state 98
   yacc.py: 337:
   yacc.py: 338:State  : 98
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN . LexToken(INT_LITERAL,'2',17,248)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN INT_LITERAL . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['2'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Integer_LIT . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04d6556e0>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ComplexPrimary . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d6556e0>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN NotJustName . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d6556e0>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PrimaryExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PostfixExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN LogicalUnaryExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN UnaryExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN CastExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN MultiplicativeExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AdditiveExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ShiftExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN RelationalExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN EqualityExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AndExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ExclusiveOrExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN InclusiveOrExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalAndExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalOrExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AssignmentExpression . LexToken(;,';',17,249)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d6556e0>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression . LexToken(;,';',17,249)
   yacc.py: 366:Action : Shift and goto state 270
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression ; . LexToken(},'}',18,255)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',<dict @ 0x7ff04d6556e0>,';'] and goto state 132
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(},'}',18,255)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d655050> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement M_instr . LexToken(},'}',18,255)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement M_instr] with [None,{'instr': 2}] and goto state 101
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',18,255)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7ff04d6556e0>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7ff04d6556e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',18,255)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7ff04d6575c8>,<dict @ 0x7ff04d6556e0>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7ff04d6567f8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',18,255)
   yacc.py: 366:Action : Shift and goto state 325
   yacc.py: 337:
   yacc.py: 338:State  : 325
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',20,262)
   yacc.py: 389:Action : Reduce rule [MethodBody -> { LocalVariableDeclarationsAndStatements }] with ['{',<dict @ 0x7ff04d6567f8>,'}'] and goto state 74
   yacc.py: 423:Result : <dict @ 0x7ff04d6567f8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PUBLIC,'public',20,262)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [<list @ 0x7ff04d801b90>,'int',<dict @ 0x7ff04d6634b0>,<dict @ 0x7ff04d6567f8>] and goto state 65
   yacc.py: 423:Result : <dict @ 0x7ff04d660910> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { MethodDeclaration . LexToken(PUBLIC,'public',20,262)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [<dict @ 0x7ff04d660910>] and goto state 50
   yacc.py: 423:Result : <dict @ 0x7ff04d660910> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclaration . LexToken(PUBLIC,'public',20,262)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [<dict @ 0x7ff04d660910>] and goto state 47
   yacc.py: 423:Result : <dict @ 0x7ff04d660910> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarationOptSemi . LexToken(PUBLIC,'public',20,262)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [<dict @ 0x7ff04d660910>] and goto state 45
   yacc.py: 423:Result : <dict @ 0x7ff04d660910> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',20,262)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PUBLIC . LexToken(STATIC,'static',20,269)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7ff04cd480f0> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(STATIC,'static',20,269)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7ff04d801e60> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(STATIC,'static',20,269)
   yacc.py: 366:Action : Shift and goto state 3
   yacc.py: 337:
   yacc.py: 338:State  : 3
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers STATIC . LexToken(VOID,'void',20,276)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 42
   yacc.py: 423:Result : <str @ 0x7ff04cd48240> ('static')
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers Modifier . LexToken(VOID,'void',20,276)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [<list @ 0x7ff04d801e60>,'static'] and goto state 39
   yacc.py: 423:Result : <list @ 0x7ff04d801e60> (['p', 'u', 'b', 'l', 'i', 'c', 'static'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(VOID,'void',20,276)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers VOID . LexToken(IDENTIFIER,'main',20,281)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <str @ 0x7ff04cd481b0> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'main',20,281)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['void'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04cd481b0> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'main',20,281)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['void'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04cd481b0> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'main',20,281)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',20,285)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['main'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04cd480f0> ('main')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',20,285)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'String',20,286)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken([,'[',20,292)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7ff04cd48270> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 52
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken([,'[',20,292)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with ['String'] and goto state 5
   yacc.py: 423:Result : <str @ 0x7ff04cd48270> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken([,'[',20,292)
   yacc.py: 366:Action : Shift and goto state 81
   yacc.py: 337:
   yacc.py: 338:State  : 81
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName [ . LexToken(],']',20,293)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName [ ] . LexToken(IDENTIFIER,'args',20,295)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 195
   yacc.py: 423:Result : <int @ 0x1664158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName OP_DIM . LexToken(IDENTIFIER,'args',20,295)
   yacc.py: 389:Action : Reduce rule [Dims -> OP_DIM] with [1] and goto state 193
   yacc.py: 423:Result : <int @ 0x1664158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 83
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName Dims . LexToken(IDENTIFIER,'args',20,295)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName Dims] with ['String',1] and goto state 3
   yacc.py: 423:Result : <str @ 0x7ff04d847810> ('array_String_1')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'args',20,295)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(),')',20,299)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['args'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04cd48210> ('args')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',20,299)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [<str @ 0x7ff04d847810>,'args'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7ff04d6575c8> ({'type': 'array_String_1', 'name': 'args ...)
   yacc.py: 337:
   yacc.py: 338:State  : 247
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',20,299)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [<dict @ 0x7ff04d6575c8>] and goto state 69
   yacc.py: 423:Result : <list @ 0x7ff04d801998> ([{'type': 'array_String_1', 'name': 'arg ...)
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',20,299)
   yacc.py: 366:Action : Shift and goto state 324
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',20,301)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with ['main','(',<list @ 0x7ff04d801998>,')'] and goto state 67
   yacc.py: 423:Result : <dict @ 0x7ff04d65be88> ({'name': 'main', 'plist': [{'type': 'arr ...)
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',20,301)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(CHAR,'char',30,541)
   yacc.py: 366:Action : Shift and goto state 57
   yacc.py: 337:
   yacc.py: 338:State  : 57
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { CHAR . LexToken([,'[',30,545)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> CHAR] with ['char'] and goto state 9
   yacc.py: 423:Result : <str @ 0x7ff04cd48060> ('char')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken([,'[',30,545)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['char'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04cd48060> ('char')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken([,'[',30,545)
   yacc.py: 366:Action : Shift and goto state 81
   yacc.py: 337:
   yacc.py: 338:State  : 81
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName [ . LexToken(],']',30,546)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName [ ] . LexToken([,'[',30,547)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 195
   yacc.py: 423:Result : <int @ 0x1664158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName OP_DIM . LexToken([,'[',30,547)
   yacc.py: 389:Action : Reduce rule [Dims -> OP_DIM] with [1] and goto state 193
   yacc.py: 423:Result : <int @ 0x1664158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 83
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims . LexToken([,'[',30,547)
   yacc.py: 366:Action : Shift and goto state 81
   yacc.py: 337:
   yacc.py: 338:State  : 81
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims [ . LexToken(],']',30,548)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims [ ] . LexToken([,'[',30,549)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 195
   yacc.py: 423:Result : <int @ 0x1664158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 181
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims OP_DIM . LexToken([,'[',30,549)
   yacc.py: 389:Action : Reduce rule [Dims -> Dims OP_DIM] with [1,1] and goto state 194
   yacc.py: 423:Result : <int @ 0x1664140> (2)
   yacc.py: 337:
   yacc.py: 338:State  : 83
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims . LexToken([,'[',30,549)
   yacc.py: 366:Action : Shift and goto state 81
   yacc.py: 337:
   yacc.py: 338:State  : 81
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims [ . LexToken(],']',30,550)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims [ ] . LexToken(IDENTIFIER,'a',30,552)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 195
   yacc.py: 423:Result : <int @ 0x1664158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 181
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims OP_DIM . LexToken(IDENTIFIER,'a',30,552)
   yacc.py: 389:Action : Reduce rule [Dims -> Dims OP_DIM] with [2,1] and goto state 194
   yacc.py: 423:Result : <int @ 0x1664128> (3)
   yacc.py: 337:
   yacc.py: 338:State  : 83
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName Dims . LexToken(IDENTIFIER,'a',30,552)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName Dims] with ['char',3] and goto state 3
   yacc.py: 423:Result : <str @ 0x7ff04d847b90> ('array_char_3')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'a',30,552)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(=,'=',30,554)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(=,'=',30,554)
   yacc.py: 366:Action : Shift and goto state 175
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = . LexToken(NEW,'new',30,557)
   yacc.py: 366:Action : Shift and goto state 128
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW . LexToken(CHAR,'char',30,561)
   yacc.py: 366:Action : Shift and goto state 57
   yacc.py: 337:
   yacc.py: 338:State  : 57
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW CHAR . LexToken([,'[',30,565)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> CHAR] with ['char'] and goto state 9
   yacc.py: 423:Result : <str @ 0x7ff04cd48060> ('char')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW PrimitiveType . LexToken([,'[',30,565)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['char'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04cd48060> ('char')
   yacc.py: 337:
   yacc.py: 338:State  : 222
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName . LexToken([,'[',30,565)
   yacc.py: 366:Action : Shift and goto state 297
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ . LexToken(INT_LITERAL,'8',30,566)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ INT_LITERAL . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['8'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ Integer_LIT . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04d657910>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ComplexPrimary . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d657910>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ NotJustName . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d657910>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ PrimaryExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d657910>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ PostfixExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d657910>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ LogicalUnaryExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d657910>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ UnaryExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d657910>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ CastExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d657910>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ MultiplicativeExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d657910>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ AdditiveExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d657910>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ShiftExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d657910>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ RelationalExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d657910>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ EqualityExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d657910>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ AndExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d657910>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ExclusiveOrExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d657910>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ InclusiveOrExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d657910>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ConditionalAndExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d657910>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ConditionalOrExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d657910>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ConditionalExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d657910>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ AssignmentExpression . LexToken(],']',30,567)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d657910>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 344
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ Expression . LexToken(],']',30,567)
   yacc.py: 366:Action : Shift and goto state 361
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ Expression ] . LexToken([,'[',30,568)
   yacc.py: 389:Action : Reduce rule [DimExpr -> [ Expression ]] with ['[',<dict @ 0x7ff04d657910>,']'] and goto state 192
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 298
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExpr . LexToken([,'[',30,568)
   yacc.py: 389:Action : Reduce rule [DimExprs -> DimExpr] with [<dict @ 0x7ff04d657910>] and goto state 190
   yacc.py: 423:Result : <list @ 0x7ff04ceca830> ([{'type': 'int', 'tempVar': '_t4'}])
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs . LexToken([,'[',30,568)
   yacc.py: 366:Action : Shift and goto state 297
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ . LexToken(INT_LITERAL,'5',30,569)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ INT_LITERAL . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['5'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ Integer_LIT . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04d664050>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ComplexPrimary . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d664050>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ NotJustName . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d664050>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ PrimaryExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d664050>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ PostfixExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d664050>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ LogicalUnaryExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d664050>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ UnaryExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d664050>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ CastExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d664050>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ MultiplicativeExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d664050>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ AdditiveExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d664050>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ShiftExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d664050>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ RelationalExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d664050>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ EqualityExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d664050>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ AndExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d664050>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ExclusiveOrExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d664050>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ InclusiveOrExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d664050>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ConditionalAndExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d664050>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ConditionalOrExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d664050>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ConditionalExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d664050>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ AssignmentExpression . LexToken(],']',30,570)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d664050>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 344
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ Expression . LexToken(],']',30,570)
   yacc.py: 366:Action : Shift and goto state 361
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ Expression ] . LexToken([,'[',30,571)
   yacc.py: 389:Action : Reduce rule [DimExpr -> [ Expression ]] with ['[',<dict @ 0x7ff04d664050>,']'] and goto state 192
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'type': 'int', 'tempVar': '_t5'})
   yacc.py: 337:
   yacc.py: 338:State  : 342
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs DimExpr . LexToken([,'[',30,571)
   yacc.py: 389:Action : Reduce rule [DimExprs -> DimExprs DimExpr] with [<list @ 0x7ff04ceca830>,<dict @ 0x7ff04d664050>] and goto state 191
   yacc.py: 423:Result : <list @ 0x7ff04ceca830> ([{'type': 'int', 'tempVar': '_t4'}, {'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs . LexToken([,'[',30,571)
   yacc.py: 366:Action : Shift and goto state 297
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ . LexToken(INT_LITERAL,'3',30,572)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ INT_LITERAL . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['3'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ Integer_LIT . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04d664398>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ComplexPrimary . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d664398>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ NotJustName . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d664398>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ PrimaryExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d664398>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ PostfixExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d664398>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ LogicalUnaryExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d664398>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ UnaryExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d664398>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ CastExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d664398>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ MultiplicativeExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d664398>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ AdditiveExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d664398>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ShiftExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d664398>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ RelationalExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d664398>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ EqualityExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d664398>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ AndExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d664398>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ExclusiveOrExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d664398>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ InclusiveOrExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d664398>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ConditionalAndExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d664398>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ConditionalOrExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d664398>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ ConditionalExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d664398>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ AssignmentExpression . LexToken(],']',30,573)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d664398>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 344
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ Expression . LexToken(],']',30,573)
   yacc.py: 366:Action : Shift and goto state 361
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs [ Expression ] . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [DimExpr -> [ Expression ]] with ['[',<dict @ 0x7ff04d664398>,']'] and goto state 192
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'int', 'tempVar': '_t6'})
   yacc.py: 337:
   yacc.py: 338:State  : 342
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs DimExpr . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [DimExprs -> DimExprs DimExpr] with [<list @ 0x7ff04ceca830>,<dict @ 0x7ff04d664398>] and goto state 191
   yacc.py: 423:Result : <list @ 0x7ff04ceca830> ([{'type': 'int', 'tempVar': '_t4'}, {'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [ArrayAllocationExpression -> NEW TypeName DimExprs] with ['new','char',<list @ 0x7ff04ceca830>] and goto state 188
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ArrayAllocationExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [PlainNewAllocationExpression -> ArrayAllocationExpression] with [<dict @ 0x7ff04d661c58>] and goto state 179
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PlainNewAllocationExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [NewAllocationExpression -> PlainNewAllocationExpression] with [<dict @ 0x7ff04d661c58>] and goto state 177
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 134
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NewAllocationExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [NotJustName -> NewAllocationExpression] with [<dict @ 0x7ff04d661c58>] and goto state 143
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d661c58>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d661c58>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d661c58>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d661c58>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d661c58>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d661c58>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d661c58>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d661c58>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d661c58>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d661c58>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d661c58>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d661c58>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d661c58>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d661c58>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d661c58>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d661c58>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d661c58>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d661c58>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = Expression . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [<dict @ 0x7ff04d661c58>] and goto state 61
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'array_char_3', 'dimension': [' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 259
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with ['a','=',<dict @ 0x7ff04d661c58>] and goto state 60
   yacc.py: 423:Result : <dict @ 0x7ff04d664a28> ({'type': 'array_char_3', 'name': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',30,575)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7ff04d664a28>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7ff04d664d70> ({'type': 'array_char_3'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',30,575)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(CHAR,'char',31,584)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d661c58> ({'instr': 11})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; M_instr . LexToken(CHAR,'char',31,584)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['array_char_3',<dict @ 0x7ff04d664d70>,';',{'instr': 11}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(CHAR,'char',31,584)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(CHAR,'char',31,584)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [{}] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7ff04d657910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(CHAR,'char',31,584)
   yacc.py: 366:Action : Shift and goto state 57
   yacc.py: 337:
   yacc.py: 338:State  : 57
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CHAR . LexToken(IDENTIFIER,'b',31,589)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> CHAR] with ['char'] and goto state 9
   yacc.py: 423:Result : <str @ 0x7ff04cd48270> ('char')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'b',31,589)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['char'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7ff04cd48270> ('char')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'b',31,589)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['char'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7ff04cd48270> ('char')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'b',31,589)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(;,';',31,590)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['b'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(;,';',31,590)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['b'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7ff04d65b4b0> ({'type': 'char', 'name': 'b'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',31,590)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7ff04d65b4b0>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'char'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',31,590)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'b',33,623)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d664398> ({'instr': 11})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; M_instr . LexToken(IDENTIFIER,'b',33,623)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['char',<dict @ 0x7ff04d65e5c8>,';',{'instr': 11}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7ff04d664a28> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'b',33,623)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7ff04d664a28> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'b',33,623)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7ff04d657910>,{}] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7ff04d6646e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'b',33,623)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',33,625)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',33,625)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['b'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',33,625)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['b'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',33,625)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['b'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',33,625)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['b'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7ff04eff0698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',33,625)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(IDENTIFIER,'a',33,627)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7ff04ef2dfd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'a',33,627)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator IDENTIFIER . LexToken([,'[',33,628)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7ff04eff0670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName . LexToken([,'[',33,628)
   yacc.py: 366:Action : Shift and goto state 238
   yacc.py: 337:
   yacc.py: 338:State  : 238
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ . LexToken(INT_LITERAL,'2',33,629)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ INT_LITERAL . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['2'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ Integer_LIT . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04d661c58>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ ComplexPrimary . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d661c58>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ NotJustName . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d661c58>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ PrimaryExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d661c58>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ PostfixExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d661c58>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ LogicalUnaryExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d661c58>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ UnaryExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d661c58>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ CastExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d661c58>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ MultiplicativeExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d661c58>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ AdditiveExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d661c58>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ ShiftExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d661c58>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ RelationalExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d661c58>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ EqualityExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d661c58>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ AndExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d661c58>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ ExclusiveOrExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d661c58>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ InclusiveOrExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d661c58>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ ConditionalAndExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d661c58>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ ConditionalOrExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d661c58>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ ConditionalExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d661c58>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ AssignmentExpression . LexToken(],']',33,630)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d661c58>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'type': 'int', 'tempVar': '_t9'})
   yacc.py: 337:
   yacc.py: 338:State  : 312
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ Expression . LexToken(],']',33,630)
   yacc.py: 366:Action : Shift and goto state 350
   yacc.py: 337:
   yacc.py: 338:State  : 350
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName [ Expression ] . LexToken([,'[',33,631)
   yacc.py: 389:Action : Reduce rule [ArrayAccess -> QualifiedName [ Expression ]] with ['a','[',<dict @ 0x7ff04d661c58>,']'] and goto state 160
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'arrayAdd': 'a', 'type': 'array_char_2' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ArrayAccess . LexToken([,'[',33,631)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> ArrayAccess] with [<dict @ 0x7ff04d664050>] and goto state 152
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'arrayAdd': 'a', 'type': 'array_char_2' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken([,'[',33,631)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [<dict @ 0x7ff04d664050>] and goto state 145
   yacc.py: 423:Result : <dict @ 0x7ff04d664050> ({'arrayAdd': 'a', 'type': 'array_char_2' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken([,'[',33,631)
   yacc.py: 366:Action : Shift and goto state 216
   yacc.py: 337:
   yacc.py: 338:State  : 216
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ . LexToken(INT_LITERAL,'1',33,632)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ INT_LITERAL . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['1'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ Integer_LIT . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04ef1d5c8>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ComplexPrimary . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04ef1d5c8>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ NotJustName . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04ef1d5c8>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ PrimaryExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ PostfixExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ LogicalUnaryExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ UnaryExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ CastExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ MultiplicativeExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ AdditiveExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ShiftExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ RelationalExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ EqualityExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ AndExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ExclusiveOrExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ InclusiveOrExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ConditionalAndExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ConditionalOrExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ConditionalExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ AssignmentExpression . LexToken(],']',33,633)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04ef1d5c8>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04ef1d5c8> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 290
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ Expression . LexToken(],']',33,633)
   yacc.py: 366:Action : Shift and goto state 337
   yacc.py: 337:
   yacc.py: 338:State  : 337
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ Expression ] . LexToken([,'[',33,634)
   yacc.py: 389:Action : Reduce rule [ArrayAccess -> ComplexPrimary [ Expression ]] with [<dict @ 0x7ff04d664050>,'[',<dict @ 0x7ff04ef1d5c8>,']'] and goto state 161
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'arrayAdd': 'a', 'type': 'array_char_1' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ArrayAccess . LexToken([,'[',33,634)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> ArrayAccess] with [<dict @ 0x7ff04d661c58>] and goto state 152
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'arrayAdd': 'a', 'type': 'array_char_1' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken([,'[',33,634)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [<dict @ 0x7ff04d661c58>] and goto state 145
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'arrayAdd': 'a', 'type': 'array_char_1' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken([,'[',33,634)
   yacc.py: 366:Action : Shift and goto state 216
   yacc.py: 337:
   yacc.py: 338:State  : 216
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ . LexToken(INT_LITERAL,'1',33,635)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ INT_LITERAL . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['1'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ Integer_LIT . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7ff04d661280>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ComplexPrimary . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d661280>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ NotJustName . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d661280>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ PrimaryExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d661280>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ PostfixExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d661280>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ LogicalUnaryExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d661280>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ UnaryExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d661280>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ CastExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d661280>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ MultiplicativeExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d661280>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ AdditiveExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d661280>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ShiftExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d661280>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ RelationalExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d661280>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ EqualityExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d661280>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ AndExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d661280>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ExclusiveOrExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d661280>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ InclusiveOrExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d661280>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ConditionalAndExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d661280>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ConditionalOrExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d661280>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ ConditionalExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d661280>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ AssignmentExpression . LexToken(],']',33,636)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d661280>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d661280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 290
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ Expression . LexToken(],']',33,636)
   yacc.py: 366:Action : Shift and goto state 337
   yacc.py: 337:
   yacc.py: 338:State  : 337
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary [ Expression ] . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ArrayAccess -> ComplexPrimary [ Expression ]] with [<dict @ 0x7ff04d661c58>,'[',<dict @ 0x7ff04d661280>,']'] and goto state 161
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ArrayAccess . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> ArrayAccess] with [<dict @ 0x7ff04d664398>] and goto state 152
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [<dict @ 0x7ff04d664398>] and goto state 145
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7ff04d664398>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7ff04d664398>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7ff04d664398>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7ff04d664398>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7ff04d664398>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7ff04d664398>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7ff04d664398>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7ff04d664398>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7ff04d664398>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7ff04d664398>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7ff04d664398>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7ff04d664398>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7ff04d664398>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7ff04d664398>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7ff04d664398>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7ff04d664398>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7ff04d664398>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7ff04d664398>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'type': 'char', 'tempVar': '_t15'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['b','=',<dict @ 0x7ff04d664398>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'char', 'tempVar': 'b'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7ff04d65e5c8>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'char', 'tempVar': 'b'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',33,638)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7ff04d65e5c8>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7ff04d65e5c8> ({'type': 'char', 'tempVar': 'b'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',33,638)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',64,1258)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7ff04d65b4b0> ({'instr': 21})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; M_instr . LexToken(},'}',64,1258)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7ff04d65e5c8>,';',{'instr': 21}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',64,1258)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7ff04d661c58>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7ff04d661c58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',64,1258)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7ff04d6646e0>,<dict @ 0x7ff04d661c58>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',64,1258)
   yacc.py: 366:Action : Shift and goto state 325
   yacc.py: 337:
   yacc.py: 338:State  : 325
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',68,1328)
   yacc.py: 389:Action : Reduce rule [MethodBody -> { LocalVariableDeclarationsAndStatements }] with ['{',<dict @ 0x7ff04d664398>,'}'] and goto state 74
   yacc.py: 423:Result : <dict @ 0x7ff04d664398> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',68,1328)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [<list @ 0x7ff04d801e60>,'void',<dict @ 0x7ff04d65be88>,<dict @ 0x7ff04d664398>] and goto state 65
   yacc.py: 423:Result : <dict @ 0x7ff04d6567f8> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(},'}',68,1328)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [<dict @ 0x7ff04d6567f8>] and goto state 50
   yacc.py: 423:Result : <dict @ 0x7ff04d6567f8> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(},'}',68,1328)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [<dict @ 0x7ff04d6567f8>] and goto state 47
   yacc.py: 423:Result : <dict @ 0x7ff04d6567f8> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(},'}',68,1328)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [<dict @ 0x7ff04d660910>,<dict @ 0x7ff04d6567f8>] and goto state 46
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(},'}',68,1328)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations } . $end
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Rparen . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations Rparen] with [<dict @ 0x7ff04d656e88>,'{',None,None] and goto state 34
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 2
   yacc.py: 352:Stack  : TypeDeclarations TypeDeclaration . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 26
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 32
   yacc.py: 352:Stack  : TypeDeclarations TypeDeclarationOptSemi . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi] with [None,None] and goto state 25
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 16
   yacc.py: 352:Stack  : TypeDeclarations . $end
   yacc.py: 389:Action : Reduce rule [ProgramFile -> TypeDeclarations] with [None] and goto state 22
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : ProgramFile . $end
   yacc.py: 389:Action : Reduce rule [CompilationUnit -> ProgramFile] with [None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : CompilationUnit . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x936be0> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
