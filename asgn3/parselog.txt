   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PUBLIC,'public',1,0)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : PUBLIC . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7fc16de02e70> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : Modifier . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7fc16dde7638> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 8
   yacc.py: 352:Stack  : Modifiers . LexToken(CLASS,'class',1,7)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : Modifiers CLASS . LexToken(IDENTIFIER,'HelloWorld',1,13)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 43
   yacc.py: 423:Result : <str @ 0x7fc16de22f60> ('class')
   yacc.py: 337:
   yacc.py: 338:State  : 24
   yacc.py: 352:Stack  : Modifiers ClassWord . LexToken(IDENTIFIER,'HelloWorld',1,13)
   yacc.py: 366:Action : Shift and goto state 37
   yacc.py: 337:
   yacc.py: 338:State  : 37
   yacc.py: 352:Stack  : Modifiers ClassWord IDENTIFIER . LexToken({,'{',1,24)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [<list @ 0x7fc16dde7638>,'class','HelloWorld'] and goto state 36
   yacc.py: 423:Result : <dict @ 0x7fc16d5145c8> ({'class': 'class', 'id': 'HelloWorld', ' ...)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',1,24)
   yacc.py: 366:Action : Shift and goto state 33
   yacc.py: 337:
   yacc.py: 338:State  : 33
   yacc.py: 352:Stack  : ClassHeader { . LexToken(PUBLIC,'public',3,32)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : ClassHeader { PUBLIC . LexToken(STATIC,'static',3,39)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7fc16de02e70> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : ClassHeader { Modifier . LexToken(STATIC,'static',3,39)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7fc16dde7710> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(STATIC,'static',3,39)
   yacc.py: 366:Action : Shift and goto state 3
   yacc.py: 337:
   yacc.py: 338:State  : 3
   yacc.py: 352:Stack  : ClassHeader { Modifiers STATIC . LexToken(INT,'int',3,46)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 42
   yacc.py: 423:Result : <str @ 0x7fc16de22f90> ('static')
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : ClassHeader { Modifiers Modifier . LexToken(INT,'int',3,46)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [<list @ 0x7fc16dde7710>,'static'] and goto state 39
   yacc.py: 423:Result : <list @ 0x7fc16dde7710> (['p', 'u', 'b', 'l', 'i', 'c', 'static'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(INT,'int',3,46)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers INT . LexToken(IDENTIFIER,'hello',3,50)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fc16de1ef58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { Modifiers PrimitiveType . LexToken(IDENTIFIER,'hello',3,50)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de1ef58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeName . LexToken(IDENTIFIER,'hello',3,50)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de1ef58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier . LexToken(IDENTIFIER,'hello',3,50)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',3,55)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['hello'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16de02e70> ('hello')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',3,55)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( . LexToken(INT,'int',3,56)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( INT . LexToken(IDENTIFIER,'b',3,60)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fc16de1e0a8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( PrimitiveType . LexToken(IDENTIFIER,'b',3,60)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de1e0a8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'b',3,60)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de1e0a8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'b',3,60)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(,,',',3,61)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['b'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16f5d8698> ('b')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(,,',',3,61)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['int','b'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7fc16d4ff050> ({'type': 'int', 'name': 'b'})
   yacc.py: 337:
   yacc.py: 338:State  : 247
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(,,',',3,61)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [<dict @ 0x7fc16d4ff050>] and goto state 69
   yacc.py: 423:Result : <list @ 0x7fc16d4afcf8> ([{'type': 'int', 'name': 'b'}])
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(,,',',3,61)
   yacc.py: 366:Action : Shift and goto state 319
   yacc.py: 337:
   yacc.py: 338:State  : 319
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , . LexToken(INT,'int',3,63)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , INT . LexToken(IDENTIFIER,'c',3,67)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fc16de1e0d0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , PrimitiveType . LexToken(IDENTIFIER,'c',3,67)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de1e0d0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeName . LexToken(IDENTIFIER,'c',3,67)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de1e0d0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier . LexToken(IDENTIFIER,'c',3,67)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier IDENTIFIER . LexToken(,,',',3,68)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['c'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16f5d8c88> ('c')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier DeclaratorName . LexToken(,,',',3,68)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['int','c'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7fc16d4fd910> ({'type': 'int', 'name': 'c'})
   yacc.py: 337:
   yacc.py: 338:State  : 352
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , Parameter . LexToken(,,',',3,68)
   yacc.py: 389:Action : Reduce rule [ParameterList -> ParameterList , Parameter] with [<list @ 0x7fc16d4afcf8>,',',<dict @ 0x7fc16d4fd910>] and goto state 70
   yacc.py: 423:Result : <list @ 0x7fc16d4afcf8> ([{'type': 'int', 'name': 'b'}, {'type':  ...)
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(,,',',3,68)
   yacc.py: 366:Action : Shift and goto state 319
   yacc.py: 337:
   yacc.py: 338:State  : 319
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , . LexToken(BOOLEAN,'boolean',3,70)
   yacc.py: 366:Action : Shift and goto state 67
   yacc.py: 337:
   yacc.py: 338:State  : 67
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , BOOLEAN . LexToken(IDENTIFIER,'d',3,78)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> BOOLEAN] with ['boolean'] and goto state 8
   yacc.py: 423:Result : <str @ 0x7fc16de22f00> ('boolean')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , PrimitiveType . LexToken(IDENTIFIER,'d',3,78)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['boolean'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de22f00> ('boolean')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeName . LexToken(IDENTIFIER,'d',3,78)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['boolean'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de22f00> ('boolean')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier . LexToken(IDENTIFIER,'d',3,78)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier IDENTIFIER . LexToken(),')',3,79)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['d'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16f5ef710> ('d')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier DeclaratorName . LexToken(),')',3,79)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['boolean','d'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7fc16d509e88> ({'type': 'boolean', 'name': 'd'})
   yacc.py: 337:
   yacc.py: 338:State  : 352
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList , Parameter . LexToken(),')',3,79)
   yacc.py: 389:Action : Reduce rule [ParameterList -> ParameterList , Parameter] with [<list @ 0x7fc16d4afcf8>,',',<dict @ 0x7fc16d509e88>] and goto state 70
   yacc.py: 423:Result : <list @ 0x7fc16d4afcf8> ([{'type': 'int', 'name': 'b'}, {'type':  ...)
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',3,79)
   yacc.py: 366:Action : Shift and goto state 324
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',3,81)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with ['hello','(',<list @ 0x7fc16d4afcf8>,')'] and goto state 67
   yacc.py: 423:Result : <dict @ 0x7fc16d509168> ({'name': 'hello', 'plist': [{'type': 'in ...)
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',3,81)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',4,89)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { INT . LexToken(IDENTIFIER,'a',4,93)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fc16de1e0f8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken(IDENTIFIER,'a',4,93)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de1e0f8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'a',4,93)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de1e0f8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'a',4,93)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(;,';',4,95)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(;,';',4,95)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['a'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'name': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',4,95)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7fc16d513050>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7fc16d514c58> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',4,95)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(RETURN,'return',5,103)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d50b280> ({'instr': 0})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; M_instr . LexToken(RETURN,'return',5,103)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['int',{'type': 'int'},';',{'instr': 0}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7fc16d50cb40> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(RETURN,'return',5,103)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7fc16d50cb40> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(RETURN,'return',5,103)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [{}] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fc16d4fee88> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(RETURN,'return',5,103)
   yacc.py: 366:Action : Shift and goto state 98
   yacc.py: 337:
   yacc.py: 338:State  : 98
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN . LexToken(INT_LITERAL,'2',5,110)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN INT_LITERAL . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['2'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Integer_LIT . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16d513050>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ComplexPrimary . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16d513050>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN NotJustName . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16d513050>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PrimaryExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16d513050>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PostfixExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d513050>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN LogicalUnaryExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d513050>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN UnaryExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d513050>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN CastExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d513050>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN MultiplicativeExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d513050>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AdditiveExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d513050>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ShiftExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16d513050>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN RelationalExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16d513050>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN EqualityExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d513050>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AndExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d513050>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ExclusiveOrExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d513050>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN InclusiveOrExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d513050>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalAndExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d513050>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalOrExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d513050>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d513050>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AssignmentExpression . LexToken(;,';',5,111)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16d513050>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression . LexToken(;,';',5,111)
   yacc.py: 366:Action : Shift and goto state 270
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression ; . LexToken(},'}',6,117)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',<dict @ 0x7fc16d513050>,';'] and goto state 132
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(},'}',6,117)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d50b910> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement M_instr . LexToken(},'}',6,117)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement M_instr] with [None,{'instr': 2}] and goto state 101
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',6,117)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16d513050>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16d513050> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',6,117)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16d4fee88>,<dict @ 0x7fc16d513050>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fc16d4ff6e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',6,117)
   yacc.py: 366:Action : Shift and goto state 325
   yacc.py: 337:
   yacc.py: 338:State  : 325
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',8,124)
   yacc.py: 389:Action : Reduce rule [MethodBody -> { LocalVariableDeclarationsAndStatements }] with ['{',<dict @ 0x7fc16d4ff6e0>,'}'] and goto state 74
   yacc.py: 423:Result : <dict @ 0x7fc16d4ff6e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PUBLIC,'public',8,124)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [<list @ 0x7fc16dde7710>,'int',<dict @ 0x7fc16d509168>,<dict @ 0x7fc16d4ff6e0>] and goto state 65
   yacc.py: 423:Result : <dict @ 0x7fc16d50ce88> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { MethodDeclaration . LexToken(PUBLIC,'public',8,124)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [<dict @ 0x7fc16d50ce88>] and goto state 50
   yacc.py: 423:Result : <dict @ 0x7fc16d50ce88> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { FieldDeclaration . LexToken(PUBLIC,'public',8,124)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [<dict @ 0x7fc16d50ce88>] and goto state 47
   yacc.py: 423:Result : <dict @ 0x7fc16d50ce88> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarationOptSemi . LexToken(PUBLIC,'public',8,124)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [<dict @ 0x7fc16d50ce88>] and goto state 45
   yacc.py: 423:Result : <dict @ 0x7fc16d50ce88> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',8,124)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations PUBLIC . LexToken(STATIC,'static',8,131)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7fc16de22e40> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifier . LexToken(STATIC,'static',8,131)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7fc16dde7a70> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(STATIC,'static',8,131)
   yacc.py: 366:Action : Shift and goto state 3
   yacc.py: 337:
   yacc.py: 338:State  : 3
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers STATIC . LexToken(VOID,'void',8,138)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 42
   yacc.py: 423:Result : <str @ 0x7fc16de22e10> ('static')
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers Modifier . LexToken(VOID,'void',8,138)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [<list @ 0x7fc16dde7a70>,'static'] and goto state 39
   yacc.py: 423:Result : <list @ 0x7fc16dde7a70> (['p', 'u', 'b', 'l', 'i', 'c', 'static'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(VOID,'void',8,138)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers VOID . LexToken(IDENTIFIER,'main',8,143)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <str @ 0x7fc16de22f30> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'main',8,143)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['void'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de22f30> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'main',8,143)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['void'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de22f30> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'main',8,143)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',8,147)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['main'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16de22ed0> ('main')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',8,147)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'String',8,148)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken([,'[',8,154)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16de22e40> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 52
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken([,'[',8,154)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with ['String'] and goto state 5
   yacc.py: 423:Result : <str @ 0x7fc16de22e40> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken([,'[',8,154)
   yacc.py: 366:Action : Shift and goto state 81
   yacc.py: 337:
   yacc.py: 338:State  : 81
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName [ . LexToken(],']',8,155)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName [ ] . LexToken(IDENTIFIER,'args',8,157)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName OP_DIM . LexToken(IDENTIFIER,'args',8,157)
   yacc.py: 389:Action : Reduce rule [Dims -> OP_DIM] with [None] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 83
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName Dims . LexToken(IDENTIFIER,'args',8,157)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName Dims] with ['String',None] and goto state 3
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'args',8,157)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(),')',8,161)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['args'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16de22ea0> ('args')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',8,161)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,'args'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7fc16d4fee88> ({'type': None, 'name': 'args'})
   yacc.py: 337:
   yacc.py: 338:State  : 247
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',8,161)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [<dict @ 0x7fc16d4fee88>] and goto state 69
   yacc.py: 423:Result : <list @ 0x7fc16d4af4d0> ([{'type': None, 'name': 'args'}])
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',8,161)
   yacc.py: 366:Action : Shift and goto state 324
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',8,163)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with ['main','(',<list @ 0x7fc16d4af4d0>,')'] and goto state 67
   yacc.py: 423:Result : <dict @ 0x7fc16d4fe7f8> ({'name': 'main', 'plist': [{'type': None ...)
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',8,163)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',19,444)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { INT . LexToken(IDENTIFIER,'a',19,448)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fc16de1e148> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken(IDENTIFIER,'a',19,448)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de1e148> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'a',19,448)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de1e148> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'a',19,448)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(;,';',19,450)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(;,';',19,450)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['a'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7fc16d500d70> ({'type': 'int', 'name': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',19,450)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7fc16d500d70>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7fc16d50cb40> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',19,450)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(FOR,'for',28,605)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d500050> ({'instr': 0})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; M_instr . LexToken(FOR,'for',28,605)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['int',{'type': 'int'},';',{'instr': 0}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7fc16d4fdc58> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(FOR,'for',28,605)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7fc16d4fdc58> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(FOR,'for',28,605)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [{}] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fc16d511c58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(FOR,'for',28,605)
   yacc.py: 366:Action : Shift and goto state 110
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR . LexToken((,'(',28,608)
   yacc.py: 366:Action : Shift and goto state 204
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( . LexToken(IDENTIFIER,'a',28,609)
   yacc.py: 391:Action : Reduce rule [Mark_switch -> <empty>] with [] and goto state 113
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch . LexToken(IDENTIFIER,'a',28,609)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch IDENTIFIER . LexToken(=,'=',28,610)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch QualifiedName . LexToken(=,'=',28,610)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['a'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch PrimaryExpression . LexToken(=,'=',28,610)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['a'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch PostfixExpression . LexToken(=,'=',28,610)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['a'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch LogicalUnaryExpression . LexToken(=,'=',28,610)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['a'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression . LexToken(=,'=',28,610)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression = . LexToken(INT_LITERAL,'0',28,611)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7fc16f515fd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'0',28,611)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['0'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator Integer_LIT . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16d500050>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16d500050>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16d500050>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16d500050>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d500050>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d500050>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d500050>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d500050>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d500050>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d500050>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16d500050>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16d500050>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d500050>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d500050>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d500050>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d500050>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d500050>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d500050>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d500050>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['a','=',<dict @ 0x7fc16d500050>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7fc16d5115c8> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch AssignmentExpression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16d5115c8>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16d5115c8> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch Expression . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fc16d5115c8>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fc16d5115c8> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 328
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ExpressionStatement . LexToken(;,';',28,612)
   yacc.py: 389:Action : Reduce rule [ExpressionStatements -> ExpressionStatement] with [<dict @ 0x7fc16d5115c8>] and goto state 126
   yacc.py: 423:Result : <dict @ 0x7fc16d5115c8> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 331
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ExpressionStatements . LexToken(;,';',28,612)
   yacc.py: 366:Action : Shift and goto state 355
   yacc.py: 337:
   yacc.py: 338:State  : 355
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ExpressionStatements ; . LexToken(IDENTIFIER,'a',28,613)
   yacc.py: 389:Action : Reduce rule [ForInit -> ExpressionStatements ;] with [<dict @ 0x7fc16d5115c8>,';'] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 330
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit . LexToken(IDENTIFIER,'a',28,613)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d50cb40> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr . LexToken(IDENTIFIER,'a',28,613)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr IDENTIFIER . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr QualifiedName . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['a'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr PrimaryExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['a'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr PostfixExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['a'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr LogicalUnaryExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['a'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr UnaryExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['a'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr CastExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['a'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr MultiplicativeExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['a'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AdditiveExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['a'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ShiftExpression . LexToken(<,'<',28,614)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['a'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression . LexToken(<,'<',28,614)
   yacc.py: 366:Action : Shift and goto state 210
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < . LexToken(INT_LITERAL,'5',28,615)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < INT_LITERAL . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['5'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < Integer_LIT . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16d50de88>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < ComplexPrimary . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16d50de88>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < NotJustName . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16d50de88>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < PrimaryExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16d50de88>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < PostfixExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d50de88>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < LogicalUnaryExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d50de88>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 197
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < UnaryExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d50de88>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < CastExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d50de88>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < MultiplicativeExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d50de88>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < AdditiveExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d50de88>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d50de88> ({'type': 'int', 'tempVar': '_t2'})
   yacc.py: 337:
   yacc.py: 338:State  : 285
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < ShiftExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with ['a','<',<dict @ 0x7fc16d50de88>] and goto state 219
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16d50db40>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr EqualityExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d50db40>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AndExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d50db40>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ExclusiveOrExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d50db40>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr InclusiveOrExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d50db40>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalAndExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d50db40>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalOrExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d50db40>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d50db40>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AssignmentExpression . LexToken(;,';',28,616)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16d50db40>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 368
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr Expression . LexToken(;,';',28,616)
   yacc.py: 366:Action : Shift and goto state 376
   yacc.py: 337:
   yacc.py: 338:State  : 376
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr Expression ; . LexToken(IDENTIFIER,'a',28,617)
   yacc.py: 389:Action : Reduce rule [ForExpr -> Expression ;] with [<dict @ 0x7fc16d50db40>,';'] and goto state 122
   yacc.py: 423:Result : <dict @ 0x7fc16d50db40> ({'trueList': [4], 'falseList': [5], 'typ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 366
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr . LexToken(IDENTIFIER,'a',28,617)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d511910> ({'instr': 6})
   yacc.py: 337:
   yacc.py: 338:State  : 375
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr . LexToken(IDENTIFIER,'a',28,617)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr IDENTIFIER . LexToken(OPT_INC_DEC,'++',28,618)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr QualifiedName . LexToken(OPT_INC_DEC,'++',28,618)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['a'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PrimaryExpression . LexToken(OPT_INC_DEC,'++',28,618)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['a'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression . LexToken(OPT_INC_DEC,'++',28,618)
   yacc.py: 366:Action : Shift and goto state 217
   yacc.py: 337:
   yacc.py: 338:State  : 217
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression OPT_INC_DEC . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [RealPostfixExpression -> PostfixExpression OPT_INC_DEC] with ['a','++'] and goto state 198
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 99
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr RealPostfixExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> RealPostfixExpression] with [<dict @ 0x7fc16d500050>] and goto state 197
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d500050>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr LogicalUnaryExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d500050>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr UnaryExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d500050>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr CastExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d500050>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr MultiplicativeExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d500050>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AdditiveExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d500050>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ShiftExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16d500050>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr RelationalExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16d500050>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr EqualityExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d500050>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AndExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d500050>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExclusiveOrExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d500050>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr InclusiveOrExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d500050>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalAndExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d500050>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalOrExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d500050>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d500050>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AssignmentExpression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16d500050>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr Expression . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fc16d500050>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 328
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExpressionStatement . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ExpressionStatements -> ExpressionStatement] with [<dict @ 0x7fc16d500050>] and goto state 126
   yacc.py: 423:Result : <dict @ 0x7fc16d500050> ({'trueList': [9], 'falseList': [10], 'ty ...)
   yacc.py: 337:
   yacc.py: 338:State  : 382
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExpressionStatements . LexToken(),')',28,620)
   yacc.py: 389:Action : Reduce rule [ForIncr -> ExpressionStatements] with [<dict @ 0x7fc16d500050>] and goto state 124
   yacc.py: 423:Result : <dict @ 0x7fc16d50d168> ({'nList': []})
   yacc.py: 337:
   yacc.py: 338:State  : 381
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr . LexToken(),')',28,620)
   yacc.py: 366:Action : Shift and goto state 387
   yacc.py: 337:
   yacc.py: 338:State  : 387
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) . LexToken({,'{',28,621)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d50a6e0> ({'instr': 10})
   yacc.py: 337:
   yacc.py: 338:State  : 391
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr . LexToken({,'{',28,621)
   yacc.py: 366:Action : Shift and goto state 70
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr { . LexToken(IF,'if',29,631)
   yacc.py: 389:Action : Reduce rule [Lparen -> {] with ['{'] and goto state 89
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen . LexToken(IF,'if',29,631)
   yacc.py: 366:Action : Shift and goto state 160
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF . LexToken((,'(',29,633)
   yacc.py: 366:Action : Shift and goto state 244
   yacc.py: 337:
   yacc.py: 338:State  : 244
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( . LexToken(IDENTIFIER,'a',29,634)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( IDENTIFIER . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( QualifiedName . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['a'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( PrimaryExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['a'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( PostfixExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['a'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( LogicalUnaryExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['a'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( UnaryExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['a'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( CastExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['a'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( MultiplicativeExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['a'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( AdditiveExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['a'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( ShiftExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['a'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( RelationalExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with ['a'] and goto state 223
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression . LexToken(OP_EQ,'==',29,635)
   yacc.py: 366:Action : Shift and goto state 199
   yacc.py: 337:
   yacc.py: 338:State  : 199
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ . LexToken(INT_LITERAL,'1',29,637)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ INT_LITERAL . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['1'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ Integer_LIT . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16d503e88>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ ComplexPrimary . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16d503e88>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ NotJustName . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16d503e88>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16d503e88>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d503e88>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d503e88>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 197
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d503e88>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ CastExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d503e88>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d503e88>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d503e88>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16d503e88>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16d503e88> ({'type': 'int', 'tempVar': '_t7'})
   yacc.py: 337:
   yacc.py: 338:State  : 273
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with ['a','==',<dict @ 0x7fc16d503e88>] and goto state 224
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( EqualityExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( AndExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( ExclusiveOrExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( InclusiveOrExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( ConditionalAndExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( ConditionalOrExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( ConditionalExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( AssignmentExpression . LexToken(),')',29,638)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16d5034b0>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16d5034b0> ({'trueList': [12], 'falseList': [13], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 315
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression . LexToken(),')',29,638)
   yacc.py: 366:Action : Shift and goto state 351
   yacc.py: 337:
   yacc.py: 338:State  : 351
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) . LexToken({,'{',29,639)
   yacc.py: 391:Action : Reduce rule [M_instr_branch -> <empty>] with [] and goto state 115
   yacc.py: 462:Result : <dict @ 0x7fc16dde35c8> ({'instr': 14})
   yacc.py: 337:
   yacc.py: 338:State  : 365
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch . LexToken({,'{',29,639)
   yacc.py: 366:Action : Shift and goto state 70
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch { . LexToken(IDENTIFIER,'a',30,651)
   yacc.py: 389:Action : Reduce rule [Lparen -> {] with ['{'] and goto state 89
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen . LexToken(IDENTIFIER,'a',30,651)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen IDENTIFIER . LexToken(=,'=',30,653)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen QualifiedName . LexToken(=,'=',30,653)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['a'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen PrimaryExpression . LexToken(=,'=',30,653)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['a'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen PostfixExpression . LexToken(=,'=',30,653)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['a'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LogicalUnaryExpression . LexToken(=,'=',30,653)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['a'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression . LexToken(=,'=',30,653)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression = . LexToken(INT_LITERAL,'3',30,655)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7fc16f515fd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'3',30,655)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['3'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator Integer_LIT . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16d505398>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16d505398>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16d505398>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16d505398>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d505398>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d505398>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d505398>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d505398>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d505398>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d505398>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16d505398>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16d505398>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d505398>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d505398>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d505398>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d505398>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d505398>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d505398>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d505398>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['a','=',<dict @ 0x7fc16d505398>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7fc16dde4910> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen AssignmentExpression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16dde4910>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16dde4910> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen Expression . LexToken(;,';',30,656)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fc16dde4910>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fc16dde4910> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen ExpressionStatement . LexToken(;,';',30,656)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen ExpressionStatement ; . LexToken(CONTINUE,'continue',31,668)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16dde45c8> ({'instr': 16})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen ExpressionStatement ; M_instr . LexToken(CONTINUE,'continue',31,668)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7fc16dde4910>,';',{'instr': 16}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7fc16dde4280> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen Statement . LexToken(CONTINUE,'continue',31,668)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16dde4280>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16dde4280> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationOrStatement . LexToken(CONTINUE,'continue',31,668)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16dde4280>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements . LexToken(CONTINUE,'continue',31,668)
   yacc.py: 366:Action : Shift and goto state 119
   yacc.py: 337:
   yacc.py: 338:State  : 119
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements CONTINUE . LexToken(;,';',31,676)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements CONTINUE ; . LexToken(},'}',32,686)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> CONTINUE ;] with ['continue',';'] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements JumpStatement . LexToken(},'}',32,686)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d503e88> ({'instr': 17})
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements JumpStatement M_instr . LexToken(},'}',32,686)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement M_instr] with [None,{'instr': 17}] and goto state 101
   yacc.py: 423:Result : <dict @ 0x7fc16dde45c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',32,686)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16dde45c8>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16dde45c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',32,686)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16d505398>,<dict @ 0x7fc16dde45c8>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fc16dde4280> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements . LexToken(},'}',32,686)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',32,688)
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 240
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Lparen LocalVariableDeclarationsAndStatements Rparen . LexToken(ELSE,'else',32,688)
   yacc.py: 389:Action : Reduce rule [Block -> Lparen LocalVariableDeclarationsAndStatements Rparen] with [None,<dict @ 0x7fc16dde4280>,None] and goto state 87
   yacc.py: 423:Result : <dict @ 0x7fc16dde4280> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 113
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Block . LexToken(ELSE,'else',32,688)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d505d70> ({'instr': 17})
   yacc.py: 337:
   yacc.py: 338:State  : 206
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Block M_instr . LexToken(ELSE,'else',32,688)
   yacc.py: 389:Action : Reduce rule [Statement -> Block M_instr] with [<dict @ 0x7fc16dde4280>,{'instr': 17}] and goto state 102
   yacc.py: 423:Result : <dict @ 0x7fc16d4f3e88> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 374
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement . LexToken(ELSE,'else',32,688)
   yacc.py: 366:Action : Shift and goto state 380
   yacc.py: 337:
   yacc.py: 338:State  : 380
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE . LexToken({,'{',32,692)
   yacc.py: 391:Action : Reduce rule [N_instr -> <empty>] with [] and goto state 114
   yacc.py: 462:Result : <dict @ 0x7fc16d5037f8> ({'nList': [17]})
   yacc.py: 337:
   yacc.py: 338:State  : 386
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr . LexToken({,'{',32,692)
   yacc.py: 391:Action : Reduce rule [M_instr_branch -> <empty>] with [] and goto state 115
   yacc.py: 462:Result : <dict @ 0x7fc16dde45c8> ({'instr': 18})
   yacc.py: 337:
   yacc.py: 338:State  : 390
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch . LexToken({,'{',32,692)
   yacc.py: 366:Action : Shift and goto state 70
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch { . LexToken(IDENTIFIER,'a',33,704)
   yacc.py: 389:Action : Reduce rule [Lparen -> {] with ['{'] and goto state 89
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen . LexToken(IDENTIFIER,'a',33,704)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen IDENTIFIER . LexToken(=,'=',33,706)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen QualifiedName . LexToken(=,'=',33,706)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['a'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen PrimaryExpression . LexToken(=,'=',33,706)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['a'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen PostfixExpression . LexToken(=,'=',33,706)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['a'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LogicalUnaryExpression . LexToken(=,'=',33,706)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['a'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression . LexToken(=,'=',33,706)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression = . LexToken(INT_LITERAL,'2',33,708)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7fc16f515fd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'2',33,708)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['2'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator Integer_LIT . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16d4616e0>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16d4616e0>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16d4616e0>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d4616e0>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['a','=',<dict @ 0x7fc16d4616e0>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7fc16f47a280> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen AssignmentExpression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16f47a280>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16f47a280> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen Expression . LexToken(;,';',33,709)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fc16f47a280>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fc16f47a280> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen ExpressionStatement . LexToken(;,';',33,709)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen ExpressionStatement ; . LexToken(BREAK,'break',34,721)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16f47a5c8> ({'instr': 20})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen ExpressionStatement ; M_instr . LexToken(BREAK,'break',34,721)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7fc16f47a280>,';',{'instr': 20}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7fc16f47c4b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen Statement . LexToken(BREAK,'break',34,721)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16f47c4b0>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16f47c4b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationOrStatement . LexToken(BREAK,'break',34,721)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16f47c4b0>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements . LexToken(BREAK,'break',34,721)
   yacc.py: 366:Action : Shift and goto state 141
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements BREAK . LexToken(;,';',34,726)
   yacc.py: 366:Action : Shift and goto state 234
   yacc.py: 337:
   yacc.py: 338:State  : 234
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements BREAK ; . LexToken(},'}',35,736)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> BREAK ;] with ['break',';'] and goto state 129
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements JumpStatement . LexToken(},'}',35,736)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d503e88> ({'instr': 21})
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements JumpStatement M_instr . LexToken(},'}',35,736)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement M_instr] with [None,{'instr': 21}] and goto state 101
   yacc.py: 423:Result : <dict @ 0x7fc16f47a5c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',35,736)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16f47a5c8>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16f47a5c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',35,736)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16d4616e0>,<dict @ 0x7fc16f47a5c8>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fc16f47c4b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements . LexToken(},'}',35,736)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements } . LexToken(},'}',36,744)
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 240
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Lparen LocalVariableDeclarationsAndStatements Rparen . LexToken(},'}',36,744)
   yacc.py: 389:Action : Reduce rule [Block -> Lparen LocalVariableDeclarationsAndStatements Rparen] with [None,<dict @ 0x7fc16f47c4b0>,None] and goto state 87
   yacc.py: 423:Result : <dict @ 0x7fc16f47c4b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 113
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Block . LexToken(},'}',36,744)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d4f37f8> ({'instr': 21})
   yacc.py: 337:
   yacc.py: 338:State  : 206
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Block M_instr . LexToken(},'}',36,744)
   yacc.py: 389:Action : Reduce rule [Statement -> Block M_instr] with [<dict @ 0x7fc16f47c4b0>,{'instr': 21}] and goto state 102
   yacc.py: 423:Result : <dict @ 0x7fc16d4f3050> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 393
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement . LexToken(},'}',36,744)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement] with ['if','(',<dict @ 0x7fc16d5034b0>,')',{'instr': 14},<dict @ 0x7fc16d4f3e88>,'else',{'nList': [17]},{'instr': 18},<dict @ 0x7fc16d4f3050>] and goto state 111
   yacc.py: 423:Result : <dict @ 0x7fc16d505398> ({'beginLoop': [], 'endOfLoop': [], 'nLis ...)
   yacc.py: 337:
   yacc.py: 338:State  : 107
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen SelectionStatement . LexToken(},'}',36,744)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d50a398> ({'instr': 21})
   yacc.py: 337:
   yacc.py: 338:State  : 203
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen SelectionStatement M_instr . LexToken(},'}',36,744)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement M_instr] with [<dict @ 0x7fc16d505398>,{'instr': 21}] and goto state 99
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen Statement . LexToken(},'}',36,744)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16f47a050>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationOrStatement . LexToken(},'}',36,744)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16f47a050>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fc16dde3910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements . LexToken(},'}',36,744)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements } . LexToken(},'}',45,901)
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 240
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements Rparen . LexToken(},'}',45,901)
   yacc.py: 389:Action : Reduce rule [Block -> Lparen LocalVariableDeclarationsAndStatements Rparen] with [None,<dict @ 0x7fc16dde3910>,None] and goto state 87
   yacc.py: 423:Result : <dict @ 0x7fc16dde3910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 113
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Block . LexToken(},'}',45,901)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d50a050> ({'instr': 21})
   yacc.py: 337:
   yacc.py: 338:State  : 206
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Block M_instr . LexToken(},'}',45,901)
   yacc.py: 389:Action : Reduce rule [Statement -> Block M_instr] with [<dict @ 0x7fc16dde3910>,{'instr': 21}] and goto state 102
   yacc.py: 423:Result : <dict @ 0x7fc16f47c4b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 394
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement . LexToken(},'}',45,901)
   yacc.py: 389:Action : Reduce rule [IterationStatement -> FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement] with ['for','(',None,None,{'instr': 2},<dict @ 0x7fc16d50db40>,{'instr': 6},{'nList': []},')',{'instr': 10},<dict @ 0x7fc16f47c4b0>] and goto state 118
   yacc.py: 423:Result : <dict @ 0x7fc16d4f3050> ({'nList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement . LexToken(},'}',45,901)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d5006e0> ({'instr': 22})
   yacc.py: 337:
   yacc.py: 338:State  : 246
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement M_instr . LexToken(},'}',45,901)
   yacc.py: 389:Action : Reduce rule [Statement -> IterationStatement M_instr] with [{'nList': [5]},{'instr': 22}] and goto state 100
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',45,901)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16d4616e0>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16d4616e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',45,901)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16d511c58>,<dict @ 0x7fc16d4616e0>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fc16d50bc58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',45,901)
   yacc.py: 366:Action : Shift and goto state 325
   yacc.py: 337:
   yacc.py: 338:State  : 325
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',49,971)
   yacc.py: 389:Action : Reduce rule [MethodBody -> { LocalVariableDeclarationsAndStatements }] with ['{',<dict @ 0x7fc16d50bc58>,'}'] and goto state 74
   yacc.py: 423:Result : <dict @ 0x7fc16d50bc58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',49,971)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [<list @ 0x7fc16dde7a70>,'void',<dict @ 0x7fc16d4fe7f8>,<dict @ 0x7fc16d50bc58>] and goto state 65
   yacc.py: 423:Result : <dict @ 0x7fc16d4ff6e0> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations MethodDeclaration . LexToken(},'}',49,971)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [<dict @ 0x7fc16d4ff6e0>] and goto state 50
   yacc.py: 423:Result : <dict @ 0x7fc16d4ff6e0> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclaration . LexToken(},'}',49,971)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [<dict @ 0x7fc16d4ff6e0>] and goto state 47
   yacc.py: 423:Result : <dict @ 0x7fc16d4ff6e0> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(},'}',49,971)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [<dict @ 0x7fc16d50ce88>,<dict @ 0x7fc16d4ff6e0>] and goto state 46
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(},'}',49,971)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations } . LexToken(PUBLIC,'public',51,974)
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Rparen . LexToken(PUBLIC,'public',51,974)
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations Rparen] with [<dict @ 0x7fc16d5145c8>,'{',None,None] and goto state 34
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 2
   yacc.py: 352:Stack  : TypeDeclaration . LexToken(PUBLIC,'public',51,974)
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 26
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 7
   yacc.py: 352:Stack  : TypeDeclarationOptSemi . LexToken(PUBLIC,'public',51,974)
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarationOptSemi] with [None] and goto state 24
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 16
   yacc.py: 352:Stack  : TypeDeclarations . LexToken(PUBLIC,'public',51,974)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : TypeDeclarations PUBLIC . LexToken(CLASS,'class',51,981)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7fc16de22e40> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarations Modifier . LexToken(CLASS,'class',51,981)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7fc16dde79e0> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 8
   yacc.py: 352:Stack  : TypeDeclarations Modifiers . LexToken(CLASS,'class',51,981)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : TypeDeclarations Modifiers CLASS . LexToken(IDENTIFIER,'employee',51,987)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 43
   yacc.py: 423:Result : <str @ 0x7fc16de22f90> ('class')
   yacc.py: 337:
   yacc.py: 338:State  : 24
   yacc.py: 352:Stack  : TypeDeclarations Modifiers ClassWord . LexToken(IDENTIFIER,'employee',51,987)
   yacc.py: 366:Action : Shift and goto state 37
   yacc.py: 337:
   yacc.py: 338:State  : 37
   yacc.py: 352:Stack  : TypeDeclarations Modifiers ClassWord IDENTIFIER . LexToken({,'{',51,995)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [<list @ 0x7fc16dde79e0>,'class','employee'] and goto state 36
   yacc.py: 423:Result : <dict @ 0x7fc16d513d70> ({'class': 'class', 'id': 'employee', 'mo ...)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader . LexToken({,'{',51,995)
   yacc.py: 366:Action : Shift and goto state 33
   yacc.py: 337:
   yacc.py: 338:State  : 33
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { . LexToken(INT,'int',52,999)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { INT . LexToken(IDENTIFIER,'a',52,1003)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fc16de1e170> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { PrimitiveType . LexToken(IDENTIFIER,'a',52,1003)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de1e170> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeName . LexToken(IDENTIFIER,'a',52,1003)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de1e170> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 51
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier . LexToken(IDENTIFIER,'a',52,1003)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier IDENTIFIER . LexToken(;,';',52,1005)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier DeclaratorName . LexToken(;,';',52,1005)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['a'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7fc16d4ff6e0> ({'type': 'int', 'name': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier VariableDeclarator . LexToken(;,';',52,1005)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7fc16d4ff6e0>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7fc16f5055c8> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 76
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier VariableDeclarators . LexToken(;,';',52,1005)
   yacc.py: 389:Action : Reduce rule [FieldVariableDeclaration -> TypeSpecifier VariableDeclarators] with ['int',{'type': 'int'}] and goto state 56
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 43
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldVariableDeclaration . LexToken(;,';',52,1005)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldVariableDeclaration ; . LexToken(IDENTIFIER,'employee',53,1008)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> FieldVariableDeclaration ;] with [None,';'] and goto state 49
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclaration . LexToken(IDENTIFIER,'employee',53,1008)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarationOptSemi . LexToken(IDENTIFIER,'employee',53,1008)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [None] and goto state 45
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(IDENTIFIER,'employee',53,1008)
   yacc.py: 366:Action : Shift and goto state 55
   yacc.py: 337:
   yacc.py: 338:State  : 55
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations IDENTIFIER . LexToken((,'(',53,1016)
   yacc.py: 366:Action : Shift and goto state 165
   yacc.py: 337:
   yacc.py: 338:State  : 165
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations IDENTIFIER ( . LexToken(),')',53,1017)
   yacc.py: 366:Action : Shift and goto state 249
   yacc.py: 337:
   yacc.py: 338:State  : 249
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations IDENTIFIER ( ) . LexToken({,'{',53,1018)
   yacc.py: 389:Action : Reduce rule [ConstructorDeclarator -> IDENTIFIER ( )] with ['employee','(',')'] and goto state 82
   yacc.py: 423:Result : <dict @ 0x7fc16f47c4b0> ({'name': 'employee', 'plist': []})
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator . LexToken({,'{',53,1018)
   yacc.py: 366:Action : Shift and goto state 170
   yacc.py: 337:
   yacc.py: 338:State  : 170
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { . LexToken(IDENTIFIER,'a',54,1024)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { IDENTIFIER . LexToken(=,'=',54,1026)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { QualifiedName . LexToken(=,'=',54,1026)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['a'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { PrimaryExpression . LexToken(=,'=',54,1026)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['a'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { PostfixExpression . LexToken(=,'=',54,1026)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['a'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { LogicalUnaryExpression . LexToken(=,'=',54,1026)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['a'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fc16f5d8670> ('a')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression . LexToken(=,'=',54,1026)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression = . LexToken(INT_LITERAL,'1',54,1028)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7fc16f515fd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'1',54,1028)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['1'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator Integer_LIT . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16d500a28>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16d500a28>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16d500a28>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16d500a28>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16d500a28>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16d500a28>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16d500a28>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16d500a28>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16d500a28>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16d500a28>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16d500a28>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16d500a28>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16d500a28>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16d500a28>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16d500a28>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16d500a28>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16d500a28>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16d500a28>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16d500a28>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['a','=',<dict @ 0x7fc16d500a28>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7fc16d4fe7f8> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { AssignmentExpression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16d4fe7f8>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16d4fe7f8> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { Expression . LexToken(;,';',54,1029)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fc16d4fe7f8>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fc16d4fe7f8> ({'type': 'int', 'tempVar': 'a'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { ExpressionStatement . LexToken(;,';',54,1029)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { ExpressionStatement ; . LexToken(},'}',55,1033)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d500d70> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { ExpressionStatement ; M_instr . LexToken(},'}',55,1033)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7fc16d4fe7f8>,';',{'instr': 2}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7fc16d50cb40> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { Statement . LexToken(},'}',55,1033)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16d50cb40>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16d50cb40> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { LocalVariableDeclarationOrStatement . LexToken(},'}',55,1033)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16d50cb40>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fc16d500a28> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 254
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',55,1033)
   yacc.py: 366:Action : Shift and goto state 323
   yacc.py: 337:
   yacc.py: 338:State  : 323
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',56,1037)
   yacc.py: 389:Action : Reduce rule [ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements }] with [<dict @ 0x7fc16f47c4b0>,'{',<dict @ 0x7fc16d500a28>,'}'] and goto state 79
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 42
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclaration . LexToken(PUBLIC,'public',56,1037)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> ConstructorDeclaration] with [None] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PUBLIC,'public',56,1037)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PUBLIC,'public',56,1037)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 46
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',56,1037)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PUBLIC . LexToken(INT,'int',56,1044)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7fc16dd761e0> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(INT,'int',56,1044)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7fc16dde7a28> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(INT,'int',56,1044)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers INT . LexToken(IDENTIFIER,'hello',56,1048)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fc16de1ef80> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'hello',56,1048)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fc16de1ef80> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'hello',56,1048)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fc16de1ef80> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'hello',56,1048)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',56,1053)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['hello'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fc16dd76120> ('hello')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',56,1053)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(),')',56,1054)
   yacc.py: 366:Action : Shift and goto state 257
   yacc.py: 337:
   yacc.py: 338:State  : 257
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ) . LexToken({,'{',56,1055)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( )] with ['hello','(',')'] and goto state 68
   yacc.py: 423:Result : <dict @ 0x7fc16d500d70> ({'name': 'hello', 'plist': []})
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',56,1055)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(RETURN,'return',57,1061)
   yacc.py: 366:Action : Shift and goto state 98
   yacc.py: 337:
   yacc.py: 338:State  : 98
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN . LexToken(INT_LITERAL,'1',57,1068)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN INT_LITERAL . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['1'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN Integer_LIT . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fc16f47a050>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN ComplexPrimary . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fc16f47a050>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN NotJustName . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fc16f47a050>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN PrimaryExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fc16f47a050>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN PostfixExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fc16f47a050>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN LogicalUnaryExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fc16f47a050>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN UnaryExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fc16f47a050>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN CastExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fc16f47a050>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN MultiplicativeExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fc16f47a050>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN AdditiveExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fc16f47a050>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN ShiftExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fc16f47a050>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN RelationalExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fc16f47a050>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN EqualityExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fc16f47a050>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN AndExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fc16f47a050>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN ExclusiveOrExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fc16f47a050>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN InclusiveOrExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fc16f47a050>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN ConditionalAndExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fc16f47a050>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN ConditionalOrExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fc16f47a050>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN ConditionalExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fc16f47a050>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN AssignmentExpression . LexToken(;,';',57,1069)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fc16f47a050>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'type': 'int', 'tempVar': '_t14'})
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN Expression . LexToken(;,';',57,1069)
   yacc.py: 366:Action : Shift and goto state 270
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RETURN Expression ; . LexToken(},'}',58,1073)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',<dict @ 0x7fc16f47a050>,';'] and goto state 132
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { JumpStatement . LexToken(},'}',58,1073)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fc16d511280> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { JumpStatement M_instr . LexToken(},'}',58,1073)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement M_instr] with [None,{'instr': 2}] and goto state 101
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Statement . LexToken(},'}',58,1073)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fc16f47a050>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fc16f47a050> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(},'}',58,1073)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7fc16f47a050>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fc16d511910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',58,1073)
   yacc.py: 366:Action : Shift and goto state 325
   yacc.py: 337:
   yacc.py: 338:State  : 325
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',60,1076)
   yacc.py: 389:Action : Reduce rule [MethodBody -> { LocalVariableDeclarationsAndStatements }] with ['{',<dict @ 0x7fc16d511910>,'}'] and goto state 74
   yacc.py: 423:Result : <dict @ 0x7fc16d511910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',60,1076)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [<list @ 0x7fc16dde7a28>,'int',<dict @ 0x7fc16d500d70>,<dict @ 0x7fc16d511910>] and goto state 65
   yacc.py: 423:Result : <dict @ 0x7fc16d4f3050> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(},'}',60,1076)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [<dict @ 0x7fc16d4f3050>] and goto state 50
   yacc.py: 423:Result : <dict @ 0x7fc16d4f3050> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(},'}',60,1076)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [<dict @ 0x7fc16d4f3050>] and goto state 47
   yacc.py: 423:Result : <dict @ 0x7fc16d4f3050> ({'type': 'int', 'method': {'name': 'hell ...)
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(},'}',60,1076)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,<dict @ 0x7fc16d4f3050>] and goto state 46
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(},'}',60,1076)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations } . $end
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Rparen . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations Rparen] with [<dict @ 0x7fc16d513d70>,'{',None,None] and goto state 34
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 2
   yacc.py: 352:Stack  : TypeDeclarations TypeDeclaration . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 26
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 32
   yacc.py: 352:Stack  : TypeDeclarations TypeDeclarationOptSemi . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi] with [None,None] and goto state 25
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 16
   yacc.py: 352:Stack  : TypeDeclarations . $end
   yacc.py: 389:Action : Reduce rule [ProgramFile -> TypeDeclarations] with [None] and goto state 22
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : ProgramFile . $end
   yacc.py: 389:Action : Reduce rule [CompilationUnit -> ProgramFile] with [None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : CompilationUnit . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x936be0> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
