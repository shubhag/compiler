   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PUBLIC,'public',1,0)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : PUBLIC . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7faf758517e0> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : Modifier . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7faf757b54d0> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 8
   yacc.py: 352:Stack  : Modifiers . LexToken(CLASS,'class',1,7)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : Modifiers CLASS . LexToken(IDENTIFIER,'testing',1,13)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 43
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 24
   yacc.py: 352:Stack  : Modifiers ClassWord . LexToken(IDENTIFIER,'testing',1,13)
   yacc.py: 366:Action : Shift and goto state 37
   yacc.py: 337:
   yacc.py: 338:State  : 37
   yacc.py: 352:Stack  : Modifiers ClassWord IDENTIFIER . LexToken({,'{',1,20)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [<list @ 0x7faf757b54d0>,None,'testing'] and goto state 36
   yacc.py: 423:Result : <dict @ 0x7faf74d89b40> ({'class': None, 'id': 'testing', 'mod':  ...)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',1,20)
   yacc.py: 366:Action : Shift and goto state 33
   yacc.py: 337:
   yacc.py: 338:State  : 33
   yacc.py: 352:Stack  : ClassHeader { . LexToken(PUBLIC,'public',2,26)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : ClassHeader { PUBLIC . LexToken(STATIC,'static',2,33)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7faf758517e0> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : ClassHeader { Modifier . LexToken(STATIC,'static',2,33)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7faf757b55a8> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(STATIC,'static',2,33)
   yacc.py: 366:Action : Shift and goto state 3
   yacc.py: 337:
   yacc.py: 338:State  : 3
   yacc.py: 352:Stack  : ClassHeader { Modifiers STATIC . LexToken(VOID,'void',2,40)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 42
   yacc.py: 423:Result : <str @ 0x7faf757f5a20> ('static')
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : ClassHeader { Modifiers Modifier . LexToken(VOID,'void',2,40)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [<list @ 0x7faf757b55a8>,'static'] and goto state 39
   yacc.py: 423:Result : <list @ 0x7faf757b55a8> (['p', 'u', 'b', 'l', 'i', 'c', 'static'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(VOID,'void',2,40)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : ClassHeader { Modifiers VOID . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <str @ 0x7faf757f5b40> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { Modifiers PrimitiveType . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['void'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7faf757f5b40> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeName . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['void'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7faf757f5b40> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 366:Action : Shift and goto state 78
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',2,49)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['main'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7faf758517e0> ('main')
   yacc.py: 337:
   yacc.py: 338:State  : 76
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',2,49)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'String',2,50)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7faf757f5ae0> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 52
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with ['String'] and goto state 5
   yacc.py: 423:Result : <str @ 0x7faf757f5ae0> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['String'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7faf757f5ae0> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 366:Action : Shift and goto state 78
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken([,'[',2,61)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['args'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7faf757f5b70> ('args')
   yacc.py: 337:
   yacc.py: 338:State  : 319
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken([,'[',2,61)
   yacc.py: 366:Action : Shift and goto state 80
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName [ . LexToken(],']',2,62)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName [ ] . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 176
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName OP_DIM . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> DeclaratorName OP_DIM] with ['args',None] and goto state 73
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 319
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with ['String',None] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7faf74d7b280> ({'type': 'String', 'name': None})
   yacc.py: 337:
   yacc.py: 338:State  : 247
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [<dict @ 0x7faf74d7b280>] and goto state 69
   yacc.py: 423:Result : <list @ 0x7faf74f32680> ([{'type': 'String', 'name': None}])
   yacc.py: 337:
   yacc.py: 338:State  : 256
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',2,63)
   yacc.py: 366:Action : Shift and goto state 323
   yacc.py: 337:
   yacc.py: 338:State  : 323
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',2,65)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with ['main','(',<list @ 0x7faf74f32680>,')'] and goto state 67
   yacc.py: 423:Result : <dict @ 0x7faf74d764b0> ({'name': 'main', 'plist': [{'type': 'Str ...)
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',2,65)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',3,75)
   yacc.py: 366:Action : Shift and goto state 63
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { INT . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7faf7583b7b0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7faf7583b7b0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7faf7583b7b0> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 366:Action : Shift and goto state 78
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(=,'=',3,81)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['x'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(=,'=',3,81)
   yacc.py: 366:Action : Shift and goto state 175
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'10',3,83)
   yacc.py: 366:Action : Shift and goto state 143
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['10'] and goto state 153
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 89
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = Integer_LIT . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7faf74d80a28>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 121
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7faf74d80a28>] and goto state 142
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7faf74d80a28>] and goto state 139
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7faf74d80a28>] and goto state 194
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7faf74d80a28>] and goto state 200
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7faf74d80a28>] and goto state 199
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7faf74d80a28>] and goto state 206
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7faf74d80a28>] and goto state 207
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7faf74d80a28>] and goto state 211
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7faf74d80a28>] and goto state 214
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7faf74d80a28>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7faf74d80a28>] and goto state 221
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 100
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7faf74d80a28>] and goto state 224
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7faf74d80a28>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7faf74d80a28>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7faf74d80a28>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 94
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7faf74d80a28>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7faf74d80a28>] and goto state 235
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7faf74d80a28>] and goto state 238
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 107
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7faf74d80a28>] and goto state 242
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = Expression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [<dict @ 0x7faf74d80a28>] and goto state 61
   yacc.py: 423:Result : <dict @ 0x7faf74d80a28> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 257
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with ['x','=',<dict @ 0x7faf74d80a28>] and goto state 60
   yacc.py: 423:Result : <dict @ 0x7faf74d89168> ({'type': 'int', 'name': 'x'})
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7faf74d89168>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7faf74d93280> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',3,85)
   yacc.py: 366:Action : Shift and goto state 301
   yacc.py: 337:
   yacc.py: 338:State  : 301
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(WHILE,'while',5,96)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 101
   yacc.py: 462:Result : <dict @ 0x7faf74d80a28> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 342
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; M_instr . LexToken(WHILE,'while',5,96)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['int',{'type': 'int'},';',{'instr': 2}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7faf74d80398> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 151
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(WHILE,'while',5,96)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7faf74d80398> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 119
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(WHILE,'while',5,96)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [{}] and goto state 89
   yacc.py: 423:Result : <dict @ 0x7faf74d77910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 259
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(WHILE,'while',5,96)
   yacc.py: 366:Action : Shift and goto state 126
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE . LexToken((,'(',5,101)
   yacc.py: 391:Action : Reduce rule [M_instr_branch -> <empty>] with [] and goto state 113
   yacc.py: 462:Result : <dict @ 0x7faf74d76b40> ({'instr': 2})
   yacc.py: 337:
   yacc.py: 338:State  : 221
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch . LexToken((,'(',5,101)
   yacc.py: 366:Action : Shift and goto state 295
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( . LexToken(IDENTIFIER,'x',5,103)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( IDENTIFIER . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['x'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( QualifiedName . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['x'] and goto state 138
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( PrimaryExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['x'] and goto state 194
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( PostfixExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['x'] and goto state 200
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( LogicalUnaryExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['x'] and goto state 199
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( UnaryExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['x'] and goto state 206
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( CastExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['x'] and goto state 207
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( MultiplicativeExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['x'] and goto state 211
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( AdditiveExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['x'] and goto state 214
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( ShiftExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['x'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression . LexToken(<,'<',5,105)
   yacc.py: 366:Action : Shift and goto state 210
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < . LexToken(INT_LITERAL,'13',5,107)
   yacc.py: 366:Action : Shift and goto state 143
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < INT_LITERAL . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['13'] and goto state 153
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 89
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < Integer_LIT . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7faf74d76e88>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 121
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < ComplexPrimary . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7faf74d76e88>] and goto state 142
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < NotJustName . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7faf74d76e88>] and goto state 139
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < PrimaryExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7faf74d76e88>] and goto state 194
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < PostfixExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7faf74d76e88>] and goto state 200
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < LogicalUnaryExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7faf74d76e88>] and goto state 199
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 197
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < UnaryExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7faf74d76e88>] and goto state 206
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < CastExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7faf74d76e88>] and goto state 207
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < MultiplicativeExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7faf74d76e88>] and goto state 211
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < AdditiveExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7faf74d76e88>] and goto state 214
   yacc.py: 423:Result : <dict @ 0x7faf74d76e88> ({'type': 'int', 'tempVar': '_t1'})
   yacc.py: 337:
   yacc.py: 338:State  : 287
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression < ShiftExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with ['x','<',<dict @ 0x7faf74d76e88>] and goto state 217
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( RelationalExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7faf74d77280>] and goto state 221
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 100
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( EqualityExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7faf74d77280>] and goto state 224
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( AndExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7faf74d77280>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( ExclusiveOrExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7faf74d77280>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( InclusiveOrExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7faf74d77280>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 94
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( ConditionalAndExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7faf74d77280>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( ConditionalOrExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7faf74d77280>] and goto state 235
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( ConditionalExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7faf74d77280>] and goto state 238
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 107
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( AssignmentExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7faf74d77280>] and goto state 242
   yacc.py: 423:Result : <dict @ 0x7faf74d77280> ({'trueList': [4], 'falseList': [5]})
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression . LexToken(),')',5,110)
   yacc.py: 366:Action : Shift and goto state 356
   yacc.py: 337:
   yacc.py: 338:State  : 356
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) . LexToken({,'{',5,112)
   yacc.py: 391:Action : Reduce rule [M_instr_branch -> <empty>] with [] and goto state 113
   yacc.py: 462:Result : <dict @ 0x7faf74d8de88> ({'instr': 6})
   yacc.py: 337:
   yacc.py: 338:State  : 365
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch . LexToken({,'{',5,112)
   yacc.py: 366:Action : Shift and goto state 69
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch { . LexToken(IDENTIFIER,'System',6,126)
   yacc.py: 389:Action : Reduce rule [Lparen -> {] with ['{'] and goto state 87
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen . LexToken(IDENTIFIER,'System',6,126)
   yacc.py: 366:Action : Shift and goto state 90
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen IDENTIFIER . LexToken(.,'.',6,132)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7faf757f5a80> ('System')
   yacc.py: 337:
   yacc.py: 338:State  : 149
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen QualifiedName . LexToken(.,'.',6,132)
   yacc.py: 366:Action : Shift and goto state 237
   yacc.py: 337:
   yacc.py: 338:State  : 237
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen QualifiedName . . LexToken(IDENTIFIER,'out',6,133)
   yacc.py: 366:Action : Shift and goto state 72
   yacc.py: 337:
   yacc.py: 338:State  : 72
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen QualifiedName . IDENTIFIER . LexToken(.,'.',6,136)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with ['System','.','out'] and goto state 33
   yacc.py: 423:Result : <str @ 0x7faf757f59c0> ('System.out')
   yacc.py: 337:
   yacc.py: 338:State  : 149
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen QualifiedName . LexToken(.,'.',6,136)
   yacc.py: 366:Action : Shift and goto state 237
   yacc.py: 337:
   yacc.py: 338:State  : 237
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen QualifiedName . . LexToken(IDENTIFIER,'print',6,137)
   yacc.py: 366:Action : Shift and goto state 72
   yacc.py: 337:
   yacc.py: 338:State  : 72
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen QualifiedName . IDENTIFIER . LexToken((,'(',6,142)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with ['System.out','.','print'] and goto state 33
   yacc.py: 423:Result : <str @ 0x7faf757fa378> ('System.out.print')
   yacc.py: 337:
   yacc.py: 338:State  : 149
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen QualifiedName . LexToken((,'(',6,142)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [<str @ 0x7faf757fa378>] and goto state 169
   yacc.py: 423:Result : <str @ 0x7faf757fa378> ('System.out.print')
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess . LexToken((,'(',6,142)
   yacc.py: 366:Action : Shift and goto state 208
   yacc.py: 337:
   yacc.py: 338:State  : 208
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( . LexToken(STRING_LITERAL,'"x : "',6,143)
   yacc.py: 366:Action : Shift and goto state 160
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( STRING_LITERAL . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [String_LIT -> STRING_LITERAL] with ['"x : "'] and goto state 156
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( String_LIT . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> String_LIT] with [<dict @ 0x7faf74d7c050>] and goto state 147
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 121
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( ComplexPrimary . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7faf74d7c050>] and goto state 142
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( NotJustName . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7faf74d7c050>] and goto state 139
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( PrimaryExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7faf74d7c050>] and goto state 194
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( PostfixExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7faf74d7c050>] and goto state 200
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7faf74d7c050>] and goto state 199
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( UnaryExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7faf74d7c050>] and goto state 206
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( CastExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7faf74d7c050>] and goto state 207
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( MultiplicativeExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7faf74d7c050>] and goto state 211
   yacc.py: 423:Result : <dict @ 0x7faf74d7c050> ({'type': 'String', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression . LexToken(+,'+',6,150)
   yacc.py: 366:Action : Shift and goto state 228
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'x',6,152)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['x'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['x'] and goto state 138
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['x'] and goto state 194
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['x'] and goto state 200
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['x'] and goto state 199
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 197
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['x'] and goto state 206
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['x'] and goto state 207
   yacc.py: 423:Result : <str @ 0x7faf77000d50> ('x')
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE M_instr_branch ( Expression ) M_instr_branch Lparen MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [<dict @ 0x7faf74d7c050>,'+','x'] and goto state 212
