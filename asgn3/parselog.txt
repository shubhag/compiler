   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(CLASS,'class',1,0)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : CLASS . LexToken(IDENTIFIER,'array',1,6)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 43
   yacc.py: 423:Result : <str @ 0x7fed088d4270> ('class')
   yacc.py: 337:
   yacc.py: 338:State  : 14
   yacc.py: 352:Stack  : ClassWord . LexToken(IDENTIFIER,'array',1,6)
   yacc.py: 366:Action : Shift and goto state 29
   yacc.py: 337:
   yacc.py: 338:State  : 29
   yacc.py: 352:Stack  : ClassWord IDENTIFIER . LexToken({,'{',1,12)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> ClassWord IDENTIFIER] with ['class','array'] and goto state 37
   yacc.py: 423:Result : <dict @ 0x7fed086e5c58> ({'class': 'class', 'id': 'array', 'mod': ...)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',1,12)
   yacc.py: 366:Action : Shift and goto state 33
   yacc.py: 337:
   yacc.py: 338:State  : 33
   yacc.py: 352:Stack  : ClassHeader { . LexToken(PUBLIC,'public',2,18)
   yacc.py: 366:Action : Shift and goto state 19
   yacc.py: 337:
   yacc.py: 338:State  : 19
   yacc.py: 352:Stack  : ClassHeader { PUBLIC . LexToken(STATIC,'static',2,25)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 40
   yacc.py: 423:Result : <str @ 0x7fed088d41b0> ('public')
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : ClassHeader { Modifier . LexToken(STATIC,'static',2,25)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with ['public'] and goto state 38
   yacc.py: 423:Result : <list @ 0x7fed0888c908> (['p', 'u', 'b', 'l', 'i', 'c'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(STATIC,'static',2,25)
   yacc.py: 366:Action : Shift and goto state 3
   yacc.py: 337:
   yacc.py: 338:State  : 3
   yacc.py: 352:Stack  : ClassHeader { Modifiers STATIC . LexToken(VOID,'void',2,32)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 42
   yacc.py: 423:Result : <str @ 0x7fed088d4330> ('static')
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : ClassHeader { Modifiers Modifier . LexToken(VOID,'void',2,32)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [<list @ 0x7fed0888c908>,'static'] and goto state 39
   yacc.py: 423:Result : <list @ 0x7fed0888c908> (['p', 'u', 'b', 'l', 'i', 'c', 'static'])
   yacc.py: 337:
   yacc.py: 338:State  : 58
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(VOID,'void',2,32)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : ClassHeader { Modifiers VOID . LexToken(IDENTIFIER,'main',2,37)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <str @ 0x7fed088d42a0> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { Modifiers PrimitiveType . LexToken(IDENTIFIER,'main',2,37)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['void'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fed088d42a0> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeName . LexToken(IDENTIFIER,'main',2,37)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['void'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fed088d42a0> ('void')
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier . LexToken(IDENTIFIER,'main',2,37)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',2,41)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['main'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fed088d41b0> ('main')
   yacc.py: 337:
   yacc.py: 338:State  : 77
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',2,41)
   yacc.py: 366:Action : Shift and goto state 174
   yacc.py: 337:
   yacc.py: 338:State  : 174
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'String',2,42)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken([,'[',2,48)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed088d4390> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 52
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken([,'[',2,48)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with ['String'] and goto state 5
   yacc.py: 423:Result : <str @ 0x7fed088d4390> ('String')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken([,'[',2,48)
   yacc.py: 366:Action : Shift and goto state 81
   yacc.py: 337:
   yacc.py: 338:State  : 81
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName [ . LexToken(],']',2,49)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName [ ] . LexToken(IDENTIFIER,'args',2,51)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 195
   yacc.py: 423:Result : <int @ 0x1162158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName OP_DIM . LexToken(IDENTIFIER,'args',2,51)
   yacc.py: 389:Action : Reduce rule [Dims -> OP_DIM] with [1] and goto state 193
   yacc.py: 423:Result : <int @ 0x1162158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 83
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName Dims . LexToken(IDENTIFIER,'args',2,51)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName Dims] with ['String',1] and goto state 3
   yacc.py: 423:Result : <str @ 0x7fed088c2148> ('array_String_1')
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'args',2,51)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(),')',2,55)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['args'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fed088d4450> ('args')
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',2,55)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [<str @ 0x7fed088c2148>,'args'] and goto state 71
   yacc.py: 423:Result : <dict @ 0x7fed086df910> ({'type': 'array_String_1', 'name': 'args ...)
   yacc.py: 337:
   yacc.py: 338:State  : 247
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',2,55)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [<dict @ 0x7fed086df910>] and goto state 69
   yacc.py: 423:Result : <list @ 0x7fed07f562d8> ([{'type': 'array_String_1', 'name': 'arg ...)
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',2,55)
   yacc.py: 366:Action : Shift and goto state 324
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',2,57)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with ['main','(',<list @ 0x7fed07f562d8>,')'] and goto state 67
   yacc.py: 423:Result : <dict @ 0x7fed086e27f8> ({'name': 'main', 'plist': [{'type': 'arr ...)
   yacc.py: 337:
   yacc.py: 338:State  : 252
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',2,57)
   yacc.py: 366:Action : Shift and goto state 179
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',3,67)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { INT . LexToken([,'[',3,70)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fed088c8f58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken([,'[',3,70)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fed088c8f58> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken([,'[',3,70)
   yacc.py: 366:Action : Shift and goto state 81
   yacc.py: 337:
   yacc.py: 338:State  : 81
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName [ . LexToken(],']',3,71)
   yacc.py: 366:Action : Shift and goto state 180
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName [ ] . LexToken(IDENTIFIER,'ia',3,73)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 195
   yacc.py: 423:Result : <int @ 0x1162158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName OP_DIM . LexToken(IDENTIFIER,'ia',3,73)
   yacc.py: 389:Action : Reduce rule [Dims -> OP_DIM] with [1] and goto state 193
   yacc.py: 423:Result : <int @ 0x1162158> (1)
   yacc.py: 337:
   yacc.py: 338:State  : 83
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName Dims . LexToken(IDENTIFIER,'ia',3,73)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName Dims] with ['int',1] and goto state 3
   yacc.py: 423:Result : <str @ 0x7fed088d43c0> ('array_int_1')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'ia',3,73)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(=,'=',3,76)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['ia'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fed088c8238> ('ia')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(=,'=',3,76)
   yacc.py: 366:Action : Shift and goto state 175
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = . LexToken(NEW,'new',3,78)
   yacc.py: 366:Action : Shift and goto state 128
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW . LexToken(INT,'int',3,82)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW INT . LexToken([,'[',3,85)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fed088c8260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 46
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW PrimitiveType . LexToken([,'[',3,85)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fed088c8260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 222
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName . LexToken([,'[',3,85)
   yacc.py: 366:Action : Shift and goto state 297
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ . LexToken(INT_LITERAL,'101',3,86)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ INT_LITERAL . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['101'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ Integer_LIT . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fed086e06e0>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ComplexPrimary . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e06e0>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ NotJustName . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e06e0>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ PrimaryExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e06e0>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ PostfixExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e06e0>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ LogicalUnaryExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e06e0>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ UnaryExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e06e0>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ CastExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e06e0>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ MultiplicativeExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e06e0>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ AdditiveExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e06e0>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ShiftExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086e06e0>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ RelationalExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086e06e0>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ EqualityExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086e06e0>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ AndExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086e06e0>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ExclusiveOrExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086e06e0>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ InclusiveOrExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086e06e0>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ConditionalAndExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086e06e0>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ConditionalOrExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086e06e0>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ ConditionalExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086e06e0>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ AssignmentExpression . LexToken(],']',3,89)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e06e0>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 344
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ Expression . LexToken(],']',3,89)
   yacc.py: 366:Action : Shift and goto state 361
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName [ Expression ] . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [DimExpr -> [ Expression ]] with ['[',<dict @ 0x7fed086e06e0>,']'] and goto state 192
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int', 'tempVar': '_t0'})
   yacc.py: 337:
   yacc.py: 338:State  : 298
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExpr . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [DimExprs -> DimExpr] with [<dict @ 0x7fed086e06e0>] and goto state 190
   yacc.py: 423:Result : <list @ 0x7fed07e586c8> ([{'type': 'int', 'tempVar': '_t0'}])
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName DimExprs . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [ArrayAllocationExpression -> NEW TypeName DimExprs] with ['new','int',<list @ 0x7fed07e586c8>] and goto state 188
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ArrayAllocationExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [PlainNewAllocationExpression -> ArrayAllocationExpression] with [<dict @ 0x7fed086ec910>] and goto state 179
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PlainNewAllocationExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [NewAllocationExpression -> PlainNewAllocationExpression] with [<dict @ 0x7fed086ec910>] and goto state 177
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 134
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NewAllocationExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [NotJustName -> NewAllocationExpression] with [<dict @ 0x7fed086ec910>] and goto state 143
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086ec910>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086ec910>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086ec910>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086ec910>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086ec910>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086ec910>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086ec910>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086ec910>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086ec910>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086ec910>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086ec910>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086ec910>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086ec910>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086ec910>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086ec910>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086ec910>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086ec910>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086ec910>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = Expression . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [<dict @ 0x7fed086ec910>] and goto state 61
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'array_int_1', 'dimension': ['_ ...)
   yacc.py: 337:
   yacc.py: 338:State  : 259
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with ['ia','=',<dict @ 0x7fed086ec910>] and goto state 60
   yacc.py: 423:Result : <dict @ 0x7fed086df5c8> ({'type': 'array_int_1', 'name': 'ia'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',3,90)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7fed086df5c8>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'array_int_1'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',3,90)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(FOR,'for',4,98)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086ec910> ({'instr': 7})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; M_instr . LexToken(FOR,'for',4,98)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['array_int_1',<dict @ 0x7fed086e24b0>,';',{'instr': 7}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7fed086e55c8> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(FOR,'for',4,98)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7fed086e55c8> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(FOR,'for',4,98)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [{}] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(FOR,'for',4,98)
   yacc.py: 366:Action : Shift and goto state 110
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR . LexToken((,'(',4,102)
   yacc.py: 366:Action : Shift and goto state 204
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( . LexToken(INT,'int',4,103)
   yacc.py: 391:Action : Reduce rule [Mark_switch -> <empty>] with [] and goto state 113
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch . LexToken(INT,'int',4,103)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch INT . LexToken(IDENTIFIER,'i',4,107)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fed088c8260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch PrimitiveType . LexToken(IDENTIFIER,'i',4,107)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fed088c8260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeName . LexToken(IDENTIFIER,'i',4,107)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fed088c8260> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier . LexToken(IDENTIFIER,'i',4,107)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier IDENTIFIER . LexToken(=,'=',4,109)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['i'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName . LexToken(=,'=',4,109)
   yacc.py: 366:Action : Shift and goto state 175
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'0',4,111)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['0'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = Integer_LIT . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fed086ec910>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086ec910>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086ec910>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086ec910>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086ec910>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086ec910>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086ec910>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086ec910>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086ec910>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086ec910>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086ec910>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086ec910>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086ec910>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086ec910>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086ec910>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086ec910>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086ec910>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086ec910>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086ec910>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086ec910>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = Expression . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [<dict @ 0x7fed086ec910>] and goto state 61
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'type': 'int', 'tempVar': '_t3'})
   yacc.py: 337:
   yacc.py: 338:State  : 259
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with ['i','=',<dict @ 0x7fed086ec910>] and goto state 60
   yacc.py: 423:Result : <dict @ 0x7fed086df5c8> ({'type': 'int', 'name': 'i'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier VariableDeclarator . LexToken(;,';',4,112)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7fed086df5c8>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7fed086e55c8> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier VariableDeclarators . LexToken(;,';',4,112)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'i',4,114)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086ec910> ({'instr': 9})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch TypeSpecifier VariableDeclarators ; M_instr . LexToken(IDENTIFIER,'i',4,114)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['int',{'type': 'int'},';',{'instr': 9}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 332
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'i',4,114)
   yacc.py: 389:Action : Reduce rule [ForInit -> LocalVariableDeclarationStatement] with [{}] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 330
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit . LexToken(IDENTIFIER,'i',4,114)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086efb40> ({'instr': 9})
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr . LexToken(IDENTIFIER,'i',4,114)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr IDENTIFIER . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr QualifiedName . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['i'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr PrimaryExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['i'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr PostfixExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['i'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr LogicalUnaryExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['i'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr UnaryExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['i'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr CastExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['i'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr MultiplicativeExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['i'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AdditiveExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['i'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ShiftExpression . LexToken(<,'<',4,116)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['i'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression . LexToken(<,'<',4,116)
   yacc.py: 366:Action : Shift and goto state 210
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < . LexToken(INT_LITERAL,'101',4,118)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < INT_LITERAL . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['101'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < Integer_LIT . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fed086e0398>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < ComplexPrimary . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e0398>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < NotJustName . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e0398>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < PrimaryExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e0398>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < PostfixExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e0398>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < LogicalUnaryExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e0398>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 197
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < UnaryExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e0398>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < CastExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e0398>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < MultiplicativeExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e0398>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < AdditiveExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e0398>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e0398> ({'type': 'int', 'tempVar': '_t4'})
   yacc.py: 337:
   yacc.py: 338:State  : 285
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < ShiftExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with ['i','<',<dict @ 0x7fed086e0398>] and goto state 219
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086ec280>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr EqualityExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086ec280>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AndExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086ec280>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ExclusiveOrExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086ec280>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr InclusiveOrExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086ec280>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalAndExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086ec280>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalOrExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086ec280>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086ec280>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AssignmentExpression . LexToken(;,';',4,121)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086ec280>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 368
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr Expression . LexToken(;,';',4,121)
   yacc.py: 366:Action : Shift and goto state 376
   yacc.py: 337:
   yacc.py: 338:State  : 376
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr Expression ; . LexToken(IDENTIFIER,'i',4,123)
   yacc.py: 389:Action : Reduce rule [ForExpr -> Expression ;] with [<dict @ 0x7fed086ec280>,';'] and goto state 122
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'trueList': [11], 'falseList': [12], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 366
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr . LexToken(IDENTIFIER,'i',4,123)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086ef4b0> ({'instr': 13})
   yacc.py: 337:
   yacc.py: 338:State  : 375
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr . LexToken(IDENTIFIER,'i',4,123)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr IDENTIFIER . LexToken(OPT_INC_DEC,'++',4,124)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr QualifiedName . LexToken(OPT_INC_DEC,'++',4,124)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['i'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PrimaryExpression . LexToken(OPT_INC_DEC,'++',4,124)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['i'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression . LexToken(OPT_INC_DEC,'++',4,124)
   yacc.py: 366:Action : Shift and goto state 217
   yacc.py: 337:
   yacc.py: 338:State  : 217
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression OPT_INC_DEC . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [RealPostfixExpression -> PostfixExpression OPT_INC_DEC] with ['i','++'] and goto state 198
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 99
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr RealPostfixExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> RealPostfixExpression] with [<dict @ 0x7fed086efe88>] and goto state 197
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086efe88>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr LogicalUnaryExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086efe88>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr UnaryExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086efe88>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr CastExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086efe88>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr MultiplicativeExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086efe88>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AdditiveExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086efe88>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ShiftExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086efe88>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr RelationalExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086efe88>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr EqualityExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086efe88>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AndExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086efe88>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExclusiveOrExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086efe88>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr InclusiveOrExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086efe88>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalAndExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086efe88>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalOrExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086efe88>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086efe88>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AssignmentExpression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086efe88>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr Expression . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fed086efe88>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 328
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExpressionStatement . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ExpressionStatements -> ExpressionStatement] with [<dict @ 0x7fed086efe88>] and goto state 126
   yacc.py: 423:Result : <dict @ 0x7fed086efe88> ({'trueList': [16], 'falseList': [17], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 382
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExpressionStatements . LexToken(),')',4,126)
   yacc.py: 389:Action : Reduce rule [ForIncr -> ExpressionStatements] with [<dict @ 0x7fed086efe88>] and goto state 124
   yacc.py: 423:Result : <dict @ 0x7fed086e1d70> ({'nList': []})
   yacc.py: 337:
   yacc.py: 338:State  : 381
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr . LexToken(),')',4,126)
   yacc.py: 366:Action : Shift and goto state 387
   yacc.py: 337:
   yacc.py: 338:State  : 387
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) . LexToken({,'{',5,130)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e1398> ({'instr': 17})
   yacc.py: 337:
   yacc.py: 338:State  : 391
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr . LexToken({,'{',5,130)
   yacc.py: 366:Action : Shift and goto state 70
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr { . LexToken(IDENTIFIER,'ia',5,131)
   yacc.py: 389:Action : Reduce rule [Lparen -> {] with ['{'] and goto state 89
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen . LexToken(IDENTIFIER,'ia',5,131)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IDENTIFIER . LexToken([,'[',5,133)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['ia'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed088c8148> ('ia')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName . LexToken([,'[',5,133)
   yacc.py: 366:Action : Shift and goto state 238
   yacc.py: 337:
   yacc.py: 338:State  : 238
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ . LexToken(IDENTIFIER,'i',5,134)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ IDENTIFIER . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ QualifiedName . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['i'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ PrimaryExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['i'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ PostfixExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['i'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ LogicalUnaryExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['i'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ UnaryExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['i'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ CastExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['i'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ MultiplicativeExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['i'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ AdditiveExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['i'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ ShiftExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['i'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ RelationalExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with ['i'] and goto state 223
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ EqualityExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with ['i'] and goto state 226
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ AndExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with ['i'] and goto state 228
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ ExclusiveOrExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with ['i'] and goto state 230
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ InclusiveOrExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with ['i'] and goto state 232
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ ConditionalAndExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with ['i'] and goto state 234
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ ConditionalOrExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with ['i'] and goto state 237
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ ConditionalExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with ['i'] and goto state 240
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ AssignmentExpression . LexToken(],']',5,135)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with ['i'] and goto state 244
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 312
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ Expression . LexToken(],']',5,135)
   yacc.py: 366:Action : Shift and goto state 350
   yacc.py: 337:
   yacc.py: 338:State  : 350
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName [ Expression ] . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [ArrayAccess -> QualifiedName [ Expression ]] with ['ia','[','i',']'] and goto state 160
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ArrayAccess . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> ArrayAccess] with [<dict @ 0x7fed086e34b0>] and goto state 152
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ComplexPrimaryNoParenthesis . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [<dict @ 0x7fed086e34b0>] and goto state 145
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ComplexPrimary . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e34b0>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen NotJustName . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e34b0>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen PrimaryExpression . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e34b0>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen PostfixExpression . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e34b0>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LogicalUnaryExpression . LexToken(=,'=',5,137)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e34b0>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e34b0> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression . LexToken(=,'=',5,137)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression = . LexToken(IDENTIFIER,'i',5,139)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7fed09fb6fd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'i',5,139)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator IDENTIFIER . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['i'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['i'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['i'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['i'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['i'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['i'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['i'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['i'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['i'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with ['i'] and goto state 223
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with ['i'] and goto state 226
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with ['i'] and goto state 228
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with ['i'] and goto state 230
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with ['i'] and goto state 232
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with ['i'] and goto state 234
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with ['i'] and goto state 237
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with ['i'] and goto state 240
   yacc.py: 423:Result : <str @ 0x7fed0a090a80> ('i')
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [<dict @ 0x7fed086e34b0>,'=','i'] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7fed086e1050> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen AssignmentExpression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e1050>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e1050> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen Expression . LexToken(;,';',5,140)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fed086e1050>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fed086e1050> ({'type': 'int', 'tempVar': '_t10'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ExpressionStatement . LexToken(;,';',5,140)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ExpressionStatement ; . LexToken(},'}',5,141)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e75c8> ({'instr': 20})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ExpressionStatement ; M_instr . LexToken(},'}',5,141)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7fed086e1050>,';',{'instr': 20}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen Statement . LexToken(},'}',5,141)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fed086ec910>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationOrStatement . LexToken(},'}',5,141)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7fed086ec910>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements . LexToken(},'}',5,141)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements } . LexToken(INT,'int',6,151)
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 240
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements Rparen . LexToken(INT,'int',6,151)
   yacc.py: 389:Action : Reduce rule [Block -> Lparen LocalVariableDeclarationsAndStatements Rparen] with [None,<dict @ 0x7fed086e7280>,None] and goto state 87
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 113
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Block . LexToken(INT,'int',6,151)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e7c58> ({'instr': 20})
   yacc.py: 337:
   yacc.py: 338:State  : 206
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Block M_instr . LexToken(INT,'int',6,151)
   yacc.py: 389:Action : Reduce rule [Statement -> Block M_instr] with [<dict @ 0x7fed086e7280>,{'instr': 20}] and goto state 102
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 394
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement . LexToken(INT,'int',6,151)
   yacc.py: 389:Action : Reduce rule [IterationStatement -> FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement] with ['for','(',None,None,{'instr': 9},<dict @ 0x7fed086ec280>,{'instr': 13},{'nList': []},')',{'instr': 17},<dict @ 0x7fed086e37f8>] and goto state 118
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'nList': [12]})
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement . LexToken(INT,'int',6,151)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086dfc58> ({'instr': 21})
   yacc.py: 337:
   yacc.py: 338:State  : 246
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement M_instr . LexToken(INT,'int',6,151)
   yacc.py: 389:Action : Reduce rule [Statement -> IterationStatement M_instr] with [{'nList': [12]},{'instr': 21}] and goto state 100
   yacc.py: 423:Result : <dict @ 0x7fed086e3168> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(INT,'int',6,151)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fed086e3168>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fed086e3168> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(INT,'int',6,151)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fed086e06e0>,<dict @ 0x7fed086e3168>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fed086ea398> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(INT,'int',6,151)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements INT . LexToken(IDENTIFIER,'sum',6,155)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fed088c81e8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'sum',6,155)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fed088c81e8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'sum',6,155)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fed088c81e8> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'sum',6,155)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',6,159)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['sum'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fed088c8f58> ('sum')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',6,159)
   yacc.py: 366:Action : Shift and goto state 175
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'0',6,161)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['0'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Integer_LIT . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fed086e3e88>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e3e88>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e3e88>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e3e88>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e3e88>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e3e88>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e3e88>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e3e88>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e3e88>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e3e88>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086e3e88>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086e3e88>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086e3e88>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086e3e88>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086e3e88>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086e3e88>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086e3e88>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086e3e88>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086e3e88>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e3e88>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Expression . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [<dict @ 0x7fed086e3e88>] and goto state 61
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': '_t11'})
   yacc.py: 337:
   yacc.py: 338:State  : 259
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with ['sum','=',<dict @ 0x7fed086e3e88>] and goto state 60
   yacc.py: 423:Result : <dict @ 0x7fed086e0d70> ({'type': 'int', 'name': 'sum'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',6,162)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7fed086e0d70>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',6,162)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(INT,'int',7,165)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e3e88> ({'instr': 23})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; M_instr . LexToken(INT,'int',7,165)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['int',{'type': 'int'},';',{'instr': 23}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7fed086dfc58> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(INT,'int',7,165)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7fed086dfc58> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(INT,'int',7,165)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fed086ea398>,{}] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(INT,'int',7,165)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements INT . LexToken(IDENTIFIER,'j',7,169)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <str @ 0x7fed088c8f80> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 86
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'j',7,169)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with ['int'] and goto state 4
   yacc.py: 423:Result : <str @ 0x7fed088c8f80> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'j',7,169)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with ['int'] and goto state 2
   yacc.py: 423:Result : <str @ 0x7fed088c8f80> ('int')
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'j',7,169)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(;,';',7,170)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['j'] and goto state 72
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 224
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(;,';',7,170)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with ['j'] and goto state 59
   yacc.py: 423:Result : <dict @ 0x7fed086e0050> ({'type': 'int', 'name': 'j'})
   yacc.py: 337:
   yacc.py: 338:State  : 80
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',7,170)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [<dict @ 0x7fed086e0050>] and goto state 57
   yacc.py: 423:Result : <dict @ 0x7fed086ea398> ({'type': 'int'})
   yacc.py: 337:
   yacc.py: 338:State  : 223
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',7,170)
   yacc.py: 366:Action : Shift and goto state 299
   yacc.py: 337:
   yacc.py: 338:State  : 299
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(FOR,'for',8,179)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e3e88> ({'instr': 23})
   yacc.py: 337:
   yacc.py: 338:State  : 345
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; M_instr . LexToken(FOR,'for',8,179)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr] with ['int',{'type': 'int'},';',{'instr': 23}] and goto state 95
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(FOR,'for',8,179)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [{}] and goto state 93
   yacc.py: 423:Result : <dict @ 0x7fed086ec910> ({})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(FOR,'for',8,179)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fed086e24b0>,{}] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fed086efb40> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(FOR,'for',8,179)
   yacc.py: 366:Action : Shift and goto state 110
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR . LexToken((,'(',8,183)
   yacc.py: 366:Action : Shift and goto state 204
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( . LexToken(IDENTIFIER,'j',8,184)
   yacc.py: 391:Action : Reduce rule [Mark_switch -> <empty>] with [] and goto state 113
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch . LexToken(IDENTIFIER,'j',8,184)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch IDENTIFIER . LexToken(=,'=',8,186)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['j'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch QualifiedName . LexToken(=,'=',8,186)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['j'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch PrimaryExpression . LexToken(=,'=',8,186)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['j'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch PostfixExpression . LexToken(=,'=',8,186)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['j'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch LogicalUnaryExpression . LexToken(=,'=',8,186)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['j'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression . LexToken(=,'=',8,186)
   yacc.py: 366:Action : Shift and goto state 232
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression = . LexToken(INT_LITERAL,'0',8,188)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 242
   yacc.py: 423:Result : <str @ 0x7fed09fb6fd0> ('=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'0',8,188)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['0'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator Integer_LIT . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fed086e24b0>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e24b0>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e24b0>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e24b0>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e24b0>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e24b0>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e24b0>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e24b0>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e24b0>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e24b0>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086e24b0>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086e24b0>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086e24b0>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086e24b0>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086e24b0>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086e24b0>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086e24b0>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086e24b0>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086e24b0>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'type': 'int', 'tempVar': '_t12'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['j','=',<dict @ 0x7fed086e24b0>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': 'j'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch AssignmentExpression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e3e88>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': 'j'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch Expression . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fed086e3e88>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': 'j'})
   yacc.py: 337:
   yacc.py: 338:State  : 328
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ExpressionStatement . LexToken(;,';',8,189)
   yacc.py: 389:Action : Reduce rule [ExpressionStatements -> ExpressionStatement] with [<dict @ 0x7fed086e3e88>] and goto state 126
   yacc.py: 423:Result : <dict @ 0x7fed086e3e88> ({'type': 'int', 'tempVar': 'j'})
   yacc.py: 337:
   yacc.py: 338:State  : 331
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ExpressionStatements . LexToken(;,';',8,189)
   yacc.py: 366:Action : Shift and goto state 355
   yacc.py: 337:
   yacc.py: 338:State  : 355
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ExpressionStatements ; . LexToken(IDENTIFIER,'j',8,190)
   yacc.py: 389:Action : Reduce rule [ForInit -> ExpressionStatements ;] with [<dict @ 0x7fed086e3e88>,';'] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 330
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit . LexToken(IDENTIFIER,'j',8,190)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086ea398> ({'instr': 25})
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr . LexToken(IDENTIFIER,'j',8,190)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr IDENTIFIER . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['j'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr QualifiedName . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['j'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr PrimaryExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['j'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr PostfixExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['j'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr LogicalUnaryExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['j'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr UnaryExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['j'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr CastExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['j'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr MultiplicativeExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['j'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AdditiveExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['j'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ShiftExpression . LexToken(<,'<',8,191)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['j'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression . LexToken(<,'<',8,191)
   yacc.py: 366:Action : Shift and goto state 210
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < . LexToken(INT_LITERAL,'101',8,193)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < INT_LITERAL . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['101'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < Integer_LIT . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fed086ec280>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < ComplexPrimary . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086ec280>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < NotJustName . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086ec280>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < PrimaryExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086ec280>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < PostfixExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086ec280>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < LogicalUnaryExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086ec280>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 197
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < UnaryExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086ec280>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < CastExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086ec280>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < MultiplicativeExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086ec280>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < AdditiveExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086ec280>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086ec280> ({'type': 'int', 'tempVar': '_t13'})
   yacc.py: 337:
   yacc.py: 338:State  : 285
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression < ShiftExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with ['j','<',<dict @ 0x7fed086ec280>] and goto state 219
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr RelationalExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr EqualityExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AndExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ExclusiveOrExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr InclusiveOrExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalAndExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalOrExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ConditionalExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr AssignmentExpression . LexToken(;,';',8,196)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086ec5c8>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 368
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr Expression . LexToken(;,';',8,196)
   yacc.py: 366:Action : Shift and goto state 376
   yacc.py: 337:
   yacc.py: 338:State  : 376
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr Expression ; . LexToken(IDENTIFIER,'j',8,197)
   yacc.py: 389:Action : Reduce rule [ForExpr -> Expression ;] with [<dict @ 0x7fed086ec5c8>,';'] and goto state 122
   yacc.py: 423:Result : <dict @ 0x7fed086ec5c8> ({'trueList': [27], 'falseList': [28], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 366
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr . LexToken(IDENTIFIER,'j',8,197)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e3168> ({'instr': 29})
   yacc.py: 337:
   yacc.py: 338:State  : 375
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr . LexToken(IDENTIFIER,'j',8,197)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr IDENTIFIER . LexToken(OPT_INC_DEC,'++',8,198)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['j'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr QualifiedName . LexToken(OPT_INC_DEC,'++',8,198)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['j'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PrimaryExpression . LexToken(OPT_INC_DEC,'++',8,198)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['j'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression . LexToken(OPT_INC_DEC,'++',8,198)
   yacc.py: 366:Action : Shift and goto state 217
   yacc.py: 337:
   yacc.py: 338:State  : 217
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression OPT_INC_DEC . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [RealPostfixExpression -> PostfixExpression OPT_INC_DEC] with ['j','++'] and goto state 198
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 99
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr RealPostfixExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> RealPostfixExpression] with [<dict @ 0x7fed086e24b0>] and goto state 197
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr PostfixExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e24b0>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr LogicalUnaryExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e24b0>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr UnaryExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e24b0>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr CastExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e24b0>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr MultiplicativeExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e24b0>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AdditiveExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e24b0>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ShiftExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086e24b0>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr RelationalExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086e24b0>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr EqualityExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086e24b0>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AndExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086e24b0>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExclusiveOrExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086e24b0>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr InclusiveOrExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086e24b0>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalAndExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086e24b0>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalOrExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086e24b0>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ConditionalExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086e24b0>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr AssignmentExpression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e24b0>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr Expression . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fed086e24b0>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 328
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExpressionStatement . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ExpressionStatements -> ExpressionStatement] with [<dict @ 0x7fed086e24b0>] and goto state 126
   yacc.py: 423:Result : <dict @ 0x7fed086e24b0> ({'trueList': [32], 'falseList': [33], 't ...)
   yacc.py: 337:
   yacc.py: 338:State  : 382
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ExpressionStatements . LexToken(),')',8,200)
   yacc.py: 389:Action : Reduce rule [ForIncr -> ExpressionStatements] with [<dict @ 0x7fed086e24b0>] and goto state 124
   yacc.py: 423:Result : <dict @ 0x7fed086e1d70> ({'nList': []})
   yacc.py: 337:
   yacc.py: 338:State  : 381
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr . LexToken(),')',8,200)
   yacc.py: 366:Action : Shift and goto state 387
   yacc.py: 337:
   yacc.py: 338:State  : 387
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) . LexToken({,'{',8,202)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e1398> ({'instr': 33})
   yacc.py: 337:
   yacc.py: 338:State  : 391
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr . LexToken({,'{',8,202)
   yacc.py: 366:Action : Shift and goto state 70
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr { . LexToken(IDENTIFIER,'sum',8,203)
   yacc.py: 389:Action : Reduce rule [Lparen -> {] with ['{'] and goto state 89
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen . LexToken(IDENTIFIER,'sum',8,203)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen IDENTIFIER . LexToken(OPT_EQ,'+=',8,207)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['sum'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed088c8fa8> ('sum')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen QualifiedName . LexToken(OPT_EQ,'+=',8,207)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['sum'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed088c8fa8> ('sum')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen PrimaryExpression . LexToken(OPT_EQ,'+=',8,207)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['sum'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed088c8fa8> ('sum')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen PostfixExpression . LexToken(OPT_EQ,'+=',8,207)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['sum'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fed088c8fa8> ('sum')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LogicalUnaryExpression . LexToken(OPT_EQ,'+=',8,207)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['sum'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fed088c8fa8> ('sum')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression . LexToken(OPT_EQ,'+=',8,207)
   yacc.py: 366:Action : Shift and goto state 231
   yacc.py: 337:
   yacc.py: 338:State  : 231
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression OPT_EQ . LexToken(IDENTIFIER,'ia',8,210)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> OPT_EQ] with ['+='] and goto state 243
   yacc.py: 423:Result : <str @ 0x7fed088c8f08> ('+=')
   yacc.py: 337:
   yacc.py: 338:State  : 230
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'ia',8,210)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator IDENTIFIER . LexToken([,'[',8,212)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['ia'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed088c8ee0> ('ia')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName . LexToken([,'[',8,212)
   yacc.py: 366:Action : Shift and goto state 238
   yacc.py: 337:
   yacc.py: 338:State  : 238
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ . LexToken(IDENTIFIER,'j',8,213)
   yacc.py: 366:Action : Shift and goto state 23
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ IDENTIFIER . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['j'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 187
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ QualifiedName . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with ['j'] and goto state 140
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ PrimaryExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with ['j'] and goto state 196
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ PostfixExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with ['j'] and goto state 202
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ LogicalUnaryExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with ['j'] and goto state 201
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ UnaryExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with ['j'] and goto state 208
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ CastExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with ['j'] and goto state 209
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ MultiplicativeExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with ['j'] and goto state 213
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ AdditiveExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with ['j'] and goto state 216
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ ShiftExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with ['j'] and goto state 218
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ RelationalExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with ['j'] and goto state 223
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ EqualityExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with ['j'] and goto state 226
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ AndExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with ['j'] and goto state 228
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ ExclusiveOrExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with ['j'] and goto state 230
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ InclusiveOrExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with ['j'] and goto state 232
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ ConditionalAndExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with ['j'] and goto state 234
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ ConditionalOrExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with ['j'] and goto state 237
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ ConditionalExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with ['j'] and goto state 240
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ AssignmentExpression . LexToken(],']',8,214)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with ['j'] and goto state 244
   yacc.py: 423:Result : <str @ 0x7fed0a079968> ('j')
   yacc.py: 337:
   yacc.py: 338:State  : 312
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ Expression . LexToken(],']',8,214)
   yacc.py: 366:Action : Shift and goto state 350
   yacc.py: 337:
   yacc.py: 338:State  : 350
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator QualifiedName [ Expression ] . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ArrayAccess -> QualifiedName [ Expression ]] with ['ia','[','j',']'] and goto state 160
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ArrayAccess . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> ArrayAccess] with [<dict @ 0x7fed086e6c58>] and goto state 152
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [<dict @ 0x7fed086e6c58>] and goto state 145
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e6c58>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e6c58>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e6c58>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e6c58>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e6c58>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e6c58>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e6c58>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e6c58>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e6c58>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086e6c58>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086e6c58>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086e6c58>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086e6c58>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086e6c58>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086e6c58>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086e6c58>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086e6c58>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086e6c58>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'type': 'int', 'tempVar': '_t19'})
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with ['sum','+=',<dict @ 0x7fed086e6c58>] and goto state 241
   yacc.py: 423:Result : <dict @ 0x7fed086e6910> ({'type': 'int', 'tempVar': 'sum'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen AssignmentExpression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e6910>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e6910> ({'type': 'int', 'tempVar': 'sum'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen Expression . LexToken(;,';',8,215)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fed086e6910>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fed086e6910> ({'type': 'int', 'tempVar': 'sum'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ExpressionStatement . LexToken(;,';',8,215)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ExpressionStatement ; . LexToken(},'}',8,216)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086f0a28> ({'instr': 37})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen ExpressionStatement ; M_instr . LexToken(},'}',8,216)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7fed086e6910>,';',{'instr': 37}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7fed086e75c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen Statement . LexToken(},'}',8,216)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fed086e75c8>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fed086e75c8> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationOrStatement . LexToken(},'}',8,216)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [<dict @ 0x7fed086e75c8>] and goto state 91
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements . LexToken(},'}',8,216)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements } . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 240
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Lparen LocalVariableDeclarationsAndStatements Rparen . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 389:Action : Reduce rule [Block -> Lparen LocalVariableDeclarationsAndStatements Rparen] with [None,<dict @ 0x7fed086e6c58>,None] and goto state 87
   yacc.py: 423:Result : <dict @ 0x7fed086e6c58> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 113
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Block . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e3b40> ({'instr': 37})
   yacc.py: 337:
   yacc.py: 338:State  : 206
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Block M_instr . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 389:Action : Reduce rule [Statement -> Block M_instr] with [<dict @ 0x7fed086e6c58>,{'instr': 37}] and goto state 102
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 394
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 389:Action : Reduce rule [IterationStatement -> FOR ( Mark_switch ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement] with ['for','(',None,None,{'instr': 25},<dict @ 0x7fed086ec5c8>,{'instr': 29},{'nList': []},')',{'instr': 33},<dict @ 0x7fed086e7280>] and goto state 118
   yacc.py: 423:Result : <dict @ 0x7fed086f0398> ({'nList': [28]})
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e37f8> ({'instr': 38})
   yacc.py: 337:
   yacc.py: 338:State  : 246
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement M_instr . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 389:Action : Reduce rule [Statement -> IterationStatement M_instr] with [{'nList': [28]},{'instr': 38}] and goto state 100
   yacc.py: 423:Result : <dict @ 0x7fed086ef4b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fed086ef4b0>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fed086ef4b0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fed086efb40>,<dict @ 0x7fed086ef4b0>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fed086e0d70> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',9,226)
   yacc.py: 366:Action : Shift and goto state 91
   yacc.py: 337:
   yacc.py: 338:State  : 91
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',9,232)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 32
   yacc.py: 423:Result : <str @ 0x7fed088d4600> ('System')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',9,232)
   yacc.py: 366:Action : Shift and goto state 237
   yacc.py: 337:
   yacc.py: 338:State  : 237
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',9,233)
   yacc.py: 366:Action : Shift and goto state 73
   yacc.py: 337:
   yacc.py: 338:State  : 73
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',9,236)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with ['System','.','out'] and goto state 33
   yacc.py: 423:Result : <str @ 0x7fed088d4540> ('System.out')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',9,236)
   yacc.py: 366:Action : Shift and goto state 237
   yacc.py: 337:
   yacc.py: 338:State  : 237
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',9,237)
   yacc.py: 366:Action : Shift and goto state 73
   yacc.py: 337:
   yacc.py: 338:State  : 73
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',9,244)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with ['System.out','.','println'] and goto state 33
   yacc.py: 423:Result : <str @ 0x7fed088cfa08> ('System.out.println')
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',9,244)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [<str @ 0x7fed088cfa08>] and goto state 171
   yacc.py: 423:Result : <str @ 0x7fed088cfa08> ('System.out.println')
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',9,244)
   yacc.py: 366:Action : Shift and goto state 208
   yacc.py: 337:
   yacc.py: 338:State  : 208
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(INT_LITERAL,'1',9,245)
   yacc.py: 366:Action : Shift and goto state 144
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( INT_LITERAL . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [Integer_LIT -> INT_LITERAL] with ['1'] and goto state 155
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Integer_LIT . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> Integer_LIT] with [<dict @ 0x7fed086e37f8>] and goto state 146
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e37f8>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e37f8>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e37f8>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e37f8>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e37f8>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e37f8>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e37f8>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e37f8>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e37f8>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086e37f8>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086e37f8>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086e37f8>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086e37f8>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086e37f8>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086e37f8>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086e37f8>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086e37f8>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086e37f8>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e37f8>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e37f8> ({'type': 'int', 'tempVar': '_t21'})
   yacc.py: 337:
   yacc.py: 338:State  : 282
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',9,246)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [<dict @ 0x7fed086e37f8>] and goto state 175
   yacc.py: 423:Result : <dict @ 0x7fed086f0398> ({'expr': [{'type': 'int', 'tempVar': '_t ...)
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',9,246)
   yacc.py: 366:Action : Shift and goto state 335
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [<str @ 0x7fed088cfa08>,'(',<dict @ 0x7fed086f0398>,')'] and goto state 167
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 105
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [<dict @ 0x7fed086e7280>] and goto state 154
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [<dict @ 0x7fed086e7280>] and goto state 145
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 122
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [<dict @ 0x7fed086e7280>] and goto state 144
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [<dict @ 0x7fed086e7280>] and goto state 141
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [<dict @ 0x7fed086e7280>] and goto state 196
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 123
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [<dict @ 0x7fed086e7280>] and goto state 202
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [<dict @ 0x7fed086e7280>] and goto state 201
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [<dict @ 0x7fed086e7280>] and goto state 208
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [<dict @ 0x7fed086e7280>] and goto state 209
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [<dict @ 0x7fed086e7280>] and goto state 213
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [<dict @ 0x7fed086e7280>] and goto state 216
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [<dict @ 0x7fed086e7280>] and goto state 218
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [<dict @ 0x7fed086e7280>] and goto state 223
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [<dict @ 0x7fed086e7280>] and goto state 226
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 88
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [<dict @ 0x7fed086e7280>] and goto state 228
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [<dict @ 0x7fed086e7280>] and goto state 230
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [<dict @ 0x7fed086e7280>] and goto state 232
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [<dict @ 0x7fed086e7280>] and goto state 234
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 133
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [<dict @ 0x7fed086e7280>] and goto state 237
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [<dict @ 0x7fed086e7280>] and goto state 240
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 108
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [<dict @ 0x7fed086e7280>] and goto state 244
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',9,247)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [<dict @ 0x7fed086e7280>] and goto state 109
   yacc.py: 423:Result : <dict @ 0x7fed086e7280> ({'type': None, 'tempVar': '_t22'})
   yacc.py: 337:
   yacc.py: 338:State  : 85
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',9,247)
   yacc.py: 366:Action : Shift and goto state 182
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',10,253)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 103
   yacc.py: 462:Result : <dict @ 0x7fed086e6910> ({'instr': 40})
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; M_instr . LexToken(},'}',10,253)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ; M_instr] with [<dict @ 0x7fed086e7280>,';',{'instr': 40}] and goto state 98
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 87
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',10,253)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [<dict @ 0x7fed086e06e0>] and goto state 94
   yacc.py: 423:Result : <dict @ 0x7fed086e06e0> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 241
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',10,253)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [<dict @ 0x7fed086e0d70>,<dict @ 0x7fed086e06e0>] and goto state 92
   yacc.py: 423:Result : <dict @ 0x7fed086f0398> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',10,253)
   yacc.py: 366:Action : Shift and goto state 325
   yacc.py: 337:
   yacc.py: 338:State  : 325
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',11,255)
   yacc.py: 389:Action : Reduce rule [MethodBody -> { LocalVariableDeclarationsAndStatements }] with ['{',<dict @ 0x7fed086f0398>,'}'] and goto state 74
   yacc.py: 423:Result : <dict @ 0x7fed086f0398> ({'beginLoop': [], 'endOfLoop': []})
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',11,255)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [<list @ 0x7fed0888c908>,'void',<dict @ 0x7fed086e27f8>,<dict @ 0x7fed086f0398>] and goto state 65
   yacc.py: 423:Result : <dict @ 0x7fed086ea050> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { MethodDeclaration . LexToken(},'}',11,255)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [<dict @ 0x7fed086ea050>] and goto state 50
   yacc.py: 423:Result : <dict @ 0x7fed086ea050> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { FieldDeclaration . LexToken(},'}',11,255)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [<dict @ 0x7fed086ea050>] and goto state 47
   yacc.py: 423:Result : <dict @ 0x7fed086ea050> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarationOptSemi . LexToken(},'}',11,255)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [<dict @ 0x7fed086ea050>] and goto state 45
   yacc.py: 423:Result : <dict @ 0x7fed086ea050> ({'type': 'void', 'method': {'name': 'mai ...)
   yacc.py: 337:
   yacc.py: 338:State  : 60
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(},'}',11,255)
   yacc.py: 366:Action : Shift and goto state 71
   yacc.py: 337:
   yacc.py: 338:State  : 71
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations } . $end
   yacc.py: 389:Action : Reduce rule [Rparen -> }] with ['}'] and goto state 90
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Rparen . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations Rparen] with [<dict @ 0x7fed086e5c58>,'{',<dict @ 0x7fed086ea050>,None] and goto state 34
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 2
   yacc.py: 352:Stack  : TypeDeclaration . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 26
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 7
   yacc.py: 352:Stack  : TypeDeclarationOptSemi . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarationOptSemi] with [None] and goto state 24
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 16
   yacc.py: 352:Stack  : TypeDeclarations . $end
   yacc.py: 389:Action : Reduce rule [ProgramFile -> TypeDeclarations] with [None] and goto state 22
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : ProgramFile . $end
   yacc.py: 389:Action : Reduce rule [CompilationUnit -> ProgramFile] with [None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : CompilationUnit . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x936be0> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
