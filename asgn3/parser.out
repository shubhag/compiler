Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PROTECTED
    COMMENT
    GOTO
    ENUM
    THROWS
    TRANSIENT
    SYNCHRONIZED
    FINAL
    TRY
    INSTANCEOF
    NATIVE
    IGNORE_WHITESPACE
    STRICTFP
    IMPLEMENTS
    VOLATILE
    CONST
    ABSTRACT
    ASSERT
    FINALLY

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     TypeSpecifier -> TypeName
Rule 3     TypeSpecifier -> TypeName Dims
Rule 4     TypeName -> PrimitiveType
Rule 5     TypeName -> QualifiedName
Rule 6     ClassNameList -> QualifiedName
Rule 7     ClassNameList -> ClassNameList , QualifiedName
Rule 8     PrimitiveType -> BOOLEAN
Rule 9     PrimitiveType -> CHAR
Rule 10    PrimitiveType -> BYTE
Rule 11    PrimitiveType -> SHORT
Rule 12    PrimitiveType -> INT
Rule 13    PrimitiveType -> LONG
Rule 14    PrimitiveType -> FLOAT
Rule 15    PrimitiveType -> DOUBLE
Rule 16    PrimitiveType -> VOID
Rule 17    SemiColons -> ;
Rule 18    SemiColons -> SemiColons ;
Rule 19    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 20    ProgramFile -> PackageStatement TypeDeclarations
Rule 21    ProgramFile -> ImportStatements TypeDeclarations
Rule 22    ProgramFile -> TypeDeclarations
Rule 23    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 24    TypeDeclarations -> TypeDeclarationOptSemi
Rule 25    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 26    TypeDeclarationOptSemi -> TypeDeclaration
Rule 27    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 28    ImportStatements -> ImportStatement
Rule 29    ImportStatements -> ImportStatements ImportStatement
Rule 30    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 31    ImportStatement -> IMPORT QualifiedName . * SemiColons
Rule 32    QualifiedName -> IDENTIFIER
Rule 33    QualifiedName -> QualifiedName . IDENTIFIER
Rule 34    TypeDeclaration -> ClassHeader { FieldDeclarations }
Rule 35    TypeDeclaration -> ClassHeader { }
Rule 36    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 37    ClassHeader -> ClassWord IDENTIFIER
Rule 38    Modifiers -> Modifier
Rule 39    Modifiers -> Modifiers Modifier
Rule 40    Modifier -> PUBLIC
Rule 41    Modifier -> PRIVATE
Rule 42    Modifier -> STATIC
Rule 43    ClassWord -> CLASS
Rule 44    ClassWord -> INTERFACE
Rule 45    FieldDeclarations -> FieldDeclarationOptSemi
Rule 46    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 47    FieldDeclarationOptSemi -> FieldDeclaration
Rule 48    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 49    FieldDeclaration -> FieldVariableDeclaration ;
Rule 50    FieldDeclaration -> MethodDeclaration
Rule 51    FieldDeclaration -> ConstructorDeclaration
Rule 52    FieldDeclaration -> StaticInitializer
Rule 53    FieldDeclaration -> NonStaticInitializer
Rule 54    FieldDeclaration -> TypeDeclaration
Rule 55    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 56    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 57    VariableDeclarators -> VariableDeclarator
Rule 58    VariableDeclarators -> VariableDeclarators , VariableDeclarator
Rule 59    VariableDeclarator -> DeclaratorName
Rule 60    VariableDeclarator -> DeclaratorName = VariableInitializer
Rule 61    VariableInitializer -> Expression
Rule 62    ArrayInitializers -> VariableInitializer
Rule 63    ArrayInitializers -> ArrayInitializers , VariableInitializer
Rule 64    ArrayInitializers -> ArrayInitializers ,
Rule 65    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 66    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 67    MethodDeclarator -> DeclaratorName ( ParameterList )
Rule 68    MethodDeclarator -> DeclaratorName ( )
Rule 69    ParameterList -> Parameter
Rule 70    ParameterList -> ParameterList , Parameter
Rule 71    Parameter -> TypeSpecifier DeclaratorName
Rule 72    DeclaratorName -> IDENTIFIER
Rule 73    DeclaratorName -> DeclaratorName OP_DIM
Rule 74    MethodBody -> Block
Rule 75    MethodBody -> ;
Rule 76    ConstructorDeclaration -> Modifiers ConstructorDeclarator Block
Rule 77    ConstructorDeclaration -> ConstructorDeclarator Block
Rule 78    ConstructorDeclarator -> IDENTIFIER ( ParameterList )
Rule 79    ConstructorDeclarator -> IDENTIFIER ( )
Rule 80    StaticInitializer -> STATIC Block
Rule 81    NonStaticInitializer -> Block
Rule 82    Extends -> EXTENDS TypeName
Rule 83    Extends -> Extends , TypeName
Rule 84    Block -> { LocalVariableDeclarationsAndStatements }
Rule 85    Block -> { }
Rule 86    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 87    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 88    LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 89    LocalVariableDeclarationOrStatement -> Statement
Rule 90    LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr
Rule 91    Statement -> EmptyStatement M_instr
Rule 92    Statement -> LabelStatement M_instr
Rule 93    Statement -> ExpressionStatement ; M_instr
Rule 94    Statement -> SelectionStatement M_instr
Rule 95    Statement -> IterationStatement M_instr
Rule 96    Statement -> JumpStatement M_instr
Rule 97    Statement -> Block M_instr
Rule 98    M_instr -> <empty>
Rule 99    EmptyStatement -> ;
Rule 100   LabelStatement -> IDENTIFIER :
Rule 101   LabelStatement -> Marker_case CASE ConstantExpression :
Rule 102   LabelStatement -> DEFAULT :
Rule 103   Marker_case -> <empty>
Rule 104   ExpressionStatement -> Expression
Rule 105   SelectionStatement -> IF ( Expression ) M_instr_branch Statement
Rule 106   SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
Rule 107   SelectionStatement -> SWITCH ( Expression Mark_switch ) Block
Rule 108   Mark_switch -> <empty>
Rule 109   N_instr -> <empty>
Rule 110   M_instr_branch -> <empty>
Rule 111   IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement
Rule 112   IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
Rule 113   IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
Rule 114   ForInit -> ExpressionStatements ;
Rule 115   ForInit -> LocalVariableDeclarationStatement
Rule 116   ForInit -> ;
Rule 117   ForExpr -> Expression ;
Rule 118   ForExpr -> ;
Rule 119   ForIncr -> ExpressionStatements
Rule 120   ForIncr -> <empty>
Rule 121   ExpressionStatements -> ExpressionStatement
Rule 122   ExpressionStatements -> ExpressionStatements , ExpressionStatement
Rule 123   JumpStatement -> BREAK IDENTIFIER ;
Rule 124   JumpStatement -> BREAK ;
Rule 125   JumpStatement -> CONTINUE IDENTIFIER ;
Rule 126   JumpStatement -> CONTINUE ;
Rule 127   JumpStatement -> RETURN Expression ;
Rule 128   JumpStatement -> RETURN ;
Rule 129   JumpStatement -> THROW Expression ;
Rule 130   Catches -> Catch
Rule 131   Catches -> Catches Catch
Rule 132   Catch -> CatchHeader Block
Rule 133   CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER )
Rule 134   CatchHeader -> CATCH ( TypeSpecifier )
Rule 135   PrimaryExpression -> QualifiedName
Rule 136   PrimaryExpression -> NotJustName
Rule 137   NotJustName -> SpecialName
Rule 138   NotJustName -> NewAllocationExpression
Rule 139   NotJustName -> ComplexPrimary
Rule 140   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 141   ComplexPrimary -> Integer_LIT
Rule 142   ComplexPrimary -> Float_LIT
Rule 143   ComplexPrimary -> Char_LIT
Rule 144   ComplexPrimary -> String_LIT
Rule 145   ComplexPrimary -> Bool_LIT
Rule 146   ComplexPrimary -> ( Expression )
Rule 147   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 148   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 149   ComplexPrimaryNoParenthesis -> MethodCall
Rule 150   Integer_LIT -> INT_LITERAL
Rule 151   Float_LIT -> FLOAT_LITERAL
Rule 152   Char_LIT -> CHAR_LITERAL
Rule 153   String_LIT -> STRING_LITERAL
Rule 154   Bool_LIT -> BOOL
Rule 155   ArrayAccess -> QualifiedName [ Expression ]
Rule 156   ArrayAccess -> ComplexPrimary [ Expression ]
Rule 157   FieldAccess -> NotJustName . IDENTIFIER
Rule 158   FieldAccess -> RealPostfixExpression . IDENTIFIER
Rule 159   FieldAccess -> QualifiedName . THIS
Rule 160   FieldAccess -> QualifiedName . CLASS
Rule 161   FieldAccess -> PrimitiveType . CLASS
Rule 162   MethodCall -> MethodAccess ( ArgumentList )
Rule 163   MethodCall -> MethodAccess ( )
Rule 164   MethodAccess -> ComplexPrimaryNoParenthesis
Rule 165   MethodAccess -> SpecialName
Rule 166   MethodAccess -> QualifiedName
Rule 167   SpecialName -> THIS
Rule 168   SpecialName -> SUPER
Rule 169   SpecialName -> NULL
Rule 170   ArgumentList -> Expression
Rule 171   ArgumentList -> ArgumentList , Expression
Rule 172   NewAllocationExpression -> PlainNewAllocationExpression
Rule 173   NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression
Rule 174   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 175   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 176   PlainNewAllocationExpression -> ArrayAllocationExpression { }
Rule 177   PlainNewAllocationExpression -> ClassAllocationExpression { }
Rule 178   PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers }
Rule 179   PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations }
Rule 180   ClassAllocationExpression -> NEW TypeName ( ArgumentList )
Rule 181   ClassAllocationExpression -> NEW TypeName ( )
Rule 182   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 183   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 184   ArrayAllocationExpression -> NEW TypeName Dims
Rule 185   DimExprs -> DimExpr
Rule 186   DimExprs -> DimExprs DimExpr
Rule 187   DimExpr -> [ Expression ]
Rule 188   Dims -> OP_DIM
Rule 189   Dims -> Dims OP_DIM
Rule 190   OP_DIM -> [ ]
Rule 191   PostfixExpression -> PrimaryExpression
Rule 192   PostfixExpression -> RealPostfixExpression
Rule 193   RealPostfixExpression -> PostfixExpression OPT_INC_DEC
Rule 194   UnaryExpression -> OPT_INC_DEC UnaryExpression
Rule 195   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 196   UnaryExpression -> LogicalUnaryExpression
Rule 197   LogicalUnaryExpression -> PostfixExpression
Rule 198   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 199   LogicalUnaryOperator -> ~
Rule 200   LogicalUnaryOperator -> !
Rule 201   ArithmeticUnaryOperator -> +
Rule 202   ArithmeticUnaryOperator -> -
Rule 203   CastExpression -> UnaryExpression
Rule 204   MultiplicativeExpression -> CastExpression
Rule 205   MultiplicativeExpression -> MultiplicativeExpression * CastExpression
Rule 206   MultiplicativeExpression -> MultiplicativeExpression / CastExpression
Rule 207   MultiplicativeExpression -> MultiplicativeExpression % CastExpression
Rule 208   AdditiveExpression -> MultiplicativeExpression
Rule 209   AdditiveExpression -> AdditiveExpression + MultiplicativeExpression
Rule 210   AdditiveExpression -> AdditiveExpression - MultiplicativeExpression
Rule 211   ShiftExpression -> AdditiveExpression
Rule 212   ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression
Rule 213   RelationalExpression -> ShiftExpression
Rule 214   RelationalExpression -> RelationalExpression < ShiftExpression
Rule 215   RelationalExpression -> RelationalExpression > ShiftExpression
Rule 216   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 217   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 218   EqualityExpression -> RelationalExpression
Rule 219   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 220   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 221   AndExpression -> EqualityExpression
Rule 222   AndExpression -> AndExpression & EqualityExpression
Rule 223   ExclusiveOrExpression -> AndExpression
Rule 224   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 225   InclusiveOrExpression -> ExclusiveOrExpression
Rule 226   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 227   ConditionalAndExpression -> InclusiveOrExpression
Rule 228   ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
Rule 229   ConditionalOrExpression -> ConditionalAndExpression
Rule 230   ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
Rule 231   M_OP -> <empty>
Rule 232   ConditionalExpression -> ConditionalOrExpression
Rule 233   ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
Rule 234   Mark -> <empty>
Rule 235   AssignmentExpression -> ConditionalExpression
Rule 236   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 237   AssignmentOperator -> =
Rule 238   AssignmentOperator -> OPT_EQ
Rule 239   Expression -> AssignmentExpression
Rule 240   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

!                    : 200
%                    : 207
&                    : 222
(                    : 67 68 78 79 105 106 107 111 112 113 133 134 146 162 163 180 181
)                    : 67 68 78 79 105 106 107 111 112 113 133 134 146 162 163 180 181
*                    : 31 205
+                    : 201 209
,                    : 7 58 63 64 70 83 122 171
-                    : 202 210
.                    : 31 33 157 158 159 160 161 173
/                    : 206
:                    : 100 101 102 233
;                    : 17 18 49 75 90 93 99 112 114 116 117 118 123 124 125 126 127 128 129
<                    : 214
=                    : 60 237
>                    : 215
?                    : 233
ABSTRACT             : 
ASSERT               : 
BOOL                 : 154
BOOLEAN              : 8
BREAK                : 123 124
BYTE                 : 10
CASE                 : 101
CATCH                : 133 134
CHAR                 : 9
CHAR_LITERAL         : 152
CLASS                : 43 160 161
COMMENT              : 
CONST                : 
CONTINUE             : 125 126
DEFAULT              : 102
DO                   : 112
DOUBLE               : 15
ELSE                 : 106
ENUM                 : 
EXTENDS              : 82
FINAL                : 
FINALLY              : 
FLOAT                : 14
FLOAT_LITERAL        : 151
FOR                  : 113
GOTO                 : 
IDENTIFIER           : 32 33 36 37 72 78 79 100 123 125 133 157 158
IF                   : 105 106
IGNORE_WHITESPACE    : 
IMPLEMENTS           : 
IMPORT               : 30 31
INSTANCEOF           : 
INT                  : 12
INTERFACE            : 44
INT_LITERAL          : 150
LONG                 : 13
NATIVE               : 
NEW                  : 180 181 182 183 184
NULL                 : 169
OPT_EQ               : 238
OPT_INC_DEC          : 193 194
OPT_SOME             : 212
OP_EQ                : 219
OP_GE                : 217
OP_LAND              : 228
OP_LE                : 216
OP_LOR               : 230
OP_NE                : 220
PACKAGE              : 23
PRIVATE              : 41
PROTECTED            : 
PUBLIC               : 40
RETURN               : 127 128
SHORT                : 11
STATIC               : 42 80
STRICTFP             : 
STRING_LITERAL       : 153
SUPER                : 168
SWITCH               : 107
SYNCHRONIZED         : 
THIS                 : 159 167
THROW                : 129
THROWS               : 
TRANSIENT            : 
TRY                  : 
VOID                 : 16
VOLATILE             : 
WHILE                : 111 112
[                    : 155 156 187 190
]                    : 155 156 187 190
^                    : 224
error                : 
{                    : 34 35 84 85 176 177 178 179
|                    : 226
}                    : 34 35 84 85 176 177 178 179
~                    : 199

Nonterminals, with rules where they appear

AdditiveExpression   : 209 210 211 212
AndExpression        : 222 223 224
ArgumentList         : 162 171 180
ArithmeticUnaryOperator : 195
ArrayAccess          : 147
ArrayAllocationExpression : 174 176 178
ArrayInitializers    : 63 64 178
AssignmentExpression : 236 239
AssignmentOperator   : 236
Block                : 74 76 77 80 81 97 107 132
Bool_LIT             : 145
CastExpression       : 195 204 205 206 207
Catch                : 130 131
CatchHeader          : 132
Catches              : 131
Char_LIT             : 143
ClassAllocationExpression : 175 177 179
ClassHeader          : 34 35
ClassNameList        : 7
ClassWord            : 36 37
CompilationUnit      : 0
ComplexPrimary       : 139 156
ComplexPrimaryNoParenthesis : 140 164
ConditionalAndExpression : 228 229 230
ConditionalExpression : 233 235 240
ConditionalOrExpression : 230 232 233
ConstantExpression   : 101
ConstructorDeclaration : 51
ConstructorDeclarator : 76 77
DeclaratorName       : 59 60 67 68 71 73
DimExpr              : 185 186
DimExprs             : 182 183 186
Dims                 : 3 182 184 189
EmptyStatement       : 91
EqualityExpression   : 219 220 221 222
ExclusiveOrExpression : 224 225 226
Expression           : 61 104 105 106 107 111 112 117 127 129 146 155 156 170 171 187 233
ExpressionStatement  : 93 121 122
ExpressionStatements : 114 119 122
Extends              : 83
FieldAccess          : 148
FieldDeclaration     : 47 48
FieldDeclarationOptSemi : 45 46
FieldDeclarations    : 34 46 179
FieldVariableDeclaration : 49
Float_LIT            : 142
ForExpr              : 113
ForIncr              : 113
ForInit              : 113
ImportStatement      : 28 29
ImportStatements     : 19 21 29
InclusiveOrExpression : 226 227 228
Integer_LIT          : 141
IterationStatement   : 95
JumpStatement        : 96
LabelStatement       : 92
LocalVariableDeclarationOrStatement : 86 87
LocalVariableDeclarationStatement : 88 115
LocalVariableDeclarationsAndStatements : 84 87
LogicalUnaryExpression : 196
LogicalUnaryOperator : 198
M_OP                 : 228 230
M_instr              : 90 91 92 93 94 95 96 97 113 113 113 233 233 233
M_instr_branch       : 105 106 106 111 111 112 112
Mark                 : 233
Mark_switch          : 107
Marker_case          : 101
MethodAccess         : 162 163
MethodBody           : 65 66
MethodCall           : 149
MethodDeclaration    : 50
MethodDeclarator     : 65 66
Modifier             : 38 39
Modifiers            : 36 39 55 65 76
MultiplicativeExpression : 205 206 207 208 209 210
N_instr              : 106
NewAllocationExpression : 138
NonStaticInitializer : 53
NotJustName          : 136 157
OP_DIM               : 73 188 189
PackageStatement     : 19 20
Parameter            : 69 70
ParameterList        : 67 70 78
PlainNewAllocationExpression : 172 173
PostfixExpression    : 193 197
PrimaryExpression    : 191
PrimitiveType        : 4 161
ProgramFile          : 1
QualifiedName        : 5 6 7 23 30 31 33 135 155 159 160 166 173
RealPostfixExpression : 158 192
RelationalExpression : 214 215 216 217 218 219 220
SelectionStatement   : 94
SemiColons           : 18 23 27 30 31 48
ShiftExpression      : 212 213 214 215 216 217
SpecialName          : 137 165
Statement            : 89 105 106 106 111 112 113
StaticInitializer    : 52
String_LIT           : 144
TypeDeclaration      : 26 27 54
TypeDeclarationOptSemi : 24 25
TypeDeclarations     : 19 20 21 22 25
TypeName             : 2 3 82 83 180 181 182 183 184
TypeSpecifier        : 55 56 65 66 71 90 133 134
UnaryExpression      : 194 198 203 236
VariableDeclarator   : 57 58
VariableDeclarators  : 55 56 58 90
VariableInitializer  : 60 62 63

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (19) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (20) ProgramFile -> . PackageStatement TypeDeclarations
    (21) ProgramFile -> . ImportStatements TypeDeclarations
    (22) ProgramFile -> . TypeDeclarations
    (23) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    PACKAGE         shift and go to state 9
    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 15
    TypeDeclarations               shift and go to state 16
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    PackageStatement               shift and go to state 10
    CompilationUnit                shift and go to state 13
    TypeDeclarationOptSemi         shift and go to state 7

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (26) TypeDeclarationOptSemi -> TypeDeclaration .
    (27) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    CLASS           reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    INTERFACE       reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 21

state 3

    (42) Modifier -> STATIC .

    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)


state 4

    (41) Modifier -> PRIVATE .

    CLASS           reduce using rule 41 (Modifier -> PRIVATE .)
    INTERFACE       reduce using rule 41 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 41 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 41 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 41 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 41 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 41 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 41 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 41 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 41 (Modifier -> PRIVATE .)
    INT             reduce using rule 41 (Modifier -> PRIVATE .)
    LONG            reduce using rule 41 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 41 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 41 (Modifier -> PRIVATE .)
    VOID            reduce using rule 41 (Modifier -> PRIVATE .)


state 5

    (30) ImportStatement -> IMPORT . QualifiedName SemiColons
    (31) ImportStatement -> IMPORT . QualifiedName . * SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 22

state 6

    (43) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 43 (ClassWord -> CLASS .)


state 7

    (24) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 8

    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (39) Modifiers -> Modifiers . Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 24
    Modifier                       shift and go to state 25

state 9

    (23) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 26

state 10

    (19) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (20) ProgramFile -> PackageStatement . TypeDeclarations
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 27
    TypeDeclarations               shift and go to state 28
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 11

    (28) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 28 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 28 (ImportStatements -> ImportStatement .)
    INTERFACE       reduce using rule 28 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 28 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 28 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 28 (ImportStatements -> ImportStatement .)


state 12

    (38) Modifiers -> Modifier .

    CLASS           reduce using rule 38 (Modifiers -> Modifier .)
    INTERFACE       reduce using rule 38 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 38 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 38 (Modifiers -> Modifier .)
    STATIC          reduce using rule 38 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 38 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 38 (Modifiers -> Modifier .)
    CHAR            reduce using rule 38 (Modifiers -> Modifier .)
    BYTE            reduce using rule 38 (Modifiers -> Modifier .)
    SHORT           reduce using rule 38 (Modifiers -> Modifier .)
    INT             reduce using rule 38 (Modifiers -> Modifier .)
    LONG            reduce using rule 38 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 38 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 38 (Modifiers -> Modifier .)
    VOID            reduce using rule 38 (Modifiers -> Modifier .)


state 13

    (0) S' -> CompilationUnit .



state 14

    (37) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 29


state 15

    (21) ProgramFile -> ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 31
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 7

state 16

    (22) ProgramFile -> TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 22 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 17

    (34) TypeDeclaration -> ClassHeader . { FieldDeclarations }
    (35) TypeDeclaration -> ClassHeader . { }

    {               shift and go to state 33


state 18

    (44) ClassWord -> INTERFACE .

    IDENTIFIER      reduce using rule 44 (ClassWord -> INTERFACE .)


state 19

    (40) Modifier -> PUBLIC .

    CLASS           reduce using rule 40 (Modifier -> PUBLIC .)
    INTERFACE       reduce using rule 40 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 40 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 40 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 40 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 40 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 40 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 40 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 40 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 40 (Modifier -> PUBLIC .)
    INT             reduce using rule 40 (Modifier -> PUBLIC .)
    LONG            reduce using rule 40 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 40 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 40 (Modifier -> PUBLIC .)
    VOID            reduce using rule 40 (Modifier -> PUBLIC .)


state 20

    (17) SemiColons -> ; .

    ;               reduce using rule 17 (SemiColons -> ; .)
    IMPORT          reduce using rule 17 (SemiColons -> ; .)
    CLASS           reduce using rule 17 (SemiColons -> ; .)
    INTERFACE       reduce using rule 17 (SemiColons -> ; .)
    PUBLIC          reduce using rule 17 (SemiColons -> ; .)
    PRIVATE         reduce using rule 17 (SemiColons -> ; .)
    STATIC          reduce using rule 17 (SemiColons -> ; .)
    }               reduce using rule 17 (SemiColons -> ; .)
    IDENTIFIER      reduce using rule 17 (SemiColons -> ; .)
    {               reduce using rule 17 (SemiColons -> ; .)
    BOOLEAN         reduce using rule 17 (SemiColons -> ; .)
    CHAR            reduce using rule 17 (SemiColons -> ; .)
    BYTE            reduce using rule 17 (SemiColons -> ; .)
    SHORT           reduce using rule 17 (SemiColons -> ; .)
    INT             reduce using rule 17 (SemiColons -> ; .)
    LONG            reduce using rule 17 (SemiColons -> ; .)
    FLOAT           reduce using rule 17 (SemiColons -> ; .)
    DOUBLE          reduce using rule 17 (SemiColons -> ; .)
    VOID            reduce using rule 17 (SemiColons -> ; .)
    $end            reduce using rule 17 (SemiColons -> ; .)


state 21

    (27) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    CLASS           reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    INTERFACE       reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    ;               shift and go to state 34


state 22

    (30) ImportStatement -> IMPORT QualifiedName . SemiColons
    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 35
    ;               shift and go to state 20

    SemiColons                     shift and go to state 36

state 23

    (32) QualifiedName -> IDENTIFIER .

    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ]               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    :               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    )               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ,               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    }               reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 24

    (36) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 25

    (39) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INTERFACE       reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 39 (Modifiers -> Modifiers Modifier .)


state 26

    (23) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 38
    ;               shift and go to state 20

    SemiColons                     shift and go to state 39

state 27

    (19) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 40
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 28

    (20) ProgramFile -> PackageStatement TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 20 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 29

    (37) ClassHeader -> ClassWord IDENTIFIER .

    {               reduce using rule 37 (ClassHeader -> ClassWord IDENTIFIER .)


state 30

    (29) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    INTERFACE       reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)


state 31

    (21) ProgramFile -> ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 21 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 32

    (25) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 33

    (34) TypeDeclaration -> ClassHeader { . FieldDeclarations }
    (35) TypeDeclaration -> ClassHeader { . }
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (76) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (77) ConstructorDeclaration -> . ConstructorDeclarator Block
    (80) StaticInitializer -> . STATIC Block
    (81) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (78) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (79) ConstructorDeclarator -> . IDENTIFIER ( )
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 69
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    FieldDeclarations              shift and go to state 58
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 60
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 34

    (18) SemiColons -> SemiColons ; .

    ;               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IMPORT          reduce using rule 18 (SemiColons -> SemiColons ; .)
    CLASS           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INTERFACE       reduce using rule 18 (SemiColons -> SemiColons ; .)
    PUBLIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    PRIVATE         reduce using rule 18 (SemiColons -> SemiColons ; .)
    STATIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    }               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SemiColons ; .)
    {               reduce using rule 18 (SemiColons -> SemiColons ; .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SemiColons ; .)
    CHAR            reduce using rule 18 (SemiColons -> SemiColons ; .)
    BYTE            reduce using rule 18 (SemiColons -> SemiColons ; .)
    SHORT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INT             reduce using rule 18 (SemiColons -> SemiColons ; .)
    LONG            reduce using rule 18 (SemiColons -> SemiColons ; .)
    FLOAT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    DOUBLE          reduce using rule 18 (SemiColons -> SemiColons ; .)
    VOID            reduce using rule 18 (SemiColons -> SemiColons ; .)
    $end            reduce using rule 18 (SemiColons -> SemiColons ; .)


state 35

    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    *               shift and go to state 70
    IDENTIFIER      shift and go to state 71


state 36

    (30) ImportStatement -> IMPORT QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    INTERFACE       reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    ;               shift and go to state 34


state 37

    (36) ClassHeader -> Modifiers ClassWord IDENTIFIER .

    {               reduce using rule 36 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)


state 38

    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    IDENTIFIER      shift and go to state 71


state 39

    (23) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    INTERFACE       reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    ;               shift and go to state 34


state 40

    (19) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 19 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 41

    (11) PrimitiveType -> SHORT .

    .               reduce using rule 11 (PrimitiveType -> SHORT .)
    (               reduce using rule 11 (PrimitiveType -> SHORT .)
    [               reduce using rule 11 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> SHORT .)


state 42

    (51) FieldDeclaration -> ConstructorDeclaration .

    ;               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    }               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    {               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INTERFACE       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)


state 43

    (49) FieldDeclaration -> FieldVariableDeclaration . ;

    ;               shift and go to state 72


state 44

    (16) PrimitiveType -> VOID .

    .               reduce using rule 16 (PrimitiveType -> VOID .)
    (               reduce using rule 16 (PrimitiveType -> VOID .)
    [               reduce using rule 16 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> VOID .)


state 45

    (54) FieldDeclaration -> TypeDeclaration .

    ;               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    }               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    {               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INTERFACE       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)


state 46

    (4) TypeName -> PrimitiveType .

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    (               reduce using rule 4 (TypeName -> PrimitiveType .)


state 47

    (52) FieldDeclaration -> StaticInitializer .

    ;               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    }               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    {               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INTERFACE       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)


state 48

    (80) StaticInitializer -> STATIC . Block
    (42) Modifier -> STATIC .
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }

    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)
    {               shift and go to state 68

    Block                          shift and go to state 73

state 49

    (13) PrimitiveType -> LONG .

    .               reduce using rule 13 (PrimitiveType -> LONG .)
    (               reduce using rule 13 (PrimitiveType -> LONG .)
    [               reduce using rule 13 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> LONG .)


state 50

    (53) FieldDeclaration -> NonStaticInitializer .

    ;               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    }               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    {               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INTERFACE       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)


state 51

    (56) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (66) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (67) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (68) MethodDeclarator -> . DeclaratorName ( )
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    VariableDeclarators            shift and go to state 74
    DeclaratorName                 shift and go to state 75
    MethodDeclarator               shift and go to state 76
    VariableDeclarator             shift and go to state 78

state 52

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    [               reduce using rule 5 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    (               reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 38


state 53

    (2) TypeSpecifier -> TypeName .
    (3) TypeSpecifier -> TypeName . Dims
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (190) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 2 (TypeSpecifier -> TypeName .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 80
    Dims                           shift and go to state 81

state 54

    (78) ConstructorDeclarator -> IDENTIFIER . ( ParameterList )
    (79) ConstructorDeclarator -> IDENTIFIER . ( )
    (32) QualifiedName -> IDENTIFIER .

    (               shift and go to state 82
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 55

    (50) FieldDeclaration -> MethodDeclaration .

    ;               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    }               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    {               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INTERFACE       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)


state 56

    (9) PrimitiveType -> CHAR .

    .               reduce using rule 9 (PrimitiveType -> CHAR .)
    (               reduce using rule 9 (PrimitiveType -> CHAR .)
    [               reduce using rule 9 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> CHAR .)


state 57

    (55) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (76) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Block
    (39) Modifiers -> Modifiers . Modifier
    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (78) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (79) ConstructorDeclarator -> . IDENTIFIER ( )
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 54
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    QualifiedName                  shift and go to state 52
    ConstructorDeclarator          shift and go to state 84
    PrimitiveType                  shift and go to state 46
    ClassWord                      shift and go to state 24
    TypeName                       shift and go to state 53
    Modifier                       shift and go to state 25
    TypeSpecifier                  shift and go to state 83

state 58

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations . }
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (76) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (77) ConstructorDeclaration -> . ConstructorDeclarator Block
    (80) StaticInitializer -> . STATIC Block
    (81) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (78) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (79) ConstructorDeclarator -> . IDENTIFIER ( )
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 86
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 85
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 59

    (81) NonStaticInitializer -> Block .

    ;               reduce using rule 81 (NonStaticInitializer -> Block .)
    }               reduce using rule 81 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 81 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 81 (NonStaticInitializer -> Block .)
    {               reduce using rule 81 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 81 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 81 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 81 (NonStaticInitializer -> Block .)
    INTERFACE       reduce using rule 81 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 81 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 81 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 81 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 81 (NonStaticInitializer -> Block .)
    INT             reduce using rule 81 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 81 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 81 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 81 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 81 (NonStaticInitializer -> Block .)


state 60

    (45) FieldDeclarations -> FieldDeclarationOptSemi .

    }               reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    {               reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 61

    (77) ConstructorDeclaration -> ConstructorDeclarator . Block
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 87

state 62

    (12) PrimitiveType -> INT .

    .               reduce using rule 12 (PrimitiveType -> INT .)
    (               reduce using rule 12 (PrimitiveType -> INT .)
    [               reduce using rule 12 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> INT .)


state 63

    (15) PrimitiveType -> DOUBLE .

    .               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    (               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    [               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> DOUBLE .)


state 64

    (14) PrimitiveType -> FLOAT .

    .               reduce using rule 14 (PrimitiveType -> FLOAT .)
    (               reduce using rule 14 (PrimitiveType -> FLOAT .)
    [               reduce using rule 14 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> FLOAT .)


state 65

    (8) PrimitiveType -> BOOLEAN .

    .               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    (               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    [               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 8 (PrimitiveType -> BOOLEAN .)


state 66

    (10) PrimitiveType -> BYTE .

    .               reduce using rule 10 (PrimitiveType -> BYTE .)
    (               reduce using rule 10 (PrimitiveType -> BYTE .)
    [               reduce using rule 10 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> BYTE .)


state 67

    (47) FieldDeclarationOptSemi -> FieldDeclaration .
    (48) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    }               reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    {               reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INTERFACE       reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 88

state 68

    (84) Block -> { . LocalVariableDeclarationsAndStatements }
    (85) Block -> { . }
    (86) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (87) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (88) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (89) LocalVariableDeclarationOrStatement -> . Statement
    (90) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (91) Statement -> . EmptyStatement M_instr
    (92) Statement -> . LabelStatement M_instr
    (93) Statement -> . ExpressionStatement ; M_instr
    (94) Statement -> . SelectionStatement M_instr
    (95) Statement -> . IterationStatement M_instr
    (96) Statement -> . JumpStatement M_instr
    (97) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (99) EmptyStatement -> . ;
    (100) LabelStatement -> . IDENTIFIER :
    (101) LabelStatement -> . Marker_case CASE ConstantExpression :
    (102) LabelStatement -> . DEFAULT :
    (104) ExpressionStatement -> . Expression
    (105) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (107) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (111) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (112) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (103) Marker_case -> .
    (239) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    }               shift and go to state 167
    ;               shift and go to state 111
    IDENTIFIER      shift and go to state 96
    DEFAULT         shift and go to state 129
    IF              shift and go to state 164
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 131
    DO              shift and go to state 150
    FOR             shift and go to state 114
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 123
    RETURN          shift and go to state 103
    THROW           shift and go to state 168
    {               shift and go to state 68
    CASE            reduce using rule 103 (Marker_case -> .)
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132

    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    LabelStatement                 shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    ExpressionStatement            shift and go to state 90
    JumpStatement                  shift and go to state 130
    RealPostfixExpression          shift and go to state 104
    Statement                      shift and go to state 92
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    TypeSpecifier                  shift and go to state 134
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    QualifiedName                  shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    LogicalUnaryOperator           shift and go to state 160
    TypeName                       shift and go to state 53
    ConditionalOrExpression        shift and go to state 137
    LocalVariableDeclarationStatement shift and go to state 156
    ShiftExpression                shift and go to state 157
    SelectionStatement             shift and go to state 112
    LocalVariableDeclarationsAndStatements shift and go to state 158
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    PrimitiveType                  shift and go to state 91
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Char_LIT                       shift and go to state 161
    UnaryExpression                shift and go to state 142
    Marker_case                    shift and go to state 97
    Expression                     shift and go to state 139
    Block                          shift and go to state 117
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    LocalVariableDeclarationOrStatement shift and go to state 124
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    EmptyStatement                 shift and go to state 101
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    IterationStatement             shift and go to state 169
    Integer_LIT                    shift and go to state 95

state 69

    (35) TypeDeclaration -> ClassHeader { } .

    ;               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    CLASS           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    INTERFACE       reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    PUBLIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    PRIVATE         reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    STATIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    $end            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    }               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    IDENTIFIER      reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    {               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    BOOLEAN         reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    CHAR            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    BYTE            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    SHORT           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    INT             reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    LONG            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    FLOAT           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    DOUBLE          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    VOID            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)


state 70

    (31) ImportStatement -> IMPORT QualifiedName . * . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    ;               shift and go to state 20

    SemiColons                     shift and go to state 170

state 71

    (33) QualifiedName -> QualifiedName . IDENTIFIER .

    .               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    [               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ;               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    =               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_EQ          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    *               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    /               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    %               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    +               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    -               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_SOME        reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    <               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    >               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ?               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ]               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    (               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    :               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    )               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ,               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    }               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)


state 72

    (49) FieldDeclaration -> FieldVariableDeclaration ; .

    ;               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    }               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    STATIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    IDENTIFIER      reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    {               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PUBLIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PRIVATE         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CLASS           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INTERFACE       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BOOLEAN         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CHAR            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BYTE            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    SHORT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INT             reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    LONG            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    FLOAT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    DOUBLE          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    VOID            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)


state 73

    (80) StaticInitializer -> STATIC Block .

    ;               reduce using rule 80 (StaticInitializer -> STATIC Block .)
    }               reduce using rule 80 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 80 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 80 (StaticInitializer -> STATIC Block .)
    {               reduce using rule 80 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 80 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 80 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 80 (StaticInitializer -> STATIC Block .)
    INTERFACE       reduce using rule 80 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 80 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 80 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 80 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 80 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 80 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 80 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 80 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 80 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 80 (StaticInitializer -> STATIC Block .)


state 74

    (56) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 56 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 171


state 75

    (67) MethodDeclarator -> DeclaratorName . ( ParameterList )
    (68) MethodDeclarator -> DeclaratorName . ( )
    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (190) OP_DIM -> . [ ]

    (               shift and go to state 172
    ,               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    ;               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 173
    [               shift and go to state 79

    OP_DIM                         shift and go to state 174

state 76

    (66) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (74) MethodBody -> . Block
    (75) MethodBody -> . ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }

    ;               shift and go to state 176
    {               shift and go to state 68

    Block                          shift and go to state 177
    MethodBody                     shift and go to state 175

state 77

    (72) DeclaratorName -> IDENTIFIER .

    (               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    =               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    [               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    ,               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    ;               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    )               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)


state 78

    (57) VariableDeclarators -> VariableDeclarator .

    ,               reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)
    ;               reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)


state 79

    (190) OP_DIM -> [ . ]

    ]               shift and go to state 178


state 80

    (188) Dims -> OP_DIM .

    [               reduce using rule 188 (Dims -> OP_DIM .)
    {               reduce using rule 188 (Dims -> OP_DIM .)
    .               reduce using rule 188 (Dims -> OP_DIM .)
    OPT_INC_DEC     reduce using rule 188 (Dims -> OP_DIM .)
    =               reduce using rule 188 (Dims -> OP_DIM .)
    OPT_EQ          reduce using rule 188 (Dims -> OP_DIM .)
    *               reduce using rule 188 (Dims -> OP_DIM .)
    /               reduce using rule 188 (Dims -> OP_DIM .)
    %               reduce using rule 188 (Dims -> OP_DIM .)
    +               reduce using rule 188 (Dims -> OP_DIM .)
    -               reduce using rule 188 (Dims -> OP_DIM .)
    OPT_SOME        reduce using rule 188 (Dims -> OP_DIM .)
    <               reduce using rule 188 (Dims -> OP_DIM .)
    >               reduce using rule 188 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 188 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 188 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 188 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 188 (Dims -> OP_DIM .)
    &               reduce using rule 188 (Dims -> OP_DIM .)
    ^               reduce using rule 188 (Dims -> OP_DIM .)
    |               reduce using rule 188 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 188 (Dims -> OP_DIM .)
    ?               reduce using rule 188 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 188 (Dims -> OP_DIM .)
    ;               reduce using rule 188 (Dims -> OP_DIM .)
    )               reduce using rule 188 (Dims -> OP_DIM .)
    ,               reduce using rule 188 (Dims -> OP_DIM .)
    :               reduce using rule 188 (Dims -> OP_DIM .)
    }               reduce using rule 188 (Dims -> OP_DIM .)
    ]               reduce using rule 188 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 188 (Dims -> OP_DIM .)


state 81

    (3) TypeSpecifier -> TypeName Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 179

state 82

    (78) ConstructorDeclarator -> IDENTIFIER ( . ParameterList )
    (79) ConstructorDeclarator -> IDENTIFIER ( . )
    (69) ParameterList -> . Parameter
    (70) ParameterList -> . ParameterList , Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 182
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 183
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 180
    TypeSpecifier                  shift and go to state 181

state 83

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (65) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (67) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (68) MethodDeclarator -> . DeclaratorName ( )
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    VariableDeclarators            shift and go to state 184
    DeclaratorName                 shift and go to state 75
    MethodDeclarator               shift and go to state 185
    VariableDeclarator             shift and go to state 78

state 84

    (76) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Block
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 186

state 85

    (46) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    }               reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    {               reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 86

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations } .

    ;               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CLASS           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INTERFACE       reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PUBLIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PRIVATE         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    STATIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    $end            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    }               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    IDENTIFIER      reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    {               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BOOLEAN         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CHAR            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BYTE            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    SHORT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INT             reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    LONG            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    FLOAT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    DOUBLE          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    VOID            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)


state 87

    (77) ConstructorDeclaration -> ConstructorDeclarator Block .

    ;               reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    }               reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    STATIC          reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    {               reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CLASS           reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CHAR            reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BYTE            reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SHORT           reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INT             reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LONG            reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FLOAT           reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOID            reduce using rule 77 (ConstructorDeclaration -> ConstructorDeclarator Block .)


state 88

    (48) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    }               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    {               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INTERFACE       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    ;               shift and go to state 34


state 89

    (145) ComplexPrimary -> Bool_LIT .

    [               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    .               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OPT_INC_DEC     reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    =               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OPT_EQ          reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    *               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    /               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    %               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    +               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    -               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OPT_SOME        reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    <               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    >               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OP_LE           reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OP_GE           reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OP_EQ           reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OP_NE           reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    &               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    ^               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    |               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OP_LAND         reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    ?               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    OP_LOR          reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    ,               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    ;               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    )               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    :               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    }               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)
    ]               reduce using rule 145 (ComplexPrimary -> Bool_LIT .)


state 90

    (93) Statement -> ExpressionStatement . ; M_instr

    ;               shift and go to state 187


state 91

    (4) TypeName -> PrimitiveType .
    (161) FieldAccess -> PrimitiveType . . CLASS

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    .               shift and go to state 188


state 92

    (89) LocalVariableDeclarationOrStatement -> Statement .

    }               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    ;               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    SWITCH          reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    CONTINUE        reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    THROW           reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    {               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    OPT_INC_DEC     reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    +               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    -               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    !               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    (               reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    INT_LITERAL     reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT_LITERAL   reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR_LITERAL    reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    STRING_LITERAL  reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOL            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 89 (LocalVariableDeclarationOrStatement -> Statement .)


state 93

    (223) ExclusiveOrExpression -> AndExpression .
    (222) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    ?               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    ,               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    )               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    ;               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    :               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    }               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    ]               reduce using rule 223 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 189


state 94

    (146) ComplexPrimary -> ( . Expression )
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 191
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 95

    (141) ComplexPrimary -> Integer_LIT .

    [               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    .               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OPT_INC_DEC     reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    =               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OPT_EQ          reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    *               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    /               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    %               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    +               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    -               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OPT_SOME        reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    <               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    >               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OP_LE           reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OP_GE           reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OP_EQ           reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OP_NE           reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    &               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    ^               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    |               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OP_LAND         reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    ?               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    OP_LOR          reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    ,               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    ;               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    )               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    :               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    }               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)
    ]               reduce using rule 141 (ComplexPrimary -> Integer_LIT .)


state 96

    (100) LabelStatement -> IDENTIFIER . :
    (32) QualifiedName -> IDENTIFIER .

    :               shift and go to state 193
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 97

    (101) LabelStatement -> Marker_case . CASE ConstantExpression :

    CASE            shift and go to state 194


state 98

    (167) SpecialName -> THIS .

    .               reduce using rule 167 (SpecialName -> THIS .)
    OPT_INC_DEC     reduce using rule 167 (SpecialName -> THIS .)
    *               reduce using rule 167 (SpecialName -> THIS .)
    /               reduce using rule 167 (SpecialName -> THIS .)
    %               reduce using rule 167 (SpecialName -> THIS .)
    +               reduce using rule 167 (SpecialName -> THIS .)
    -               reduce using rule 167 (SpecialName -> THIS .)
    OPT_SOME        reduce using rule 167 (SpecialName -> THIS .)
    <               reduce using rule 167 (SpecialName -> THIS .)
    >               reduce using rule 167 (SpecialName -> THIS .)
    OP_LE           reduce using rule 167 (SpecialName -> THIS .)
    OP_GE           reduce using rule 167 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 167 (SpecialName -> THIS .)
    OP_NE           reduce using rule 167 (SpecialName -> THIS .)
    &               reduce using rule 167 (SpecialName -> THIS .)
    ^               reduce using rule 167 (SpecialName -> THIS .)
    |               reduce using rule 167 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 167 (SpecialName -> THIS .)
    ?               reduce using rule 167 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 167 (SpecialName -> THIS .)
    ;               reduce using rule 167 (SpecialName -> THIS .)
    )               reduce using rule 167 (SpecialName -> THIS .)
    ,               reduce using rule 167 (SpecialName -> THIS .)
    :               reduce using rule 167 (SpecialName -> THIS .)
    }               reduce using rule 167 (SpecialName -> THIS .)
    ]               reduce using rule 167 (SpecialName -> THIS .)
    (               reduce using rule 167 (SpecialName -> THIS .)
    =               reduce using rule 167 (SpecialName -> THIS .)
    OPT_EQ          reduce using rule 167 (SpecialName -> THIS .)


state 99

    (152) Char_LIT -> CHAR_LITERAL .

    [               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    .               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OPT_INC_DEC     reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    *               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    /               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    %               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    +               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    -               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OPT_SOME        reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    <               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    >               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OP_LE           reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OP_GE           reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OP_EQ           reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OP_NE           reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    &               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    ^               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    |               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OP_LAND         reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    ?               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OP_LOR          reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    ;               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    )               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    ,               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    :               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    }               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    ]               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    =               reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)
    OPT_EQ          reduce using rule 152 (Char_LIT -> CHAR_LITERAL .)


state 100

    (229) ConditionalOrExpression -> ConditionalAndExpression .
    (228) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND M_OP InclusiveOrExpression

    ?               reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LOR          reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    ;               reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    )               reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    }               reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    ,               reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    :               reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    ]               reduce using rule 229 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 195


state 101

    (91) Statement -> EmptyStatement . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)
    ELSE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 196

state 102

    (92) Statement -> LabelStatement . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)
    ELSE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 197

state 103

    (127) JumpStatement -> RETURN . Expression ;
    (128) JumpStatement -> RETURN . ;
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 198
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 199
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 104

    (192) PostfixExpression -> RealPostfixExpression .
    (158) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    =               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OPT_EQ          reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    *               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    /               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    %               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    +               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    -               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OPT_SOME        reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    <               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    >               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ?               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    }               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ,               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ;               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    )               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    :               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ]               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    .               shift and go to state 200


state 105

    (195) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 201
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 106

    (221) AndExpression -> EqualityExpression .
    (219) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (220) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 221 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 221 (AndExpression -> EqualityExpression .)
    |               reduce using rule 221 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 221 (AndExpression -> EqualityExpression .)
    ?               reduce using rule 221 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 221 (AndExpression -> EqualityExpression .)
    )               reduce using rule 221 (AndExpression -> EqualityExpression .)
    ,               reduce using rule 221 (AndExpression -> EqualityExpression .)
    }               reduce using rule 221 (AndExpression -> EqualityExpression .)
    ;               reduce using rule 221 (AndExpression -> EqualityExpression .)
    :               reduce using rule 221 (AndExpression -> EqualityExpression .)
    ]               reduce using rule 221 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 204
    OP_NE           shift and go to state 203


state 107

    (140) ComplexPrimary -> ComplexPrimaryNoParenthesis .
    (164) MethodAccess -> ComplexPrimaryNoParenthesis .

    [               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    .               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_INC_DEC     reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    =               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_EQ          reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    *               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    /               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    %               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    +               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    -               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_SOME        reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    <               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    >               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ?               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ,               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ;               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    )               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    :               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    }               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ]               reduce using rule 140 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    (               reduce using rule 164 (MethodAccess -> ComplexPrimaryNoParenthesis .)


state 108

    (208) AdditiveExpression -> MultiplicativeExpression .
    (205) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (206) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (207) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    -               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    OPT_SOME        reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    <               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    >               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    ?               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    ;               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    )               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    ,               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    :               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    }               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    ]               reduce using rule 208 (AdditiveExpression -> MultiplicativeExpression .)
    *               shift and go to state 205
    /               shift and go to state 207
    %               shift and go to state 206


state 109

    (201) ArithmeticUnaryOperator -> + .

    OPT_INC_DEC     reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    +               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    -               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    ~               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    !               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    IDENTIFIER      reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    THIS            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    SUPER           reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    NULL            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    (               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    INT_LITERAL     reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    FLOAT_LITERAL   reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    CHAR_LITERAL    reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    STRING_LITERAL  reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    BOOL            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    NEW             reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    BOOLEAN         reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    CHAR            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    BYTE            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    SHORT           reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    INT             reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    LONG            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    FLOAT           reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    DOUBLE          reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    VOID            reduce using rule 201 (ArithmeticUnaryOperator -> + .)


state 110

    (149) ComplexPrimaryNoParenthesis -> MethodCall .

    [               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    .               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_INC_DEC     reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    *               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    /               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    %               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    +               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    -               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_SOME        reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    <               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    >               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ?               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ;               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    )               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ,               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    :               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    }               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ]               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    (               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    =               reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_EQ          reduce using rule 149 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 111

    (99) EmptyStatement -> ; .

    }               reduce using rule 99 (EmptyStatement -> ; .)
    ;               reduce using rule 99 (EmptyStatement -> ; .)
    IDENTIFIER      reduce using rule 99 (EmptyStatement -> ; .)
    DEFAULT         reduce using rule 99 (EmptyStatement -> ; .)
    IF              reduce using rule 99 (EmptyStatement -> ; .)
    SWITCH          reduce using rule 99 (EmptyStatement -> ; .)
    WHILE           reduce using rule 99 (EmptyStatement -> ; .)
    DO              reduce using rule 99 (EmptyStatement -> ; .)
    FOR             reduce using rule 99 (EmptyStatement -> ; .)
    BREAK           reduce using rule 99 (EmptyStatement -> ; .)
    CONTINUE        reduce using rule 99 (EmptyStatement -> ; .)
    RETURN          reduce using rule 99 (EmptyStatement -> ; .)
    THROW           reduce using rule 99 (EmptyStatement -> ; .)
    {               reduce using rule 99 (EmptyStatement -> ; .)
    BOOLEAN         reduce using rule 99 (EmptyStatement -> ; .)
    CHAR            reduce using rule 99 (EmptyStatement -> ; .)
    BYTE            reduce using rule 99 (EmptyStatement -> ; .)
    SHORT           reduce using rule 99 (EmptyStatement -> ; .)
    INT             reduce using rule 99 (EmptyStatement -> ; .)
    LONG            reduce using rule 99 (EmptyStatement -> ; .)
    FLOAT           reduce using rule 99 (EmptyStatement -> ; .)
    DOUBLE          reduce using rule 99 (EmptyStatement -> ; .)
    VOID            reduce using rule 99 (EmptyStatement -> ; .)
    OPT_INC_DEC     reduce using rule 99 (EmptyStatement -> ; .)
    +               reduce using rule 99 (EmptyStatement -> ; .)
    -               reduce using rule 99 (EmptyStatement -> ; .)
    ~               reduce using rule 99 (EmptyStatement -> ; .)
    !               reduce using rule 99 (EmptyStatement -> ; .)
    THIS            reduce using rule 99 (EmptyStatement -> ; .)
    SUPER           reduce using rule 99 (EmptyStatement -> ; .)
    NULL            reduce using rule 99 (EmptyStatement -> ; .)
    (               reduce using rule 99 (EmptyStatement -> ; .)
    INT_LITERAL     reduce using rule 99 (EmptyStatement -> ; .)
    FLOAT_LITERAL   reduce using rule 99 (EmptyStatement -> ; .)
    CHAR_LITERAL    reduce using rule 99 (EmptyStatement -> ; .)
    STRING_LITERAL  reduce using rule 99 (EmptyStatement -> ; .)
    BOOL            reduce using rule 99 (EmptyStatement -> ; .)
    NEW             reduce using rule 99 (EmptyStatement -> ; .)
    CASE            reduce using rule 99 (EmptyStatement -> ; .)
    ELSE            reduce using rule 99 (EmptyStatement -> ; .)


state 112

    (94) Statement -> SelectionStatement . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)
    ELSE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 208

state 113

    (239) Expression -> AssignmentExpression .

    ;               reduce using rule 239 (Expression -> AssignmentExpression .)
    )               reduce using rule 239 (Expression -> AssignmentExpression .)
    ]               reduce using rule 239 (Expression -> AssignmentExpression .)
    ,               reduce using rule 239 (Expression -> AssignmentExpression .)
    }               reduce using rule 239 (Expression -> AssignmentExpression .)
    :               reduce using rule 239 (Expression -> AssignmentExpression .)


state 114

    (113) IterationStatement -> FOR . ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement

    (               shift and go to state 209


state 115

    (194) UnaryExpression -> OPT_INC_DEC . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 210
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 116

    (147) ComplexPrimaryNoParenthesis -> ArrayAccess .

    [               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    .               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_INC_DEC     reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    *               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    /               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    %               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    +               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    -               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_SOME        reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    <               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    >               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ?               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ;               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    )               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ,               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    :               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    }               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ]               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    (               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    =               reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_EQ          reduce using rule 147 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 117

    (97) Statement -> Block . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)
    ELSE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 211

state 118

    (174) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (176) PlainNewAllocationExpression -> ArrayAllocationExpression . { }
    (178) PlainNewAllocationExpression -> ArrayAllocationExpression . { ArrayInitializers }

    .               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_INC_DEC     reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    =               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_EQ          reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    *               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    /               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    %               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    +               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    -               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_SOME        reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    <               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    >               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ?               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    }               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ,               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    )               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ;               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    :               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ]               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    {               shift and go to state 212


state 119

    (162) MethodCall -> MethodAccess . ( ArgumentList )
    (163) MethodCall -> MethodAccess . ( )

    (               shift and go to state 213


state 120

    (225) InclusiveOrExpression -> ExclusiveOrExpression .
    (224) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ?               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    )               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ;               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ,               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    :               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    }               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ]               reduce using rule 225 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 214


state 121

    (218) EqualityExpression -> RelationalExpression .
    (214) RelationalExpression -> RelationalExpression . < ShiftExpression
    (215) RelationalExpression -> RelationalExpression . > ShiftExpression
    (216) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (217) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    ?               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    ;               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    )               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    ,               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    }               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    ]               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    :               reduce using rule 218 (EqualityExpression -> RelationalExpression .)
    <               shift and go to state 215
    >               shift and go to state 218
    OP_LE           shift and go to state 216
    OP_GE           shift and go to state 217


state 122

    (172) NewAllocationExpression -> PlainNewAllocationExpression .

    .               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    *               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    /               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    %               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    +               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    -               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    <               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    >               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ?               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ;               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    )               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ,               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    :               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    }               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ]               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    =               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 123

    (125) JumpStatement -> CONTINUE . IDENTIFIER ;
    (126) JumpStatement -> CONTINUE . ;

    IDENTIFIER      shift and go to state 219
    ;               shift and go to state 220


state 124

    (86) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    }               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    {               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    +               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    -               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    !               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    (               reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 86 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 125

    (137) NotJustName -> SpecialName .
    (165) MethodAccess -> SpecialName .

    .               reduce using rule 137 (NotJustName -> SpecialName .)
    OPT_INC_DEC     reduce using rule 137 (NotJustName -> SpecialName .)
    =               reduce using rule 137 (NotJustName -> SpecialName .)
    OPT_EQ          reduce using rule 137 (NotJustName -> SpecialName .)
    *               reduce using rule 137 (NotJustName -> SpecialName .)
    /               reduce using rule 137 (NotJustName -> SpecialName .)
    %               reduce using rule 137 (NotJustName -> SpecialName .)
    +               reduce using rule 137 (NotJustName -> SpecialName .)
    -               reduce using rule 137 (NotJustName -> SpecialName .)
    OPT_SOME        reduce using rule 137 (NotJustName -> SpecialName .)
    <               reduce using rule 137 (NotJustName -> SpecialName .)
    >               reduce using rule 137 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 137 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 137 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 137 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 137 (NotJustName -> SpecialName .)
    &               reduce using rule 137 (NotJustName -> SpecialName .)
    ^               reduce using rule 137 (NotJustName -> SpecialName .)
    |               reduce using rule 137 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 137 (NotJustName -> SpecialName .)
    ?               reduce using rule 137 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 137 (NotJustName -> SpecialName .)
    ;               reduce using rule 137 (NotJustName -> SpecialName .)
    )               reduce using rule 137 (NotJustName -> SpecialName .)
    ,               reduce using rule 137 (NotJustName -> SpecialName .)
    :               reduce using rule 137 (NotJustName -> SpecialName .)
    }               reduce using rule 137 (NotJustName -> SpecialName .)
    ]               reduce using rule 137 (NotJustName -> SpecialName .)
    (               reduce using rule 165 (MethodAccess -> SpecialName .)


state 126

    (139) NotJustName -> ComplexPrimary .
    (156) ArrayAccess -> ComplexPrimary . [ Expression ]

    .               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OPT_INC_DEC     reduce using rule 139 (NotJustName -> ComplexPrimary .)
    =               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OPT_EQ          reduce using rule 139 (NotJustName -> ComplexPrimary .)
    *               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    /               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    %               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    +               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    -               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OPT_SOME        reduce using rule 139 (NotJustName -> ComplexPrimary .)
    <               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    >               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 139 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 139 (NotJustName -> ComplexPrimary .)
    ?               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 139 (NotJustName -> ComplexPrimary .)
    ;               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    )               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    ,               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    :               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    }               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    ]               reduce using rule 139 (NotJustName -> ComplexPrimary .)
    [               shift and go to state 221


state 127

    (197) LogicalUnaryExpression -> PostfixExpression .
    (193) RealPostfixExpression -> PostfixExpression . OPT_INC_DEC

    *               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    /               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    %               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    +               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    -               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_SOME        reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    <               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    >               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ?               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ;               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    )               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ,               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    :               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    }               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ]               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    =               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_EQ          reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_INC_DEC     shift and go to state 222


state 128

    (175) PlainNewAllocationExpression -> ClassAllocationExpression .
    (177) PlainNewAllocationExpression -> ClassAllocationExpression . { }
    (179) PlainNewAllocationExpression -> ClassAllocationExpression . { FieldDeclarations }

    .               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_INC_DEC     reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    =               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_EQ          reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    *               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    /               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    %               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    +               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    -               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_SOME        reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    <               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    >               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ?               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    }               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ,               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    )               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ;               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    :               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ]               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    {               shift and go to state 223


state 129

    (102) LabelStatement -> DEFAULT . :

    :               shift and go to state 224


state 130

    (96) Statement -> JumpStatement . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)
    ELSE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 225

state 131

    (111) IterationStatement -> WHILE . M_instr_branch ( Expression ) M_instr_branch Statement
    (110) M_instr_branch -> .

    (               reduce using rule 110 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 226

state 132

    (182) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (184) ArrayAllocationExpression -> NEW . TypeName Dims
    (180) ClassAllocationExpression -> NEW . TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> NEW . TypeName ( )
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 227

state 133

    (151) Float_LIT -> FLOAT_LITERAL .

    [               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    .               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OPT_INC_DEC     reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    *               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    /               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    %               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    +               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    -               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OPT_SOME        reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    <               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    >               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OP_LE           reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OP_GE           reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OP_EQ           reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OP_NE           reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    &               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    ^               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    |               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OP_LAND         reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    ?               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OP_LOR          reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    ;               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    )               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    ,               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    :               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    }               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    ]               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    =               reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)
    OPT_EQ          reduce using rule 151 (Float_LIT -> FLOAT_LITERAL .)


state 134

    (90) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators ; M_instr
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    VariableDeclarators            shift and go to state 228
    DeclaratorName                 shift and go to state 229
    VariableDeclarator             shift and go to state 78

state 135

    (191) PostfixExpression -> PrimaryExpression .

    OPT_INC_DEC     reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    =               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OPT_EQ          reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    *               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    /               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    %               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    +               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    -               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OPT_SOME        reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    <               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    >               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ?               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    }               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ,               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ;               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    )               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    :               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ]               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)


state 136

    (107) SelectionStatement -> SWITCH . ( Expression Mark_switch ) Block

    (               shift and go to state 230


state 137

    (232) ConditionalExpression -> ConditionalOrExpression .
    (233) ConditionalExpression -> ConditionalOrExpression . ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (230) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR M_OP ConditionalAndExpression

    ;               reduce using rule 232 (ConditionalExpression -> ConditionalOrExpression .)
    }               reduce using rule 232 (ConditionalExpression -> ConditionalOrExpression .)
    ,               reduce using rule 232 (ConditionalExpression -> ConditionalOrExpression .)
    )               reduce using rule 232 (ConditionalExpression -> ConditionalOrExpression .)
    ]               reduce using rule 232 (ConditionalExpression -> ConditionalOrExpression .)
    :               reduce using rule 232 (ConditionalExpression -> ConditionalOrExpression .)
    ?               shift and go to state 232
    OP_LOR          shift and go to state 231


state 138

    (138) NotJustName -> NewAllocationExpression .

    .               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    =               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OPT_EQ          reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    *               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    /               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    %               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    +               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    -               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OPT_SOME        reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    <               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    >               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    ?               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    ;               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    )               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    ,               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    :               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    }               reduce using rule 138 (NotJustName -> NewAllocationExpression .)
    ]               reduce using rule 138 (NotJustName -> NewAllocationExpression .)


state 139

    (104) ExpressionStatement -> Expression .

    ;               reduce using rule 104 (ExpressionStatement -> Expression .)
    ,               reduce using rule 104 (ExpressionStatement -> Expression .)
    )               reduce using rule 104 (ExpressionStatement -> Expression .)


state 140

    (211) ShiftExpression -> AdditiveExpression .
    (209) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (210) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    <               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    >               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    ?               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    )               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    ,               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    ]               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    ;               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    :               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    }               reduce using rule 211 (ShiftExpression -> AdditiveExpression .)
    +               shift and go to state 233
    -               shift and go to state 234


state 141

    (235) AssignmentExpression -> ConditionalExpression .

    )               reduce using rule 235 (AssignmentExpression -> ConditionalExpression .)
    }               reduce using rule 235 (AssignmentExpression -> ConditionalExpression .)
    ,               reduce using rule 235 (AssignmentExpression -> ConditionalExpression .)
    ;               reduce using rule 235 (AssignmentExpression -> ConditionalExpression .)
    ]               reduce using rule 235 (AssignmentExpression -> ConditionalExpression .)
    :               reduce using rule 235 (AssignmentExpression -> ConditionalExpression .)


state 142

    (236) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (203) CastExpression -> UnaryExpression .
    (237) AssignmentOperator -> . =
    (238) AssignmentOperator -> . OPT_EQ

    *               reduce using rule 203 (CastExpression -> UnaryExpression .)
    /               reduce using rule 203 (CastExpression -> UnaryExpression .)
    %               reduce using rule 203 (CastExpression -> UnaryExpression .)
    +               reduce using rule 203 (CastExpression -> UnaryExpression .)
    -               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 203 (CastExpression -> UnaryExpression .)
    <               reduce using rule 203 (CastExpression -> UnaryExpression .)
    >               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    &               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 203 (CastExpression -> UnaryExpression .)
    |               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 203 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 203 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 203 (CastExpression -> UnaryExpression .)
    )               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 203 (CastExpression -> UnaryExpression .)
    :               reduce using rule 203 (CastExpression -> UnaryExpression .)
    }               reduce using rule 203 (CastExpression -> UnaryExpression .)
    =               shift and go to state 237
    OPT_EQ          shift and go to state 236

    AssignmentOperator             shift and go to state 235

state 143

    (227) ConditionalAndExpression -> InclusiveOrExpression .
    (226) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    ?               reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    )               reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    :               reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    ;               reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    ,               reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    }               reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    ]               reduce using rule 227 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 238


state 144

    (142) ComplexPrimary -> Float_LIT .

    [               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    .               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OPT_INC_DEC     reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    =               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OPT_EQ          reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    *               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    /               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    %               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    +               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    -               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OPT_SOME        reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    <               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    >               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OP_LE           reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OP_GE           reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OP_EQ           reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OP_NE           reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    &               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    ^               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    |               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OP_LAND         reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    ?               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    OP_LOR          reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    ,               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    ;               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    )               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    :               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    }               reduce using rule 142 (ComplexPrimary -> Float_LIT .)
    ]               reduce using rule 142 (ComplexPrimary -> Float_LIT .)


state 145

    (123) JumpStatement -> BREAK . IDENTIFIER ;
    (124) JumpStatement -> BREAK . ;

    IDENTIFIER      shift and go to state 240
    ;               shift and go to state 239


state 146

    (154) Bool_LIT -> BOOL .

    [               reduce using rule 154 (Bool_LIT -> BOOL .)
    .               reduce using rule 154 (Bool_LIT -> BOOL .)
    OPT_INC_DEC     reduce using rule 154 (Bool_LIT -> BOOL .)
    =               reduce using rule 154 (Bool_LIT -> BOOL .)
    OPT_EQ          reduce using rule 154 (Bool_LIT -> BOOL .)
    *               reduce using rule 154 (Bool_LIT -> BOOL .)
    /               reduce using rule 154 (Bool_LIT -> BOOL .)
    %               reduce using rule 154 (Bool_LIT -> BOOL .)
    +               reduce using rule 154 (Bool_LIT -> BOOL .)
    -               reduce using rule 154 (Bool_LIT -> BOOL .)
    OPT_SOME        reduce using rule 154 (Bool_LIT -> BOOL .)
    <               reduce using rule 154 (Bool_LIT -> BOOL .)
    >               reduce using rule 154 (Bool_LIT -> BOOL .)
    OP_LE           reduce using rule 154 (Bool_LIT -> BOOL .)
    OP_GE           reduce using rule 154 (Bool_LIT -> BOOL .)
    OP_EQ           reduce using rule 154 (Bool_LIT -> BOOL .)
    OP_NE           reduce using rule 154 (Bool_LIT -> BOOL .)
    &               reduce using rule 154 (Bool_LIT -> BOOL .)
    ^               reduce using rule 154 (Bool_LIT -> BOOL .)
    |               reduce using rule 154 (Bool_LIT -> BOOL .)
    OP_LAND         reduce using rule 154 (Bool_LIT -> BOOL .)
    ?               reduce using rule 154 (Bool_LIT -> BOOL .)
    OP_LOR          reduce using rule 154 (Bool_LIT -> BOOL .)
    )               reduce using rule 154 (Bool_LIT -> BOOL .)
    ;               reduce using rule 154 (Bool_LIT -> BOOL .)
    ,               reduce using rule 154 (Bool_LIT -> BOOL .)
    :               reduce using rule 154 (Bool_LIT -> BOOL .)
    }               reduce using rule 154 (Bool_LIT -> BOOL .)
    ]               reduce using rule 154 (Bool_LIT -> BOOL .)


state 147

    (148) ComplexPrimaryNoParenthesis -> FieldAccess .

    [               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    .               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_INC_DEC     reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    *               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    /               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    %               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    +               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    -               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_SOME        reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    <               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    >               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ?               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ;               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    )               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ,               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    :               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    }               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ]               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    (               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    =               reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_EQ          reduce using rule 148 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 148

    (150) Integer_LIT -> INT_LITERAL .

    [               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    .               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OPT_INC_DEC     reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    =               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OPT_EQ          reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    *               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    /               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    %               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    +               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    -               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OPT_SOME        reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    <               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    >               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OP_LE           reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OP_GE           reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OP_EQ           reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OP_NE           reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    &               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    ^               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    |               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OP_LAND         reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    ?               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    OP_LOR          reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    ]               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    :               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    )               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    ;               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    ,               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)
    }               reduce using rule 150 (Integer_LIT -> INT_LITERAL .)


state 149

    (199) LogicalUnaryOperator -> ~ .

    OPT_INC_DEC     reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    +               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    -               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    !               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    (               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    INT_LITERAL     reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    FLOAT_LITERAL   reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    CHAR_LITERAL    reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    STRING_LITERAL  reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    BOOL            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 199 (LogicalUnaryOperator -> ~ .)


state 150

    (112) IterationStatement -> DO . M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (110) M_instr_branch -> .

    ;               reduce using rule 110 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 110 (M_instr_branch -> .)
    DEFAULT         reduce using rule 110 (M_instr_branch -> .)
    IF              reduce using rule 110 (M_instr_branch -> .)
    SWITCH          reduce using rule 110 (M_instr_branch -> .)
    WHILE           reduce using rule 110 (M_instr_branch -> .)
    DO              reduce using rule 110 (M_instr_branch -> .)
    FOR             reduce using rule 110 (M_instr_branch -> .)
    BREAK           reduce using rule 110 (M_instr_branch -> .)
    CONTINUE        reduce using rule 110 (M_instr_branch -> .)
    RETURN          reduce using rule 110 (M_instr_branch -> .)
    THROW           reduce using rule 110 (M_instr_branch -> .)
    {               reduce using rule 110 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 110 (M_instr_branch -> .)
    +               reduce using rule 110 (M_instr_branch -> .)
    -               reduce using rule 110 (M_instr_branch -> .)
    ~               reduce using rule 110 (M_instr_branch -> .)
    !               reduce using rule 110 (M_instr_branch -> .)
    THIS            reduce using rule 110 (M_instr_branch -> .)
    SUPER           reduce using rule 110 (M_instr_branch -> .)
    NULL            reduce using rule 110 (M_instr_branch -> .)
    (               reduce using rule 110 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 110 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 110 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 110 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 110 (M_instr_branch -> .)
    BOOL            reduce using rule 110 (M_instr_branch -> .)
    NEW             reduce using rule 110 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 110 (M_instr_branch -> .)
    CHAR            reduce using rule 110 (M_instr_branch -> .)
    BYTE            reduce using rule 110 (M_instr_branch -> .)
    SHORT           reduce using rule 110 (M_instr_branch -> .)
    INT             reduce using rule 110 (M_instr_branch -> .)
    LONG            reduce using rule 110 (M_instr_branch -> .)
    FLOAT           reduce using rule 110 (M_instr_branch -> .)
    DOUBLE          reduce using rule 110 (M_instr_branch -> .)
    VOID            reduce using rule 110 (M_instr_branch -> .)
    CASE            reduce using rule 110 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 241

state 151

    (204) MultiplicativeExpression -> CastExpression .

    *               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    /               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    %               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    +               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    -               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    OPT_SOME        reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    <               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    >               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    ?               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    :               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    ;               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    )               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    ,               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    }               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)
    ]               reduce using rule 204 (MultiplicativeExpression -> CastExpression .)


state 152

    (169) SpecialName -> NULL .

    .               reduce using rule 169 (SpecialName -> NULL .)
    OPT_INC_DEC     reduce using rule 169 (SpecialName -> NULL .)
    *               reduce using rule 169 (SpecialName -> NULL .)
    /               reduce using rule 169 (SpecialName -> NULL .)
    %               reduce using rule 169 (SpecialName -> NULL .)
    +               reduce using rule 169 (SpecialName -> NULL .)
    -               reduce using rule 169 (SpecialName -> NULL .)
    OPT_SOME        reduce using rule 169 (SpecialName -> NULL .)
    <               reduce using rule 169 (SpecialName -> NULL .)
    >               reduce using rule 169 (SpecialName -> NULL .)
    OP_LE           reduce using rule 169 (SpecialName -> NULL .)
    OP_GE           reduce using rule 169 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 169 (SpecialName -> NULL .)
    OP_NE           reduce using rule 169 (SpecialName -> NULL .)
    &               reduce using rule 169 (SpecialName -> NULL .)
    ^               reduce using rule 169 (SpecialName -> NULL .)
    |               reduce using rule 169 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 169 (SpecialName -> NULL .)
    ?               reduce using rule 169 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 169 (SpecialName -> NULL .)
    ;               reduce using rule 169 (SpecialName -> NULL .)
    )               reduce using rule 169 (SpecialName -> NULL .)
    ,               reduce using rule 169 (SpecialName -> NULL .)
    :               reduce using rule 169 (SpecialName -> NULL .)
    }               reduce using rule 169 (SpecialName -> NULL .)
    ]               reduce using rule 169 (SpecialName -> NULL .)
    (               reduce using rule 169 (SpecialName -> NULL .)
    =               reduce using rule 169 (SpecialName -> NULL .)
    OPT_EQ          reduce using rule 169 (SpecialName -> NULL .)


state 153

    (200) LogicalUnaryOperator -> ! .

    OPT_INC_DEC     reduce using rule 200 (LogicalUnaryOperator -> ! .)
    +               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    -               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    ~               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    !               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    IDENTIFIER      reduce using rule 200 (LogicalUnaryOperator -> ! .)
    THIS            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    SUPER           reduce using rule 200 (LogicalUnaryOperator -> ! .)
    NULL            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    (               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    INT_LITERAL     reduce using rule 200 (LogicalUnaryOperator -> ! .)
    FLOAT_LITERAL   reduce using rule 200 (LogicalUnaryOperator -> ! .)
    CHAR_LITERAL    reduce using rule 200 (LogicalUnaryOperator -> ! .)
    STRING_LITERAL  reduce using rule 200 (LogicalUnaryOperator -> ! .)
    BOOL            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    NEW             reduce using rule 200 (LogicalUnaryOperator -> ! .)
    BOOLEAN         reduce using rule 200 (LogicalUnaryOperator -> ! .)
    CHAR            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    BYTE            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    SHORT           reduce using rule 200 (LogicalUnaryOperator -> ! .)
    INT             reduce using rule 200 (LogicalUnaryOperator -> ! .)
    LONG            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    FLOAT           reduce using rule 200 (LogicalUnaryOperator -> ! .)
    DOUBLE          reduce using rule 200 (LogicalUnaryOperator -> ! .)
    VOID            reduce using rule 200 (LogicalUnaryOperator -> ! .)


state 154

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (135) PrimaryExpression -> QualifiedName .
    (173) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (155) ArrayAccess -> QualifiedName . [ Expression ]
    (159) FieldAccess -> QualifiedName . . THIS
    (160) FieldAccess -> QualifiedName . . CLASS
    (166) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for [ resolved as shift
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 242
    OPT_INC_DEC     reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    [               shift and go to state 243
    (               reduce using rule 166 (MethodAccess -> QualifiedName .)

  ! [               [ reduce using rule 5 (TypeName -> QualifiedName .) ]


state 155

    (202) ArithmeticUnaryOperator -> - .

    OPT_INC_DEC     reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    +               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    -               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    ~               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    !               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    IDENTIFIER      reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    THIS            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    SUPER           reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    NULL            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    (               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    INT_LITERAL     reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    FLOAT_LITERAL   reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    CHAR_LITERAL    reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    STRING_LITERAL  reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    BOOL            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    NEW             reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    BOOLEAN         reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    CHAR            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    BYTE            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    SHORT           reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    INT             reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    LONG            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    FLOAT           reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    DOUBLE          reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    VOID            reduce using rule 202 (ArithmeticUnaryOperator -> - .)


state 156

    (88) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    }               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ;               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THROW           reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    {               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    +               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    -               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    !               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    (               reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 88 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 157

    (213) RelationalExpression -> ShiftExpression .
    (212) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    >               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    ?               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    ]               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    ;               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    )               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    ,               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    :               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    }               reduce using rule 213 (RelationalExpression -> ShiftExpression .)
    OPT_SOME        shift and go to state 244


state 158

    (84) Block -> { LocalVariableDeclarationsAndStatements . }
    (87) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (88) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (89) LocalVariableDeclarationOrStatement -> . Statement
    (90) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (91) Statement -> . EmptyStatement M_instr
    (92) Statement -> . LabelStatement M_instr
    (93) Statement -> . ExpressionStatement ; M_instr
    (94) Statement -> . SelectionStatement M_instr
    (95) Statement -> . IterationStatement M_instr
    (96) Statement -> . JumpStatement M_instr
    (97) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (99) EmptyStatement -> . ;
    (100) LabelStatement -> . IDENTIFIER :
    (101) LabelStatement -> . Marker_case CASE ConstantExpression :
    (102) LabelStatement -> . DEFAULT :
    (104) ExpressionStatement -> . Expression
    (105) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (107) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (111) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (112) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (103) Marker_case -> .
    (239) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    }               shift and go to state 246
    ;               shift and go to state 111
    IDENTIFIER      shift and go to state 96
    DEFAULT         shift and go to state 129
    IF              shift and go to state 164
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 131
    DO              shift and go to state 150
    FOR             shift and go to state 114
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 123
    RETURN          shift and go to state 103
    THROW           shift and go to state 168
    {               shift and go to state 68
    CASE            reduce using rule 103 (Marker_case -> .)
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132

    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    LabelStatement                 shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    ExpressionStatement            shift and go to state 90
    JumpStatement                  shift and go to state 130
    RealPostfixExpression          shift and go to state 104
    Statement                      shift and go to state 92
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    TypeSpecifier                  shift and go to state 134
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    QualifiedName                  shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    LogicalUnaryOperator           shift and go to state 160
    TypeName                       shift and go to state 53
    ConditionalOrExpression        shift and go to state 137
    LocalVariableDeclarationStatement shift and go to state 156
    ShiftExpression                shift and go to state 157
    SelectionStatement             shift and go to state 112
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    PrimitiveType                  shift and go to state 91
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Char_LIT                       shift and go to state 161
    UnaryExpression                shift and go to state 142
    Marker_case                    shift and go to state 97
    Expression                     shift and go to state 139
    Block                          shift and go to state 117
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    LocalVariableDeclarationOrStatement shift and go to state 245
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    EmptyStatement                 shift and go to state 101
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    IterationStatement             shift and go to state 169
    Integer_LIT                    shift and go to state 95

state 159

    (136) PrimaryExpression -> NotJustName .
    (157) FieldAccess -> NotJustName . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 136 (PrimaryExpression -> NotJustName .)
    =               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OPT_EQ          reduce using rule 136 (PrimaryExpression -> NotJustName .)
    *               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    /               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    %               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    +               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    -               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OPT_SOME        reduce using rule 136 (PrimaryExpression -> NotJustName .)
    <               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    >               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 136 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 136 (PrimaryExpression -> NotJustName .)
    ?               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 136 (PrimaryExpression -> NotJustName .)
    :               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    ;               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    )               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    ,               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    }               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    ]               reduce using rule 136 (PrimaryExpression -> NotJustName .)
    .               shift and go to state 247


state 160

    (198) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 248
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 161

    (143) ComplexPrimary -> Char_LIT .

    [               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    .               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OPT_INC_DEC     reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    =               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OPT_EQ          reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    *               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    /               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    %               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    +               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    -               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OPT_SOME        reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    <               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    >               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OP_LE           reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OP_GE           reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OP_EQ           reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OP_NE           reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    &               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    ^               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    |               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OP_LAND         reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    ?               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    OP_LOR          reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    ,               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    ;               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    )               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    :               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    }               reduce using rule 143 (ComplexPrimary -> Char_LIT .)
    ]               reduce using rule 143 (ComplexPrimary -> Char_LIT .)


state 162

    (196) UnaryExpression -> LogicalUnaryExpression .

    =               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_EQ          reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    *               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    /               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    %               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    +               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    -               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_SOME        reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    <               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    >               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ?               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ;               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    :               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    )               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ,               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    }               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ]               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)


state 163

    (144) ComplexPrimary -> String_LIT .

    [               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    .               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OPT_INC_DEC     reduce using rule 144 (ComplexPrimary -> String_LIT .)
    =               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OPT_EQ          reduce using rule 144 (ComplexPrimary -> String_LIT .)
    *               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    /               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    %               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    +               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    -               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OPT_SOME        reduce using rule 144 (ComplexPrimary -> String_LIT .)
    <               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    >               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OP_LE           reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OP_GE           reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OP_EQ           reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OP_NE           reduce using rule 144 (ComplexPrimary -> String_LIT .)
    &               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    ^               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    |               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OP_LAND         reduce using rule 144 (ComplexPrimary -> String_LIT .)
    ?               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    OP_LOR          reduce using rule 144 (ComplexPrimary -> String_LIT .)
    ,               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    ;               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    )               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    :               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    }               reduce using rule 144 (ComplexPrimary -> String_LIT .)
    ]               reduce using rule 144 (ComplexPrimary -> String_LIT .)


state 164

    (105) SelectionStatement -> IF . ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> IF . ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement

    (               shift and go to state 249


state 165

    (153) String_LIT -> STRING_LITERAL .

    [               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    .               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OPT_INC_DEC     reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    =               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OPT_EQ          reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    *               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    /               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    %               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    +               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    -               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OPT_SOME        reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    <               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    >               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OP_LE           reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OP_GE           reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OP_EQ           reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OP_NE           reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    &               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    ^               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    |               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OP_LAND         reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    ?               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    OP_LOR          reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    )               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    :               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    ;               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    ,               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    }               reduce using rule 153 (String_LIT -> STRING_LITERAL .)
    ]               reduce using rule 153 (String_LIT -> STRING_LITERAL .)


state 166

    (168) SpecialName -> SUPER .

    .               reduce using rule 168 (SpecialName -> SUPER .)
    OPT_INC_DEC     reduce using rule 168 (SpecialName -> SUPER .)
    *               reduce using rule 168 (SpecialName -> SUPER .)
    /               reduce using rule 168 (SpecialName -> SUPER .)
    %               reduce using rule 168 (SpecialName -> SUPER .)
    +               reduce using rule 168 (SpecialName -> SUPER .)
    -               reduce using rule 168 (SpecialName -> SUPER .)
    OPT_SOME        reduce using rule 168 (SpecialName -> SUPER .)
    <               reduce using rule 168 (SpecialName -> SUPER .)
    >               reduce using rule 168 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 168 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 168 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 168 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 168 (SpecialName -> SUPER .)
    &               reduce using rule 168 (SpecialName -> SUPER .)
    ^               reduce using rule 168 (SpecialName -> SUPER .)
    |               reduce using rule 168 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 168 (SpecialName -> SUPER .)
    ?               reduce using rule 168 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 168 (SpecialName -> SUPER .)
    ;               reduce using rule 168 (SpecialName -> SUPER .)
    )               reduce using rule 168 (SpecialName -> SUPER .)
    ,               reduce using rule 168 (SpecialName -> SUPER .)
    :               reduce using rule 168 (SpecialName -> SUPER .)
    }               reduce using rule 168 (SpecialName -> SUPER .)
    ]               reduce using rule 168 (SpecialName -> SUPER .)
    (               reduce using rule 168 (SpecialName -> SUPER .)
    =               reduce using rule 168 (SpecialName -> SUPER .)
    OPT_EQ          reduce using rule 168 (SpecialName -> SUPER .)


state 167

    (85) Block -> { } .

    ELSE            reduce using rule 85 (Block -> { } .)
    }               reduce using rule 85 (Block -> { } .)
    ;               reduce using rule 85 (Block -> { } .)
    IDENTIFIER      reduce using rule 85 (Block -> { } .)
    DEFAULT         reduce using rule 85 (Block -> { } .)
    IF              reduce using rule 85 (Block -> { } .)
    SWITCH          reduce using rule 85 (Block -> { } .)
    WHILE           reduce using rule 85 (Block -> { } .)
    DO              reduce using rule 85 (Block -> { } .)
    FOR             reduce using rule 85 (Block -> { } .)
    BREAK           reduce using rule 85 (Block -> { } .)
    CONTINUE        reduce using rule 85 (Block -> { } .)
    RETURN          reduce using rule 85 (Block -> { } .)
    THROW           reduce using rule 85 (Block -> { } .)
    {               reduce using rule 85 (Block -> { } .)
    BOOLEAN         reduce using rule 85 (Block -> { } .)
    CHAR            reduce using rule 85 (Block -> { } .)
    BYTE            reduce using rule 85 (Block -> { } .)
    SHORT           reduce using rule 85 (Block -> { } .)
    INT             reduce using rule 85 (Block -> { } .)
    LONG            reduce using rule 85 (Block -> { } .)
    FLOAT           reduce using rule 85 (Block -> { } .)
    DOUBLE          reduce using rule 85 (Block -> { } .)
    VOID            reduce using rule 85 (Block -> { } .)
    OPT_INC_DEC     reduce using rule 85 (Block -> { } .)
    +               reduce using rule 85 (Block -> { } .)
    -               reduce using rule 85 (Block -> { } .)
    ~               reduce using rule 85 (Block -> { } .)
    !               reduce using rule 85 (Block -> { } .)
    THIS            reduce using rule 85 (Block -> { } .)
    SUPER           reduce using rule 85 (Block -> { } .)
    NULL            reduce using rule 85 (Block -> { } .)
    (               reduce using rule 85 (Block -> { } .)
    INT_LITERAL     reduce using rule 85 (Block -> { } .)
    FLOAT_LITERAL   reduce using rule 85 (Block -> { } .)
    CHAR_LITERAL    reduce using rule 85 (Block -> { } .)
    STRING_LITERAL  reduce using rule 85 (Block -> { } .)
    BOOL            reduce using rule 85 (Block -> { } .)
    NEW             reduce using rule 85 (Block -> { } .)
    CASE            reduce using rule 85 (Block -> { } .)
    STATIC          reduce using rule 85 (Block -> { } .)
    PUBLIC          reduce using rule 85 (Block -> { } .)
    PRIVATE         reduce using rule 85 (Block -> { } .)
    CLASS           reduce using rule 85 (Block -> { } .)
    INTERFACE       reduce using rule 85 (Block -> { } .)


state 168

    (129) JumpStatement -> THROW . Expression ;
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 250
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 169

    (95) Statement -> IterationStatement . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)
    ELSE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 251

state 170

    (31) ImportStatement -> IMPORT QualifiedName . * SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    CLASS           reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    INTERFACE       reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PUBLIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PRIVATE         reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    STATIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    ;               shift and go to state 34


state 171

    (58) VariableDeclarators -> VariableDeclarators , . VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    DeclaratorName                 shift and go to state 229
    VariableDeclarator             shift and go to state 252

state 172

    (67) MethodDeclarator -> DeclaratorName ( . ParameterList )
    (68) MethodDeclarator -> DeclaratorName ( . )
    (69) ParameterList -> . Parameter
    (70) ParameterList -> . ParameterList , Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 253
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 254
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 180
    TypeSpecifier                  shift and go to state 181

state 173

    (60) VariableDeclarator -> DeclaratorName = . VariableInitializer
    (61) VariableInitializer -> . Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    VariableInitializer            shift and go to state 255
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 256
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 174

    (73) DeclaratorName -> DeclaratorName OP_DIM .

    (               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    =               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    [               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    ,               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    ;               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    )               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)


state 175

    (66) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 176

    (75) MethodBody -> ; .

    ;               reduce using rule 75 (MethodBody -> ; .)
    }               reduce using rule 75 (MethodBody -> ; .)
    STATIC          reduce using rule 75 (MethodBody -> ; .)
    IDENTIFIER      reduce using rule 75 (MethodBody -> ; .)
    {               reduce using rule 75 (MethodBody -> ; .)
    PUBLIC          reduce using rule 75 (MethodBody -> ; .)
    PRIVATE         reduce using rule 75 (MethodBody -> ; .)
    CLASS           reduce using rule 75 (MethodBody -> ; .)
    INTERFACE       reduce using rule 75 (MethodBody -> ; .)
    BOOLEAN         reduce using rule 75 (MethodBody -> ; .)
    CHAR            reduce using rule 75 (MethodBody -> ; .)
    BYTE            reduce using rule 75 (MethodBody -> ; .)
    SHORT           reduce using rule 75 (MethodBody -> ; .)
    INT             reduce using rule 75 (MethodBody -> ; .)
    LONG            reduce using rule 75 (MethodBody -> ; .)
    FLOAT           reduce using rule 75 (MethodBody -> ; .)
    DOUBLE          reduce using rule 75 (MethodBody -> ; .)
    VOID            reduce using rule 75 (MethodBody -> ; .)


state 177

    (74) MethodBody -> Block .

    ;               reduce using rule 74 (MethodBody -> Block .)
    }               reduce using rule 74 (MethodBody -> Block .)
    STATIC          reduce using rule 74 (MethodBody -> Block .)
    IDENTIFIER      reduce using rule 74 (MethodBody -> Block .)
    {               reduce using rule 74 (MethodBody -> Block .)
    PUBLIC          reduce using rule 74 (MethodBody -> Block .)
    PRIVATE         reduce using rule 74 (MethodBody -> Block .)
    CLASS           reduce using rule 74 (MethodBody -> Block .)
    INTERFACE       reduce using rule 74 (MethodBody -> Block .)
    BOOLEAN         reduce using rule 74 (MethodBody -> Block .)
    CHAR            reduce using rule 74 (MethodBody -> Block .)
    BYTE            reduce using rule 74 (MethodBody -> Block .)
    SHORT           reduce using rule 74 (MethodBody -> Block .)
    INT             reduce using rule 74 (MethodBody -> Block .)
    LONG            reduce using rule 74 (MethodBody -> Block .)
    FLOAT           reduce using rule 74 (MethodBody -> Block .)
    DOUBLE          reduce using rule 74 (MethodBody -> Block .)
    VOID            reduce using rule 74 (MethodBody -> Block .)


state 178

    (190) OP_DIM -> [ ] .

    [               reduce using rule 190 (OP_DIM -> [ ] .)
    {               reduce using rule 190 (OP_DIM -> [ ] .)
    .               reduce using rule 190 (OP_DIM -> [ ] .)
    OPT_INC_DEC     reduce using rule 190 (OP_DIM -> [ ] .)
    =               reduce using rule 190 (OP_DIM -> [ ] .)
    OPT_EQ          reduce using rule 190 (OP_DIM -> [ ] .)
    *               reduce using rule 190 (OP_DIM -> [ ] .)
    /               reduce using rule 190 (OP_DIM -> [ ] .)
    %               reduce using rule 190 (OP_DIM -> [ ] .)
    +               reduce using rule 190 (OP_DIM -> [ ] .)
    -               reduce using rule 190 (OP_DIM -> [ ] .)
    OPT_SOME        reduce using rule 190 (OP_DIM -> [ ] .)
    <               reduce using rule 190 (OP_DIM -> [ ] .)
    >               reduce using rule 190 (OP_DIM -> [ ] .)
    OP_LE           reduce using rule 190 (OP_DIM -> [ ] .)
    OP_GE           reduce using rule 190 (OP_DIM -> [ ] .)
    OP_EQ           reduce using rule 190 (OP_DIM -> [ ] .)
    OP_NE           reduce using rule 190 (OP_DIM -> [ ] .)
    &               reduce using rule 190 (OP_DIM -> [ ] .)
    ^               reduce using rule 190 (OP_DIM -> [ ] .)
    |               reduce using rule 190 (OP_DIM -> [ ] .)
    OP_LAND         reduce using rule 190 (OP_DIM -> [ ] .)
    ?               reduce using rule 190 (OP_DIM -> [ ] .)
    OP_LOR          reduce using rule 190 (OP_DIM -> [ ] .)
    ;               reduce using rule 190 (OP_DIM -> [ ] .)
    )               reduce using rule 190 (OP_DIM -> [ ] .)
    ,               reduce using rule 190 (OP_DIM -> [ ] .)
    :               reduce using rule 190 (OP_DIM -> [ ] .)
    }               reduce using rule 190 (OP_DIM -> [ ] .)
    ]               reduce using rule 190 (OP_DIM -> [ ] .)
    (               reduce using rule 190 (OP_DIM -> [ ] .)
    IDENTIFIER      reduce using rule 190 (OP_DIM -> [ ] .)


state 179

    (189) Dims -> Dims OP_DIM .

    [               reduce using rule 189 (Dims -> Dims OP_DIM .)
    {               reduce using rule 189 (Dims -> Dims OP_DIM .)
    .               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OPT_INC_DEC     reduce using rule 189 (Dims -> Dims OP_DIM .)
    =               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OPT_EQ          reduce using rule 189 (Dims -> Dims OP_DIM .)
    *               reduce using rule 189 (Dims -> Dims OP_DIM .)
    /               reduce using rule 189 (Dims -> Dims OP_DIM .)
    %               reduce using rule 189 (Dims -> Dims OP_DIM .)
    +               reduce using rule 189 (Dims -> Dims OP_DIM .)
    -               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OPT_SOME        reduce using rule 189 (Dims -> Dims OP_DIM .)
    <               reduce using rule 189 (Dims -> Dims OP_DIM .)
    >               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 189 (Dims -> Dims OP_DIM .)
    &               reduce using rule 189 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 189 (Dims -> Dims OP_DIM .)
    |               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 189 (Dims -> Dims OP_DIM .)
    ?               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 189 (Dims -> Dims OP_DIM .)
    ;               reduce using rule 189 (Dims -> Dims OP_DIM .)
    )               reduce using rule 189 (Dims -> Dims OP_DIM .)
    ,               reduce using rule 189 (Dims -> Dims OP_DIM .)
    :               reduce using rule 189 (Dims -> Dims OP_DIM .)
    }               reduce using rule 189 (Dims -> Dims OP_DIM .)
    ]               reduce using rule 189 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 189 (Dims -> Dims OP_DIM .)


state 180

    (69) ParameterList -> Parameter .

    )               reduce using rule 69 (ParameterList -> Parameter .)
    ,               reduce using rule 69 (ParameterList -> Parameter .)


state 181

    (71) Parameter -> TypeSpecifier . DeclaratorName
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    DeclaratorName                 shift and go to state 257

state 182

    (79) ConstructorDeclarator -> IDENTIFIER ( ) .

    {               reduce using rule 79 (ConstructorDeclarator -> IDENTIFIER ( ) .)


state 183

    (78) ConstructorDeclarator -> IDENTIFIER ( ParameterList . )
    (70) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 258
    ,               shift and go to state 259


state 184

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 55 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 171


state 185

    (65) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (74) MethodBody -> . Block
    (75) MethodBody -> . ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }

    ;               shift and go to state 176
    {               shift and go to state 68

    MethodBody                     shift and go to state 260
    Block                          shift and go to state 177

state 186

    (76) ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .

    ;               reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    }               reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    STATIC          reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    {               reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CLASS           reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CHAR            reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BYTE            reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SHORT           reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INT             reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LONG            reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FLOAT           reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOID            reduce using rule 76 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)


state 187

    (93) Statement -> ExpressionStatement ; . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)
    ELSE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 261

state 188

    (161) FieldAccess -> PrimitiveType . . CLASS

    CLASS           shift and go to state 262


state 189

    (222) AndExpression -> AndExpression & . EqualityExpression
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 126
    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    EqualityExpression             shift and go to state 263
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 190

    (161) FieldAccess -> PrimitiveType . . CLASS

    .               shift and go to state 188


state 191

    (146) ComplexPrimary -> ( Expression . )

    )               shift and go to state 264


state 192

    (135) PrimaryExpression -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (173) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (155) ArrayAccess -> QualifiedName . [ Expression ]
    (159) FieldAccess -> QualifiedName . . THIS
    (160) FieldAccess -> QualifiedName . . CLASS
    (166) MethodAccess -> QualifiedName .

    OPT_INC_DEC     reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    :               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    )               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    }               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    ]               reduce using rule 135 (PrimaryExpression -> QualifiedName .)
    .               shift and go to state 242
    [               shift and go to state 243
    (               reduce using rule 166 (MethodAccess -> QualifiedName .)


state 193

    (100) LabelStatement -> IDENTIFIER : .

    WHILE           reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    }               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    ;               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    IDENTIFIER      reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    DEFAULT         reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    IF              reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    SWITCH          reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    DO              reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    FOR             reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    BREAK           reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    CONTINUE        reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    RETURN          reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    THROW           reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    {               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    BOOLEAN         reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    CHAR            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    BYTE            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    SHORT           reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    INT             reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    LONG            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    FLOAT           reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    DOUBLE          reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    VOID            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    OPT_INC_DEC     reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    +               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    -               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    ~               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    !               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    THIS            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    SUPER           reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    NULL            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    (               reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    INT_LITERAL     reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    FLOAT_LITERAL   reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    CHAR_LITERAL    reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    STRING_LITERAL  reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    BOOL            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    NEW             reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    CASE            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)
    ELSE            reduce using rule 100 (LabelStatement -> IDENTIFIER : .)


state 194

    (101) LabelStatement -> Marker_case CASE . ConstantExpression :
    (240) ConstantExpression -> . ConditionalExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ConstantExpression             shift and go to state 266
    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 265
    UnaryExpression                shift and go to state 202
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 195

    (228) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . M_OP InclusiveOrExpression
    (231) M_OP -> .

    OPT_INC_DEC     reduce using rule 231 (M_OP -> .)
    +               reduce using rule 231 (M_OP -> .)
    -               reduce using rule 231 (M_OP -> .)
    ~               reduce using rule 231 (M_OP -> .)
    !               reduce using rule 231 (M_OP -> .)
    IDENTIFIER      reduce using rule 231 (M_OP -> .)
    THIS            reduce using rule 231 (M_OP -> .)
    SUPER           reduce using rule 231 (M_OP -> .)
    NULL            reduce using rule 231 (M_OP -> .)
    (               reduce using rule 231 (M_OP -> .)
    INT_LITERAL     reduce using rule 231 (M_OP -> .)
    FLOAT_LITERAL   reduce using rule 231 (M_OP -> .)
    CHAR_LITERAL    reduce using rule 231 (M_OP -> .)
    STRING_LITERAL  reduce using rule 231 (M_OP -> .)
    BOOL            reduce using rule 231 (M_OP -> .)
    NEW             reduce using rule 231 (M_OP -> .)
    BOOLEAN         reduce using rule 231 (M_OP -> .)
    CHAR            reduce using rule 231 (M_OP -> .)
    BYTE            reduce using rule 231 (M_OP -> .)
    SHORT           reduce using rule 231 (M_OP -> .)
    INT             reduce using rule 231 (M_OP -> .)
    LONG            reduce using rule 231 (M_OP -> .)
    FLOAT           reduce using rule 231 (M_OP -> .)
    DOUBLE          reduce using rule 231 (M_OP -> .)
    VOID            reduce using rule 231 (M_OP -> .)

    M_OP                           shift and go to state 267

state 196

    (91) Statement -> EmptyStatement M_instr .

    ELSE            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    }               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    ;               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    IDENTIFIER      reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    DEFAULT         reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    IF              reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    SWITCH          reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    WHILE           reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    DO              reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    FOR             reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    BREAK           reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    CONTINUE        reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    RETURN          reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    THROW           reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    {               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    BOOLEAN         reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    CHAR            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    BYTE            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    SHORT           reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    INT             reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    LONG            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    FLOAT           reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    DOUBLE          reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    VOID            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    OPT_INC_DEC     reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    +               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    -               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    ~               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    !               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    THIS            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    SUPER           reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    NULL            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    (               reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    INT_LITERAL     reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    CHAR_LITERAL    reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    STRING_LITERAL  reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    BOOL            reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    NEW             reduce using rule 91 (Statement -> EmptyStatement M_instr .)
    CASE            reduce using rule 91 (Statement -> EmptyStatement M_instr .)


state 197

    (92) Statement -> LabelStatement M_instr .

    ELSE            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    }               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    ;               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    IDENTIFIER      reduce using rule 92 (Statement -> LabelStatement M_instr .)
    DEFAULT         reduce using rule 92 (Statement -> LabelStatement M_instr .)
    IF              reduce using rule 92 (Statement -> LabelStatement M_instr .)
    SWITCH          reduce using rule 92 (Statement -> LabelStatement M_instr .)
    WHILE           reduce using rule 92 (Statement -> LabelStatement M_instr .)
    DO              reduce using rule 92 (Statement -> LabelStatement M_instr .)
    FOR             reduce using rule 92 (Statement -> LabelStatement M_instr .)
    BREAK           reduce using rule 92 (Statement -> LabelStatement M_instr .)
    CONTINUE        reduce using rule 92 (Statement -> LabelStatement M_instr .)
    RETURN          reduce using rule 92 (Statement -> LabelStatement M_instr .)
    THROW           reduce using rule 92 (Statement -> LabelStatement M_instr .)
    {               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    BOOLEAN         reduce using rule 92 (Statement -> LabelStatement M_instr .)
    CHAR            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    BYTE            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    SHORT           reduce using rule 92 (Statement -> LabelStatement M_instr .)
    INT             reduce using rule 92 (Statement -> LabelStatement M_instr .)
    LONG            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    FLOAT           reduce using rule 92 (Statement -> LabelStatement M_instr .)
    DOUBLE          reduce using rule 92 (Statement -> LabelStatement M_instr .)
    VOID            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    OPT_INC_DEC     reduce using rule 92 (Statement -> LabelStatement M_instr .)
    +               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    -               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    ~               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    !               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    THIS            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    SUPER           reduce using rule 92 (Statement -> LabelStatement M_instr .)
    NULL            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    (               reduce using rule 92 (Statement -> LabelStatement M_instr .)
    INT_LITERAL     reduce using rule 92 (Statement -> LabelStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 92 (Statement -> LabelStatement M_instr .)
    CHAR_LITERAL    reduce using rule 92 (Statement -> LabelStatement M_instr .)
    STRING_LITERAL  reduce using rule 92 (Statement -> LabelStatement M_instr .)
    BOOL            reduce using rule 92 (Statement -> LabelStatement M_instr .)
    NEW             reduce using rule 92 (Statement -> LabelStatement M_instr .)
    CASE            reduce using rule 92 (Statement -> LabelStatement M_instr .)


state 198

    (128) JumpStatement -> RETURN ; .

    }               reduce using rule 128 (JumpStatement -> RETURN ; .)
    ;               reduce using rule 128 (JumpStatement -> RETURN ; .)
    IDENTIFIER      reduce using rule 128 (JumpStatement -> RETURN ; .)
    DEFAULT         reduce using rule 128 (JumpStatement -> RETURN ; .)
    IF              reduce using rule 128 (JumpStatement -> RETURN ; .)
    SWITCH          reduce using rule 128 (JumpStatement -> RETURN ; .)
    WHILE           reduce using rule 128 (JumpStatement -> RETURN ; .)
    DO              reduce using rule 128 (JumpStatement -> RETURN ; .)
    FOR             reduce using rule 128 (JumpStatement -> RETURN ; .)
    BREAK           reduce using rule 128 (JumpStatement -> RETURN ; .)
    CONTINUE        reduce using rule 128 (JumpStatement -> RETURN ; .)
    RETURN          reduce using rule 128 (JumpStatement -> RETURN ; .)
    THROW           reduce using rule 128 (JumpStatement -> RETURN ; .)
    {               reduce using rule 128 (JumpStatement -> RETURN ; .)
    BOOLEAN         reduce using rule 128 (JumpStatement -> RETURN ; .)
    CHAR            reduce using rule 128 (JumpStatement -> RETURN ; .)
    BYTE            reduce using rule 128 (JumpStatement -> RETURN ; .)
    SHORT           reduce using rule 128 (JumpStatement -> RETURN ; .)
    INT             reduce using rule 128 (JumpStatement -> RETURN ; .)
    LONG            reduce using rule 128 (JumpStatement -> RETURN ; .)
    FLOAT           reduce using rule 128 (JumpStatement -> RETURN ; .)
    DOUBLE          reduce using rule 128 (JumpStatement -> RETURN ; .)
    VOID            reduce using rule 128 (JumpStatement -> RETURN ; .)
    OPT_INC_DEC     reduce using rule 128 (JumpStatement -> RETURN ; .)
    +               reduce using rule 128 (JumpStatement -> RETURN ; .)
    -               reduce using rule 128 (JumpStatement -> RETURN ; .)
    ~               reduce using rule 128 (JumpStatement -> RETURN ; .)
    !               reduce using rule 128 (JumpStatement -> RETURN ; .)
    THIS            reduce using rule 128 (JumpStatement -> RETURN ; .)
    SUPER           reduce using rule 128 (JumpStatement -> RETURN ; .)
    NULL            reduce using rule 128 (JumpStatement -> RETURN ; .)
    (               reduce using rule 128 (JumpStatement -> RETURN ; .)
    INT_LITERAL     reduce using rule 128 (JumpStatement -> RETURN ; .)
    FLOAT_LITERAL   reduce using rule 128 (JumpStatement -> RETURN ; .)
    CHAR_LITERAL    reduce using rule 128 (JumpStatement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 128 (JumpStatement -> RETURN ; .)
    BOOL            reduce using rule 128 (JumpStatement -> RETURN ; .)
    NEW             reduce using rule 128 (JumpStatement -> RETURN ; .)
    CASE            reduce using rule 128 (JumpStatement -> RETURN ; .)
    ELSE            reduce using rule 128 (JumpStatement -> RETURN ; .)


state 199

    (127) JumpStatement -> RETURN Expression . ;

    ;               shift and go to state 268


state 200

    (158) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    IDENTIFIER      shift and go to state 269


state 201

    (195) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    =               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_EQ          reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    *               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    /               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    %               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    +               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    -               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_SOME        reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    <               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    >               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ?               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ;               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    :               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    )               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ,               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    }               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ]               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 202

    (203) CastExpression -> UnaryExpression .

    *               reduce using rule 203 (CastExpression -> UnaryExpression .)
    /               reduce using rule 203 (CastExpression -> UnaryExpression .)
    %               reduce using rule 203 (CastExpression -> UnaryExpression .)
    +               reduce using rule 203 (CastExpression -> UnaryExpression .)
    -               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 203 (CastExpression -> UnaryExpression .)
    <               reduce using rule 203 (CastExpression -> UnaryExpression .)
    >               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    &               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 203 (CastExpression -> UnaryExpression .)
    |               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 203 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 203 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 203 (CastExpression -> UnaryExpression .)
    )               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 203 (CastExpression -> UnaryExpression .)
    :               reduce using rule 203 (CastExpression -> UnaryExpression .)
    }               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 203 (CastExpression -> UnaryExpression .)
    =               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OPT_EQ          reduce using rule 203 (CastExpression -> UnaryExpression .)


state 203

    (220) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    RelationalExpression           shift and go to state 270
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 204

    (219) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    RelationalExpression           shift and go to state 271
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 205

    (205) MultiplicativeExpression -> MultiplicativeExpression * . CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 272
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 206

    (207) MultiplicativeExpression -> MultiplicativeExpression % . CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 273
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 207

    (206) MultiplicativeExpression -> MultiplicativeExpression / . CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 274
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 208

    (94) Statement -> SelectionStatement M_instr .

    ELSE            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    }               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    ;               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    IDENTIFIER      reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    DEFAULT         reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    IF              reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    SWITCH          reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    WHILE           reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    DO              reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    FOR             reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    BREAK           reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    CONTINUE        reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    RETURN          reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    THROW           reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    {               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    BOOLEAN         reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    CHAR            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    BYTE            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    SHORT           reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    INT             reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    LONG            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    FLOAT           reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    DOUBLE          reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    VOID            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    OPT_INC_DEC     reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    +               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    -               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    ~               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    !               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    THIS            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    SUPER           reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    NULL            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    (               reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    INT_LITERAL     reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    CHAR_LITERAL    reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    STRING_LITERAL  reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    BOOL            reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    NEW             reduce using rule 94 (Statement -> SelectionStatement M_instr .)
    CASE            reduce using rule 94 (Statement -> SelectionStatement M_instr .)


state 209

    (113) IterationStatement -> FOR ( . ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (114) ForInit -> . ExpressionStatements ;
    (115) ForInit -> . LocalVariableDeclarationStatement
    (116) ForInit -> . ;
    (121) ExpressionStatements -> . ExpressionStatement
    (122) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (90) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (104) ExpressionStatement -> . Expression
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (239) Expression -> . AssignmentExpression
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 276
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    ArithmeticUnaryOperator        shift and go to state 105
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ExpressionStatement            shift and go to state 275
    PrimitiveType                  shift and go to state 91
    RealPostfixExpression          shift and go to state 104
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    TypeSpecifier                  shift and go to state 134
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    QualifiedName                  shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 107
    TypeName                       shift and go to state 53
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    LogicalUnaryOperator           shift and go to state 160
    ConditionalOrExpression        shift and go to state 137
    LocalVariableDeclarationStatement shift and go to state 279
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    ForInit                        shift and go to state 277
    InclusiveOrExpression          shift and go to state 143
    PrimaryExpression              shift and go to state 135
    ExpressionStatements           shift and go to state 278
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 210

    (194) UnaryExpression -> OPT_INC_DEC UnaryExpression .

    =               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_EQ          reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    *               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    /               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    %               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    +               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    -               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_SOME        reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    <               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    >               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LE           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_GE           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_EQ           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_NE           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    &               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ^               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    |               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LAND         reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ?               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LOR          reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ;               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    :               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    )               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ,               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    }               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ]               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)


state 211

    (97) Statement -> Block M_instr .

    ELSE            reduce using rule 97 (Statement -> Block M_instr .)
    }               reduce using rule 97 (Statement -> Block M_instr .)
    ;               reduce using rule 97 (Statement -> Block M_instr .)
    IDENTIFIER      reduce using rule 97 (Statement -> Block M_instr .)
    DEFAULT         reduce using rule 97 (Statement -> Block M_instr .)
    IF              reduce using rule 97 (Statement -> Block M_instr .)
    SWITCH          reduce using rule 97 (Statement -> Block M_instr .)
    WHILE           reduce using rule 97 (Statement -> Block M_instr .)
    DO              reduce using rule 97 (Statement -> Block M_instr .)
    FOR             reduce using rule 97 (Statement -> Block M_instr .)
    BREAK           reduce using rule 97 (Statement -> Block M_instr .)
    CONTINUE        reduce using rule 97 (Statement -> Block M_instr .)
    RETURN          reduce using rule 97 (Statement -> Block M_instr .)
    THROW           reduce using rule 97 (Statement -> Block M_instr .)
    {               reduce using rule 97 (Statement -> Block M_instr .)
    BOOLEAN         reduce using rule 97 (Statement -> Block M_instr .)
    CHAR            reduce using rule 97 (Statement -> Block M_instr .)
    BYTE            reduce using rule 97 (Statement -> Block M_instr .)
    SHORT           reduce using rule 97 (Statement -> Block M_instr .)
    INT             reduce using rule 97 (Statement -> Block M_instr .)
    LONG            reduce using rule 97 (Statement -> Block M_instr .)
    FLOAT           reduce using rule 97 (Statement -> Block M_instr .)
    DOUBLE          reduce using rule 97 (Statement -> Block M_instr .)
    VOID            reduce using rule 97 (Statement -> Block M_instr .)
    OPT_INC_DEC     reduce using rule 97 (Statement -> Block M_instr .)
    +               reduce using rule 97 (Statement -> Block M_instr .)
    -               reduce using rule 97 (Statement -> Block M_instr .)
    ~               reduce using rule 97 (Statement -> Block M_instr .)
    !               reduce using rule 97 (Statement -> Block M_instr .)
    THIS            reduce using rule 97 (Statement -> Block M_instr .)
    SUPER           reduce using rule 97 (Statement -> Block M_instr .)
    NULL            reduce using rule 97 (Statement -> Block M_instr .)
    (               reduce using rule 97 (Statement -> Block M_instr .)
    INT_LITERAL     reduce using rule 97 (Statement -> Block M_instr .)
    FLOAT_LITERAL   reduce using rule 97 (Statement -> Block M_instr .)
    CHAR_LITERAL    reduce using rule 97 (Statement -> Block M_instr .)
    STRING_LITERAL  reduce using rule 97 (Statement -> Block M_instr .)
    BOOL            reduce using rule 97 (Statement -> Block M_instr .)
    NEW             reduce using rule 97 (Statement -> Block M_instr .)
    CASE            reduce using rule 97 (Statement -> Block M_instr .)


state 212

    (176) PlainNewAllocationExpression -> ArrayAllocationExpression { . }
    (178) PlainNewAllocationExpression -> ArrayAllocationExpression { . ArrayInitializers }
    (62) ArrayInitializers -> . VariableInitializer
    (63) ArrayInitializers -> . ArrayInitializers , VariableInitializer
    (64) ArrayInitializers -> . ArrayInitializers ,
    (61) VariableInitializer -> . Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    }               shift and go to state 280
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    VariableInitializer            shift and go to state 282
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    ArrayInitializers              shift and go to state 281
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 256
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 213

    (162) MethodCall -> MethodAccess ( . ArgumentList )
    (163) MethodCall -> MethodAccess ( . )
    (170) ArgumentList -> . Expression
    (171) ArgumentList -> . ArgumentList , Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    )               shift and go to state 285
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    Float_LIT                      shift and go to state 144
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    ArgumentList                   shift and go to state 283
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 284
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 214

    (224) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 126
    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 286
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 215

    (214) RelationalExpression -> RelationalExpression < . ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 287
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 216

    (216) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 288
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 217

    (217) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 289
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 218

    (215) RelationalExpression -> RelationalExpression > . ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 290
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 219

    (125) JumpStatement -> CONTINUE IDENTIFIER . ;

    ;               shift and go to state 291


state 220

    (126) JumpStatement -> CONTINUE ; .

    }               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    ;               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    DEFAULT         reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    IF              reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    SWITCH          reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    WHILE           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    DO              reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    FOR             reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BREAK           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CONTINUE        reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    RETURN          reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    THROW           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    {               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BOOLEAN         reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CHAR            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BYTE            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    SHORT           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    INT             reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    LONG            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    FLOAT           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    DOUBLE          reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    VOID            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    OPT_INC_DEC     reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    +               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    -               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    ~               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    !               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    THIS            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    SUPER           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    NULL            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    (               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    INT_LITERAL     reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    FLOAT_LITERAL   reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CHAR_LITERAL    reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BOOL            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    NEW             reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CASE            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    ELSE            reduce using rule 126 (JumpStatement -> CONTINUE ; .)


state 221

    (156) ArrayAccess -> ComplexPrimary [ . Expression ]
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 126
    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 292
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 222

    (193) RealPostfixExpression -> PostfixExpression OPT_INC_DEC .

    .               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_INC_DEC     reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    =               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_EQ          reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    *               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    /               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    %               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    +               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    -               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_SOME        reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    <               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    >               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LE           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_GE           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_EQ           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_NE           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    &               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ^               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    |               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LAND         reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ?               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LOR          reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    }               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ,               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ;               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    )               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ]               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    :               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)


state 223

    (177) PlainNewAllocationExpression -> ClassAllocationExpression { . }
    (179) PlainNewAllocationExpression -> ClassAllocationExpression { . FieldDeclarations }
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (76) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (77) ConstructorDeclaration -> . ConstructorDeclarator Block
    (80) StaticInitializer -> . STATIC Block
    (81) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (78) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (79) ConstructorDeclarator -> . IDENTIFIER ( )
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 294
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    ConstructorDeclaration         shift and go to state 42
    FieldDeclarations              shift and go to state 293
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 60
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 224

    (102) LabelStatement -> DEFAULT : .

    WHILE           reduce using rule 102 (LabelStatement -> DEFAULT : .)
    }               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    ;               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    IDENTIFIER      reduce using rule 102 (LabelStatement -> DEFAULT : .)
    DEFAULT         reduce using rule 102 (LabelStatement -> DEFAULT : .)
    IF              reduce using rule 102 (LabelStatement -> DEFAULT : .)
    SWITCH          reduce using rule 102 (LabelStatement -> DEFAULT : .)
    DO              reduce using rule 102 (LabelStatement -> DEFAULT : .)
    FOR             reduce using rule 102 (LabelStatement -> DEFAULT : .)
    BREAK           reduce using rule 102 (LabelStatement -> DEFAULT : .)
    CONTINUE        reduce using rule 102 (LabelStatement -> DEFAULT : .)
    RETURN          reduce using rule 102 (LabelStatement -> DEFAULT : .)
    THROW           reduce using rule 102 (LabelStatement -> DEFAULT : .)
    {               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    BOOLEAN         reduce using rule 102 (LabelStatement -> DEFAULT : .)
    CHAR            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    BYTE            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    SHORT           reduce using rule 102 (LabelStatement -> DEFAULT : .)
    INT             reduce using rule 102 (LabelStatement -> DEFAULT : .)
    LONG            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    FLOAT           reduce using rule 102 (LabelStatement -> DEFAULT : .)
    DOUBLE          reduce using rule 102 (LabelStatement -> DEFAULT : .)
    VOID            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    OPT_INC_DEC     reduce using rule 102 (LabelStatement -> DEFAULT : .)
    +               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    -               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    ~               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    !               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    THIS            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    SUPER           reduce using rule 102 (LabelStatement -> DEFAULT : .)
    NULL            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    (               reduce using rule 102 (LabelStatement -> DEFAULT : .)
    INT_LITERAL     reduce using rule 102 (LabelStatement -> DEFAULT : .)
    FLOAT_LITERAL   reduce using rule 102 (LabelStatement -> DEFAULT : .)
    CHAR_LITERAL    reduce using rule 102 (LabelStatement -> DEFAULT : .)
    STRING_LITERAL  reduce using rule 102 (LabelStatement -> DEFAULT : .)
    BOOL            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    NEW             reduce using rule 102 (LabelStatement -> DEFAULT : .)
    CASE            reduce using rule 102 (LabelStatement -> DEFAULT : .)
    ELSE            reduce using rule 102 (LabelStatement -> DEFAULT : .)


state 225

    (96) Statement -> JumpStatement M_instr .

    ELSE            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    }               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    ;               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    IDENTIFIER      reduce using rule 96 (Statement -> JumpStatement M_instr .)
    DEFAULT         reduce using rule 96 (Statement -> JumpStatement M_instr .)
    IF              reduce using rule 96 (Statement -> JumpStatement M_instr .)
    SWITCH          reduce using rule 96 (Statement -> JumpStatement M_instr .)
    WHILE           reduce using rule 96 (Statement -> JumpStatement M_instr .)
    DO              reduce using rule 96 (Statement -> JumpStatement M_instr .)
    FOR             reduce using rule 96 (Statement -> JumpStatement M_instr .)
    BREAK           reduce using rule 96 (Statement -> JumpStatement M_instr .)
    CONTINUE        reduce using rule 96 (Statement -> JumpStatement M_instr .)
    RETURN          reduce using rule 96 (Statement -> JumpStatement M_instr .)
    THROW           reduce using rule 96 (Statement -> JumpStatement M_instr .)
    {               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    BOOLEAN         reduce using rule 96 (Statement -> JumpStatement M_instr .)
    CHAR            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    BYTE            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    SHORT           reduce using rule 96 (Statement -> JumpStatement M_instr .)
    INT             reduce using rule 96 (Statement -> JumpStatement M_instr .)
    LONG            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    FLOAT           reduce using rule 96 (Statement -> JumpStatement M_instr .)
    DOUBLE          reduce using rule 96 (Statement -> JumpStatement M_instr .)
    VOID            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    OPT_INC_DEC     reduce using rule 96 (Statement -> JumpStatement M_instr .)
    +               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    -               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    ~               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    !               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    THIS            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    SUPER           reduce using rule 96 (Statement -> JumpStatement M_instr .)
    NULL            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    (               reduce using rule 96 (Statement -> JumpStatement M_instr .)
    INT_LITERAL     reduce using rule 96 (Statement -> JumpStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 96 (Statement -> JumpStatement M_instr .)
    CHAR_LITERAL    reduce using rule 96 (Statement -> JumpStatement M_instr .)
    STRING_LITERAL  reduce using rule 96 (Statement -> JumpStatement M_instr .)
    BOOL            reduce using rule 96 (Statement -> JumpStatement M_instr .)
    NEW             reduce using rule 96 (Statement -> JumpStatement M_instr .)
    CASE            reduce using rule 96 (Statement -> JumpStatement M_instr .)


state 226

    (111) IterationStatement -> WHILE M_instr_branch . ( Expression ) M_instr_branch Statement

    (               shift and go to state 295


state 227

    (182) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (183) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (184) ArrayAllocationExpression -> NEW TypeName . Dims
    (180) ClassAllocationExpression -> NEW TypeName . ( ArgumentList )
    (181) ClassAllocationExpression -> NEW TypeName . ( )
    (185) DimExprs -> . DimExpr
    (186) DimExprs -> . DimExprs DimExpr
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (187) DimExpr -> . [ Expression ]
    (190) OP_DIM -> . [ ]

    (               shift and go to state 296
    [               shift and go to state 299

    Dims                           shift and go to state 298
    DimExpr                        shift and go to state 300
    DimExprs                       shift and go to state 297
    OP_DIM                         shift and go to state 80

state 228

    (90) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . ; M_instr
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               shift and go to state 301
    ,               shift and go to state 171


state 229

    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (190) OP_DIM -> . [ ]

    ;               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    ,               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 173
    [               shift and go to state 79

    OP_DIM                         shift and go to state 174

state 230

    (107) SelectionStatement -> SWITCH ( . Expression Mark_switch ) Block
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 302
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 231

    (230) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . M_OP ConditionalAndExpression
    (231) M_OP -> .

    OPT_INC_DEC     reduce using rule 231 (M_OP -> .)
    +               reduce using rule 231 (M_OP -> .)
    -               reduce using rule 231 (M_OP -> .)
    ~               reduce using rule 231 (M_OP -> .)
    !               reduce using rule 231 (M_OP -> .)
    IDENTIFIER      reduce using rule 231 (M_OP -> .)
    THIS            reduce using rule 231 (M_OP -> .)
    SUPER           reduce using rule 231 (M_OP -> .)
    NULL            reduce using rule 231 (M_OP -> .)
    (               reduce using rule 231 (M_OP -> .)
    INT_LITERAL     reduce using rule 231 (M_OP -> .)
    FLOAT_LITERAL   reduce using rule 231 (M_OP -> .)
    CHAR_LITERAL    reduce using rule 231 (M_OP -> .)
    STRING_LITERAL  reduce using rule 231 (M_OP -> .)
    BOOL            reduce using rule 231 (M_OP -> .)
    NEW             reduce using rule 231 (M_OP -> .)
    BOOLEAN         reduce using rule 231 (M_OP -> .)
    CHAR            reduce using rule 231 (M_OP -> .)
    BYTE            reduce using rule 231 (M_OP -> .)
    SHORT           reduce using rule 231 (M_OP -> .)
    INT             reduce using rule 231 (M_OP -> .)
    LONG            reduce using rule 231 (M_OP -> .)
    FLOAT           reduce using rule 231 (M_OP -> .)
    DOUBLE          reduce using rule 231 (M_OP -> .)
    VOID            reduce using rule 231 (M_OP -> .)

    M_OP                           shift and go to state 303

state 232

    (233) ConditionalExpression -> ConditionalOrExpression ? . M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (98) M_instr -> .

    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 304

state 233

    (209) AdditiveExpression -> AdditiveExpression + . MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 305
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 234

    (210) AdditiveExpression -> AdditiveExpression - . MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 306
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 235

    (236) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 307
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 236

    (238) AssignmentOperator -> OPT_EQ .

    OPT_INC_DEC     reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    +               reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    -               reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    ~               reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    !               reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    IDENTIFIER      reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    THIS            reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    SUPER           reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    NULL            reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    (               reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    INT_LITERAL     reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    FLOAT_LITERAL   reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    CHAR_LITERAL    reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    STRING_LITERAL  reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    BOOL            reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    NEW             reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    BOOLEAN         reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    CHAR            reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    BYTE            reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    SHORT           reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    INT             reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    LONG            reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    FLOAT           reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    DOUBLE          reduce using rule 238 (AssignmentOperator -> OPT_EQ .)
    VOID            reduce using rule 238 (AssignmentOperator -> OPT_EQ .)


state 237

    (237) AssignmentOperator -> = .

    OPT_INC_DEC     reduce using rule 237 (AssignmentOperator -> = .)
    +               reduce using rule 237 (AssignmentOperator -> = .)
    -               reduce using rule 237 (AssignmentOperator -> = .)
    ~               reduce using rule 237 (AssignmentOperator -> = .)
    !               reduce using rule 237 (AssignmentOperator -> = .)
    IDENTIFIER      reduce using rule 237 (AssignmentOperator -> = .)
    THIS            reduce using rule 237 (AssignmentOperator -> = .)
    SUPER           reduce using rule 237 (AssignmentOperator -> = .)
    NULL            reduce using rule 237 (AssignmentOperator -> = .)
    (               reduce using rule 237 (AssignmentOperator -> = .)
    INT_LITERAL     reduce using rule 237 (AssignmentOperator -> = .)
    FLOAT_LITERAL   reduce using rule 237 (AssignmentOperator -> = .)
    CHAR_LITERAL    reduce using rule 237 (AssignmentOperator -> = .)
    STRING_LITERAL  reduce using rule 237 (AssignmentOperator -> = .)
    BOOL            reduce using rule 237 (AssignmentOperator -> = .)
    NEW             reduce using rule 237 (AssignmentOperator -> = .)
    BOOLEAN         reduce using rule 237 (AssignmentOperator -> = .)
    CHAR            reduce using rule 237 (AssignmentOperator -> = .)
    BYTE            reduce using rule 237 (AssignmentOperator -> = .)
    SHORT           reduce using rule 237 (AssignmentOperator -> = .)
    INT             reduce using rule 237 (AssignmentOperator -> = .)
    LONG            reduce using rule 237 (AssignmentOperator -> = .)
    FLOAT           reduce using rule 237 (AssignmentOperator -> = .)
    DOUBLE          reduce using rule 237 (AssignmentOperator -> = .)
    VOID            reduce using rule 237 (AssignmentOperator -> = .)


state 238

    (226) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 126
    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 308
    Float_LIT                      shift and go to state 144
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 239

    (124) JumpStatement -> BREAK ; .

    }               reduce using rule 124 (JumpStatement -> BREAK ; .)
    ;               reduce using rule 124 (JumpStatement -> BREAK ; .)
    IDENTIFIER      reduce using rule 124 (JumpStatement -> BREAK ; .)
    DEFAULT         reduce using rule 124 (JumpStatement -> BREAK ; .)
    IF              reduce using rule 124 (JumpStatement -> BREAK ; .)
    SWITCH          reduce using rule 124 (JumpStatement -> BREAK ; .)
    WHILE           reduce using rule 124 (JumpStatement -> BREAK ; .)
    DO              reduce using rule 124 (JumpStatement -> BREAK ; .)
    FOR             reduce using rule 124 (JumpStatement -> BREAK ; .)
    BREAK           reduce using rule 124 (JumpStatement -> BREAK ; .)
    CONTINUE        reduce using rule 124 (JumpStatement -> BREAK ; .)
    RETURN          reduce using rule 124 (JumpStatement -> BREAK ; .)
    THROW           reduce using rule 124 (JumpStatement -> BREAK ; .)
    {               reduce using rule 124 (JumpStatement -> BREAK ; .)
    BOOLEAN         reduce using rule 124 (JumpStatement -> BREAK ; .)
    CHAR            reduce using rule 124 (JumpStatement -> BREAK ; .)
    BYTE            reduce using rule 124 (JumpStatement -> BREAK ; .)
    SHORT           reduce using rule 124 (JumpStatement -> BREAK ; .)
    INT             reduce using rule 124 (JumpStatement -> BREAK ; .)
    LONG            reduce using rule 124 (JumpStatement -> BREAK ; .)
    FLOAT           reduce using rule 124 (JumpStatement -> BREAK ; .)
    DOUBLE          reduce using rule 124 (JumpStatement -> BREAK ; .)
    VOID            reduce using rule 124 (JumpStatement -> BREAK ; .)
    OPT_INC_DEC     reduce using rule 124 (JumpStatement -> BREAK ; .)
    +               reduce using rule 124 (JumpStatement -> BREAK ; .)
    -               reduce using rule 124 (JumpStatement -> BREAK ; .)
    ~               reduce using rule 124 (JumpStatement -> BREAK ; .)
    !               reduce using rule 124 (JumpStatement -> BREAK ; .)
    THIS            reduce using rule 124 (JumpStatement -> BREAK ; .)
    SUPER           reduce using rule 124 (JumpStatement -> BREAK ; .)
    NULL            reduce using rule 124 (JumpStatement -> BREAK ; .)
    (               reduce using rule 124 (JumpStatement -> BREAK ; .)
    INT_LITERAL     reduce using rule 124 (JumpStatement -> BREAK ; .)
    FLOAT_LITERAL   reduce using rule 124 (JumpStatement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 124 (JumpStatement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 124 (JumpStatement -> BREAK ; .)
    BOOL            reduce using rule 124 (JumpStatement -> BREAK ; .)
    NEW             reduce using rule 124 (JumpStatement -> BREAK ; .)
    CASE            reduce using rule 124 (JumpStatement -> BREAK ; .)
    ELSE            reduce using rule 124 (JumpStatement -> BREAK ; .)


state 240

    (123) JumpStatement -> BREAK IDENTIFIER . ;

    ;               shift and go to state 309


state 241

    (112) IterationStatement -> DO M_instr_branch . Statement WHILE M_instr_branch ( Expression ) ;
    (91) Statement -> . EmptyStatement M_instr
    (92) Statement -> . LabelStatement M_instr
    (93) Statement -> . ExpressionStatement ; M_instr
    (94) Statement -> . SelectionStatement M_instr
    (95) Statement -> . IterationStatement M_instr
    (96) Statement -> . JumpStatement M_instr
    (97) Statement -> . Block M_instr
    (99) EmptyStatement -> . ;
    (100) LabelStatement -> . IDENTIFIER :
    (101) LabelStatement -> . Marker_case CASE ConstantExpression :
    (102) LabelStatement -> . DEFAULT :
    (104) ExpressionStatement -> . Expression
    (105) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (107) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (111) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (112) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (103) Marker_case -> .
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 111
    IDENTIFIER      shift and go to state 96
    DEFAULT         shift and go to state 129
    IF              shift and go to state 164
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 131
    DO              shift and go to state 150
    FOR             shift and go to state 114
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 123
    RETURN          shift and go to state 103
    THROW           shift and go to state 168
    {               shift and go to state 68
    CASE            reduce using rule 103 (Marker_case -> .)
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    LabelStatement                 shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    ExpressionStatement            shift and go to state 90
    JumpStatement                  shift and go to state 130
    RealPostfixExpression          shift and go to state 104
    Statement                      shift and go to state 310
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    SelectionStatement             shift and go to state 112
    NewAllocationExpression        shift and go to state 138
    PrimitiveType                  shift and go to state 190
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Marker_case                    shift and go to state 97
    Expression                     shift and go to state 139
    Block                          shift and go to state 117
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    EmptyStatement                 shift and go to state 101
    SpecialName                    shift and go to state 125
    FieldAccess                    shift and go to state 147
    IterationStatement             shift and go to state 169
    Integer_LIT                    shift and go to state 95

state 242

    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (173) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (159) FieldAccess -> QualifiedName . . THIS
    (160) FieldAccess -> QualifiedName . . CLASS
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )

    IDENTIFIER      shift and go to state 71
    THIS            shift and go to state 311
    CLASS           shift and go to state 313
    NEW             shift and go to state 132

    ArrayAllocationExpression      shift and go to state 118
    ClassAllocationExpression      shift and go to state 128
    PlainNewAllocationExpression   shift and go to state 312

state 243

    (155) ArrayAccess -> QualifiedName [ . Expression ]
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    QualifiedName                  shift and go to state 192
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    LogicalUnaryOperator           shift and go to state 160
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 314
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 244

    (212) ShiftExpression -> ShiftExpression OPT_SOME . AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 315
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    FieldAccess                    shift and go to state 147
    Float_LIT                      shift and go to state 144
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 245

    (87) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    }               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    {               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    +               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    -               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    !               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    (               reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 87 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 246

    (84) Block -> { LocalVariableDeclarationsAndStatements } .

    ELSE            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    }               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    ;               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    IDENTIFIER      reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DEFAULT         reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    IF              reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SWITCH          reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    WHILE           reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DO              reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FOR             reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BREAK           reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CONTINUE        reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    RETURN          reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    THROW           reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    {               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BOOLEAN         reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CHAR            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BYTE            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SHORT           reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INT             reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    LONG            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT           reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DOUBLE          reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    VOID            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    OPT_INC_DEC     reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    +               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    -               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    ~               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    !               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    THIS            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SUPER           reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    NULL            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    (               reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INT_LITERAL     reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT_LITERAL   reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CHAR_LITERAL    reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    STRING_LITERAL  reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BOOL            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    NEW             reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CASE            reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    STATIC          reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    PUBLIC          reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    PRIVATE         reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CLASS           reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INTERFACE       reduce using rule 84 (Block -> { LocalVariableDeclarationsAndStatements } .)


state 247

    (157) FieldAccess -> NotJustName . . IDENTIFIER

    IDENTIFIER      shift and go to state 316


state 248

    (198) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    *               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    /               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    %               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    +               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    -               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_SOME        reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    <               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    >               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ?               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ;               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    )               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ,               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    :               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    }               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ]               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    =               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_EQ          reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 249

    (105) SelectionStatement -> IF ( . Expression ) M_instr_branch Statement
    (106) SelectionStatement -> IF ( . Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 317
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 250

    (129) JumpStatement -> THROW Expression . ;

    ;               shift and go to state 318


state 251

    (95) Statement -> IterationStatement M_instr .

    ELSE            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    }               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    ;               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    IDENTIFIER      reduce using rule 95 (Statement -> IterationStatement M_instr .)
    DEFAULT         reduce using rule 95 (Statement -> IterationStatement M_instr .)
    IF              reduce using rule 95 (Statement -> IterationStatement M_instr .)
    SWITCH          reduce using rule 95 (Statement -> IterationStatement M_instr .)
    WHILE           reduce using rule 95 (Statement -> IterationStatement M_instr .)
    DO              reduce using rule 95 (Statement -> IterationStatement M_instr .)
    FOR             reduce using rule 95 (Statement -> IterationStatement M_instr .)
    BREAK           reduce using rule 95 (Statement -> IterationStatement M_instr .)
    CONTINUE        reduce using rule 95 (Statement -> IterationStatement M_instr .)
    RETURN          reduce using rule 95 (Statement -> IterationStatement M_instr .)
    THROW           reduce using rule 95 (Statement -> IterationStatement M_instr .)
    {               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    BOOLEAN         reduce using rule 95 (Statement -> IterationStatement M_instr .)
    CHAR            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    BYTE            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    SHORT           reduce using rule 95 (Statement -> IterationStatement M_instr .)
    INT             reduce using rule 95 (Statement -> IterationStatement M_instr .)
    LONG            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    FLOAT           reduce using rule 95 (Statement -> IterationStatement M_instr .)
    DOUBLE          reduce using rule 95 (Statement -> IterationStatement M_instr .)
    VOID            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    OPT_INC_DEC     reduce using rule 95 (Statement -> IterationStatement M_instr .)
    +               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    -               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    ~               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    !               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    THIS            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    SUPER           reduce using rule 95 (Statement -> IterationStatement M_instr .)
    NULL            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    (               reduce using rule 95 (Statement -> IterationStatement M_instr .)
    INT_LITERAL     reduce using rule 95 (Statement -> IterationStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 95 (Statement -> IterationStatement M_instr .)
    CHAR_LITERAL    reduce using rule 95 (Statement -> IterationStatement M_instr .)
    STRING_LITERAL  reduce using rule 95 (Statement -> IterationStatement M_instr .)
    BOOL            reduce using rule 95 (Statement -> IterationStatement M_instr .)
    NEW             reduce using rule 95 (Statement -> IterationStatement M_instr .)
    CASE            reduce using rule 95 (Statement -> IterationStatement M_instr .)


state 252

    (58) VariableDeclarators -> VariableDeclarators , VariableDeclarator .

    ,               reduce using rule 58 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)
    ;               reduce using rule 58 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)


state 253

    (68) MethodDeclarator -> DeclaratorName ( ) .

    ;               reduce using rule 68 (MethodDeclarator -> DeclaratorName ( ) .)
    {               reduce using rule 68 (MethodDeclarator -> DeclaratorName ( ) .)


state 254

    (67) MethodDeclarator -> DeclaratorName ( ParameterList . )
    (70) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 319
    ,               shift and go to state 259


state 255

    (60) VariableDeclarator -> DeclaratorName = VariableInitializer .

    ;               reduce using rule 60 (VariableDeclarator -> DeclaratorName = VariableInitializer .)
    ,               reduce using rule 60 (VariableDeclarator -> DeclaratorName = VariableInitializer .)


state 256

    (61) VariableInitializer -> Expression .

    ,               reduce using rule 61 (VariableInitializer -> Expression .)
    ;               reduce using rule 61 (VariableInitializer -> Expression .)
    }               reduce using rule 61 (VariableInitializer -> Expression .)


state 257

    (71) Parameter -> TypeSpecifier DeclaratorName .
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (190) OP_DIM -> . [ ]

    )               reduce using rule 71 (Parameter -> TypeSpecifier DeclaratorName .)
    ,               reduce using rule 71 (Parameter -> TypeSpecifier DeclaratorName .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 174

state 258

    (78) ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .

    {               reduce using rule 78 (ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .)


state 259

    (70) ParameterList -> ParameterList , . Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 320
    TypeSpecifier                  shift and go to state 181

state 260

    (65) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 261

    (93) Statement -> ExpressionStatement ; M_instr .

    ELSE            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    }               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    ;               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    IDENTIFIER      reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    DEFAULT         reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    IF              reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    SWITCH          reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    WHILE           reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    DO              reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    FOR             reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    BREAK           reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    CONTINUE        reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    RETURN          reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    THROW           reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    {               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    BOOLEAN         reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    CHAR            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    BYTE            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    SHORT           reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    INT             reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    LONG            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    FLOAT           reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    DOUBLE          reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    VOID            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    OPT_INC_DEC     reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    +               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    -               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    ~               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    !               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    THIS            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    SUPER           reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    NULL            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    (               reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    INT_LITERAL     reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    FLOAT_LITERAL   reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    CHAR_LITERAL    reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    STRING_LITERAL  reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    BOOL            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    NEW             reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)
    CASE            reduce using rule 93 (Statement -> ExpressionStatement ; M_instr .)


state 262

    (161) FieldAccess -> PrimitiveType . CLASS .

    [               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    .               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_INC_DEC     reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    =               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_EQ          reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    *               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    /               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    %               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    +               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    -               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_SOME        reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    <               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    >               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LE           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_GE           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_EQ           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_NE           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    &               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ^               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    |               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LAND         reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ?               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LOR          reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    )               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    (               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ;               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ,               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    :               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    }               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ]               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)


state 263

    (222) AndExpression -> AndExpression & EqualityExpression .
    (219) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (220) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    ?               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    )               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    ,               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    }               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    ;               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    :               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    ]               reduce using rule 222 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 204
    OP_NE           shift and go to state 203


state 264

    (146) ComplexPrimary -> ( Expression ) .

    [               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 146 (ComplexPrimary -> ( Expression ) .)


state 265

    (240) ConstantExpression -> ConditionalExpression .

    :               reduce using rule 240 (ConstantExpression -> ConditionalExpression .)


state 266

    (101) LabelStatement -> Marker_case CASE ConstantExpression . :

    :               shift and go to state 321


state 267

    (228) ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP . InclusiveOrExpression
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    Float_LIT                      shift and go to state 144
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    InclusiveOrExpression          shift and go to state 322
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 120
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 268

    (127) JumpStatement -> RETURN Expression ; .

    }               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    ;               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    IDENTIFIER      reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    DEFAULT         reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    IF              reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    SWITCH          reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    DO              reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    FOR             reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CONTINUE        reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    THROW           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    {               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BOOLEAN         reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CHAR            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BYTE            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    SHORT           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    INT             reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    LONG            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    FLOAT           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    DOUBLE          reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    VOID            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    OPT_INC_DEC     reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    +               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    -               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    ~               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    !               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    THIS            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    SUPER           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    NULL            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    (               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    INT_LITERAL     reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    FLOAT_LITERAL   reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CHAR_LITERAL    reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    STRING_LITERAL  reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BOOL            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    NEW             reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CASE            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    ELSE            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)


state 269

    (158) FieldAccess -> RealPostfixExpression . IDENTIFIER .

    [               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    .               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    =               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_EQ          reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    *               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    /               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    %               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    +               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    -               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_SOME        reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    <               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    >               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LE           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_GE           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_EQ           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_NE           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    &               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ^               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    |               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LAND         reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ?               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LOR          reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    )               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    (               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ;               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ,               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    :               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    }               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ]               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)


state 270

    (220) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (214) RelationalExpression -> RelationalExpression . < ShiftExpression
    (215) RelationalExpression -> RelationalExpression . > ShiftExpression
    (216) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (217) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ?               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ;               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    )               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ,               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    }               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ]               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    :               reduce using rule 220 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    <               shift and go to state 215
    >               shift and go to state 218
    OP_LE           shift and go to state 216
    OP_GE           shift and go to state 217


state 271

    (219) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (214) RelationalExpression -> RelationalExpression . < ShiftExpression
    (215) RelationalExpression -> RelationalExpression . > ShiftExpression
    (216) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (217) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ?               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ;               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    )               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ,               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    }               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ]               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    :               reduce using rule 219 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    <               shift and go to state 215
    >               shift and go to state 218
    OP_LE           shift and go to state 216
    OP_GE           shift and go to state 217


state 272

    (205) MultiplicativeExpression -> MultiplicativeExpression * CastExpression .

    *               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    /               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    %               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    +               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    -               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OPT_SOME        reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    <               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    >               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LE           reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_GE           reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_EQ           reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_NE           reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    &               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ^               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    |               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LAND         reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ?               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LOR          reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    :               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ;               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    )               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ,               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    }               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ]               reduce using rule 205 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)


state 273

    (207) MultiplicativeExpression -> MultiplicativeExpression % CastExpression .

    *               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    /               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    %               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    +               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    -               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OPT_SOME        reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    <               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    >               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LE           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_GE           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_EQ           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_NE           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    &               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ^               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    |               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LAND         reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ?               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LOR          reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    :               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ;               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    )               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ,               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    }               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ]               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)


state 274

    (206) MultiplicativeExpression -> MultiplicativeExpression / CastExpression .

    *               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    /               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    %               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    +               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    -               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OPT_SOME        reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    <               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    >               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LE           reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_GE           reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_EQ           reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_NE           reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    &               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ^               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    |               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LAND         reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ?               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LOR          reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    :               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ;               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    )               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ,               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    }               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ]               reduce using rule 206 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)


state 275

    (121) ExpressionStatements -> ExpressionStatement .

    ,               reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)
    )               reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)
    ;               reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)


state 276

    (116) ForInit -> ; .

    ;               reduce using rule 116 (ForInit -> ; .)
    OPT_INC_DEC     reduce using rule 116 (ForInit -> ; .)
    +               reduce using rule 116 (ForInit -> ; .)
    -               reduce using rule 116 (ForInit -> ; .)
    ~               reduce using rule 116 (ForInit -> ; .)
    !               reduce using rule 116 (ForInit -> ; .)
    IDENTIFIER      reduce using rule 116 (ForInit -> ; .)
    THIS            reduce using rule 116 (ForInit -> ; .)
    SUPER           reduce using rule 116 (ForInit -> ; .)
    NULL            reduce using rule 116 (ForInit -> ; .)
    (               reduce using rule 116 (ForInit -> ; .)
    INT_LITERAL     reduce using rule 116 (ForInit -> ; .)
    FLOAT_LITERAL   reduce using rule 116 (ForInit -> ; .)
    CHAR_LITERAL    reduce using rule 116 (ForInit -> ; .)
    STRING_LITERAL  reduce using rule 116 (ForInit -> ; .)
    BOOL            reduce using rule 116 (ForInit -> ; .)
    NEW             reduce using rule 116 (ForInit -> ; .)
    BOOLEAN         reduce using rule 116 (ForInit -> ; .)
    CHAR            reduce using rule 116 (ForInit -> ; .)
    BYTE            reduce using rule 116 (ForInit -> ; .)
    SHORT           reduce using rule 116 (ForInit -> ; .)
    INT             reduce using rule 116 (ForInit -> ; .)
    LONG            reduce using rule 116 (ForInit -> ; .)
    FLOAT           reduce using rule 116 (ForInit -> ; .)
    DOUBLE          reduce using rule 116 (ForInit -> ; .)
    VOID            reduce using rule 116 (ForInit -> ; .)


state 277

    (113) IterationStatement -> FOR ( ForInit . M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (98) M_instr -> .

    ;               reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 323

state 278

    (114) ForInit -> ExpressionStatements . ;
    (122) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    ;               shift and go to state 324
    ,               shift and go to state 325


state 279

    (115) ForInit -> LocalVariableDeclarationStatement .

    ;               reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    +               reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    -               reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    !               reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    (               reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 115 (ForInit -> LocalVariableDeclarationStatement .)


state 280

    (176) PlainNewAllocationExpression -> ArrayAllocationExpression { } .

    .               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    =               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_EQ          reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    *               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    /               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    %               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    +               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    -               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_SOME        reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    <               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    >               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LE           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_GE           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_EQ           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_NE           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    &               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ^               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    |               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LAND         reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ?               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LOR          reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    }               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ,               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    )               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ;               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    :               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ]               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)


state 281

    (178) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers . }
    (63) ArrayInitializers -> ArrayInitializers . , VariableInitializer
    (64) ArrayInitializers -> ArrayInitializers . ,

    }               shift and go to state 327
    ,               shift and go to state 326


state 282

    (62) ArrayInitializers -> VariableInitializer .

    }               reduce using rule 62 (ArrayInitializers -> VariableInitializer .)
    ,               reduce using rule 62 (ArrayInitializers -> VariableInitializer .)


state 283

    (162) MethodCall -> MethodAccess ( ArgumentList . )
    (171) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 328
    ,               shift and go to state 329


state 284

    (170) ArgumentList -> Expression .

    )               reduce using rule 170 (ArgumentList -> Expression .)
    ,               reduce using rule 170 (ArgumentList -> Expression .)


state 285

    (163) MethodCall -> MethodAccess ( ) .

    [               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    .               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OPT_INC_DEC     reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    =               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OPT_EQ          reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    *               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    /               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    %               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    +               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    -               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OPT_SOME        reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    <               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    >               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_LE           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_GE           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_EQ           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_NE           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    &               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ^               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    |               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_LAND         reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ?               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_LOR          reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    )               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    (               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ,               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ;               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    :               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    }               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ]               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)


state 286

    (224) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (222) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ?               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ,               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    )               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ;               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    :               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    }               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ]               reduce using rule 224 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 189


state 287

    (214) RelationalExpression -> RelationalExpression < ShiftExpression .
    (212) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    >               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LE           reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_GE           reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_EQ           reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_NE           reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    &               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ^               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    |               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LAND         reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ?               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LOR          reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ]               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ;               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    )               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ,               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    :               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    }               reduce using rule 214 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OPT_SOME        shift and go to state 244


state 288

    (216) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (212) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    >               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ?               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ]               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ;               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    )               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ,               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    :               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    }               reduce using rule 216 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OPT_SOME        shift and go to state 244


state 289

    (217) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (212) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    >               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ?               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ]               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ;               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    )               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ,               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    :               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    }               reduce using rule 217 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OPT_SOME        shift and go to state 244


state 290

    (215) RelationalExpression -> RelationalExpression > ShiftExpression .
    (212) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    >               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LE           reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_GE           reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_EQ           reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_NE           reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    &               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ^               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    |               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LAND         reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ?               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LOR          reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ]               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ;               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    )               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ,               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    :               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    }               reduce using rule 215 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OPT_SOME        shift and go to state 244


state 291

    (125) JumpStatement -> CONTINUE IDENTIFIER ; .

    }               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ;               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DEFAULT         reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IF              reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SWITCH          reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    WHILE           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DO              reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FOR             reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BREAK           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CONTINUE        reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    RETURN          reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THROW           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    {               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOLEAN         reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BYTE            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SHORT           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT             reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    LONG            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DOUBLE          reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    VOID            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    +               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    -               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ~               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    !               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THIS            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SUPER           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NULL            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    (               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOL            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NEW             reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CASE            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ELSE            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)


state 292

    (156) ArrayAccess -> ComplexPrimary [ Expression . ]

    ]               shift and go to state 330


state 293

    (179) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations . }
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (76) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (77) ConstructorDeclaration -> . ConstructorDeclarator Block
    (80) StaticInitializer -> . STATIC Block
    (81) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (78) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (79) ConstructorDeclarator -> . IDENTIFIER ( )
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 331
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    ConstructorDeclaration         shift and go to state 42
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 85
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 294

    (177) PlainNewAllocationExpression -> ClassAllocationExpression { } .

    .               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    =               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_EQ          reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    *               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    /               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    %               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    +               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    -               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_SOME        reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    <               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    >               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LE           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_GE           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_EQ           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_NE           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    &               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ^               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    |               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LAND         reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ?               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LOR          reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    }               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ,               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    )               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ;               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    :               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ]               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)


state 295

    (111) IterationStatement -> WHILE M_instr_branch ( . Expression ) M_instr_branch Statement
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 332
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 296

    (180) ClassAllocationExpression -> NEW TypeName ( . ArgumentList )
    (181) ClassAllocationExpression -> NEW TypeName ( . )
    (170) ArgumentList -> . Expression
    (171) ArgumentList -> . ArgumentList , Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    )               shift and go to state 334
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    ArgumentList                   shift and go to state 333
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 284
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 297

    (182) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (183) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (186) DimExprs -> DimExprs . DimExpr
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (187) DimExpr -> . [ Expression ]
    (190) OP_DIM -> . [ ]

    {               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    .               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_INC_DEC     reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    =               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_EQ          reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    *               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    /               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    %               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    +               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    -               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_SOME        reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    <               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    >               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ?               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ;               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    )               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ,               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    :               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    }               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ]               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    [               shift and go to state 299

    DimExpr                        shift and go to state 335
    Dims                           shift and go to state 336
    OP_DIM                         shift and go to state 80

state 298

    (184) ArrayAllocationExpression -> NEW TypeName Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    {               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    .               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_INC_DEC     reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    =               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_EQ          reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    *               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    /               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    %               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    +               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    -               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_SOME        reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    <               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    >               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ?               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ;               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    )               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ,               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    :               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    }               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ]               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 179

state 299

    (187) DimExpr -> [ . Expression ]
    (190) OP_DIM -> [ . ]
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ]               shift and go to state 178
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 337
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 300

    (185) DimExprs -> DimExpr .

    [               reduce using rule 185 (DimExprs -> DimExpr .)
    {               reduce using rule 185 (DimExprs -> DimExpr .)
    .               reduce using rule 185 (DimExprs -> DimExpr .)
    OPT_INC_DEC     reduce using rule 185 (DimExprs -> DimExpr .)
    =               reduce using rule 185 (DimExprs -> DimExpr .)
    OPT_EQ          reduce using rule 185 (DimExprs -> DimExpr .)
    *               reduce using rule 185 (DimExprs -> DimExpr .)
    /               reduce using rule 185 (DimExprs -> DimExpr .)
    %               reduce using rule 185 (DimExprs -> DimExpr .)
    +               reduce using rule 185 (DimExprs -> DimExpr .)
    -               reduce using rule 185 (DimExprs -> DimExpr .)
    OPT_SOME        reduce using rule 185 (DimExprs -> DimExpr .)
    <               reduce using rule 185 (DimExprs -> DimExpr .)
    >               reduce using rule 185 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 185 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 185 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 185 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 185 (DimExprs -> DimExpr .)
    &               reduce using rule 185 (DimExprs -> DimExpr .)
    ^               reduce using rule 185 (DimExprs -> DimExpr .)
    |               reduce using rule 185 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 185 (DimExprs -> DimExpr .)
    ?               reduce using rule 185 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 185 (DimExprs -> DimExpr .)
    ;               reduce using rule 185 (DimExprs -> DimExpr .)
    )               reduce using rule 185 (DimExprs -> DimExpr .)
    ,               reduce using rule 185 (DimExprs -> DimExpr .)
    :               reduce using rule 185 (DimExprs -> DimExpr .)
    }               reduce using rule 185 (DimExprs -> DimExpr .)
    ]               reduce using rule 185 (DimExprs -> DimExpr .)


state 301

    (90) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; . M_instr
    (98) M_instr -> .

    }               reduce using rule 98 (M_instr -> .)
    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 338

state 302

    (107) SelectionStatement -> SWITCH ( Expression . Mark_switch ) Block
    (108) Mark_switch -> .

    )               reduce using rule 108 (Mark_switch -> .)

    Mark_switch                    shift and go to state 339

state 303

    (230) ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP . ConditionalAndExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    Float_LIT                      shift and go to state 144
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    MethodCall                     shift and go to state 110
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    UnaryExpression                shift and go to state 202
    InclusiveOrExpression          shift and go to state 143
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 340
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    MethodAccess                   shift and go to state 119
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 304

    (233) ConditionalExpression -> ConditionalOrExpression ? M_instr . Expression Mark : M_instr ConditionalExpression M_instr
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 341
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 305

    (209) AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .
    (205) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (206) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (207) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    -               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OPT_SOME        reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    <               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    >               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LE           reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_GE           reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_EQ           reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_NE           reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    &               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ^               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    |               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LAND         reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ?               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LOR          reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ;               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    )               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ,               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    :               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    }               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ]               reduce using rule 209 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    *               shift and go to state 205
    /               shift and go to state 207
    %               shift and go to state 206


state 306

    (210) AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .
    (205) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (206) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (207) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    -               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OPT_SOME        reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    <               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    >               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LE           reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_GE           reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_EQ           reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_NE           reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    &               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ^               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    |               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LAND         reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ?               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LOR          reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ;               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    )               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ,               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    :               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    }               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ]               reduce using rule 210 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    *               shift and go to state 205
    /               shift and go to state 207
    %               shift and go to state 206


state 307

    (236) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    )               reduce using rule 236 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    }               reduce using rule 236 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ,               reduce using rule 236 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ;               reduce using rule 236 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ]               reduce using rule 236 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    :               reduce using rule 236 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 308

    (226) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (224) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ?               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    )               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ;               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ,               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    :               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    }               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ]               reduce using rule 226 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 214


state 309

    (123) JumpStatement -> BREAK IDENTIFIER ; .

    }               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    ;               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    DEFAULT         reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    IF              reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    SWITCH          reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    WHILE           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    DO              reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    FOR             reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BREAK           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CONTINUE        reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    RETURN          reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    THROW           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    {               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOLEAN         reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BYTE            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    SHORT           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT             reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    LONG            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    DOUBLE          reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    VOID            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    +               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    -               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    ~               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    !               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    THIS            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    SUPER           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    NULL            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    (               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOL            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    NEW             reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CASE            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    ELSE            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)


state 310

    (112) IterationStatement -> DO M_instr_branch Statement . WHILE M_instr_branch ( Expression ) ;

    WHILE           shift and go to state 342


state 311

    (159) FieldAccess -> QualifiedName . THIS .

    [               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    .               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OPT_INC_DEC     reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    =               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OPT_EQ          reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    *               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    /               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    %               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    +               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    -               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OPT_SOME        reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    <               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    >               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_LE           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_GE           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_EQ           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_NE           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    &               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ^               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    |               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_LAND         reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ?               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_LOR          reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    )               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    (               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ;               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ,               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    :               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    }               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ]               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)


state 312

    (173) NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .

    .               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    *               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    /               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    %               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    +               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    -               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    <               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    >               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LE           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_GE           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_NE           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    &               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ^               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    |               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ?               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ;               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    )               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ,               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    :               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    }               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ]               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    =               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)


state 313

    (160) FieldAccess -> QualifiedName . CLASS .

    [               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    .               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OPT_INC_DEC     reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    =               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OPT_EQ          reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    *               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    /               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    %               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    +               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    -               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OPT_SOME        reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    <               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    >               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_LE           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_GE           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_EQ           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_NE           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    &               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ^               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    |               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_LAND         reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ?               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_LOR          reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    )               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    (               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ;               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ,               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    :               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    }               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ]               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)


state 314

    (155) ArrayAccess -> QualifiedName [ Expression . ]

    ]               shift and go to state 343


state 315

    (212) ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .
    (209) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (210) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    <               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    >               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LE           reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_GE           reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_EQ           reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_NE           reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    &               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ^               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    |               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LAND         reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ?               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LOR          reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    )               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ,               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ]               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ;               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    :               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    }               reduce using rule 212 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    +               shift and go to state 233
    -               shift and go to state 234


state 316

    (157) FieldAccess -> NotJustName . IDENTIFIER .

    [               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    .               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    =               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_EQ          reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    *               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    /               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    %               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    +               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    -               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_SOME        reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    <               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    >               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LE           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_GE           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_EQ           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_NE           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    &               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ^               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    |               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LAND         reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ?               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LOR          reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    )               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    (               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ;               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ,               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    :               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    }               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ]               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)


state 317

    (105) SelectionStatement -> IF ( Expression . ) M_instr_branch Statement
    (106) SelectionStatement -> IF ( Expression . ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement

    )               shift and go to state 344


state 318

    (129) JumpStatement -> THROW Expression ; .

    }               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    ;               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    IDENTIFIER      reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    DEFAULT         reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    IF              reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    SWITCH          reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    WHILE           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    DO              reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    FOR             reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BREAK           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CONTINUE        reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    RETURN          reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    THROW           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    {               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BOOLEAN         reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CHAR            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BYTE            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    SHORT           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    INT             reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    LONG            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    FLOAT           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    DOUBLE          reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    VOID            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    OPT_INC_DEC     reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    +               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    -               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    ~               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    !               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    THIS            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    SUPER           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    NULL            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    (               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    INT_LITERAL     reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    FLOAT_LITERAL   reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CHAR_LITERAL    reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    STRING_LITERAL  reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BOOL            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    NEW             reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CASE            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    ELSE            reduce using rule 129 (JumpStatement -> THROW Expression ; .)


state 319

    (67) MethodDeclarator -> DeclaratorName ( ParameterList ) .

    ;               reduce using rule 67 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)
    {               reduce using rule 67 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)


state 320

    (70) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 70 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 70 (ParameterList -> ParameterList , Parameter .)


state 321

    (101) LabelStatement -> Marker_case CASE ConstantExpression : .

    WHILE           reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    }               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ;               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    IDENTIFIER      reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DEFAULT         reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    IF              reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SWITCH          reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DO              reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FOR             reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BREAK           reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CONTINUE        reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    RETURN          reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    THROW           reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    {               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BOOLEAN         reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CHAR            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BYTE            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SHORT           reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    INT             reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    LONG            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FLOAT           reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DOUBLE          reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    VOID            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    OPT_INC_DEC     reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    +               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    -               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ~               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    !               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    THIS            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SUPER           reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    NULL            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    (               reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    INT_LITERAL     reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FLOAT_LITERAL   reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CHAR_LITERAL    reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    STRING_LITERAL  reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BOOL            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    NEW             reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CASE            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ELSE            reduce using rule 101 (LabelStatement -> Marker_case CASE ConstantExpression : .)


state 322

    (228) ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .
    (226) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ?               reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    OP_LOR          reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    )               reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    :               reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ;               reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ,               reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    }               reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ]               reduce using rule 228 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    |               shift and go to state 238


state 323

    (113) IterationStatement -> FOR ( ForInit M_instr . ForExpr M_instr ForIncr ) M_instr Statement
    (117) ForExpr -> . Expression ;
    (118) ForExpr -> . ;
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 346
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ForExpr                        shift and go to state 345
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 347
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 324

    (114) ForInit -> ExpressionStatements ; .

    ;               reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    OPT_INC_DEC     reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    +               reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    -               reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    ~               reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    !               reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    IDENTIFIER      reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    THIS            reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    SUPER           reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    NULL            reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    (               reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    INT_LITERAL     reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    FLOAT_LITERAL   reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    CHAR_LITERAL    reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    STRING_LITERAL  reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    BOOL            reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    NEW             reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    BOOLEAN         reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    CHAR            reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    BYTE            reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    SHORT           reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    INT             reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    LONG            reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    FLOAT           reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    DOUBLE          reduce using rule 114 (ForInit -> ExpressionStatements ; .)
    VOID            reduce using rule 114 (ForInit -> ExpressionStatements ; .)


state 325

    (122) ExpressionStatements -> ExpressionStatements , . ExpressionStatement
    (104) ExpressionStatement -> . Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ExpressionStatement            shift and go to state 348
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 139
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 326

    (63) ArrayInitializers -> ArrayInitializers , . VariableInitializer
    (64) ArrayInitializers -> ArrayInitializers , .
    (61) VariableInitializer -> . Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    }               reduce using rule 64 (ArrayInitializers -> ArrayInitializers , .)
    ,               reduce using rule 64 (ArrayInitializers -> ArrayInitializers , .)
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    VariableInitializer            shift and go to state 349
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 256
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 327

    (178) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .

    .               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_INC_DEC     reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    =               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_EQ          reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    *               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    /               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    %               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    +               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    -               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_SOME        reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    <               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    >               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LE           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_GE           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_EQ           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_NE           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    &               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ^               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    |               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LAND         reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ?               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LOR          reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    }               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ,               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    )               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ;               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    :               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ]               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)


state 328

    (162) MethodCall -> MethodAccess ( ArgumentList ) .

    [               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    .               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    =               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_EQ          reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    *               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    /               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    %               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    +               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    -               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_SOME        reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    <               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    >               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LE           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_GE           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_EQ           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_NE           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    &               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ^               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    |               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LAND         reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ?               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LOR          reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    )               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    (               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ,               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ;               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    :               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    }               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ]               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)


state 329

    (171) ArgumentList -> ArgumentList , . Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 350
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 330

    (156) ArrayAccess -> ComplexPrimary [ Expression ] .

    [               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    .               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_INC_DEC     reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    =               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_EQ          reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    *               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    /               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    %               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    +               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    -               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_SOME        reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    <               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    >               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LE           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_GE           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_EQ           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_NE           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    &               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ^               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    |               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LAND         reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ?               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LOR          reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ]               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    (               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ;               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ,               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    )               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    :               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    }               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)


state 331

    (179) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .

    .               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_INC_DEC     reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    =               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_EQ          reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    *               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    /               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    %               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    +               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    -               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_SOME        reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    <               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    >               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LE           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_GE           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_EQ           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_NE           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    &               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ^               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    |               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LAND         reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ?               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LOR          reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    }               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ,               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    )               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ;               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    :               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ]               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)


state 332

    (111) IterationStatement -> WHILE M_instr_branch ( Expression . ) M_instr_branch Statement

    )               shift and go to state 351


state 333

    (180) ClassAllocationExpression -> NEW TypeName ( ArgumentList . )
    (171) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 352
    ,               shift and go to state 329


state 334

    (181) ClassAllocationExpression -> NEW TypeName ( ) .

    {               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    .               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_INC_DEC     reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    =               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_EQ          reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    *               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    /               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    %               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    +               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    -               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_SOME        reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    <               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    >               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LE           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_GE           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_EQ           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_NE           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    &               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ^               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    |               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LAND         reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ?               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LOR          reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ;               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ,               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    )               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    :               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    }               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ]               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)


state 335

    (186) DimExprs -> DimExprs DimExpr .

    [               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    {               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    .               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OPT_INC_DEC     reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    =               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OPT_EQ          reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    *               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    /               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    %               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    +               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    -               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OPT_SOME        reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    <               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    >               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ?               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ;               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    )               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ,               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    :               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    }               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ]               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)


state 336

    (182) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    {               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    .               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_INC_DEC     reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    =               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_EQ          reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    *               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    /               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    %               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    +               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    -               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_SOME        reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    <               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    >               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ?               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ;               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    )               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ,               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    :               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    }               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ]               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 179

state 337

    (187) DimExpr -> [ Expression . ]

    ]               shift and go to state 353


state 338

    (90) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .

    ;               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    OPT_INC_DEC     reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    +               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    -               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    ~               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    !               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    IDENTIFIER      reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    THIS            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SUPER           reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    NULL            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    (               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    INT_LITERAL     reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FLOAT_LITERAL   reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CHAR_LITERAL    reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    STRING_LITERAL  reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BOOL            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    NEW             reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BOOLEAN         reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CHAR            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BYTE            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SHORT           reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    INT             reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    LONG            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FLOAT           reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DOUBLE          reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    VOID            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    }               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DEFAULT         reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    IF              reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SWITCH          reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    WHILE           reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DO              reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FOR             reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BREAK           reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CONTINUE        reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    RETURN          reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    THROW           reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    {               reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CASE            reduce using rule 90 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)


state 339

    (107) SelectionStatement -> SWITCH ( Expression Mark_switch . ) Block

    )               shift and go to state 354


state 340

    (230) ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .
    (228) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND M_OP InclusiveOrExpression

    ?               reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    OP_LOR          reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ;               reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    )               reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    }               reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ,               reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    :               reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ]               reduce using rule 230 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    OP_LAND         shift and go to state 195


state 341

    (233) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression . Mark : M_instr ConditionalExpression M_instr
    (234) Mark -> .

    :               reduce using rule 234 (Mark -> .)

    Mark                           shift and go to state 355

state 342

    (112) IterationStatement -> DO M_instr_branch Statement WHILE . M_instr_branch ( Expression ) ;
    (110) M_instr_branch -> .

    (               reduce using rule 110 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 356

state 343

    (155) ArrayAccess -> QualifiedName [ Expression ] .

    [               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    .               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_INC_DEC     reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    =               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_EQ          reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    *               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    /               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    %               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    +               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    -               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_SOME        reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    <               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    >               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LE           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_GE           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_EQ           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_NE           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    &               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ^               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    |               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LAND         reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ?               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LOR          reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ]               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    (               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ;               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ,               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    )               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    :               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    }               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)


state 344

    (105) SelectionStatement -> IF ( Expression ) . M_instr_branch Statement
    (106) SelectionStatement -> IF ( Expression ) . M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) M_instr_branch -> .

    ;               reduce using rule 110 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 110 (M_instr_branch -> .)
    DEFAULT         reduce using rule 110 (M_instr_branch -> .)
    IF              reduce using rule 110 (M_instr_branch -> .)
    SWITCH          reduce using rule 110 (M_instr_branch -> .)
    WHILE           reduce using rule 110 (M_instr_branch -> .)
    DO              reduce using rule 110 (M_instr_branch -> .)
    FOR             reduce using rule 110 (M_instr_branch -> .)
    BREAK           reduce using rule 110 (M_instr_branch -> .)
    CONTINUE        reduce using rule 110 (M_instr_branch -> .)
    RETURN          reduce using rule 110 (M_instr_branch -> .)
    THROW           reduce using rule 110 (M_instr_branch -> .)
    {               reduce using rule 110 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 110 (M_instr_branch -> .)
    +               reduce using rule 110 (M_instr_branch -> .)
    -               reduce using rule 110 (M_instr_branch -> .)
    ~               reduce using rule 110 (M_instr_branch -> .)
    !               reduce using rule 110 (M_instr_branch -> .)
    THIS            reduce using rule 110 (M_instr_branch -> .)
    SUPER           reduce using rule 110 (M_instr_branch -> .)
    NULL            reduce using rule 110 (M_instr_branch -> .)
    (               reduce using rule 110 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 110 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 110 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 110 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 110 (M_instr_branch -> .)
    BOOL            reduce using rule 110 (M_instr_branch -> .)
    NEW             reduce using rule 110 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 110 (M_instr_branch -> .)
    CHAR            reduce using rule 110 (M_instr_branch -> .)
    BYTE            reduce using rule 110 (M_instr_branch -> .)
    SHORT           reduce using rule 110 (M_instr_branch -> .)
    INT             reduce using rule 110 (M_instr_branch -> .)
    LONG            reduce using rule 110 (M_instr_branch -> .)
    FLOAT           reduce using rule 110 (M_instr_branch -> .)
    DOUBLE          reduce using rule 110 (M_instr_branch -> .)
    VOID            reduce using rule 110 (M_instr_branch -> .)
    CASE            reduce using rule 110 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 357

state 345

    (113) IterationStatement -> FOR ( ForInit M_instr ForExpr . M_instr ForIncr ) M_instr Statement
    (98) M_instr -> .

    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    )               reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 358

state 346

    (118) ForExpr -> ; .

    OPT_INC_DEC     reduce using rule 118 (ForExpr -> ; .)
    +               reduce using rule 118 (ForExpr -> ; .)
    -               reduce using rule 118 (ForExpr -> ; .)
    ~               reduce using rule 118 (ForExpr -> ; .)
    !               reduce using rule 118 (ForExpr -> ; .)
    IDENTIFIER      reduce using rule 118 (ForExpr -> ; .)
    THIS            reduce using rule 118 (ForExpr -> ; .)
    SUPER           reduce using rule 118 (ForExpr -> ; .)
    NULL            reduce using rule 118 (ForExpr -> ; .)
    (               reduce using rule 118 (ForExpr -> ; .)
    INT_LITERAL     reduce using rule 118 (ForExpr -> ; .)
    FLOAT_LITERAL   reduce using rule 118 (ForExpr -> ; .)
    CHAR_LITERAL    reduce using rule 118 (ForExpr -> ; .)
    STRING_LITERAL  reduce using rule 118 (ForExpr -> ; .)
    BOOL            reduce using rule 118 (ForExpr -> ; .)
    NEW             reduce using rule 118 (ForExpr -> ; .)
    BOOLEAN         reduce using rule 118 (ForExpr -> ; .)
    CHAR            reduce using rule 118 (ForExpr -> ; .)
    BYTE            reduce using rule 118 (ForExpr -> ; .)
    SHORT           reduce using rule 118 (ForExpr -> ; .)
    INT             reduce using rule 118 (ForExpr -> ; .)
    LONG            reduce using rule 118 (ForExpr -> ; .)
    FLOAT           reduce using rule 118 (ForExpr -> ; .)
    DOUBLE          reduce using rule 118 (ForExpr -> ; .)
    VOID            reduce using rule 118 (ForExpr -> ; .)
    )               reduce using rule 118 (ForExpr -> ; .)


state 347

    (117) ForExpr -> Expression . ;

    ;               shift and go to state 359


state 348

    (122) ExpressionStatements -> ExpressionStatements , ExpressionStatement .

    ,               reduce using rule 122 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    )               reduce using rule 122 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    ;               reduce using rule 122 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)


state 349

    (63) ArrayInitializers -> ArrayInitializers , VariableInitializer .

    }               reduce using rule 63 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)
    ,               reduce using rule 63 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)


state 350

    (171) ArgumentList -> ArgumentList , Expression .

    )               reduce using rule 171 (ArgumentList -> ArgumentList , Expression .)
    ,               reduce using rule 171 (ArgumentList -> ArgumentList , Expression .)


state 351

    (111) IterationStatement -> WHILE M_instr_branch ( Expression ) . M_instr_branch Statement
    (110) M_instr_branch -> .

    ;               reduce using rule 110 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 110 (M_instr_branch -> .)
    DEFAULT         reduce using rule 110 (M_instr_branch -> .)
    IF              reduce using rule 110 (M_instr_branch -> .)
    SWITCH          reduce using rule 110 (M_instr_branch -> .)
    WHILE           reduce using rule 110 (M_instr_branch -> .)
    DO              reduce using rule 110 (M_instr_branch -> .)
    FOR             reduce using rule 110 (M_instr_branch -> .)
    BREAK           reduce using rule 110 (M_instr_branch -> .)
    CONTINUE        reduce using rule 110 (M_instr_branch -> .)
    RETURN          reduce using rule 110 (M_instr_branch -> .)
    THROW           reduce using rule 110 (M_instr_branch -> .)
    {               reduce using rule 110 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 110 (M_instr_branch -> .)
    +               reduce using rule 110 (M_instr_branch -> .)
    -               reduce using rule 110 (M_instr_branch -> .)
    ~               reduce using rule 110 (M_instr_branch -> .)
    !               reduce using rule 110 (M_instr_branch -> .)
    THIS            reduce using rule 110 (M_instr_branch -> .)
    SUPER           reduce using rule 110 (M_instr_branch -> .)
    NULL            reduce using rule 110 (M_instr_branch -> .)
    (               reduce using rule 110 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 110 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 110 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 110 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 110 (M_instr_branch -> .)
    BOOL            reduce using rule 110 (M_instr_branch -> .)
    NEW             reduce using rule 110 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 110 (M_instr_branch -> .)
    CHAR            reduce using rule 110 (M_instr_branch -> .)
    BYTE            reduce using rule 110 (M_instr_branch -> .)
    SHORT           reduce using rule 110 (M_instr_branch -> .)
    INT             reduce using rule 110 (M_instr_branch -> .)
    LONG            reduce using rule 110 (M_instr_branch -> .)
    FLOAT           reduce using rule 110 (M_instr_branch -> .)
    DOUBLE          reduce using rule 110 (M_instr_branch -> .)
    VOID            reduce using rule 110 (M_instr_branch -> .)
    CASE            reduce using rule 110 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 360

state 352

    (180) ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .

    {               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    .               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    =               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_EQ          reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    *               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    /               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    %               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    +               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    -               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_SOME        reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    <               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    >               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LE           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_GE           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_EQ           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_NE           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    &               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ^               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    |               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LAND         reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ?               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LOR          reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ;               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ,               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    )               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    :               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    }               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ]               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)


state 353

    (187) DimExpr -> [ Expression ] .

    [               reduce using rule 187 (DimExpr -> [ Expression ] .)
    {               reduce using rule 187 (DimExpr -> [ Expression ] .)
    .               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OPT_INC_DEC     reduce using rule 187 (DimExpr -> [ Expression ] .)
    =               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OPT_EQ          reduce using rule 187 (DimExpr -> [ Expression ] .)
    *               reduce using rule 187 (DimExpr -> [ Expression ] .)
    /               reduce using rule 187 (DimExpr -> [ Expression ] .)
    %               reduce using rule 187 (DimExpr -> [ Expression ] .)
    +               reduce using rule 187 (DimExpr -> [ Expression ] .)
    -               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OPT_SOME        reduce using rule 187 (DimExpr -> [ Expression ] .)
    <               reduce using rule 187 (DimExpr -> [ Expression ] .)
    >               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_LE           reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_GE           reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_EQ           reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_NE           reduce using rule 187 (DimExpr -> [ Expression ] .)
    &               reduce using rule 187 (DimExpr -> [ Expression ] .)
    ^               reduce using rule 187 (DimExpr -> [ Expression ] .)
    |               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_LAND         reduce using rule 187 (DimExpr -> [ Expression ] .)
    ?               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_LOR          reduce using rule 187 (DimExpr -> [ Expression ] .)
    ;               reduce using rule 187 (DimExpr -> [ Expression ] .)
    )               reduce using rule 187 (DimExpr -> [ Expression ] .)
    ,               reduce using rule 187 (DimExpr -> [ Expression ] .)
    :               reduce using rule 187 (DimExpr -> [ Expression ] .)
    }               reduce using rule 187 (DimExpr -> [ Expression ] .)
    ]               reduce using rule 187 (DimExpr -> [ Expression ] .)


state 354

    (107) SelectionStatement -> SWITCH ( Expression Mark_switch ) . Block
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 361

state 355

    (233) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark . : M_instr ConditionalExpression M_instr

    :               shift and go to state 362


state 356

    (112) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch . ( Expression ) ;

    (               shift and go to state 363


state 357

    (105) SelectionStatement -> IF ( Expression ) M_instr_branch . Statement
    (106) SelectionStatement -> IF ( Expression ) M_instr_branch . Statement ELSE N_instr M_instr_branch Statement
    (91) Statement -> . EmptyStatement M_instr
    (92) Statement -> . LabelStatement M_instr
    (93) Statement -> . ExpressionStatement ; M_instr
    (94) Statement -> . SelectionStatement M_instr
    (95) Statement -> . IterationStatement M_instr
    (96) Statement -> . JumpStatement M_instr
    (97) Statement -> . Block M_instr
    (99) EmptyStatement -> . ;
    (100) LabelStatement -> . IDENTIFIER :
    (101) LabelStatement -> . Marker_case CASE ConstantExpression :
    (102) LabelStatement -> . DEFAULT :
    (104) ExpressionStatement -> . Expression
    (105) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (107) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (111) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (112) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (103) Marker_case -> .
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 111
    IDENTIFIER      shift and go to state 96
    DEFAULT         shift and go to state 129
    IF              shift and go to state 164
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 131
    DO              shift and go to state 150
    FOR             shift and go to state 114
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 123
    RETURN          shift and go to state 103
    THROW           shift and go to state 168
    {               shift and go to state 68
    CASE            reduce using rule 103 (Marker_case -> .)
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    LabelStatement                 shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    ExpressionStatement            shift and go to state 90
    JumpStatement                  shift and go to state 130
    RealPostfixExpression          shift and go to state 104
    Statement                      shift and go to state 364
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    SelectionStatement             shift and go to state 112
    NewAllocationExpression        shift and go to state 138
    PrimitiveType                  shift and go to state 190
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Marker_case                    shift and go to state 97
    Expression                     shift and go to state 139
    Block                          shift and go to state 117
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    EmptyStatement                 shift and go to state 101
    SpecialName                    shift and go to state 125
    FieldAccess                    shift and go to state 147
    IterationStatement             shift and go to state 169
    Integer_LIT                    shift and go to state 95

state 358

    (113) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr . ForIncr ) M_instr Statement
    (119) ForIncr -> . ExpressionStatements
    (120) ForIncr -> .
    (121) ExpressionStatements -> . ExpressionStatement
    (122) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (104) ExpressionStatement -> . Expression
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    )               reduce using rule 120 (ForIncr -> .)
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    ArithmeticUnaryOperator        shift and go to state 105
    ExclusiveOrExpression          shift and go to state 120
    ExpressionStatement            shift and go to state 275
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    PrimaryExpression              shift and go to state 135
    ExpressionStatements           shift and go to state 366
    ConditionalAndExpression       shift and go to state 100
    ForIncr                        shift and go to state 365
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 359

    (117) ForExpr -> Expression ; .

    OPT_INC_DEC     reduce using rule 117 (ForExpr -> Expression ; .)
    +               reduce using rule 117 (ForExpr -> Expression ; .)
    -               reduce using rule 117 (ForExpr -> Expression ; .)
    ~               reduce using rule 117 (ForExpr -> Expression ; .)
    !               reduce using rule 117 (ForExpr -> Expression ; .)
    IDENTIFIER      reduce using rule 117 (ForExpr -> Expression ; .)
    THIS            reduce using rule 117 (ForExpr -> Expression ; .)
    SUPER           reduce using rule 117 (ForExpr -> Expression ; .)
    NULL            reduce using rule 117 (ForExpr -> Expression ; .)
    (               reduce using rule 117 (ForExpr -> Expression ; .)
    INT_LITERAL     reduce using rule 117 (ForExpr -> Expression ; .)
    FLOAT_LITERAL   reduce using rule 117 (ForExpr -> Expression ; .)
    CHAR_LITERAL    reduce using rule 117 (ForExpr -> Expression ; .)
    STRING_LITERAL  reduce using rule 117 (ForExpr -> Expression ; .)
    BOOL            reduce using rule 117 (ForExpr -> Expression ; .)
    NEW             reduce using rule 117 (ForExpr -> Expression ; .)
    BOOLEAN         reduce using rule 117 (ForExpr -> Expression ; .)
    CHAR            reduce using rule 117 (ForExpr -> Expression ; .)
    BYTE            reduce using rule 117 (ForExpr -> Expression ; .)
    SHORT           reduce using rule 117 (ForExpr -> Expression ; .)
    INT             reduce using rule 117 (ForExpr -> Expression ; .)
    LONG            reduce using rule 117 (ForExpr -> Expression ; .)
    FLOAT           reduce using rule 117 (ForExpr -> Expression ; .)
    DOUBLE          reduce using rule 117 (ForExpr -> Expression ; .)
    VOID            reduce using rule 117 (ForExpr -> Expression ; .)
    )               reduce using rule 117 (ForExpr -> Expression ; .)


state 360

    (111) IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch . Statement
    (91) Statement -> . EmptyStatement M_instr
    (92) Statement -> . LabelStatement M_instr
    (93) Statement -> . ExpressionStatement ; M_instr
    (94) Statement -> . SelectionStatement M_instr
    (95) Statement -> . IterationStatement M_instr
    (96) Statement -> . JumpStatement M_instr
    (97) Statement -> . Block M_instr
    (99) EmptyStatement -> . ;
    (100) LabelStatement -> . IDENTIFIER :
    (101) LabelStatement -> . Marker_case CASE ConstantExpression :
    (102) LabelStatement -> . DEFAULT :
    (104) ExpressionStatement -> . Expression
    (105) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (107) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (111) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (112) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (103) Marker_case -> .
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 111
    IDENTIFIER      shift and go to state 96
    DEFAULT         shift and go to state 129
    IF              shift and go to state 164
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 131
    DO              shift and go to state 150
    FOR             shift and go to state 114
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 123
    RETURN          shift and go to state 103
    THROW           shift and go to state 168
    {               shift and go to state 68
    CASE            reduce using rule 103 (Marker_case -> .)
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    LabelStatement                 shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    ExpressionStatement            shift and go to state 90
    JumpStatement                  shift and go to state 130
    RealPostfixExpression          shift and go to state 104
    Statement                      shift and go to state 367
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    SelectionStatement             shift and go to state 112
    NewAllocationExpression        shift and go to state 138
    PrimitiveType                  shift and go to state 190
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Marker_case                    shift and go to state 97
    Expression                     shift and go to state 139
    Block                          shift and go to state 117
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    EmptyStatement                 shift and go to state 101
    SpecialName                    shift and go to state 125
    FieldAccess                    shift and go to state 147
    IterationStatement             shift and go to state 169
    Integer_LIT                    shift and go to state 95

state 361

    (107) SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .

    ELSE            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    }               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    ;               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    IDENTIFIER      reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DEFAULT         reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    IF              reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SWITCH          reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    WHILE           reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DO              reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FOR             reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BREAK           reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CONTINUE        reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    RETURN          reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    THROW           reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    {               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BOOLEAN         reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CHAR            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BYTE            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SHORT           reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    INT             reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    LONG            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FLOAT           reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DOUBLE          reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    VOID            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    OPT_INC_DEC     reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    +               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    -               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    ~               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    !               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    THIS            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SUPER           reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    NULL            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    (               reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    INT_LITERAL     reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FLOAT_LITERAL   reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CHAR_LITERAL    reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    STRING_LITERAL  reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BOOL            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    NEW             reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CASE            reduce using rule 107 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)


state 362

    (233) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : . M_instr ConditionalExpression M_instr
    (98) M_instr -> .

    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 368

state 363

    (112) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( . Expression ) ;
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 135
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    Expression                     shift and go to state 369
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 364

    (105) SelectionStatement -> IF ( Expression ) M_instr_branch Statement .
    (106) SelectionStatement -> IF ( Expression ) M_instr_branch Statement . ELSE N_instr M_instr_branch Statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ;               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DEFAULT         reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    IF              reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SWITCH          reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    WHILE           reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DO              reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FOR             reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BREAK           reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CONTINUE        reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    RETURN          reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    THROW           reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    {               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BOOLEAN         reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CHAR            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BYTE            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SHORT           reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    INT             reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    LONG            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FLOAT           reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DOUBLE          reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    VOID            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    OPT_INC_DEC     reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    +               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    -               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ~               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    !               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    THIS            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SUPER           reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    NULL            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    (               reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BOOL            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    NEW             reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CASE            reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ELSE            shift and go to state 370

  ! ELSE            [ reduce using rule 105 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .) ]


state 365

    (113) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr . ) M_instr Statement

    )               shift and go to state 371


state 366

    (119) ForIncr -> ExpressionStatements .
    (122) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    )               reduce using rule 119 (ForIncr -> ExpressionStatements .)
    ,               shift and go to state 325


state 367

    (111) IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .

    ELSE            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    }               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    ;               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DEFAULT         reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    IF              reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SWITCH          reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    WHILE           reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DO              reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FOR             reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BREAK           reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CONTINUE        reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    RETURN          reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    THROW           reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    {               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BOOLEAN         reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CHAR            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BYTE            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SHORT           reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    INT             reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    LONG            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FLOAT           reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DOUBLE          reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    VOID            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    OPT_INC_DEC     reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    +               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    -               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    ~               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    !               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    THIS            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SUPER           reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    NULL            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    (               reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BOOL            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    NEW             reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CASE            reduce using rule 111 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)


state 368

    (233) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr . ConditionalExpression M_instr
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    ComplexPrimary                 shift and go to state 126
    Bool_LIT                       shift and go to state 89
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 190
    RealPostfixExpression          shift and go to state 104
    ArithmeticUnaryOperator        shift and go to state 105
    AndExpression                  shift and go to state 93
    ArrayAccess                    shift and go to state 116
    PrimaryExpression              shift and go to state 135
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    MultiplicativeExpression       shift and go to state 108
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    Char_LIT                       shift and go to state 161
    MethodCall                     shift and go to state 110
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 372
    UnaryExpression                shift and go to state 202
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    SpecialName                    shift and go to state 125
    Integer_LIT                    shift and go to state 95

state 369

    (112) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression . ) ;

    )               shift and go to state 373


state 370

    (106) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE . N_instr M_instr_branch Statement
    (109) N_instr -> .

    ;               reduce using rule 109 (N_instr -> .)
    IDENTIFIER      reduce using rule 109 (N_instr -> .)
    DEFAULT         reduce using rule 109 (N_instr -> .)
    IF              reduce using rule 109 (N_instr -> .)
    SWITCH          reduce using rule 109 (N_instr -> .)
    WHILE           reduce using rule 109 (N_instr -> .)
    DO              reduce using rule 109 (N_instr -> .)
    FOR             reduce using rule 109 (N_instr -> .)
    BREAK           reduce using rule 109 (N_instr -> .)
    CONTINUE        reduce using rule 109 (N_instr -> .)
    RETURN          reduce using rule 109 (N_instr -> .)
    THROW           reduce using rule 109 (N_instr -> .)
    {               reduce using rule 109 (N_instr -> .)
    OPT_INC_DEC     reduce using rule 109 (N_instr -> .)
    +               reduce using rule 109 (N_instr -> .)
    -               reduce using rule 109 (N_instr -> .)
    ~               reduce using rule 109 (N_instr -> .)
    !               reduce using rule 109 (N_instr -> .)
    THIS            reduce using rule 109 (N_instr -> .)
    SUPER           reduce using rule 109 (N_instr -> .)
    NULL            reduce using rule 109 (N_instr -> .)
    (               reduce using rule 109 (N_instr -> .)
    INT_LITERAL     reduce using rule 109 (N_instr -> .)
    FLOAT_LITERAL   reduce using rule 109 (N_instr -> .)
    CHAR_LITERAL    reduce using rule 109 (N_instr -> .)
    STRING_LITERAL  reduce using rule 109 (N_instr -> .)
    BOOL            reduce using rule 109 (N_instr -> .)
    NEW             reduce using rule 109 (N_instr -> .)
    BOOLEAN         reduce using rule 109 (N_instr -> .)
    CHAR            reduce using rule 109 (N_instr -> .)
    BYTE            reduce using rule 109 (N_instr -> .)
    SHORT           reduce using rule 109 (N_instr -> .)
    INT             reduce using rule 109 (N_instr -> .)
    LONG            reduce using rule 109 (N_instr -> .)
    FLOAT           reduce using rule 109 (N_instr -> .)
    DOUBLE          reduce using rule 109 (N_instr -> .)
    VOID            reduce using rule 109 (N_instr -> .)
    CASE            reduce using rule 109 (N_instr -> .)

    N_instr                        shift and go to state 374

state 371

    (113) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) . M_instr Statement
    (98) M_instr -> .

    ;               reduce using rule 98 (M_instr -> .)
    IDENTIFIER      reduce using rule 98 (M_instr -> .)
    DEFAULT         reduce using rule 98 (M_instr -> .)
    IF              reduce using rule 98 (M_instr -> .)
    SWITCH          reduce using rule 98 (M_instr -> .)
    WHILE           reduce using rule 98 (M_instr -> .)
    DO              reduce using rule 98 (M_instr -> .)
    FOR             reduce using rule 98 (M_instr -> .)
    BREAK           reduce using rule 98 (M_instr -> .)
    CONTINUE        reduce using rule 98 (M_instr -> .)
    RETURN          reduce using rule 98 (M_instr -> .)
    THROW           reduce using rule 98 (M_instr -> .)
    {               reduce using rule 98 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 98 (M_instr -> .)
    +               reduce using rule 98 (M_instr -> .)
    -               reduce using rule 98 (M_instr -> .)
    ~               reduce using rule 98 (M_instr -> .)
    !               reduce using rule 98 (M_instr -> .)
    THIS            reduce using rule 98 (M_instr -> .)
    SUPER           reduce using rule 98 (M_instr -> .)
    NULL            reduce using rule 98 (M_instr -> .)
    (               reduce using rule 98 (M_instr -> .)
    INT_LITERAL     reduce using rule 98 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 98 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 98 (M_instr -> .)
    STRING_LITERAL  reduce using rule 98 (M_instr -> .)
    BOOL            reduce using rule 98 (M_instr -> .)
    NEW             reduce using rule 98 (M_instr -> .)
    BOOLEAN         reduce using rule 98 (M_instr -> .)
    CHAR            reduce using rule 98 (M_instr -> .)
    BYTE            reduce using rule 98 (M_instr -> .)
    SHORT           reduce using rule 98 (M_instr -> .)
    INT             reduce using rule 98 (M_instr -> .)
    LONG            reduce using rule 98 (M_instr -> .)
    FLOAT           reduce using rule 98 (M_instr -> .)
    DOUBLE          reduce using rule 98 (M_instr -> .)
    VOID            reduce using rule 98 (M_instr -> .)
    CASE            reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 375

state 372

    (233) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression . M_instr
    (98) M_instr -> .

    ;               reduce using rule 98 (M_instr -> .)
    )               reduce using rule 98 (M_instr -> .)
    ,               reduce using rule 98 (M_instr -> .)
    :               reduce using rule 98 (M_instr -> .)
    }               reduce using rule 98 (M_instr -> .)
    ]               reduce using rule 98 (M_instr -> .)

    M_instr                        shift and go to state 376

state 373

    (112) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) . ;

    ;               shift and go to state 377


state 374

    (106) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr . M_instr_branch Statement
    (110) M_instr_branch -> .

    ;               reduce using rule 110 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 110 (M_instr_branch -> .)
    DEFAULT         reduce using rule 110 (M_instr_branch -> .)
    IF              reduce using rule 110 (M_instr_branch -> .)
    SWITCH          reduce using rule 110 (M_instr_branch -> .)
    WHILE           reduce using rule 110 (M_instr_branch -> .)
    DO              reduce using rule 110 (M_instr_branch -> .)
    FOR             reduce using rule 110 (M_instr_branch -> .)
    BREAK           reduce using rule 110 (M_instr_branch -> .)
    CONTINUE        reduce using rule 110 (M_instr_branch -> .)
    RETURN          reduce using rule 110 (M_instr_branch -> .)
    THROW           reduce using rule 110 (M_instr_branch -> .)
    {               reduce using rule 110 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 110 (M_instr_branch -> .)
    +               reduce using rule 110 (M_instr_branch -> .)
    -               reduce using rule 110 (M_instr_branch -> .)
    ~               reduce using rule 110 (M_instr_branch -> .)
    !               reduce using rule 110 (M_instr_branch -> .)
    THIS            reduce using rule 110 (M_instr_branch -> .)
    SUPER           reduce using rule 110 (M_instr_branch -> .)
    NULL            reduce using rule 110 (M_instr_branch -> .)
    (               reduce using rule 110 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 110 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 110 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 110 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 110 (M_instr_branch -> .)
    BOOL            reduce using rule 110 (M_instr_branch -> .)
    NEW             reduce using rule 110 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 110 (M_instr_branch -> .)
    CHAR            reduce using rule 110 (M_instr_branch -> .)
    BYTE            reduce using rule 110 (M_instr_branch -> .)
    SHORT           reduce using rule 110 (M_instr_branch -> .)
    INT             reduce using rule 110 (M_instr_branch -> .)
    LONG            reduce using rule 110 (M_instr_branch -> .)
    FLOAT           reduce using rule 110 (M_instr_branch -> .)
    DOUBLE          reduce using rule 110 (M_instr_branch -> .)
    VOID            reduce using rule 110 (M_instr_branch -> .)
    CASE            reduce using rule 110 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 378

state 375

    (113) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr . Statement
    (91) Statement -> . EmptyStatement M_instr
    (92) Statement -> . LabelStatement M_instr
    (93) Statement -> . ExpressionStatement ; M_instr
    (94) Statement -> . SelectionStatement M_instr
    (95) Statement -> . IterationStatement M_instr
    (96) Statement -> . JumpStatement M_instr
    (97) Statement -> . Block M_instr
    (99) EmptyStatement -> . ;
    (100) LabelStatement -> . IDENTIFIER :
    (101) LabelStatement -> . Marker_case CASE ConstantExpression :
    (102) LabelStatement -> . DEFAULT :
    (104) ExpressionStatement -> . Expression
    (105) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (107) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (111) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (112) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (103) Marker_case -> .
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 111
    IDENTIFIER      shift and go to state 96
    DEFAULT         shift and go to state 129
    IF              shift and go to state 164
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 131
    DO              shift and go to state 150
    FOR             shift and go to state 114
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 123
    RETURN          shift and go to state 103
    THROW           shift and go to state 168
    {               shift and go to state 68
    CASE            reduce using rule 103 (Marker_case -> .)
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    LabelStatement                 shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    ExpressionStatement            shift and go to state 90
    JumpStatement                  shift and go to state 130
    RealPostfixExpression          shift and go to state 104
    Statement                      shift and go to state 379
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    SelectionStatement             shift and go to state 112
    NewAllocationExpression        shift and go to state 138
    PrimitiveType                  shift and go to state 190
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Marker_case                    shift and go to state 97
    Expression                     shift and go to state 139
    Block                          shift and go to state 117
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    EmptyStatement                 shift and go to state 101
    SpecialName                    shift and go to state 125
    FieldAccess                    shift and go to state 147
    IterationStatement             shift and go to state 169
    Integer_LIT                    shift and go to state 95

state 376

    (233) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .

    ;               reduce using rule 233 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    }               reduce using rule 233 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    ,               reduce using rule 233 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    )               reduce using rule 233 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    ]               reduce using rule 233 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    :               reduce using rule 233 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)


state 377

    (112) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .

    ELSE            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    }               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    ;               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    IDENTIFIER      reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DEFAULT         reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    IF              reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SWITCH          reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    WHILE           reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DO              reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FOR             reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BREAK           reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CONTINUE        reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    RETURN          reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    THROW           reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    {               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BOOLEAN         reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CHAR            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BYTE            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SHORT           reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    INT             reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    LONG            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FLOAT           reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DOUBLE          reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    VOID            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    OPT_INC_DEC     reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    +               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    -               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    ~               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    !               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    THIS            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SUPER           reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    NULL            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    (               reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    INT_LITERAL     reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FLOAT_LITERAL   reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CHAR_LITERAL    reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    STRING_LITERAL  reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BOOL            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    NEW             reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CASE            reduce using rule 112 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)


state 378

    (106) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch . Statement
    (91) Statement -> . EmptyStatement M_instr
    (92) Statement -> . LabelStatement M_instr
    (93) Statement -> . ExpressionStatement ; M_instr
    (94) Statement -> . SelectionStatement M_instr
    (95) Statement -> . IterationStatement M_instr
    (96) Statement -> . JumpStatement M_instr
    (97) Statement -> . Block M_instr
    (99) EmptyStatement -> . ;
    (100) LabelStatement -> . IDENTIFIER :
    (101) LabelStatement -> . Marker_case CASE ConstantExpression :
    (102) LabelStatement -> . DEFAULT :
    (104) ExpressionStatement -> . Expression
    (105) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (106) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (107) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (111) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (112) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (84) Block -> . { LocalVariableDeclarationsAndStatements }
    (85) Block -> . { }
    (103) Marker_case -> .
    (239) Expression -> . AssignmentExpression
    (235) AssignmentExpression -> . ConditionalExpression
    (236) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (232) ConditionalExpression -> . ConditionalOrExpression
    (233) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (229) ConditionalOrExpression -> . ConditionalAndExpression
    (230) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (227) ConditionalAndExpression -> . InclusiveOrExpression
    (228) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (225) InclusiveOrExpression -> . ExclusiveOrExpression
    (226) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (135) PrimaryExpression -> . QualifiedName
    (136) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (223) ExclusiveOrExpression -> . AndExpression
    (224) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (137) NotJustName -> . SpecialName
    (138) NotJustName -> . NewAllocationExpression
    (139) NotJustName -> . ComplexPrimary
    (221) AndExpression -> . EqualityExpression
    (222) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (140) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (141) ComplexPrimary -> . Integer_LIT
    (142) ComplexPrimary -> . Float_LIT
    (143) ComplexPrimary -> . Char_LIT
    (144) ComplexPrimary -> . String_LIT
    (145) ComplexPrimary -> . Bool_LIT
    (146) ComplexPrimary -> . ( Expression )
    (218) EqualityExpression -> . RelationalExpression
    (219) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (220) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (148) ComplexPrimaryNoParenthesis -> . FieldAccess
    (149) ComplexPrimaryNoParenthesis -> . MethodCall
    (150) Integer_LIT -> . INT_LITERAL
    (151) Float_LIT -> . FLOAT_LITERAL
    (152) Char_LIT -> . CHAR_LITERAL
    (153) String_LIT -> . STRING_LITERAL
    (154) Bool_LIT -> . BOOL
    (213) RelationalExpression -> . ShiftExpression
    (214) RelationalExpression -> . RelationalExpression < ShiftExpression
    (215) RelationalExpression -> . RelationalExpression > ShiftExpression
    (216) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (217) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (211) ShiftExpression -> . AdditiveExpression
    (212) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (208) AdditiveExpression -> . MultiplicativeExpression
    (209) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (210) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (204) MultiplicativeExpression -> . CastExpression
    (205) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (206) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression

    ;               shift and go to state 111
    IDENTIFIER      shift and go to state 96
    DEFAULT         shift and go to state 129
    IF              shift and go to state 164
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 131
    DO              shift and go to state 150
    FOR             shift and go to state 114
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 123
    RETURN          shift and go to state 103
    THROW           shift and go to state 168
    {               shift and go to state 68
    CASE            reduce using rule 103 (Marker_case -> .)
    OPT_INC_DEC     shift and go to state 115
    +               shift and go to state 109
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 98
    SUPER           shift and go to state 166
    NULL            shift and go to state 152
    (               shift and go to state 94
    INT_LITERAL     shift and go to state 148
    FLOAT_LITERAL   shift and go to state 133
    CHAR_LITERAL    shift and go to state 99
    STRING_LITERAL  shift and go to state 165
    BOOL            shift and go to state 146
    NEW             shift and go to state 132
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 127
    Bool_LIT                       shift and go to state 89
    LabelStatement                 shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 105
    AssignmentExpression           shift and go to state 113
    ExpressionStatement            shift and go to state 90
    JumpStatement                  shift and go to state 130
    RealPostfixExpression          shift and go to state 104
    Statement                      shift and go to state 380
    AndExpression                  shift and go to state 93
    MultiplicativeExpression       shift and go to state 108
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 106
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 107
    ArrayAccess                    shift and go to state 116
    ClassAllocationExpression      shift and go to state 128
    QualifiedName                  shift and go to state 192
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    SelectionStatement             shift and go to state 112
    NewAllocationExpression        shift and go to state 138
    PrimitiveType                  shift and go to state 190
    NotJustName                    shift and go to state 159
    ComplexPrimary                 shift and go to state 126
    MethodCall                     shift and go to state 110
    Char_LIT                       shift and go to state 161
    LogicalUnaryExpression         shift and go to state 162
    String_LIT                     shift and go to state 163
    UnaryExpression                shift and go to state 142
    Marker_case                    shift and go to state 97
    Expression                     shift and go to state 139
    Block                          shift and go to state 117
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 118
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 119
    PrimaryExpression              shift and go to state 135
    ExclusiveOrExpression          shift and go to state 120
    ConditionalAndExpression       shift and go to state 100
    RelationalExpression           shift and go to state 121
    PlainNewAllocationExpression   shift and go to state 122
    Float_LIT                      shift and go to state 144
    EmptyStatement                 shift and go to state 101
    SpecialName                    shift and go to state 125
    FieldAccess                    shift and go to state 147
    IterationStatement             shift and go to state 169
    Integer_LIT                    shift and go to state 95

state 379

    (113) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .

    ELSE            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    }               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    ;               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    IDENTIFIER      reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DEFAULT         reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    IF              reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SWITCH          reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    WHILE           reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DO              reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FOR             reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BREAK           reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CONTINUE        reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    RETURN          reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    THROW           reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    {               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BOOLEAN         reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CHAR            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BYTE            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SHORT           reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    INT             reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    LONG            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FLOAT           reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DOUBLE          reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    VOID            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    OPT_INC_DEC     reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    +               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    -               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    ~               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    !               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    THIS            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SUPER           reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    NULL            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    (               reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    INT_LITERAL     reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FLOAT_LITERAL   reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CHAR_LITERAL    reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    STRING_LITERAL  reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BOOL            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    NEW             reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CASE            reduce using rule 113 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)


state 380

    (106) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .

    ELSE            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    }               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    ;               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DEFAULT         reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    IF              reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SWITCH          reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    WHILE           reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DO              reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FOR             reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BREAK           reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CONTINUE        reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    RETURN          reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    THROW           reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    {               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BOOLEAN         reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CHAR            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BYTE            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SHORT           reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    INT             reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    LONG            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FLOAT           reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DOUBLE          reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    VOID            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    OPT_INC_DEC     reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    +               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    -               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    ~               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    !               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    THIS            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SUPER           reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    NULL            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    (               reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BOOL            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    NEW             reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CASE            reduce using rule 106 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 154 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 364 resolved as shift
