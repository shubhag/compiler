Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PROTECTED
    COMMENT
    GOTO
    ENUM
    THROWS
    TRANSIENT
    SYNCHRONIZED
    FINAL
    TRY
    INSTANCEOF
    NATIVE
    IGNORE_WHITESPACE
    STRICTFP
    IMPLEMENTS
    VOLATILE
    CONST
    ABSTRACT
    ASSERT
    FINALLY

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     TypeSpecifier -> TypeName
Rule 3     TypeSpecifier -> TypeName Dims
Rule 4     TypeName -> PrimitiveType
Rule 5     TypeName -> QualifiedName
Rule 6     ClassNameList -> QualifiedName
Rule 7     ClassNameList -> ClassNameList , QualifiedName
Rule 8     PrimitiveType -> BOOLEAN
Rule 9     PrimitiveType -> CHAR
Rule 10    PrimitiveType -> BYTE
Rule 11    PrimitiveType -> SHORT
Rule 12    PrimitiveType -> INT
Rule 13    PrimitiveType -> LONG
Rule 14    PrimitiveType -> FLOAT
Rule 15    PrimitiveType -> DOUBLE
Rule 16    PrimitiveType -> VOID
Rule 17    SemiColons -> ;
Rule 18    SemiColons -> SemiColons ;
Rule 19    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 20    ProgramFile -> PackageStatement TypeDeclarations
Rule 21    ProgramFile -> ImportStatements TypeDeclarations
Rule 22    ProgramFile -> TypeDeclarations
Rule 23    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 24    TypeDeclarations -> TypeDeclarationOptSemi
Rule 25    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 26    TypeDeclarationOptSemi -> TypeDeclaration
Rule 27    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 28    ImportStatements -> ImportStatement
Rule 29    ImportStatements -> ImportStatements ImportStatement
Rule 30    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 31    ImportStatement -> IMPORT QualifiedName . * SemiColons
Rule 32    QualifiedName -> IDENTIFIER
Rule 33    QualifiedName -> QualifiedName . IDENTIFIER
Rule 34    TypeDeclaration -> ClassHeader { FieldDeclarations }
Rule 35    TypeDeclaration -> ClassHeader { }
Rule 36    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 37    ClassHeader -> ClassWord IDENTIFIER
Rule 38    Modifiers -> Modifier
Rule 39    Modifiers -> Modifiers Modifier
Rule 40    Modifier -> PUBLIC
Rule 41    Modifier -> PRIVATE
Rule 42    Modifier -> STATIC
Rule 43    ClassWord -> CLASS
Rule 44    ClassWord -> INTERFACE
Rule 45    FieldDeclarations -> FieldDeclarationOptSemi
Rule 46    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 47    FieldDeclarationOptSemi -> FieldDeclaration
Rule 48    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 49    FieldDeclaration -> FieldVariableDeclaration ;
Rule 50    FieldDeclaration -> MethodDeclaration
Rule 51    FieldDeclaration -> ConstructorDeclaration
Rule 52    FieldDeclaration -> StaticInitializer
Rule 53    FieldDeclaration -> NonStaticInitializer
Rule 54    FieldDeclaration -> TypeDeclaration
Rule 55    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 56    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 57    VariableDeclarators -> VariableDeclarator
Rule 58    VariableDeclarators -> VariableDeclarators , VariableDeclarator
Rule 59    VariableDeclarator -> DeclaratorName
Rule 60    VariableDeclarator -> DeclaratorName = VariableInitializer
Rule 61    VariableInitializer -> Expression
Rule 62    ArrayInitializers -> VariableInitializer
Rule 63    ArrayInitializers -> ArrayInitializers , VariableInitializer
Rule 64    ArrayInitializers -> ArrayInitializers ,
Rule 65    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 66    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 67    MethodDeclarator -> DeclaratorName ( ParameterList )
Rule 68    MethodDeclarator -> DeclaratorName ( )
Rule 69    ParameterList -> Parameter
Rule 70    ParameterList -> ParameterList , Parameter
Rule 71    Parameter -> TypeSpecifier DeclaratorName
Rule 72    DeclaratorName -> IDENTIFIER
Rule 73    DeclaratorName -> DeclaratorName OP_DIM
Rule 74    MethodBody -> { LocalVariableDeclarationsAndStatements }
Rule 75    MethodBody -> { }
Rule 76    MethodBody -> ;
Rule 77    ConstructorDeclaration -> Modifiers ConstructorDeclarator Block
Rule 78    ConstructorDeclaration -> ConstructorDeclarator Block
Rule 79    ConstructorDeclarator -> IDENTIFIER ( ParameterList )
Rule 80    ConstructorDeclarator -> IDENTIFIER ( )
Rule 81    StaticInitializer -> STATIC Block
Rule 82    NonStaticInitializer -> Block
Rule 83    Extends -> EXTENDS TypeName
Rule 84    Extends -> Extends , TypeName
Rule 85    Block -> Lparen LocalVariableDeclarationsAndStatements Rparen
Rule 86    Block -> Lparen Rparen
Rule 87    Lparen -> {
Rule 88    Rparen -> }
Rule 89    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 90    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 91    LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 92    LocalVariableDeclarationOrStatement -> Statement
Rule 93    LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr
Rule 94    Statement -> EmptyStatement M_instr
Rule 95    Statement -> LabelStatement M_instr
Rule 96    Statement -> ExpressionStatement ; M_instr
Rule 97    Statement -> SelectionStatement M_instr
Rule 98    Statement -> IterationStatement M_instr
Rule 99    Statement -> JumpStatement M_instr
Rule 100   Statement -> Block M_instr
Rule 101   M_instr -> <empty>
Rule 102   EmptyStatement -> ;
Rule 103   LabelStatement -> IDENTIFIER :
Rule 104   LabelStatement -> Marker_case CASE ConstantExpression :
Rule 105   LabelStatement -> DEFAULT :
Rule 106   Marker_case -> <empty>
Rule 107   ExpressionStatement -> Expression
Rule 108   SelectionStatement -> IF ( Expression ) M_instr_branch Statement
Rule 109   SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
Rule 110   SelectionStatement -> SWITCH ( Expression Mark_switch ) Block
Rule 111   Mark_switch -> <empty>
Rule 112   N_instr -> <empty>
Rule 113   M_instr_branch -> <empty>
Rule 114   IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement
Rule 115   IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
Rule 116   IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
Rule 117   ForInit -> ExpressionStatements ;
Rule 118   ForInit -> LocalVariableDeclarationStatement
Rule 119   ForInit -> ;
Rule 120   ForExpr -> Expression ;
Rule 121   ForExpr -> ;
Rule 122   ForIncr -> ExpressionStatements
Rule 123   ForIncr -> <empty>
Rule 124   ExpressionStatements -> ExpressionStatement
Rule 125   ExpressionStatements -> ExpressionStatements , ExpressionStatement
Rule 126   JumpStatement -> BREAK IDENTIFIER ;
Rule 127   JumpStatement -> BREAK ;
Rule 128   JumpStatement -> CONTINUE IDENTIFIER ;
Rule 129   JumpStatement -> CONTINUE ;
Rule 130   JumpStatement -> RETURN Expression ;
Rule 131   JumpStatement -> RETURN ;
Rule 132   JumpStatement -> THROW Expression ;
Rule 133   Catches -> Catch
Rule 134   Catches -> Catches Catch
Rule 135   Catch -> CatchHeader Block
Rule 136   CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER )
Rule 137   CatchHeader -> CATCH ( TypeSpecifier )
Rule 138   PrimaryExpression -> QualifiedName
Rule 139   PrimaryExpression -> NotJustName
Rule 140   NotJustName -> SpecialName
Rule 141   NotJustName -> NewAllocationExpression
Rule 142   NotJustName -> ComplexPrimary
Rule 143   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 144   ComplexPrimary -> Integer_LIT
Rule 145   ComplexPrimary -> Float_LIT
Rule 146   ComplexPrimary -> Char_LIT
Rule 147   ComplexPrimary -> String_LIT
Rule 148   ComplexPrimary -> Bool_LIT
Rule 149   ComplexPrimary -> ( Expression )
Rule 150   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 151   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 152   ComplexPrimaryNoParenthesis -> MethodCall
Rule 153   Integer_LIT -> INT_LITERAL
Rule 154   Float_LIT -> FLOAT_LITERAL
Rule 155   Char_LIT -> CHAR_LITERAL
Rule 156   String_LIT -> STRING_LITERAL
Rule 157   Bool_LIT -> BOOL
Rule 158   ArrayAccess -> QualifiedName [ Expression ]
Rule 159   ArrayAccess -> ComplexPrimary [ Expression ]
Rule 160   FieldAccess -> NotJustName . IDENTIFIER
Rule 161   FieldAccess -> RealPostfixExpression . IDENTIFIER
Rule 162   FieldAccess -> QualifiedName . THIS
Rule 163   FieldAccess -> QualifiedName . CLASS
Rule 164   FieldAccess -> PrimitiveType . CLASS
Rule 165   MethodCall -> MethodAccess ( ArgumentList )
Rule 166   MethodCall -> MethodAccess ( )
Rule 167   MethodAccess -> ComplexPrimaryNoParenthesis
Rule 168   MethodAccess -> SpecialName
Rule 169   MethodAccess -> QualifiedName
Rule 170   SpecialName -> THIS
Rule 171   SpecialName -> SUPER
Rule 172   SpecialName -> NULL
Rule 173   ArgumentList -> Expression
Rule 174   ArgumentList -> ArgumentList , Expression
Rule 175   NewAllocationExpression -> PlainNewAllocationExpression
Rule 176   NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression
Rule 177   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 178   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 179   PlainNewAllocationExpression -> ArrayAllocationExpression { }
Rule 180   PlainNewAllocationExpression -> ClassAllocationExpression { }
Rule 181   PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers }
Rule 182   PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations }
Rule 183   ClassAllocationExpression -> NEW TypeName ( ArgumentList )
Rule 184   ClassAllocationExpression -> NEW TypeName ( )
Rule 185   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 186   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 187   ArrayAllocationExpression -> NEW TypeName Dims
Rule 188   DimExprs -> DimExpr
Rule 189   DimExprs -> DimExprs DimExpr
Rule 190   DimExpr -> [ Expression ]
Rule 191   Dims -> OP_DIM
Rule 192   Dims -> Dims OP_DIM
Rule 193   OP_DIM -> [ ]
Rule 194   PostfixExpression -> PrimaryExpression
Rule 195   PostfixExpression -> RealPostfixExpression
Rule 196   RealPostfixExpression -> PostfixExpression OPT_INC_DEC
Rule 197   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 198   UnaryExpression -> LogicalUnaryExpression
Rule 199   LogicalUnaryExpression -> PostfixExpression
Rule 200   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 201   LogicalUnaryOperator -> ~
Rule 202   LogicalUnaryOperator -> !
Rule 203   ArithmeticUnaryOperator -> +
Rule 204   ArithmeticUnaryOperator -> -
Rule 205   CastExpression -> UnaryExpression
Rule 206   MultiplicativeExpression -> CastExpression
Rule 207   MultiplicativeExpression -> MultiplicativeExpression * CastExpression
Rule 208   MultiplicativeExpression -> MultiplicativeExpression / CastExpression
Rule 209   MultiplicativeExpression -> MultiplicativeExpression % CastExpression
Rule 210   AdditiveExpression -> MultiplicativeExpression
Rule 211   AdditiveExpression -> AdditiveExpression + MultiplicativeExpression
Rule 212   AdditiveExpression -> AdditiveExpression - MultiplicativeExpression
Rule 213   ShiftExpression -> AdditiveExpression
Rule 214   ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression
Rule 215   RelationalExpression -> ShiftExpression
Rule 216   RelationalExpression -> RelationalExpression < ShiftExpression
Rule 217   RelationalExpression -> RelationalExpression > ShiftExpression
Rule 218   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 219   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 220   EqualityExpression -> RelationalExpression
Rule 221   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 222   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 223   AndExpression -> EqualityExpression
Rule 224   AndExpression -> AndExpression & EqualityExpression
Rule 225   ExclusiveOrExpression -> AndExpression
Rule 226   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 227   InclusiveOrExpression -> ExclusiveOrExpression
Rule 228   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 229   ConditionalAndExpression -> InclusiveOrExpression
Rule 230   ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
Rule 231   ConditionalOrExpression -> ConditionalAndExpression
Rule 232   ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
Rule 233   M_OP -> <empty>
Rule 234   ConditionalExpression -> ConditionalOrExpression
Rule 235   ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
Rule 236   Mark -> <empty>
Rule 237   AssignmentExpression -> ConditionalExpression
Rule 238   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 239   AssignmentOperator -> =
Rule 240   AssignmentOperator -> OPT_EQ
Rule 241   Expression -> AssignmentExpression
Rule 242   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

!                    : 202
%                    : 209
&                    : 224
(                    : 67 68 79 80 108 109 110 114 115 116 136 137 149 165 166 183 184
)                    : 67 68 79 80 108 109 110 114 115 116 136 137 149 165 166 183 184
*                    : 31 207
+                    : 203 211
,                    : 7 58 63 64 70 84 125 174
-                    : 204 212
.                    : 31 33 160 161 162 163 164 176
/                    : 208
:                    : 103 104 105 235
;                    : 17 18 49 76 93 96 102 115 117 119 120 121 126 127 128 129 130 131 132
<                    : 216
=                    : 60 239
>                    : 217
?                    : 235
ABSTRACT             : 
ASSERT               : 
BOOL                 : 157
BOOLEAN              : 8
BREAK                : 126 127
BYTE                 : 10
CASE                 : 104
CATCH                : 136 137
CHAR                 : 9
CHAR_LITERAL         : 155
CLASS                : 43 163 164
COMMENT              : 
CONST                : 
CONTINUE             : 128 129
DEFAULT              : 105
DO                   : 115
DOUBLE               : 15
ELSE                 : 109
ENUM                 : 
EXTENDS              : 83
FINAL                : 
FINALLY              : 
FLOAT                : 14
FLOAT_LITERAL        : 154
FOR                  : 116
GOTO                 : 
IDENTIFIER           : 32 33 36 37 72 79 80 103 126 128 136 160 161
IF                   : 108 109
IGNORE_WHITESPACE    : 
IMPLEMENTS           : 
IMPORT               : 30 31
INSTANCEOF           : 
INT                  : 12
INTERFACE            : 44
INT_LITERAL          : 153
LONG                 : 13
NATIVE               : 
NEW                  : 183 184 185 186 187
NULL                 : 172
OPT_EQ               : 240
OPT_INC_DEC          : 196
OPT_SOME             : 214
OP_EQ                : 221
OP_GE                : 219
OP_LAND              : 230
OP_LE                : 218
OP_LOR               : 232
OP_NE                : 222
PACKAGE              : 23
PRIVATE              : 41
PROTECTED            : 
PUBLIC               : 40
RETURN               : 130 131
SHORT                : 11
STATIC               : 42 81
STRICTFP             : 
STRING_LITERAL       : 156
SUPER                : 171
SWITCH               : 110
SYNCHRONIZED         : 
THIS                 : 162 170
THROW                : 132
THROWS               : 
TRANSIENT            : 
TRY                  : 
VOID                 : 16
VOLATILE             : 
WHILE                : 114 115
[                    : 158 159 190 193
]                    : 158 159 190 193
^                    : 226
error                : 
{                    : 34 35 74 75 87 179 180 181 182
|                    : 228
}                    : 34 35 74 75 88 179 180 181 182
~                    : 201

Nonterminals, with rules where they appear

AdditiveExpression   : 211 212 213 214
AndExpression        : 224 225 226
ArgumentList         : 165 174 183
ArithmeticUnaryOperator : 197
ArrayAccess          : 150
ArrayAllocationExpression : 177 179 181
ArrayInitializers    : 63 64 181
AssignmentExpression : 238 241
AssignmentOperator   : 238
Block                : 77 78 81 82 100 110 135
Bool_LIT             : 148
CastExpression       : 197 206 207 208 209
Catch                : 133 134
CatchHeader          : 135
Catches              : 134
Char_LIT             : 146
ClassAllocationExpression : 178 180 182
ClassHeader          : 34 35
ClassNameList        : 7
ClassWord            : 36 37
CompilationUnit      : 0
ComplexPrimary       : 142 159
ComplexPrimaryNoParenthesis : 143 167
ConditionalAndExpression : 230 231 232
ConditionalExpression : 235 237 242
ConditionalOrExpression : 232 234 235
ConstantExpression   : 104
ConstructorDeclaration : 51
ConstructorDeclarator : 77 78
DeclaratorName       : 59 60 67 68 71 73
DimExpr              : 188 189
DimExprs             : 185 186 189
Dims                 : 3 185 187 192
EmptyStatement       : 94
EqualityExpression   : 221 222 223 224
ExclusiveOrExpression : 226 227 228
Expression           : 61 107 108 109 110 114 115 120 130 132 149 158 159 173 174 190 235
ExpressionStatement  : 96 124 125
ExpressionStatements : 117 122 125
Extends              : 84
FieldAccess          : 151
FieldDeclaration     : 47 48
FieldDeclarationOptSemi : 45 46
FieldDeclarations    : 34 46 182
FieldVariableDeclaration : 49
Float_LIT            : 145
ForExpr              : 116
ForIncr              : 116
ForInit              : 116
ImportStatement      : 28 29
ImportStatements     : 19 21 29
InclusiveOrExpression : 228 229 230
Integer_LIT          : 144
IterationStatement   : 98
JumpStatement        : 99
LabelStatement       : 95
LocalVariableDeclarationOrStatement : 89 90
LocalVariableDeclarationStatement : 91 118
LocalVariableDeclarationsAndStatements : 74 85 90
LogicalUnaryExpression : 198
LogicalUnaryOperator : 200
Lparen               : 85 86
M_OP                 : 230 232
M_instr              : 93 94 95 96 97 98 99 100 116 116 116 235 235 235
M_instr_branch       : 108 109 109 114 114 115 115
Mark                 : 235
Mark_switch          : 110
Marker_case          : 104
MethodAccess         : 165 166
MethodBody           : 65 66
MethodCall           : 152
MethodDeclaration    : 50
MethodDeclarator     : 65 66
Modifier             : 38 39
Modifiers            : 36 39 55 65 77
MultiplicativeExpression : 207 208 209 210 211 212
N_instr              : 109
NewAllocationExpression : 141
NonStaticInitializer : 53
NotJustName          : 139 160
OP_DIM               : 73 191 192
PackageStatement     : 19 20
Parameter            : 69 70
ParameterList        : 67 70 79
PlainNewAllocationExpression : 175 176
PostfixExpression    : 196 199
PrimaryExpression    : 194
PrimitiveType        : 4 164
ProgramFile          : 1
QualifiedName        : 5 6 7 23 30 31 33 138 158 162 163 169 176
RealPostfixExpression : 161 195
RelationalExpression : 216 217 218 219 220 221 222
Rparen               : 85 86
SelectionStatement   : 97
SemiColons           : 18 23 27 30 31 48
ShiftExpression      : 214 215 216 217 218 219
SpecialName          : 140 168
Statement            : 92 108 109 109 114 115 116
StaticInitializer    : 52
String_LIT           : 147
TypeDeclaration      : 26 27 54
TypeDeclarationOptSemi : 24 25
TypeDeclarations     : 19 20 21 22 25
TypeName             : 2 3 83 84 183 184 185 186 187
TypeSpecifier        : 55 56 65 66 71 93 136 137
UnaryExpression      : 200 205 238
VariableDeclarator   : 57 58
VariableDeclarators  : 55 56 58 93
VariableInitializer  : 60 62 63

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (19) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (20) ProgramFile -> . PackageStatement TypeDeclarations
    (21) ProgramFile -> . ImportStatements TypeDeclarations
    (22) ProgramFile -> . TypeDeclarations
    (23) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    PACKAGE         shift and go to state 9
    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 15
    TypeDeclarations               shift and go to state 16
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    PackageStatement               shift and go to state 10
    CompilationUnit                shift and go to state 13
    TypeDeclarationOptSemi         shift and go to state 7

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (26) TypeDeclarationOptSemi -> TypeDeclaration .
    (27) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    CLASS           reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    INTERFACE       reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 21

state 3

    (42) Modifier -> STATIC .

    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)


state 4

    (41) Modifier -> PRIVATE .

    CLASS           reduce using rule 41 (Modifier -> PRIVATE .)
    INTERFACE       reduce using rule 41 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 41 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 41 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 41 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 41 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 41 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 41 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 41 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 41 (Modifier -> PRIVATE .)
    INT             reduce using rule 41 (Modifier -> PRIVATE .)
    LONG            reduce using rule 41 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 41 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 41 (Modifier -> PRIVATE .)
    VOID            reduce using rule 41 (Modifier -> PRIVATE .)


state 5

    (30) ImportStatement -> IMPORT . QualifiedName SemiColons
    (31) ImportStatement -> IMPORT . QualifiedName . * SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 22

state 6

    (43) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 43 (ClassWord -> CLASS .)


state 7

    (24) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 8

    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (39) Modifiers -> Modifiers . Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 24
    Modifier                       shift and go to state 25

state 9

    (23) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 26

state 10

    (19) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (20) ProgramFile -> PackageStatement . TypeDeclarations
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 27
    TypeDeclarations               shift and go to state 28
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 11

    (28) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 28 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 28 (ImportStatements -> ImportStatement .)
    INTERFACE       reduce using rule 28 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 28 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 28 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 28 (ImportStatements -> ImportStatement .)


state 12

    (38) Modifiers -> Modifier .

    CLASS           reduce using rule 38 (Modifiers -> Modifier .)
    INTERFACE       reduce using rule 38 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 38 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 38 (Modifiers -> Modifier .)
    STATIC          reduce using rule 38 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 38 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 38 (Modifiers -> Modifier .)
    CHAR            reduce using rule 38 (Modifiers -> Modifier .)
    BYTE            reduce using rule 38 (Modifiers -> Modifier .)
    SHORT           reduce using rule 38 (Modifiers -> Modifier .)
    INT             reduce using rule 38 (Modifiers -> Modifier .)
    LONG            reduce using rule 38 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 38 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 38 (Modifiers -> Modifier .)
    VOID            reduce using rule 38 (Modifiers -> Modifier .)


state 13

    (0) S' -> CompilationUnit .



state 14

    (37) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 29


state 15

    (21) ProgramFile -> ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 31
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 7

state 16

    (22) ProgramFile -> TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 22 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 17

    (34) TypeDeclaration -> ClassHeader . { FieldDeclarations }
    (35) TypeDeclaration -> ClassHeader . { }

    {               shift and go to state 33


state 18

    (44) ClassWord -> INTERFACE .

    IDENTIFIER      reduce using rule 44 (ClassWord -> INTERFACE .)


state 19

    (40) Modifier -> PUBLIC .

    CLASS           reduce using rule 40 (Modifier -> PUBLIC .)
    INTERFACE       reduce using rule 40 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 40 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 40 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 40 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 40 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 40 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 40 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 40 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 40 (Modifier -> PUBLIC .)
    INT             reduce using rule 40 (Modifier -> PUBLIC .)
    LONG            reduce using rule 40 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 40 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 40 (Modifier -> PUBLIC .)
    VOID            reduce using rule 40 (Modifier -> PUBLIC .)


state 20

    (17) SemiColons -> ; .

    ;               reduce using rule 17 (SemiColons -> ; .)
    IMPORT          reduce using rule 17 (SemiColons -> ; .)
    CLASS           reduce using rule 17 (SemiColons -> ; .)
    INTERFACE       reduce using rule 17 (SemiColons -> ; .)
    PUBLIC          reduce using rule 17 (SemiColons -> ; .)
    PRIVATE         reduce using rule 17 (SemiColons -> ; .)
    STATIC          reduce using rule 17 (SemiColons -> ; .)
    }               reduce using rule 17 (SemiColons -> ; .)
    IDENTIFIER      reduce using rule 17 (SemiColons -> ; .)
    {               reduce using rule 17 (SemiColons -> ; .)
    BOOLEAN         reduce using rule 17 (SemiColons -> ; .)
    CHAR            reduce using rule 17 (SemiColons -> ; .)
    BYTE            reduce using rule 17 (SemiColons -> ; .)
    SHORT           reduce using rule 17 (SemiColons -> ; .)
    INT             reduce using rule 17 (SemiColons -> ; .)
    LONG            reduce using rule 17 (SemiColons -> ; .)
    FLOAT           reduce using rule 17 (SemiColons -> ; .)
    DOUBLE          reduce using rule 17 (SemiColons -> ; .)
    VOID            reduce using rule 17 (SemiColons -> ; .)
    $end            reduce using rule 17 (SemiColons -> ; .)


state 21

    (27) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    CLASS           reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    INTERFACE       reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    ;               shift and go to state 34


state 22

    (30) ImportStatement -> IMPORT QualifiedName . SemiColons
    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 35
    ;               shift and go to state 20

    SemiColons                     shift and go to state 36

state 23

    (32) QualifiedName -> IDENTIFIER .

    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    )               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ,               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    :               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    }               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ]               reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 24

    (36) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 25

    (39) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INTERFACE       reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 39 (Modifiers -> Modifiers Modifier .)


state 26

    (23) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 38
    ;               shift and go to state 20

    SemiColons                     shift and go to state 39

state 27

    (19) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 40
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 28

    (20) ProgramFile -> PackageStatement TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 20 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 29

    (37) ClassHeader -> ClassWord IDENTIFIER .

    {               reduce using rule 37 (ClassHeader -> ClassWord IDENTIFIER .)


state 30

    (29) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    INTERFACE       reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)


state 31

    (21) ProgramFile -> ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 21 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 32

    (25) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 33

    (34) TypeDeclaration -> ClassHeader { . FieldDeclarations }
    (35) TypeDeclaration -> ClassHeader { . }
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (78) ConstructorDeclaration -> . ConstructorDeclarator Block
    (81) StaticInitializer -> . STATIC Block
    (82) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (79) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (80) ConstructorDeclarator -> . IDENTIFIER ( )
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (87) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 70
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 69
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    FieldDeclarations              shift and go to state 59
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 61
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 34

    (18) SemiColons -> SemiColons ; .

    ;               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IMPORT          reduce using rule 18 (SemiColons -> SemiColons ; .)
    CLASS           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INTERFACE       reduce using rule 18 (SemiColons -> SemiColons ; .)
    PUBLIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    PRIVATE         reduce using rule 18 (SemiColons -> SemiColons ; .)
    STATIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    }               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SemiColons ; .)
    {               reduce using rule 18 (SemiColons -> SemiColons ; .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SemiColons ; .)
    CHAR            reduce using rule 18 (SemiColons -> SemiColons ; .)
    BYTE            reduce using rule 18 (SemiColons -> SemiColons ; .)
    SHORT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INT             reduce using rule 18 (SemiColons -> SemiColons ; .)
    LONG            reduce using rule 18 (SemiColons -> SemiColons ; .)
    FLOAT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    DOUBLE          reduce using rule 18 (SemiColons -> SemiColons ; .)
    VOID            reduce using rule 18 (SemiColons -> SemiColons ; .)
    $end            reduce using rule 18 (SemiColons -> SemiColons ; .)


state 35

    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    *               shift and go to state 71
    IDENTIFIER      shift and go to state 72


state 36

    (30) ImportStatement -> IMPORT QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    INTERFACE       reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    ;               shift and go to state 34


state 37

    (36) ClassHeader -> Modifiers ClassWord IDENTIFIER .

    {               reduce using rule 36 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)


state 38

    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    IDENTIFIER      shift and go to state 72


state 39

    (23) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    INTERFACE       reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    ;               shift and go to state 34


state 40

    (19) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 19 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 41

    (11) PrimitiveType -> SHORT .

    .               reduce using rule 11 (PrimitiveType -> SHORT .)
    [               reduce using rule 11 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> SHORT .)
    (               reduce using rule 11 (PrimitiveType -> SHORT .)


state 42

    (51) FieldDeclaration -> ConstructorDeclaration .

    ;               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    }               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    {               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INTERFACE       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)


state 43

    (49) FieldDeclaration -> FieldVariableDeclaration . ;

    ;               shift and go to state 73


state 44

    (16) PrimitiveType -> VOID .

    .               reduce using rule 16 (PrimitiveType -> VOID .)
    [               reduce using rule 16 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> VOID .)
    (               reduce using rule 16 (PrimitiveType -> VOID .)


state 45

    (54) FieldDeclaration -> TypeDeclaration .

    ;               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    }               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    {               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INTERFACE       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)


state 46

    (4) TypeName -> PrimitiveType .

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    (               reduce using rule 4 (TypeName -> PrimitiveType .)


state 47

    (52) FieldDeclaration -> StaticInitializer .

    ;               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    }               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    {               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INTERFACE       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)


state 48

    (81) StaticInitializer -> STATIC . Block
    (42) Modifier -> STATIC .
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (87) Lparen -> . {

    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)
    {               shift and go to state 69

    Lparen                         shift and go to state 54
    Block                          shift and go to state 74

state 49

    (13) PrimitiveType -> LONG .

    .               reduce using rule 13 (PrimitiveType -> LONG .)
    [               reduce using rule 13 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> LONG .)
    (               reduce using rule 13 (PrimitiveType -> LONG .)


state 50

    (53) FieldDeclaration -> NonStaticInitializer .

    ;               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    }               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    {               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INTERFACE       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)


state 51

    (56) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (66) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (67) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (68) MethodDeclarator -> . DeclaratorName ( )
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    VariableDeclarators            shift and go to state 75
    DeclaratorName                 shift and go to state 76
    MethodDeclarator               shift and go to state 77
    VariableDeclarator             shift and go to state 79

state 52

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    [               reduce using rule 5 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    (               reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 38


state 53

    (2) TypeSpecifier -> TypeName .
    (3) TypeSpecifier -> TypeName . Dims
    (191) Dims -> . OP_DIM
    (192) Dims -> . Dims OP_DIM
    (193) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 2 (TypeSpecifier -> TypeName .)
    [               shift and go to state 80

    OP_DIM                         shift and go to state 81
    Dims                           shift and go to state 82

state 54

    (85) Block -> Lparen . LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> Lparen . Rparen
    (89) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (90) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (88) Rparen -> . }
    (91) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (92) LocalVariableDeclarationOrStatement -> . Statement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    }               shift and go to state 161
    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    FieldAccess                    shift and go to state 141
    Statement                      shift and go to state 86
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    QualifiedName                  shift and go to state 148
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 154
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 150
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    LocalVariableDeclarationsAndStatements shift and go to state 152
    Rparen                         shift and go to state 108
    ConditionalOrExpression        shift and go to state 131
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    PrimitiveType                  shift and go to state 85
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Char_LIT                       shift and go to state 155
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    LocalVariableDeclarationOrStatement shift and go to state 118
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 55

    (79) ConstructorDeclarator -> IDENTIFIER . ( ParameterList )
    (80) ConstructorDeclarator -> IDENTIFIER . ( )
    (32) QualifiedName -> IDENTIFIER .

    (               shift and go to state 164
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 56

    (50) FieldDeclaration -> MethodDeclaration .

    ;               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    }               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    {               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INTERFACE       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)


state 57

    (9) PrimitiveType -> CHAR .

    .               reduce using rule 9 (PrimitiveType -> CHAR .)
    [               reduce using rule 9 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> CHAR .)
    (               reduce using rule 9 (PrimitiveType -> CHAR .)


state 58

    (55) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Block
    (39) Modifiers -> Modifiers . Modifier
    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (79) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (80) ConstructorDeclarator -> . IDENTIFIER ( )
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    QualifiedName                  shift and go to state 52
    ConstructorDeclarator          shift and go to state 166
    PrimitiveType                  shift and go to state 46
    ClassWord                      shift and go to state 24
    TypeName                       shift and go to state 53
    Modifier                       shift and go to state 25
    TypeSpecifier                  shift and go to state 165

state 59

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations . }
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (78) ConstructorDeclaration -> . ConstructorDeclarator Block
    (81) StaticInitializer -> . STATIC Block
    (82) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (79) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (80) ConstructorDeclarator -> . IDENTIFIER ( )
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (87) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 168
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 69
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 167
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 60

    (82) NonStaticInitializer -> Block .

    ;               reduce using rule 82 (NonStaticInitializer -> Block .)
    }               reduce using rule 82 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 82 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 82 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 82 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 82 (NonStaticInitializer -> Block .)
    {               reduce using rule 82 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 82 (NonStaticInitializer -> Block .)
    INTERFACE       reduce using rule 82 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 82 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 82 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 82 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 82 (NonStaticInitializer -> Block .)
    INT             reduce using rule 82 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 82 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 82 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 82 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 82 (NonStaticInitializer -> Block .)


state 61

    (45) FieldDeclarations -> FieldDeclarationOptSemi .

    }               reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    {               reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 62

    (78) ConstructorDeclaration -> ConstructorDeclarator . Block
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (87) Lparen -> . {

    {               shift and go to state 69

    Lparen                         shift and go to state 54
    Block                          shift and go to state 169

state 63

    (12) PrimitiveType -> INT .

    .               reduce using rule 12 (PrimitiveType -> INT .)
    [               reduce using rule 12 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> INT .)
    (               reduce using rule 12 (PrimitiveType -> INT .)


state 64

    (15) PrimitiveType -> DOUBLE .

    .               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    [               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> DOUBLE .)
    (               reduce using rule 15 (PrimitiveType -> DOUBLE .)


state 65

    (14) PrimitiveType -> FLOAT .

    .               reduce using rule 14 (PrimitiveType -> FLOAT .)
    [               reduce using rule 14 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> FLOAT .)
    (               reduce using rule 14 (PrimitiveType -> FLOAT .)


state 66

    (8) PrimitiveType -> BOOLEAN .

    .               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    [               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    (               reduce using rule 8 (PrimitiveType -> BOOLEAN .)


state 67

    (10) PrimitiveType -> BYTE .

    .               reduce using rule 10 (PrimitiveType -> BYTE .)
    [               reduce using rule 10 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> BYTE .)
    (               reduce using rule 10 (PrimitiveType -> BYTE .)


state 68

    (47) FieldDeclarationOptSemi -> FieldDeclaration .
    (48) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    }               reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    {               reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INTERFACE       reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 170

state 69

    (87) Lparen -> { .

    }               reduce using rule 87 (Lparen -> { .)
    ;               reduce using rule 87 (Lparen -> { .)
    IDENTIFIER      reduce using rule 87 (Lparen -> { .)
    DEFAULT         reduce using rule 87 (Lparen -> { .)
    IF              reduce using rule 87 (Lparen -> { .)
    SWITCH          reduce using rule 87 (Lparen -> { .)
    WHILE           reduce using rule 87 (Lparen -> { .)
    DO              reduce using rule 87 (Lparen -> { .)
    FOR             reduce using rule 87 (Lparen -> { .)
    BREAK           reduce using rule 87 (Lparen -> { .)
    CONTINUE        reduce using rule 87 (Lparen -> { .)
    RETURN          reduce using rule 87 (Lparen -> { .)
    THROW           reduce using rule 87 (Lparen -> { .)
    {               reduce using rule 87 (Lparen -> { .)
    BOOLEAN         reduce using rule 87 (Lparen -> { .)
    CHAR            reduce using rule 87 (Lparen -> { .)
    BYTE            reduce using rule 87 (Lparen -> { .)
    SHORT           reduce using rule 87 (Lparen -> { .)
    INT             reduce using rule 87 (Lparen -> { .)
    LONG            reduce using rule 87 (Lparen -> { .)
    FLOAT           reduce using rule 87 (Lparen -> { .)
    DOUBLE          reduce using rule 87 (Lparen -> { .)
    VOID            reduce using rule 87 (Lparen -> { .)
    +               reduce using rule 87 (Lparen -> { .)
    -               reduce using rule 87 (Lparen -> { .)
    ~               reduce using rule 87 (Lparen -> { .)
    !               reduce using rule 87 (Lparen -> { .)
    THIS            reduce using rule 87 (Lparen -> { .)
    SUPER           reduce using rule 87 (Lparen -> { .)
    NULL            reduce using rule 87 (Lparen -> { .)
    (               reduce using rule 87 (Lparen -> { .)
    INT_LITERAL     reduce using rule 87 (Lparen -> { .)
    FLOAT_LITERAL   reduce using rule 87 (Lparen -> { .)
    CHAR_LITERAL    reduce using rule 87 (Lparen -> { .)
    STRING_LITERAL  reduce using rule 87 (Lparen -> { .)
    BOOL            reduce using rule 87 (Lparen -> { .)
    NEW             reduce using rule 87 (Lparen -> { .)
    CASE            reduce using rule 87 (Lparen -> { .)


state 70

    (35) TypeDeclaration -> ClassHeader { } .

    ;               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    CLASS           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    INTERFACE       reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    PUBLIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    PRIVATE         reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    STATIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    $end            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    }               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    IDENTIFIER      reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    {               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    BOOLEAN         reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    CHAR            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    BYTE            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    SHORT           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    INT             reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    LONG            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    FLOAT           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    DOUBLE          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    VOID            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)


state 71

    (31) ImportStatement -> IMPORT QualifiedName . * . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    ;               shift and go to state 20

    SemiColons                     shift and go to state 171

state 72

    (33) QualifiedName -> QualifiedName . IDENTIFIER .

    .               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    [               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    =               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_EQ          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    *               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    /               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    %               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    +               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    -               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_SOME        reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    <               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    >               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ?               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    )               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    (               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ;               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ,               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    :               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    }               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ]               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)


state 73

    (49) FieldDeclaration -> FieldVariableDeclaration ; .

    ;               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    }               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    STATIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    IDENTIFIER      reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PUBLIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PRIVATE         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    {               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CLASS           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INTERFACE       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BOOLEAN         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CHAR            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BYTE            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    SHORT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INT             reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    LONG            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    FLOAT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    DOUBLE          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    VOID            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)


state 74

    (81) StaticInitializer -> STATIC Block .

    ;               reduce using rule 81 (StaticInitializer -> STATIC Block .)
    }               reduce using rule 81 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 81 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 81 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 81 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 81 (StaticInitializer -> STATIC Block .)
    {               reduce using rule 81 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 81 (StaticInitializer -> STATIC Block .)
    INTERFACE       reduce using rule 81 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 81 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 81 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 81 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 81 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 81 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 81 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 81 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 81 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 81 (StaticInitializer -> STATIC Block .)


state 75

    (56) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 56 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 172


state 76

    (67) MethodDeclarator -> DeclaratorName . ( ParameterList )
    (68) MethodDeclarator -> DeclaratorName . ( )
    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (193) OP_DIM -> . [ ]

    (               shift and go to state 173
    ,               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    ;               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 174
    [               shift and go to state 80

    OP_DIM                         shift and go to state 175

state 77

    (66) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (74) MethodBody -> . { LocalVariableDeclarationsAndStatements }
    (75) MethodBody -> . { }
    (76) MethodBody -> . ;

    {               shift and go to state 178
    ;               shift and go to state 177

    MethodBody                     shift and go to state 176

state 78

    (72) DeclaratorName -> IDENTIFIER .

    (               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    =               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    [               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    ,               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    ;               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    )               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)


state 79

    (57) VariableDeclarators -> VariableDeclarator .

    ;               reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)
    ,               reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)


state 80

    (193) OP_DIM -> [ . ]

    ]               shift and go to state 179


state 81

    (191) Dims -> OP_DIM .

    [               reduce using rule 191 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 191 (Dims -> OP_DIM .)
    {               reduce using rule 191 (Dims -> OP_DIM .)
    .               reduce using rule 191 (Dims -> OP_DIM .)
    OPT_INC_DEC     reduce using rule 191 (Dims -> OP_DIM .)
    =               reduce using rule 191 (Dims -> OP_DIM .)
    OPT_EQ          reduce using rule 191 (Dims -> OP_DIM .)
    *               reduce using rule 191 (Dims -> OP_DIM .)
    /               reduce using rule 191 (Dims -> OP_DIM .)
    %               reduce using rule 191 (Dims -> OP_DIM .)
    +               reduce using rule 191 (Dims -> OP_DIM .)
    -               reduce using rule 191 (Dims -> OP_DIM .)
    OPT_SOME        reduce using rule 191 (Dims -> OP_DIM .)
    <               reduce using rule 191 (Dims -> OP_DIM .)
    >               reduce using rule 191 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 191 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 191 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 191 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 191 (Dims -> OP_DIM .)
    &               reduce using rule 191 (Dims -> OP_DIM .)
    ^               reduce using rule 191 (Dims -> OP_DIM .)
    |               reduce using rule 191 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 191 (Dims -> OP_DIM .)
    ?               reduce using rule 191 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 191 (Dims -> OP_DIM .)
    ;               reduce using rule 191 (Dims -> OP_DIM .)
    )               reduce using rule 191 (Dims -> OP_DIM .)
    ,               reduce using rule 191 (Dims -> OP_DIM .)
    :               reduce using rule 191 (Dims -> OP_DIM .)
    }               reduce using rule 191 (Dims -> OP_DIM .)
    ]               reduce using rule 191 (Dims -> OP_DIM .)


state 82

    (3) TypeSpecifier -> TypeName Dims .
    (192) Dims -> Dims . OP_DIM
    (193) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    [               shift and go to state 80

    OP_DIM                         shift and go to state 180

state 83

    (148) ComplexPrimary -> Bool_LIT .

    [               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    .               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OPT_INC_DEC     reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    *               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    /               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    %               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    +               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    -               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OPT_SOME        reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    <               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    >               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OP_LE           reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OP_GE           reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OP_EQ           reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OP_NE           reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    &               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    ^               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    |               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OP_LAND         reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    ?               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OP_LOR          reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    ;               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    )               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    ,               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    :               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    }               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    ]               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    =               reduce using rule 148 (ComplexPrimary -> Bool_LIT .)
    OPT_EQ          reduce using rule 148 (ComplexPrimary -> Bool_LIT .)


state 84

    (96) Statement -> ExpressionStatement . ; M_instr

    ;               shift and go to state 181


state 85

    (4) TypeName -> PrimitiveType .
    (164) FieldAccess -> PrimitiveType . . CLASS

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    .               shift and go to state 182


state 86

    (92) LocalVariableDeclarationOrStatement -> Statement .

    }               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    ;               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    SWITCH          reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CONTINUE        reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    THROW           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    {               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    +               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    -               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    !               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    (               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    INT_LITERAL     reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT_LITERAL   reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR_LITERAL    reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    STRING_LITERAL  reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOL            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)


state 87

    (225) ExclusiveOrExpression -> AndExpression .
    (224) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    ?               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    ;               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    ]               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    :               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    ,               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    )               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    }               reduce using rule 225 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 183


state 88

    (149) ComplexPrimary -> ( . Expression )
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 185
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 89

    (144) ComplexPrimary -> Integer_LIT .

    [               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    .               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OPT_INC_DEC     reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    *               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    /               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    %               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    +               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    -               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OPT_SOME        reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    <               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    >               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OP_LE           reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OP_GE           reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OP_EQ           reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OP_NE           reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    &               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    ^               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    |               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OP_LAND         reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    ?               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OP_LOR          reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    ;               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    )               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    ,               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    :               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    }               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    ]               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    =               reduce using rule 144 (ComplexPrimary -> Integer_LIT .)
    OPT_EQ          reduce using rule 144 (ComplexPrimary -> Integer_LIT .)


state 90

    (103) LabelStatement -> IDENTIFIER . :
    (32) QualifiedName -> IDENTIFIER .

    :               shift and go to state 187
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 91

    (104) LabelStatement -> Marker_case . CASE ConstantExpression :

    CASE            shift and go to state 188


state 92

    (170) SpecialName -> THIS .

    .               reduce using rule 170 (SpecialName -> THIS .)
    OPT_INC_DEC     reduce using rule 170 (SpecialName -> THIS .)
    =               reduce using rule 170 (SpecialName -> THIS .)
    OPT_EQ          reduce using rule 170 (SpecialName -> THIS .)
    *               reduce using rule 170 (SpecialName -> THIS .)
    /               reduce using rule 170 (SpecialName -> THIS .)
    %               reduce using rule 170 (SpecialName -> THIS .)
    +               reduce using rule 170 (SpecialName -> THIS .)
    -               reduce using rule 170 (SpecialName -> THIS .)
    OPT_SOME        reduce using rule 170 (SpecialName -> THIS .)
    <               reduce using rule 170 (SpecialName -> THIS .)
    >               reduce using rule 170 (SpecialName -> THIS .)
    OP_LE           reduce using rule 170 (SpecialName -> THIS .)
    OP_GE           reduce using rule 170 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 170 (SpecialName -> THIS .)
    OP_NE           reduce using rule 170 (SpecialName -> THIS .)
    &               reduce using rule 170 (SpecialName -> THIS .)
    ^               reduce using rule 170 (SpecialName -> THIS .)
    |               reduce using rule 170 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 170 (SpecialName -> THIS .)
    ?               reduce using rule 170 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 170 (SpecialName -> THIS .)
    ;               reduce using rule 170 (SpecialName -> THIS .)
    (               reduce using rule 170 (SpecialName -> THIS .)
    )               reduce using rule 170 (SpecialName -> THIS .)
    ,               reduce using rule 170 (SpecialName -> THIS .)
    :               reduce using rule 170 (SpecialName -> THIS .)
    }               reduce using rule 170 (SpecialName -> THIS .)
    ]               reduce using rule 170 (SpecialName -> THIS .)


state 93

    (155) Char_LIT -> CHAR_LITERAL .

    [               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    .               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OPT_INC_DEC     reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    =               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OPT_EQ          reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    *               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    /               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    %               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    +               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    -               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OPT_SOME        reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    <               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    >               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OP_LE           reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OP_GE           reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OP_EQ           reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OP_NE           reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    &               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    ^               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    |               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OP_LAND         reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    ?               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    OP_LOR          reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    ;               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    )               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    ,               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    :               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    }               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)
    ]               reduce using rule 155 (Char_LIT -> CHAR_LITERAL .)


state 94

    (231) ConditionalOrExpression -> ConditionalAndExpression .
    (230) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND M_OP InclusiveOrExpression

    ?               reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LOR          reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    ;               reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    ,               reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    )               reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    ]               reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    }               reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    :               reduce using rule 231 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 189


state 95

    (94) Statement -> EmptyStatement . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)
    ELSE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 190

state 96

    (95) Statement -> LabelStatement . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)
    ELSE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 191

state 97

    (130) JumpStatement -> RETURN . Expression ;
    (131) JumpStatement -> RETURN . ;
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 192
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 193
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 98

    (195) PostfixExpression -> RealPostfixExpression .
    (161) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    =               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OPT_EQ          reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    *               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    /               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    %               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    +               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    -               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OPT_SOME        reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    <               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    >               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    ?               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    ;               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    )               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    ,               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    :               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    }               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    ]               reduce using rule 195 (PostfixExpression -> RealPostfixExpression .)
    .               shift and go to state 194


state 99

    (197) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 195
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 100

    (223) AndExpression -> EqualityExpression .
    (221) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (222) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 223 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 223 (AndExpression -> EqualityExpression .)
    |               reduce using rule 223 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 223 (AndExpression -> EqualityExpression .)
    ?               reduce using rule 223 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 223 (AndExpression -> EqualityExpression .)
    ;               reduce using rule 223 (AndExpression -> EqualityExpression .)
    )               reduce using rule 223 (AndExpression -> EqualityExpression .)
    ,               reduce using rule 223 (AndExpression -> EqualityExpression .)
    :               reduce using rule 223 (AndExpression -> EqualityExpression .)
    }               reduce using rule 223 (AndExpression -> EqualityExpression .)
    ]               reduce using rule 223 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 198
    OP_NE           shift and go to state 197


state 101

    (143) ComplexPrimary -> ComplexPrimaryNoParenthesis .
    (167) MethodAccess -> ComplexPrimaryNoParenthesis .

    [               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    .               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_INC_DEC     reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    *               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    /               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    %               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    +               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    -               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_SOME        reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    <               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    >               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ?               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ;               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    )               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ,               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    :               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    }               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ]               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    =               reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_EQ          reduce using rule 143 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    (               reduce using rule 167 (MethodAccess -> ComplexPrimaryNoParenthesis .)


state 102

    (210) AdditiveExpression -> MultiplicativeExpression .
    (207) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (208) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (209) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    -               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    OPT_SOME        reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    <               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    >               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    ?               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    ;               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    )               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    ,               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    :               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    }               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    ]               reduce using rule 210 (AdditiveExpression -> MultiplicativeExpression .)
    *               shift and go to state 199
    /               shift and go to state 201
    %               shift and go to state 200


state 103

    (203) ArithmeticUnaryOperator -> + .

    +               reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    -               reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    ~               reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    !               reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    IDENTIFIER      reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    THIS            reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    SUPER           reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    NULL            reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    (               reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    INT_LITERAL     reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    FLOAT_LITERAL   reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    CHAR_LITERAL    reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    STRING_LITERAL  reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    BOOL            reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    NEW             reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    BOOLEAN         reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    CHAR            reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    BYTE            reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    SHORT           reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    INT             reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    LONG            reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    FLOAT           reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    DOUBLE          reduce using rule 203 (ArithmeticUnaryOperator -> + .)
    VOID            reduce using rule 203 (ArithmeticUnaryOperator -> + .)


state 104

    (152) ComplexPrimaryNoParenthesis -> MethodCall .

    [               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    .               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_INC_DEC     reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    =               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_EQ          reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    *               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    /               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    %               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    +               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    -               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_SOME        reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    <               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    >               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ?               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    :               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    (               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ;               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    )               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ,               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    }               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ]               reduce using rule 152 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 105

    (102) EmptyStatement -> ; .

    WHILE           reduce using rule 102 (EmptyStatement -> ; .)
    }               reduce using rule 102 (EmptyStatement -> ; .)
    ;               reduce using rule 102 (EmptyStatement -> ; .)
    IDENTIFIER      reduce using rule 102 (EmptyStatement -> ; .)
    DEFAULT         reduce using rule 102 (EmptyStatement -> ; .)
    IF              reduce using rule 102 (EmptyStatement -> ; .)
    SWITCH          reduce using rule 102 (EmptyStatement -> ; .)
    DO              reduce using rule 102 (EmptyStatement -> ; .)
    FOR             reduce using rule 102 (EmptyStatement -> ; .)
    BREAK           reduce using rule 102 (EmptyStatement -> ; .)
    CONTINUE        reduce using rule 102 (EmptyStatement -> ; .)
    RETURN          reduce using rule 102 (EmptyStatement -> ; .)
    THROW           reduce using rule 102 (EmptyStatement -> ; .)
    {               reduce using rule 102 (EmptyStatement -> ; .)
    BOOLEAN         reduce using rule 102 (EmptyStatement -> ; .)
    CHAR            reduce using rule 102 (EmptyStatement -> ; .)
    BYTE            reduce using rule 102 (EmptyStatement -> ; .)
    SHORT           reduce using rule 102 (EmptyStatement -> ; .)
    INT             reduce using rule 102 (EmptyStatement -> ; .)
    LONG            reduce using rule 102 (EmptyStatement -> ; .)
    FLOAT           reduce using rule 102 (EmptyStatement -> ; .)
    DOUBLE          reduce using rule 102 (EmptyStatement -> ; .)
    VOID            reduce using rule 102 (EmptyStatement -> ; .)
    +               reduce using rule 102 (EmptyStatement -> ; .)
    -               reduce using rule 102 (EmptyStatement -> ; .)
    ~               reduce using rule 102 (EmptyStatement -> ; .)
    !               reduce using rule 102 (EmptyStatement -> ; .)
    THIS            reduce using rule 102 (EmptyStatement -> ; .)
    SUPER           reduce using rule 102 (EmptyStatement -> ; .)
    NULL            reduce using rule 102 (EmptyStatement -> ; .)
    (               reduce using rule 102 (EmptyStatement -> ; .)
    INT_LITERAL     reduce using rule 102 (EmptyStatement -> ; .)
    FLOAT_LITERAL   reduce using rule 102 (EmptyStatement -> ; .)
    CHAR_LITERAL    reduce using rule 102 (EmptyStatement -> ; .)
    STRING_LITERAL  reduce using rule 102 (EmptyStatement -> ; .)
    BOOL            reduce using rule 102 (EmptyStatement -> ; .)
    NEW             reduce using rule 102 (EmptyStatement -> ; .)
    CASE            reduce using rule 102 (EmptyStatement -> ; .)
    ELSE            reduce using rule 102 (EmptyStatement -> ; .)


state 106

    (97) Statement -> SelectionStatement . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)
    ELSE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 202

state 107

    (241) Expression -> AssignmentExpression .

    )               reduce using rule 241 (Expression -> AssignmentExpression .)
    ,               reduce using rule 241 (Expression -> AssignmentExpression .)
    ;               reduce using rule 241 (Expression -> AssignmentExpression .)
    }               reduce using rule 241 (Expression -> AssignmentExpression .)
    ]               reduce using rule 241 (Expression -> AssignmentExpression .)
    :               reduce using rule 241 (Expression -> AssignmentExpression .)


state 108

    (86) Block -> Lparen Rparen .

    ;               reduce using rule 86 (Block -> Lparen Rparen .)
    }               reduce using rule 86 (Block -> Lparen Rparen .)
    STATIC          reduce using rule 86 (Block -> Lparen Rparen .)
    IDENTIFIER      reduce using rule 86 (Block -> Lparen Rparen .)
    PUBLIC          reduce using rule 86 (Block -> Lparen Rparen .)
    PRIVATE         reduce using rule 86 (Block -> Lparen Rparen .)
    {               reduce using rule 86 (Block -> Lparen Rparen .)
    CLASS           reduce using rule 86 (Block -> Lparen Rparen .)
    INTERFACE       reduce using rule 86 (Block -> Lparen Rparen .)
    BOOLEAN         reduce using rule 86 (Block -> Lparen Rparen .)
    CHAR            reduce using rule 86 (Block -> Lparen Rparen .)
    BYTE            reduce using rule 86 (Block -> Lparen Rparen .)
    SHORT           reduce using rule 86 (Block -> Lparen Rparen .)
    INT             reduce using rule 86 (Block -> Lparen Rparen .)
    LONG            reduce using rule 86 (Block -> Lparen Rparen .)
    FLOAT           reduce using rule 86 (Block -> Lparen Rparen .)
    DOUBLE          reduce using rule 86 (Block -> Lparen Rparen .)
    VOID            reduce using rule 86 (Block -> Lparen Rparen .)
    ELSE            reduce using rule 86 (Block -> Lparen Rparen .)
    DEFAULT         reduce using rule 86 (Block -> Lparen Rparen .)
    IF              reduce using rule 86 (Block -> Lparen Rparen .)
    SWITCH          reduce using rule 86 (Block -> Lparen Rparen .)
    WHILE           reduce using rule 86 (Block -> Lparen Rparen .)
    DO              reduce using rule 86 (Block -> Lparen Rparen .)
    FOR             reduce using rule 86 (Block -> Lparen Rparen .)
    BREAK           reduce using rule 86 (Block -> Lparen Rparen .)
    CONTINUE        reduce using rule 86 (Block -> Lparen Rparen .)
    RETURN          reduce using rule 86 (Block -> Lparen Rparen .)
    THROW           reduce using rule 86 (Block -> Lparen Rparen .)
    +               reduce using rule 86 (Block -> Lparen Rparen .)
    -               reduce using rule 86 (Block -> Lparen Rparen .)
    ~               reduce using rule 86 (Block -> Lparen Rparen .)
    !               reduce using rule 86 (Block -> Lparen Rparen .)
    THIS            reduce using rule 86 (Block -> Lparen Rparen .)
    SUPER           reduce using rule 86 (Block -> Lparen Rparen .)
    NULL            reduce using rule 86 (Block -> Lparen Rparen .)
    (               reduce using rule 86 (Block -> Lparen Rparen .)
    INT_LITERAL     reduce using rule 86 (Block -> Lparen Rparen .)
    FLOAT_LITERAL   reduce using rule 86 (Block -> Lparen Rparen .)
    CHAR_LITERAL    reduce using rule 86 (Block -> Lparen Rparen .)
    STRING_LITERAL  reduce using rule 86 (Block -> Lparen Rparen .)
    BOOL            reduce using rule 86 (Block -> Lparen Rparen .)
    NEW             reduce using rule 86 (Block -> Lparen Rparen .)
    CASE            reduce using rule 86 (Block -> Lparen Rparen .)


state 109

    (116) IterationStatement -> FOR . ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement

    (               shift and go to state 203


state 110

    (150) ComplexPrimaryNoParenthesis -> ArrayAccess .

    [               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    .               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_INC_DEC     reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    =               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_EQ          reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    *               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    /               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    %               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    +               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    -               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_SOME        reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    <               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    >               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ?               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    :               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    (               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ;               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    )               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ,               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    }               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ]               reduce using rule 150 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 111

    (100) Statement -> Block . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)
    ELSE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 204

state 112

    (177) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (179) PlainNewAllocationExpression -> ArrayAllocationExpression . { }
    (181) PlainNewAllocationExpression -> ArrayAllocationExpression . { ArrayInitializers }

    .               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_INC_DEC     reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    *               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    /               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    %               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    +               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    -               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_SOME        reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    <               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    >               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ?               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ;               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    )               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ,               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    :               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    }               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ]               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    =               reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_EQ          reduce using rule 177 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    {               shift and go to state 205


state 113

    (165) MethodCall -> MethodAccess . ( ArgumentList )
    (166) MethodCall -> MethodAccess . ( )

    (               shift and go to state 206


state 114

    (227) InclusiveOrExpression -> ExclusiveOrExpression .
    (226) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ?               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ;               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    )               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ,               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    :               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    }               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ]               reduce using rule 227 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 207


state 115

    (220) EqualityExpression -> RelationalExpression .
    (216) RelationalExpression -> RelationalExpression . < ShiftExpression
    (217) RelationalExpression -> RelationalExpression . > ShiftExpression
    (218) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (219) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    ?               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    )               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    ;               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    }               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    ,               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    :               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    ]               reduce using rule 220 (EqualityExpression -> RelationalExpression .)
    <               shift and go to state 208
    >               shift and go to state 211
    OP_LE           shift and go to state 209
    OP_GE           shift and go to state 210


state 116

    (175) NewAllocationExpression -> PlainNewAllocationExpression .

    .               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    *               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    /               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    %               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    +               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    -               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    <               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    >               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ?               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ;               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    )               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ,               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    :               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    }               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ]               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    =               reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 175 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 117

    (128) JumpStatement -> CONTINUE . IDENTIFIER ;
    (129) JumpStatement -> CONTINUE . ;

    IDENTIFIER      shift and go to state 212
    ;               shift and go to state 213


state 118

    (89) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    }               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    {               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    +               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    -               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    !               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    (               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 119

    (140) NotJustName -> SpecialName .
    (168) MethodAccess -> SpecialName .

    .               reduce using rule 140 (NotJustName -> SpecialName .)
    OPT_INC_DEC     reduce using rule 140 (NotJustName -> SpecialName .)
    =               reduce using rule 140 (NotJustName -> SpecialName .)
    OPT_EQ          reduce using rule 140 (NotJustName -> SpecialName .)
    *               reduce using rule 140 (NotJustName -> SpecialName .)
    /               reduce using rule 140 (NotJustName -> SpecialName .)
    %               reduce using rule 140 (NotJustName -> SpecialName .)
    +               reduce using rule 140 (NotJustName -> SpecialName .)
    -               reduce using rule 140 (NotJustName -> SpecialName .)
    OPT_SOME        reduce using rule 140 (NotJustName -> SpecialName .)
    <               reduce using rule 140 (NotJustName -> SpecialName .)
    >               reduce using rule 140 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 140 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 140 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 140 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 140 (NotJustName -> SpecialName .)
    &               reduce using rule 140 (NotJustName -> SpecialName .)
    ^               reduce using rule 140 (NotJustName -> SpecialName .)
    |               reduce using rule 140 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 140 (NotJustName -> SpecialName .)
    ?               reduce using rule 140 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 140 (NotJustName -> SpecialName .)
    ;               reduce using rule 140 (NotJustName -> SpecialName .)
    )               reduce using rule 140 (NotJustName -> SpecialName .)
    ,               reduce using rule 140 (NotJustName -> SpecialName .)
    :               reduce using rule 140 (NotJustName -> SpecialName .)
    }               reduce using rule 140 (NotJustName -> SpecialName .)
    ]               reduce using rule 140 (NotJustName -> SpecialName .)
    (               reduce using rule 168 (MethodAccess -> SpecialName .)


state 120

    (142) NotJustName -> ComplexPrimary .
    (159) ArrayAccess -> ComplexPrimary . [ Expression ]

    .               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OPT_INC_DEC     reduce using rule 142 (NotJustName -> ComplexPrimary .)
    =               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OPT_EQ          reduce using rule 142 (NotJustName -> ComplexPrimary .)
    *               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    /               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    %               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    +               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    -               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OPT_SOME        reduce using rule 142 (NotJustName -> ComplexPrimary .)
    <               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    >               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 142 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 142 (NotJustName -> ComplexPrimary .)
    ?               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 142 (NotJustName -> ComplexPrimary .)
    ;               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    )               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    ,               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    :               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    }               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    ]               reduce using rule 142 (NotJustName -> ComplexPrimary .)
    [               shift and go to state 214


state 121

    (199) LogicalUnaryExpression -> PostfixExpression .
    (196) RealPostfixExpression -> PostfixExpression . OPT_INC_DEC

    =               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_EQ          reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    *               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    /               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    %               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    +               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    -               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_SOME        reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    <               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    >               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    ?               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    )               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    ;               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    ,               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    :               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    }               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    ]               reduce using rule 199 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_INC_DEC     shift and go to state 215


state 122

    (178) PlainNewAllocationExpression -> ClassAllocationExpression .
    (180) PlainNewAllocationExpression -> ClassAllocationExpression . { }
    (182) PlainNewAllocationExpression -> ClassAllocationExpression . { FieldDeclarations }

    .               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_INC_DEC     reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    *               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    /               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    %               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    +               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    -               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_SOME        reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    <               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    >               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ?               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ;               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    )               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ,               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    :               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    }               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ]               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    =               reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_EQ          reduce using rule 178 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    {               shift and go to state 216


state 123

    (105) LabelStatement -> DEFAULT . :

    :               shift and go to state 217


state 124

    (99) Statement -> JumpStatement . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)
    ELSE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 218

state 125

    (114) IterationStatement -> WHILE . M_instr_branch ( Expression ) M_instr_branch Statement
    (113) M_instr_branch -> .

    (               reduce using rule 113 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 219

state 126

    (185) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (187) ArrayAllocationExpression -> NEW . TypeName Dims
    (183) ClassAllocationExpression -> NEW . TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> NEW . TypeName ( )
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 220

state 127

    (154) Float_LIT -> FLOAT_LITERAL .

    [               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    .               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OPT_INC_DEC     reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    *               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    /               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    %               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    +               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    -               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OPT_SOME        reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    <               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    >               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OP_LE           reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OP_GE           reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OP_EQ           reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OP_NE           reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    &               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    ^               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    |               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OP_LAND         reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    ?               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OP_LOR          reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    ;               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    )               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    ,               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    :               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    }               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    ]               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    =               reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)
    OPT_EQ          reduce using rule 154 (Float_LIT -> FLOAT_LITERAL .)


state 128

    (93) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators ; M_instr
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    VariableDeclarators            shift and go to state 221
    DeclaratorName                 shift and go to state 222
    VariableDeclarator             shift and go to state 79

state 129

    (194) PostfixExpression -> PrimaryExpression .

    OPT_INC_DEC     reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    =               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OPT_EQ          reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    *               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    /               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    %               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    +               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    -               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OPT_SOME        reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    <               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    >               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    ?               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    ;               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    )               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    ,               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    :               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    }               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)
    ]               reduce using rule 194 (PostfixExpression -> PrimaryExpression .)


state 130

    (110) SelectionStatement -> SWITCH . ( Expression Mark_switch ) Block

    (               shift and go to state 223


state 131

    (234) ConditionalExpression -> ConditionalOrExpression .
    (235) ConditionalExpression -> ConditionalOrExpression . ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (232) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR M_OP ConditionalAndExpression

    ;               reduce using rule 234 (ConditionalExpression -> ConditionalOrExpression .)
    ,               reduce using rule 234 (ConditionalExpression -> ConditionalOrExpression .)
    )               reduce using rule 234 (ConditionalExpression -> ConditionalOrExpression .)
    }               reduce using rule 234 (ConditionalExpression -> ConditionalOrExpression .)
    ]               reduce using rule 234 (ConditionalExpression -> ConditionalOrExpression .)
    :               reduce using rule 234 (ConditionalExpression -> ConditionalOrExpression .)
    ?               shift and go to state 225
    OP_LOR          shift and go to state 224


state 132

    (141) NotJustName -> NewAllocationExpression .

    .               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    =               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OPT_EQ          reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    *               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    /               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    %               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    +               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    -               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OPT_SOME        reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    <               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    >               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    ?               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    ;               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    )               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    ,               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    :               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    }               reduce using rule 141 (NotJustName -> NewAllocationExpression .)
    ]               reduce using rule 141 (NotJustName -> NewAllocationExpression .)


state 133

    (107) ExpressionStatement -> Expression .

    ;               reduce using rule 107 (ExpressionStatement -> Expression .)
    ,               reduce using rule 107 (ExpressionStatement -> Expression .)
    )               reduce using rule 107 (ExpressionStatement -> Expression .)


state 134

    (213) ShiftExpression -> AdditiveExpression .
    (211) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (212) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    <               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    >               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    ?               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    ;               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    )               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    ,               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    :               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    }               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    ]               reduce using rule 213 (ShiftExpression -> AdditiveExpression .)
    +               shift and go to state 226
    -               shift and go to state 227


state 135

    (237) AssignmentExpression -> ConditionalExpression .

    ;               reduce using rule 237 (AssignmentExpression -> ConditionalExpression .)
    )               reduce using rule 237 (AssignmentExpression -> ConditionalExpression .)
    ]               reduce using rule 237 (AssignmentExpression -> ConditionalExpression .)
    ,               reduce using rule 237 (AssignmentExpression -> ConditionalExpression .)
    }               reduce using rule 237 (AssignmentExpression -> ConditionalExpression .)
    :               reduce using rule 237 (AssignmentExpression -> ConditionalExpression .)


state 136

    (238) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (205) CastExpression -> UnaryExpression .
    (239) AssignmentOperator -> . =
    (240) AssignmentOperator -> . OPT_EQ

    *               reduce using rule 205 (CastExpression -> UnaryExpression .)
    /               reduce using rule 205 (CastExpression -> UnaryExpression .)
    %               reduce using rule 205 (CastExpression -> UnaryExpression .)
    +               reduce using rule 205 (CastExpression -> UnaryExpression .)
    -               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 205 (CastExpression -> UnaryExpression .)
    <               reduce using rule 205 (CastExpression -> UnaryExpression .)
    >               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 205 (CastExpression -> UnaryExpression .)
    &               reduce using rule 205 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 205 (CastExpression -> UnaryExpression .)
    |               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 205 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 205 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 205 (CastExpression -> UnaryExpression .)
    )               reduce using rule 205 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 205 (CastExpression -> UnaryExpression .)
    }               reduce using rule 205 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 205 (CastExpression -> UnaryExpression .)
    :               reduce using rule 205 (CastExpression -> UnaryExpression .)
    =               shift and go to state 230
    OPT_EQ          shift and go to state 229

    AssignmentOperator             shift and go to state 228

state 137

    (229) ConditionalAndExpression -> InclusiveOrExpression .
    (228) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    ?               reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    ,               reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    ;               reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    )               reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    }               reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    ]               reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    :               reduce using rule 229 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 231


state 138

    (145) ComplexPrimary -> Float_LIT .

    [               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    .               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OPT_INC_DEC     reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    *               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    /               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    %               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    +               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    -               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OPT_SOME        reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    <               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    >               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OP_LE           reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OP_GE           reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OP_EQ           reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OP_NE           reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    &               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    ^               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    |               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OP_LAND         reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    ?               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OP_LOR          reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    ;               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    )               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    ,               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    :               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    }               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    ]               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    =               reduce using rule 145 (ComplexPrimary -> Float_LIT .)
    OPT_EQ          reduce using rule 145 (ComplexPrimary -> Float_LIT .)


state 139

    (126) JumpStatement -> BREAK . IDENTIFIER ;
    (127) JumpStatement -> BREAK . ;

    IDENTIFIER      shift and go to state 233
    ;               shift and go to state 232


state 140

    (157) Bool_LIT -> BOOL .

    [               reduce using rule 157 (Bool_LIT -> BOOL .)
    .               reduce using rule 157 (Bool_LIT -> BOOL .)
    OPT_INC_DEC     reduce using rule 157 (Bool_LIT -> BOOL .)
    =               reduce using rule 157 (Bool_LIT -> BOOL .)
    OPT_EQ          reduce using rule 157 (Bool_LIT -> BOOL .)
    *               reduce using rule 157 (Bool_LIT -> BOOL .)
    /               reduce using rule 157 (Bool_LIT -> BOOL .)
    %               reduce using rule 157 (Bool_LIT -> BOOL .)
    +               reduce using rule 157 (Bool_LIT -> BOOL .)
    -               reduce using rule 157 (Bool_LIT -> BOOL .)
    OPT_SOME        reduce using rule 157 (Bool_LIT -> BOOL .)
    <               reduce using rule 157 (Bool_LIT -> BOOL .)
    >               reduce using rule 157 (Bool_LIT -> BOOL .)
    OP_LE           reduce using rule 157 (Bool_LIT -> BOOL .)
    OP_GE           reduce using rule 157 (Bool_LIT -> BOOL .)
    OP_EQ           reduce using rule 157 (Bool_LIT -> BOOL .)
    OP_NE           reduce using rule 157 (Bool_LIT -> BOOL .)
    &               reduce using rule 157 (Bool_LIT -> BOOL .)
    ^               reduce using rule 157 (Bool_LIT -> BOOL .)
    |               reduce using rule 157 (Bool_LIT -> BOOL .)
    OP_LAND         reduce using rule 157 (Bool_LIT -> BOOL .)
    ?               reduce using rule 157 (Bool_LIT -> BOOL .)
    OP_LOR          reduce using rule 157 (Bool_LIT -> BOOL .)
    )               reduce using rule 157 (Bool_LIT -> BOOL .)
    ;               reduce using rule 157 (Bool_LIT -> BOOL .)
    ,               reduce using rule 157 (Bool_LIT -> BOOL .)
    :               reduce using rule 157 (Bool_LIT -> BOOL .)
    }               reduce using rule 157 (Bool_LIT -> BOOL .)
    ]               reduce using rule 157 (Bool_LIT -> BOOL .)


state 141

    (151) ComplexPrimaryNoParenthesis -> FieldAccess .

    [               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    .               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_INC_DEC     reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    =               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_EQ          reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    *               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    /               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    %               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    +               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    -               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_SOME        reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    <               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    >               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ?               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    :               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    (               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ;               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    )               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ,               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    }               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ]               reduce using rule 151 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 142

    (153) Integer_LIT -> INT_LITERAL .

    [               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    .               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OPT_INC_DEC     reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    =               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OPT_EQ          reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    *               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    /               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    %               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    +               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    -               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OPT_SOME        reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    <               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    >               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OP_LE           reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OP_GE           reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OP_EQ           reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OP_NE           reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    &               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    ^               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    |               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OP_LAND         reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    ?               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    OP_LOR          reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    ;               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    )               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    ,               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    :               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    }               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)
    ]               reduce using rule 153 (Integer_LIT -> INT_LITERAL .)


state 143

    (201) LogicalUnaryOperator -> ~ .

    +               reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    -               reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    !               reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    (               reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    INT_LITERAL     reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    FLOAT_LITERAL   reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    CHAR_LITERAL    reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    STRING_LITERAL  reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    BOOL            reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 201 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 201 (LogicalUnaryOperator -> ~ .)


state 144

    (115) IterationStatement -> DO . M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (113) M_instr_branch -> .

    ;               reduce using rule 113 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 113 (M_instr_branch -> .)
    DEFAULT         reduce using rule 113 (M_instr_branch -> .)
    IF              reduce using rule 113 (M_instr_branch -> .)
    SWITCH          reduce using rule 113 (M_instr_branch -> .)
    WHILE           reduce using rule 113 (M_instr_branch -> .)
    DO              reduce using rule 113 (M_instr_branch -> .)
    FOR             reduce using rule 113 (M_instr_branch -> .)
    BREAK           reduce using rule 113 (M_instr_branch -> .)
    CONTINUE        reduce using rule 113 (M_instr_branch -> .)
    RETURN          reduce using rule 113 (M_instr_branch -> .)
    THROW           reduce using rule 113 (M_instr_branch -> .)
    {               reduce using rule 113 (M_instr_branch -> .)
    +               reduce using rule 113 (M_instr_branch -> .)
    -               reduce using rule 113 (M_instr_branch -> .)
    ~               reduce using rule 113 (M_instr_branch -> .)
    !               reduce using rule 113 (M_instr_branch -> .)
    THIS            reduce using rule 113 (M_instr_branch -> .)
    SUPER           reduce using rule 113 (M_instr_branch -> .)
    NULL            reduce using rule 113 (M_instr_branch -> .)
    (               reduce using rule 113 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 113 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 113 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 113 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 113 (M_instr_branch -> .)
    BOOL            reduce using rule 113 (M_instr_branch -> .)
    NEW             reduce using rule 113 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 113 (M_instr_branch -> .)
    CHAR            reduce using rule 113 (M_instr_branch -> .)
    BYTE            reduce using rule 113 (M_instr_branch -> .)
    SHORT           reduce using rule 113 (M_instr_branch -> .)
    INT             reduce using rule 113 (M_instr_branch -> .)
    LONG            reduce using rule 113 (M_instr_branch -> .)
    FLOAT           reduce using rule 113 (M_instr_branch -> .)
    DOUBLE          reduce using rule 113 (M_instr_branch -> .)
    VOID            reduce using rule 113 (M_instr_branch -> .)
    CASE            reduce using rule 113 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 234

state 145

    (206) MultiplicativeExpression -> CastExpression .

    *               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    /               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    %               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    +               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    -               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    OPT_SOME        reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    <               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    >               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    ?               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    ;               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    )               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    ,               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    :               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    }               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)
    ]               reduce using rule 206 (MultiplicativeExpression -> CastExpression .)


state 146

    (172) SpecialName -> NULL .

    .               reduce using rule 172 (SpecialName -> NULL .)
    OPT_INC_DEC     reduce using rule 172 (SpecialName -> NULL .)
    =               reduce using rule 172 (SpecialName -> NULL .)
    OPT_EQ          reduce using rule 172 (SpecialName -> NULL .)
    *               reduce using rule 172 (SpecialName -> NULL .)
    /               reduce using rule 172 (SpecialName -> NULL .)
    %               reduce using rule 172 (SpecialName -> NULL .)
    +               reduce using rule 172 (SpecialName -> NULL .)
    -               reduce using rule 172 (SpecialName -> NULL .)
    OPT_SOME        reduce using rule 172 (SpecialName -> NULL .)
    <               reduce using rule 172 (SpecialName -> NULL .)
    >               reduce using rule 172 (SpecialName -> NULL .)
    OP_LE           reduce using rule 172 (SpecialName -> NULL .)
    OP_GE           reduce using rule 172 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 172 (SpecialName -> NULL .)
    OP_NE           reduce using rule 172 (SpecialName -> NULL .)
    &               reduce using rule 172 (SpecialName -> NULL .)
    ^               reduce using rule 172 (SpecialName -> NULL .)
    |               reduce using rule 172 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 172 (SpecialName -> NULL .)
    ?               reduce using rule 172 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 172 (SpecialName -> NULL .)
    ;               reduce using rule 172 (SpecialName -> NULL .)
    (               reduce using rule 172 (SpecialName -> NULL .)
    )               reduce using rule 172 (SpecialName -> NULL .)
    ,               reduce using rule 172 (SpecialName -> NULL .)
    :               reduce using rule 172 (SpecialName -> NULL .)
    }               reduce using rule 172 (SpecialName -> NULL .)
    ]               reduce using rule 172 (SpecialName -> NULL .)


state 147

    (202) LogicalUnaryOperator -> ! .

    +               reduce using rule 202 (LogicalUnaryOperator -> ! .)
    -               reduce using rule 202 (LogicalUnaryOperator -> ! .)
    ~               reduce using rule 202 (LogicalUnaryOperator -> ! .)
    !               reduce using rule 202 (LogicalUnaryOperator -> ! .)
    IDENTIFIER      reduce using rule 202 (LogicalUnaryOperator -> ! .)
    THIS            reduce using rule 202 (LogicalUnaryOperator -> ! .)
    SUPER           reduce using rule 202 (LogicalUnaryOperator -> ! .)
    NULL            reduce using rule 202 (LogicalUnaryOperator -> ! .)
    (               reduce using rule 202 (LogicalUnaryOperator -> ! .)
    INT_LITERAL     reduce using rule 202 (LogicalUnaryOperator -> ! .)
    FLOAT_LITERAL   reduce using rule 202 (LogicalUnaryOperator -> ! .)
    CHAR_LITERAL    reduce using rule 202 (LogicalUnaryOperator -> ! .)
    STRING_LITERAL  reduce using rule 202 (LogicalUnaryOperator -> ! .)
    BOOL            reduce using rule 202 (LogicalUnaryOperator -> ! .)
    NEW             reduce using rule 202 (LogicalUnaryOperator -> ! .)
    BOOLEAN         reduce using rule 202 (LogicalUnaryOperator -> ! .)
    CHAR            reduce using rule 202 (LogicalUnaryOperator -> ! .)
    BYTE            reduce using rule 202 (LogicalUnaryOperator -> ! .)
    SHORT           reduce using rule 202 (LogicalUnaryOperator -> ! .)
    INT             reduce using rule 202 (LogicalUnaryOperator -> ! .)
    LONG            reduce using rule 202 (LogicalUnaryOperator -> ! .)
    FLOAT           reduce using rule 202 (LogicalUnaryOperator -> ! .)
    DOUBLE          reduce using rule 202 (LogicalUnaryOperator -> ! .)
    VOID            reduce using rule 202 (LogicalUnaryOperator -> ! .)


state 148

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (138) PrimaryExpression -> QualifiedName .
    (176) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (158) ArrayAccess -> QualifiedName . [ Expression ]
    (162) FieldAccess -> QualifiedName . . THIS
    (163) FieldAccess -> QualifiedName . . CLASS
    (169) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for [ resolved as shift
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 235
    OPT_INC_DEC     reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    [               shift and go to state 236
    (               reduce using rule 169 (MethodAccess -> QualifiedName .)

  ! [               [ reduce using rule 5 (TypeName -> QualifiedName .) ]


state 149

    (204) ArithmeticUnaryOperator -> - .

    +               reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    -               reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    ~               reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    !               reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    IDENTIFIER      reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    THIS            reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    SUPER           reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    NULL            reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    (               reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    INT_LITERAL     reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    FLOAT_LITERAL   reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    CHAR_LITERAL    reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    STRING_LITERAL  reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    BOOL            reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    NEW             reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    BOOLEAN         reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    CHAR            reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    BYTE            reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    SHORT           reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    INT             reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    LONG            reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    FLOAT           reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    DOUBLE          reduce using rule 204 (ArithmeticUnaryOperator -> - .)
    VOID            reduce using rule 204 (ArithmeticUnaryOperator -> - .)


state 150

    (91) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    }               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ;               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THROW           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    {               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    +               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    -               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    !               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    (               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 151

    (215) RelationalExpression -> ShiftExpression .
    (214) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    >               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    ?               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    )               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    }               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    ,               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    ;               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    :               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    ]               reduce using rule 215 (RelationalExpression -> ShiftExpression .)
    OPT_SOME        shift and go to state 237


state 152

    (85) Block -> Lparen LocalVariableDeclarationsAndStatements . Rparen
    (90) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (88) Rparen -> . }
    (91) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (92) LocalVariableDeclarationOrStatement -> . Statement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    }               shift and go to state 161
    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    FieldAccess                    shift and go to state 141
    Statement                      shift and go to state 86
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    QualifiedName                  shift and go to state 148
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 154
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 150
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    Rparen                         shift and go to state 238
    ConditionalOrExpression        shift and go to state 131
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    PrimitiveType                  shift and go to state 85
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Char_LIT                       shift and go to state 155
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    LocalVariableDeclarationOrStatement shift and go to state 239
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 153

    (139) PrimaryExpression -> NotJustName .
    (160) FieldAccess -> NotJustName . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 139 (PrimaryExpression -> NotJustName .)
    *               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    /               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    %               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    +               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    -               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OPT_SOME        reduce using rule 139 (PrimaryExpression -> NotJustName .)
    <               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    >               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 139 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 139 (PrimaryExpression -> NotJustName .)
    ?               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 139 (PrimaryExpression -> NotJustName .)
    :               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    ;               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    )               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    ,               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    }               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    ]               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    =               reduce using rule 139 (PrimaryExpression -> NotJustName .)
    OPT_EQ          reduce using rule 139 (PrimaryExpression -> NotJustName .)
    .               shift and go to state 240


state 154

    (200) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 241
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 155

    (146) ComplexPrimary -> Char_LIT .

    [               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    .               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OPT_INC_DEC     reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    *               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    /               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    %               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    +               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    -               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OPT_SOME        reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    <               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    >               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OP_LE           reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OP_GE           reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OP_EQ           reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OP_NE           reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    &               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    ^               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    |               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OP_LAND         reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    ?               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OP_LOR          reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    ;               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    )               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    ,               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    :               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    }               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    ]               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    =               reduce using rule 146 (ComplexPrimary -> Char_LIT .)
    OPT_EQ          reduce using rule 146 (ComplexPrimary -> Char_LIT .)


state 156

    (198) UnaryExpression -> LogicalUnaryExpression .

    =               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_EQ          reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    *               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    /               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    %               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    +               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    -               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_SOME        reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    <               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    >               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    ?               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    ;               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    )               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    ,               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    :               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    }               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)
    ]               reduce using rule 198 (UnaryExpression -> LogicalUnaryExpression .)


state 157

    (147) ComplexPrimary -> String_LIT .

    [               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    .               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OPT_INC_DEC     reduce using rule 147 (ComplexPrimary -> String_LIT .)
    *               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    /               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    %               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    +               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    -               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OPT_SOME        reduce using rule 147 (ComplexPrimary -> String_LIT .)
    <               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    >               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OP_LE           reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OP_GE           reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OP_EQ           reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OP_NE           reduce using rule 147 (ComplexPrimary -> String_LIT .)
    &               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    ^               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    |               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OP_LAND         reduce using rule 147 (ComplexPrimary -> String_LIT .)
    ?               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OP_LOR          reduce using rule 147 (ComplexPrimary -> String_LIT .)
    ;               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    )               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    ,               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    :               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    }               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    ]               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    =               reduce using rule 147 (ComplexPrimary -> String_LIT .)
    OPT_EQ          reduce using rule 147 (ComplexPrimary -> String_LIT .)


state 158

    (108) SelectionStatement -> IF . ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> IF . ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement

    (               shift and go to state 242


state 159

    (156) String_LIT -> STRING_LITERAL .

    [               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    .               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OPT_INC_DEC     reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    *               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    /               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    %               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    +               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    -               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OPT_SOME        reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    <               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    >               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OP_LE           reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OP_GE           reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OP_EQ           reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OP_NE           reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    &               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    ^               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    |               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OP_LAND         reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    ?               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OP_LOR          reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    ;               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    )               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    ,               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    :               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    }               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    ]               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    =               reduce using rule 156 (String_LIT -> STRING_LITERAL .)
    OPT_EQ          reduce using rule 156 (String_LIT -> STRING_LITERAL .)


state 160

    (171) SpecialName -> SUPER .

    .               reduce using rule 171 (SpecialName -> SUPER .)
    OPT_INC_DEC     reduce using rule 171 (SpecialName -> SUPER .)
    =               reduce using rule 171 (SpecialName -> SUPER .)
    OPT_EQ          reduce using rule 171 (SpecialName -> SUPER .)
    *               reduce using rule 171 (SpecialName -> SUPER .)
    /               reduce using rule 171 (SpecialName -> SUPER .)
    %               reduce using rule 171 (SpecialName -> SUPER .)
    +               reduce using rule 171 (SpecialName -> SUPER .)
    -               reduce using rule 171 (SpecialName -> SUPER .)
    OPT_SOME        reduce using rule 171 (SpecialName -> SUPER .)
    <               reduce using rule 171 (SpecialName -> SUPER .)
    >               reduce using rule 171 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 171 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 171 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 171 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 171 (SpecialName -> SUPER .)
    &               reduce using rule 171 (SpecialName -> SUPER .)
    ^               reduce using rule 171 (SpecialName -> SUPER .)
    |               reduce using rule 171 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 171 (SpecialName -> SUPER .)
    ?               reduce using rule 171 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 171 (SpecialName -> SUPER .)
    ;               reduce using rule 171 (SpecialName -> SUPER .)
    (               reduce using rule 171 (SpecialName -> SUPER .)
    )               reduce using rule 171 (SpecialName -> SUPER .)
    ,               reduce using rule 171 (SpecialName -> SUPER .)
    :               reduce using rule 171 (SpecialName -> SUPER .)
    }               reduce using rule 171 (SpecialName -> SUPER .)
    ]               reduce using rule 171 (SpecialName -> SUPER .)


state 161

    (88) Rparen -> } .

    ;               reduce using rule 88 (Rparen -> } .)
    }               reduce using rule 88 (Rparen -> } .)
    STATIC          reduce using rule 88 (Rparen -> } .)
    IDENTIFIER      reduce using rule 88 (Rparen -> } .)
    PUBLIC          reduce using rule 88 (Rparen -> } .)
    PRIVATE         reduce using rule 88 (Rparen -> } .)
    {               reduce using rule 88 (Rparen -> } .)
    CLASS           reduce using rule 88 (Rparen -> } .)
    INTERFACE       reduce using rule 88 (Rparen -> } .)
    BOOLEAN         reduce using rule 88 (Rparen -> } .)
    CHAR            reduce using rule 88 (Rparen -> } .)
    BYTE            reduce using rule 88 (Rparen -> } .)
    SHORT           reduce using rule 88 (Rparen -> } .)
    INT             reduce using rule 88 (Rparen -> } .)
    LONG            reduce using rule 88 (Rparen -> } .)
    FLOAT           reduce using rule 88 (Rparen -> } .)
    DOUBLE          reduce using rule 88 (Rparen -> } .)
    VOID            reduce using rule 88 (Rparen -> } .)
    DEFAULT         reduce using rule 88 (Rparen -> } .)
    IF              reduce using rule 88 (Rparen -> } .)
    SWITCH          reduce using rule 88 (Rparen -> } .)
    WHILE           reduce using rule 88 (Rparen -> } .)
    DO              reduce using rule 88 (Rparen -> } .)
    FOR             reduce using rule 88 (Rparen -> } .)
    BREAK           reduce using rule 88 (Rparen -> } .)
    CONTINUE        reduce using rule 88 (Rparen -> } .)
    RETURN          reduce using rule 88 (Rparen -> } .)
    THROW           reduce using rule 88 (Rparen -> } .)
    +               reduce using rule 88 (Rparen -> } .)
    -               reduce using rule 88 (Rparen -> } .)
    ~               reduce using rule 88 (Rparen -> } .)
    !               reduce using rule 88 (Rparen -> } .)
    THIS            reduce using rule 88 (Rparen -> } .)
    SUPER           reduce using rule 88 (Rparen -> } .)
    NULL            reduce using rule 88 (Rparen -> } .)
    (               reduce using rule 88 (Rparen -> } .)
    INT_LITERAL     reduce using rule 88 (Rparen -> } .)
    FLOAT_LITERAL   reduce using rule 88 (Rparen -> } .)
    CHAR_LITERAL    reduce using rule 88 (Rparen -> } .)
    STRING_LITERAL  reduce using rule 88 (Rparen -> } .)
    BOOL            reduce using rule 88 (Rparen -> } .)
    NEW             reduce using rule 88 (Rparen -> } .)
    CASE            reduce using rule 88 (Rparen -> } .)
    ELSE            reduce using rule 88 (Rparen -> } .)


state 162

    (132) JumpStatement -> THROW . Expression ;
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 243
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 163

    (98) Statement -> IterationStatement . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)
    ELSE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 244

state 164

    (79) ConstructorDeclarator -> IDENTIFIER ( . ParameterList )
    (80) ConstructorDeclarator -> IDENTIFIER ( . )
    (69) ParameterList -> . Parameter
    (70) ParameterList -> . ParameterList , Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 247
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 248
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 245
    TypeSpecifier                  shift and go to state 246

state 165

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (65) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (67) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (68) MethodDeclarator -> . DeclaratorName ( )
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    VariableDeclarators            shift and go to state 249
    DeclaratorName                 shift and go to state 76
    MethodDeclarator               shift and go to state 250
    VariableDeclarator             shift and go to state 79

state 166

    (77) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Block
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (87) Lparen -> . {

    {               shift and go to state 69

    Lparen                         shift and go to state 54
    Block                          shift and go to state 251

state 167

    (46) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    }               reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    {               reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 168

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations } .

    ;               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CLASS           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INTERFACE       reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PUBLIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PRIVATE         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    STATIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    $end            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    }               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    IDENTIFIER      reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    {               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BOOLEAN         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CHAR            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BYTE            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    SHORT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INT             reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    LONG            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    FLOAT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    DOUBLE          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    VOID            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)


state 169

    (78) ConstructorDeclaration -> ConstructorDeclarator Block .

    ;               reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    }               reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    STATIC          reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    {               reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CLASS           reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CHAR            reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BYTE            reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SHORT           reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INT             reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LONG            reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FLOAT           reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOID            reduce using rule 78 (ConstructorDeclaration -> ConstructorDeclarator Block .)


state 170

    (48) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    }               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    {               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INTERFACE       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    ;               shift and go to state 34


state 171

    (31) ImportStatement -> IMPORT QualifiedName . * SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    CLASS           reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    INTERFACE       reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PUBLIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PRIVATE         reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    STATIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    ;               shift and go to state 34


state 172

    (58) VariableDeclarators -> VariableDeclarators , . VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    DeclaratorName                 shift and go to state 222
    VariableDeclarator             shift and go to state 252

state 173

    (67) MethodDeclarator -> DeclaratorName ( . ParameterList )
    (68) MethodDeclarator -> DeclaratorName ( . )
    (69) ParameterList -> . Parameter
    (70) ParameterList -> . ParameterList , Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 253
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 254
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 245
    TypeSpecifier                  shift and go to state 246

state 174

    (60) VariableDeclarator -> DeclaratorName = . VariableInitializer
    (61) VariableInitializer -> . Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    VariableInitializer            shift and go to state 255
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 256
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 175

    (73) DeclaratorName -> DeclaratorName OP_DIM .

    (               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    =               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    [               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    ,               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    ;               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    )               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)


state 176

    (66) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 177

    (76) MethodBody -> ; .

    ;               reduce using rule 76 (MethodBody -> ; .)
    }               reduce using rule 76 (MethodBody -> ; .)
    STATIC          reduce using rule 76 (MethodBody -> ; .)
    IDENTIFIER      reduce using rule 76 (MethodBody -> ; .)
    PUBLIC          reduce using rule 76 (MethodBody -> ; .)
    PRIVATE         reduce using rule 76 (MethodBody -> ; .)
    {               reduce using rule 76 (MethodBody -> ; .)
    CLASS           reduce using rule 76 (MethodBody -> ; .)
    INTERFACE       reduce using rule 76 (MethodBody -> ; .)
    BOOLEAN         reduce using rule 76 (MethodBody -> ; .)
    CHAR            reduce using rule 76 (MethodBody -> ; .)
    BYTE            reduce using rule 76 (MethodBody -> ; .)
    SHORT           reduce using rule 76 (MethodBody -> ; .)
    INT             reduce using rule 76 (MethodBody -> ; .)
    LONG            reduce using rule 76 (MethodBody -> ; .)
    FLOAT           reduce using rule 76 (MethodBody -> ; .)
    DOUBLE          reduce using rule 76 (MethodBody -> ; .)
    VOID            reduce using rule 76 (MethodBody -> ; .)


state 178

    (74) MethodBody -> { . LocalVariableDeclarationsAndStatements }
    (75) MethodBody -> { . }
    (89) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (90) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (91) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (92) LocalVariableDeclarationOrStatement -> . Statement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    }               shift and go to state 258
    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    FieldAccess                    shift and go to state 141
    Statement                      shift and go to state 86
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    QualifiedName                  shift and go to state 148
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 154
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 150
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    LocalVariableDeclarationsAndStatements shift and go to state 257
    ConditionalOrExpression        shift and go to state 131
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    PrimitiveType                  shift and go to state 85
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Char_LIT                       shift and go to state 155
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    LocalVariableDeclarationOrStatement shift and go to state 118
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 179

    (193) OP_DIM -> [ ] .

    [               reduce using rule 193 (OP_DIM -> [ ] .)
    IDENTIFIER      reduce using rule 193 (OP_DIM -> [ ] .)
    {               reduce using rule 193 (OP_DIM -> [ ] .)
    .               reduce using rule 193 (OP_DIM -> [ ] .)
    OPT_INC_DEC     reduce using rule 193 (OP_DIM -> [ ] .)
    =               reduce using rule 193 (OP_DIM -> [ ] .)
    OPT_EQ          reduce using rule 193 (OP_DIM -> [ ] .)
    *               reduce using rule 193 (OP_DIM -> [ ] .)
    /               reduce using rule 193 (OP_DIM -> [ ] .)
    %               reduce using rule 193 (OP_DIM -> [ ] .)
    +               reduce using rule 193 (OP_DIM -> [ ] .)
    -               reduce using rule 193 (OP_DIM -> [ ] .)
    OPT_SOME        reduce using rule 193 (OP_DIM -> [ ] .)
    <               reduce using rule 193 (OP_DIM -> [ ] .)
    >               reduce using rule 193 (OP_DIM -> [ ] .)
    OP_LE           reduce using rule 193 (OP_DIM -> [ ] .)
    OP_GE           reduce using rule 193 (OP_DIM -> [ ] .)
    OP_EQ           reduce using rule 193 (OP_DIM -> [ ] .)
    OP_NE           reduce using rule 193 (OP_DIM -> [ ] .)
    &               reduce using rule 193 (OP_DIM -> [ ] .)
    ^               reduce using rule 193 (OP_DIM -> [ ] .)
    |               reduce using rule 193 (OP_DIM -> [ ] .)
    OP_LAND         reduce using rule 193 (OP_DIM -> [ ] .)
    ?               reduce using rule 193 (OP_DIM -> [ ] .)
    OP_LOR          reduce using rule 193 (OP_DIM -> [ ] .)
    ;               reduce using rule 193 (OP_DIM -> [ ] .)
    )               reduce using rule 193 (OP_DIM -> [ ] .)
    ,               reduce using rule 193 (OP_DIM -> [ ] .)
    :               reduce using rule 193 (OP_DIM -> [ ] .)
    }               reduce using rule 193 (OP_DIM -> [ ] .)
    ]               reduce using rule 193 (OP_DIM -> [ ] .)
    (               reduce using rule 193 (OP_DIM -> [ ] .)


state 180

    (192) Dims -> Dims OP_DIM .

    [               reduce using rule 192 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 192 (Dims -> Dims OP_DIM .)
    {               reduce using rule 192 (Dims -> Dims OP_DIM .)
    .               reduce using rule 192 (Dims -> Dims OP_DIM .)
    OPT_INC_DEC     reduce using rule 192 (Dims -> Dims OP_DIM .)
    =               reduce using rule 192 (Dims -> Dims OP_DIM .)
    OPT_EQ          reduce using rule 192 (Dims -> Dims OP_DIM .)
    *               reduce using rule 192 (Dims -> Dims OP_DIM .)
    /               reduce using rule 192 (Dims -> Dims OP_DIM .)
    %               reduce using rule 192 (Dims -> Dims OP_DIM .)
    +               reduce using rule 192 (Dims -> Dims OP_DIM .)
    -               reduce using rule 192 (Dims -> Dims OP_DIM .)
    OPT_SOME        reduce using rule 192 (Dims -> Dims OP_DIM .)
    <               reduce using rule 192 (Dims -> Dims OP_DIM .)
    >               reduce using rule 192 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 192 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 192 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 192 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 192 (Dims -> Dims OP_DIM .)
    &               reduce using rule 192 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 192 (Dims -> Dims OP_DIM .)
    |               reduce using rule 192 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 192 (Dims -> Dims OP_DIM .)
    ?               reduce using rule 192 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 192 (Dims -> Dims OP_DIM .)
    ;               reduce using rule 192 (Dims -> Dims OP_DIM .)
    )               reduce using rule 192 (Dims -> Dims OP_DIM .)
    ,               reduce using rule 192 (Dims -> Dims OP_DIM .)
    :               reduce using rule 192 (Dims -> Dims OP_DIM .)
    }               reduce using rule 192 (Dims -> Dims OP_DIM .)
    ]               reduce using rule 192 (Dims -> Dims OP_DIM .)


state 181

    (96) Statement -> ExpressionStatement ; . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)
    ELSE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 259

state 182

    (164) FieldAccess -> PrimitiveType . . CLASS

    CLASS           shift and go to state 260


state 183

    (224) AndExpression -> AndExpression & . EqualityExpression
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 120
    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 261
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 184

    (164) FieldAccess -> PrimitiveType . . CLASS

    .               shift and go to state 182


state 185

    (149) ComplexPrimary -> ( Expression . )

    )               shift and go to state 262


state 186

    (138) PrimaryExpression -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (176) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (158) ArrayAccess -> QualifiedName . [ Expression ]
    (162) FieldAccess -> QualifiedName . . THIS
    (163) FieldAccess -> QualifiedName . . CLASS
    (169) MethodAccess -> QualifiedName .

    OPT_INC_DEC     reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    :               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    )               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    }               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    ]               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 138 (PrimaryExpression -> QualifiedName .)
    .               shift and go to state 235
    [               shift and go to state 236
    (               reduce using rule 169 (MethodAccess -> QualifiedName .)


state 187

    (103) LabelStatement -> IDENTIFIER : .

    }               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    ;               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    IDENTIFIER      reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    DEFAULT         reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    IF              reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    SWITCH          reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    WHILE           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    DO              reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    FOR             reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BREAK           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CONTINUE        reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    RETURN          reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    THROW           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    {               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BOOLEAN         reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CHAR            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BYTE            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    SHORT           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    INT             reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    LONG            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    FLOAT           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    DOUBLE          reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    VOID            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    +               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    -               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    ~               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    !               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    THIS            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    SUPER           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    NULL            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    (               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    INT_LITERAL     reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    FLOAT_LITERAL   reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CHAR_LITERAL    reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    STRING_LITERAL  reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BOOL            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    NEW             reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CASE            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    ELSE            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)


state 188

    (104) LabelStatement -> Marker_case CASE . ConstantExpression :
    (242) ConstantExpression -> . ConditionalExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    ConstantExpression             shift and go to state 264
    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 263
    UnaryExpression                shift and go to state 196
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    FieldAccess                    shift and go to state 141
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 189

    (230) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . M_OP InclusiveOrExpression
    (233) M_OP -> .

    +               reduce using rule 233 (M_OP -> .)
    -               reduce using rule 233 (M_OP -> .)
    ~               reduce using rule 233 (M_OP -> .)
    !               reduce using rule 233 (M_OP -> .)
    IDENTIFIER      reduce using rule 233 (M_OP -> .)
    THIS            reduce using rule 233 (M_OP -> .)
    SUPER           reduce using rule 233 (M_OP -> .)
    NULL            reduce using rule 233 (M_OP -> .)
    (               reduce using rule 233 (M_OP -> .)
    INT_LITERAL     reduce using rule 233 (M_OP -> .)
    FLOAT_LITERAL   reduce using rule 233 (M_OP -> .)
    CHAR_LITERAL    reduce using rule 233 (M_OP -> .)
    STRING_LITERAL  reduce using rule 233 (M_OP -> .)
    BOOL            reduce using rule 233 (M_OP -> .)
    NEW             reduce using rule 233 (M_OP -> .)
    BOOLEAN         reduce using rule 233 (M_OP -> .)
    CHAR            reduce using rule 233 (M_OP -> .)
    BYTE            reduce using rule 233 (M_OP -> .)
    SHORT           reduce using rule 233 (M_OP -> .)
    INT             reduce using rule 233 (M_OP -> .)
    LONG            reduce using rule 233 (M_OP -> .)
    FLOAT           reduce using rule 233 (M_OP -> .)
    DOUBLE          reduce using rule 233 (M_OP -> .)
    VOID            reduce using rule 233 (M_OP -> .)

    M_OP                           shift and go to state 265

state 190

    (94) Statement -> EmptyStatement M_instr .

    ELSE            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    }               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    ;               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    IDENTIFIER      reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    DEFAULT         reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    IF              reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    SWITCH          reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    WHILE           reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    DO              reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    FOR             reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    BREAK           reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    CONTINUE        reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    RETURN          reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    THROW           reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    {               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    BOOLEAN         reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    CHAR            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    BYTE            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    SHORT           reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    INT             reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    LONG            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    FLOAT           reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    DOUBLE          reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    VOID            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    +               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    -               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    ~               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    !               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    THIS            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    SUPER           reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    NULL            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    (               reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    INT_LITERAL     reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    CHAR_LITERAL    reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    STRING_LITERAL  reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    BOOL            reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    NEW             reduce using rule 94 (Statement -> EmptyStatement M_instr .)
    CASE            reduce using rule 94 (Statement -> EmptyStatement M_instr .)


state 191

    (95) Statement -> LabelStatement M_instr .

    ELSE            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    }               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    ;               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    IDENTIFIER      reduce using rule 95 (Statement -> LabelStatement M_instr .)
    DEFAULT         reduce using rule 95 (Statement -> LabelStatement M_instr .)
    IF              reduce using rule 95 (Statement -> LabelStatement M_instr .)
    SWITCH          reduce using rule 95 (Statement -> LabelStatement M_instr .)
    WHILE           reduce using rule 95 (Statement -> LabelStatement M_instr .)
    DO              reduce using rule 95 (Statement -> LabelStatement M_instr .)
    FOR             reduce using rule 95 (Statement -> LabelStatement M_instr .)
    BREAK           reduce using rule 95 (Statement -> LabelStatement M_instr .)
    CONTINUE        reduce using rule 95 (Statement -> LabelStatement M_instr .)
    RETURN          reduce using rule 95 (Statement -> LabelStatement M_instr .)
    THROW           reduce using rule 95 (Statement -> LabelStatement M_instr .)
    {               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    BOOLEAN         reduce using rule 95 (Statement -> LabelStatement M_instr .)
    CHAR            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    BYTE            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    SHORT           reduce using rule 95 (Statement -> LabelStatement M_instr .)
    INT             reduce using rule 95 (Statement -> LabelStatement M_instr .)
    LONG            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    FLOAT           reduce using rule 95 (Statement -> LabelStatement M_instr .)
    DOUBLE          reduce using rule 95 (Statement -> LabelStatement M_instr .)
    VOID            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    +               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    -               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    ~               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    !               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    THIS            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    SUPER           reduce using rule 95 (Statement -> LabelStatement M_instr .)
    NULL            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    (               reduce using rule 95 (Statement -> LabelStatement M_instr .)
    INT_LITERAL     reduce using rule 95 (Statement -> LabelStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 95 (Statement -> LabelStatement M_instr .)
    CHAR_LITERAL    reduce using rule 95 (Statement -> LabelStatement M_instr .)
    STRING_LITERAL  reduce using rule 95 (Statement -> LabelStatement M_instr .)
    BOOL            reduce using rule 95 (Statement -> LabelStatement M_instr .)
    NEW             reduce using rule 95 (Statement -> LabelStatement M_instr .)
    CASE            reduce using rule 95 (Statement -> LabelStatement M_instr .)


state 192

    (131) JumpStatement -> RETURN ; .

    ELSE            reduce using rule 131 (JumpStatement -> RETURN ; .)
    }               reduce using rule 131 (JumpStatement -> RETURN ; .)
    ;               reduce using rule 131 (JumpStatement -> RETURN ; .)
    IDENTIFIER      reduce using rule 131 (JumpStatement -> RETURN ; .)
    DEFAULT         reduce using rule 131 (JumpStatement -> RETURN ; .)
    IF              reduce using rule 131 (JumpStatement -> RETURN ; .)
    SWITCH          reduce using rule 131 (JumpStatement -> RETURN ; .)
    WHILE           reduce using rule 131 (JumpStatement -> RETURN ; .)
    DO              reduce using rule 131 (JumpStatement -> RETURN ; .)
    FOR             reduce using rule 131 (JumpStatement -> RETURN ; .)
    BREAK           reduce using rule 131 (JumpStatement -> RETURN ; .)
    CONTINUE        reduce using rule 131 (JumpStatement -> RETURN ; .)
    RETURN          reduce using rule 131 (JumpStatement -> RETURN ; .)
    THROW           reduce using rule 131 (JumpStatement -> RETURN ; .)
    {               reduce using rule 131 (JumpStatement -> RETURN ; .)
    BOOLEAN         reduce using rule 131 (JumpStatement -> RETURN ; .)
    CHAR            reduce using rule 131 (JumpStatement -> RETURN ; .)
    BYTE            reduce using rule 131 (JumpStatement -> RETURN ; .)
    SHORT           reduce using rule 131 (JumpStatement -> RETURN ; .)
    INT             reduce using rule 131 (JumpStatement -> RETURN ; .)
    LONG            reduce using rule 131 (JumpStatement -> RETURN ; .)
    FLOAT           reduce using rule 131 (JumpStatement -> RETURN ; .)
    DOUBLE          reduce using rule 131 (JumpStatement -> RETURN ; .)
    VOID            reduce using rule 131 (JumpStatement -> RETURN ; .)
    +               reduce using rule 131 (JumpStatement -> RETURN ; .)
    -               reduce using rule 131 (JumpStatement -> RETURN ; .)
    ~               reduce using rule 131 (JumpStatement -> RETURN ; .)
    !               reduce using rule 131 (JumpStatement -> RETURN ; .)
    THIS            reduce using rule 131 (JumpStatement -> RETURN ; .)
    SUPER           reduce using rule 131 (JumpStatement -> RETURN ; .)
    NULL            reduce using rule 131 (JumpStatement -> RETURN ; .)
    (               reduce using rule 131 (JumpStatement -> RETURN ; .)
    INT_LITERAL     reduce using rule 131 (JumpStatement -> RETURN ; .)
    FLOAT_LITERAL   reduce using rule 131 (JumpStatement -> RETURN ; .)
    CHAR_LITERAL    reduce using rule 131 (JumpStatement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 131 (JumpStatement -> RETURN ; .)
    BOOL            reduce using rule 131 (JumpStatement -> RETURN ; .)
    NEW             reduce using rule 131 (JumpStatement -> RETURN ; .)
    CASE            reduce using rule 131 (JumpStatement -> RETURN ; .)


state 193

    (130) JumpStatement -> RETURN Expression . ;

    ;               shift and go to state 266


state 194

    (161) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    IDENTIFIER      shift and go to state 267


state 195

    (197) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    =               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_EQ          reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    *               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    /               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    %               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    +               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    -               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_SOME        reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    <               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    >               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ?               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ;               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    )               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ,               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    :               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    }               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ]               reduce using rule 197 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 196

    (205) CastExpression -> UnaryExpression .

    *               reduce using rule 205 (CastExpression -> UnaryExpression .)
    /               reduce using rule 205 (CastExpression -> UnaryExpression .)
    %               reduce using rule 205 (CastExpression -> UnaryExpression .)
    +               reduce using rule 205 (CastExpression -> UnaryExpression .)
    -               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 205 (CastExpression -> UnaryExpression .)
    <               reduce using rule 205 (CastExpression -> UnaryExpression .)
    >               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 205 (CastExpression -> UnaryExpression .)
    &               reduce using rule 205 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 205 (CastExpression -> UnaryExpression .)
    |               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 205 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 205 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 205 (CastExpression -> UnaryExpression .)
    )               reduce using rule 205 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 205 (CastExpression -> UnaryExpression .)
    :               reduce using rule 205 (CastExpression -> UnaryExpression .)
    }               reduce using rule 205 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 205 (CastExpression -> UnaryExpression .)
    =               reduce using rule 205 (CastExpression -> UnaryExpression .)
    OPT_EQ          reduce using rule 205 (CastExpression -> UnaryExpression .)


state 197

    (222) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    RelationalExpression           shift and go to state 268
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 198

    (221) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    RelationalExpression           shift and go to state 269
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 199

    (207) MultiplicativeExpression -> MultiplicativeExpression * . CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 270
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 200

    (209) MultiplicativeExpression -> MultiplicativeExpression % . CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 271
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 201

    (208) MultiplicativeExpression -> MultiplicativeExpression / . CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 272
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 202

    (97) Statement -> SelectionStatement M_instr .

    ELSE            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    }               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    ;               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    IDENTIFIER      reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    DEFAULT         reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    IF              reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    SWITCH          reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    WHILE           reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    DO              reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    FOR             reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    BREAK           reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    CONTINUE        reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    RETURN          reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    THROW           reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    {               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    BOOLEAN         reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    CHAR            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    BYTE            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    SHORT           reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    INT             reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    LONG            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    FLOAT           reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    DOUBLE          reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    VOID            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    +               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    -               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    ~               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    !               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    THIS            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    SUPER           reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    NULL            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    (               reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    INT_LITERAL     reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    CHAR_LITERAL    reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    STRING_LITERAL  reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    BOOL            reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    NEW             reduce using rule 97 (Statement -> SelectionStatement M_instr .)
    CASE            reduce using rule 97 (Statement -> SelectionStatement M_instr .)


state 203

    (116) IterationStatement -> FOR ( . ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (117) ForInit -> . ExpressionStatements ;
    (118) ForInit -> . LocalVariableDeclarationStatement
    (119) ForInit -> . ;
    (124) ExpressionStatements -> . ExpressionStatement
    (125) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (107) ExpressionStatement -> . Expression
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (241) Expression -> . AssignmentExpression
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 274
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    ArithmeticUnaryOperator        shift and go to state 99
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ExpressionStatement            shift and go to state 273
    PrimitiveType                  shift and go to state 85
    RealPostfixExpression          shift and go to state 98
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    QualifiedName                  shift and go to state 148
    ComplexPrimaryNoParenthesis    shift and go to state 101
    TypeName                       shift and go to state 53
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 154
    ConditionalOrExpression        shift and go to state 131
    LocalVariableDeclarationStatement shift and go to state 277
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Expression                     shift and go to state 133
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    ForInit                        shift and go to state 275
    InclusiveOrExpression          shift and go to state 137
    PrimaryExpression              shift and go to state 129
    ExpressionStatements           shift and go to state 276
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 204

    (100) Statement -> Block M_instr .

    ELSE            reduce using rule 100 (Statement -> Block M_instr .)
    }               reduce using rule 100 (Statement -> Block M_instr .)
    ;               reduce using rule 100 (Statement -> Block M_instr .)
    IDENTIFIER      reduce using rule 100 (Statement -> Block M_instr .)
    DEFAULT         reduce using rule 100 (Statement -> Block M_instr .)
    IF              reduce using rule 100 (Statement -> Block M_instr .)
    SWITCH          reduce using rule 100 (Statement -> Block M_instr .)
    WHILE           reduce using rule 100 (Statement -> Block M_instr .)
    DO              reduce using rule 100 (Statement -> Block M_instr .)
    FOR             reduce using rule 100 (Statement -> Block M_instr .)
    BREAK           reduce using rule 100 (Statement -> Block M_instr .)
    CONTINUE        reduce using rule 100 (Statement -> Block M_instr .)
    RETURN          reduce using rule 100 (Statement -> Block M_instr .)
    THROW           reduce using rule 100 (Statement -> Block M_instr .)
    {               reduce using rule 100 (Statement -> Block M_instr .)
    BOOLEAN         reduce using rule 100 (Statement -> Block M_instr .)
    CHAR            reduce using rule 100 (Statement -> Block M_instr .)
    BYTE            reduce using rule 100 (Statement -> Block M_instr .)
    SHORT           reduce using rule 100 (Statement -> Block M_instr .)
    INT             reduce using rule 100 (Statement -> Block M_instr .)
    LONG            reduce using rule 100 (Statement -> Block M_instr .)
    FLOAT           reduce using rule 100 (Statement -> Block M_instr .)
    DOUBLE          reduce using rule 100 (Statement -> Block M_instr .)
    VOID            reduce using rule 100 (Statement -> Block M_instr .)
    +               reduce using rule 100 (Statement -> Block M_instr .)
    -               reduce using rule 100 (Statement -> Block M_instr .)
    ~               reduce using rule 100 (Statement -> Block M_instr .)
    !               reduce using rule 100 (Statement -> Block M_instr .)
    THIS            reduce using rule 100 (Statement -> Block M_instr .)
    SUPER           reduce using rule 100 (Statement -> Block M_instr .)
    NULL            reduce using rule 100 (Statement -> Block M_instr .)
    (               reduce using rule 100 (Statement -> Block M_instr .)
    INT_LITERAL     reduce using rule 100 (Statement -> Block M_instr .)
    FLOAT_LITERAL   reduce using rule 100 (Statement -> Block M_instr .)
    CHAR_LITERAL    reduce using rule 100 (Statement -> Block M_instr .)
    STRING_LITERAL  reduce using rule 100 (Statement -> Block M_instr .)
    BOOL            reduce using rule 100 (Statement -> Block M_instr .)
    NEW             reduce using rule 100 (Statement -> Block M_instr .)
    CASE            reduce using rule 100 (Statement -> Block M_instr .)


state 205

    (179) PlainNewAllocationExpression -> ArrayAllocationExpression { . }
    (181) PlainNewAllocationExpression -> ArrayAllocationExpression { . ArrayInitializers }
    (62) ArrayInitializers -> . VariableInitializer
    (63) ArrayInitializers -> . ArrayInitializers , VariableInitializer
    (64) ArrayInitializers -> . ArrayInitializers ,
    (61) VariableInitializer -> . Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    }               shift and go to state 278
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    VariableInitializer            shift and go to state 280
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    ArrayInitializers              shift and go to state 279
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 256
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 206

    (165) MethodCall -> MethodAccess ( . ArgumentList )
    (166) MethodCall -> MethodAccess ( . )
    (173) ArgumentList -> . Expression
    (174) ArgumentList -> . ArgumentList , Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    )               shift and go to state 283
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    Float_LIT                      shift and go to state 138
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    ArgumentList                   shift and go to state 281
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 282
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 207

    (226) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 120
    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 284
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 208

    (216) RelationalExpression -> RelationalExpression < . ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 285
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 209

    (218) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 286
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 210

    (219) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 287
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 211

    (217) RelationalExpression -> RelationalExpression > . ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 288
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 212

    (128) JumpStatement -> CONTINUE IDENTIFIER . ;

    ;               shift and go to state 289


state 213

    (129) JumpStatement -> CONTINUE ; .

    ELSE            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    }               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    ;               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    DEFAULT         reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    IF              reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    SWITCH          reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    WHILE           reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    DO              reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    FOR             reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    BREAK           reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    CONTINUE        reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    RETURN          reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    THROW           reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    {               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    BOOLEAN         reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    CHAR            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    BYTE            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    SHORT           reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    INT             reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    LONG            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    FLOAT           reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    DOUBLE          reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    VOID            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    +               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    -               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    ~               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    !               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    THIS            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    SUPER           reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    NULL            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    (               reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    INT_LITERAL     reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    FLOAT_LITERAL   reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    CHAR_LITERAL    reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    BOOL            reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    NEW             reduce using rule 129 (JumpStatement -> CONTINUE ; .)
    CASE            reduce using rule 129 (JumpStatement -> CONTINUE ; .)


state 214

    (159) ArrayAccess -> ComplexPrimary [ . Expression ]
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 120
    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 290
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 215

    (196) RealPostfixExpression -> PostfixExpression OPT_INC_DEC .

    .               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_INC_DEC     reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    *               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    /               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    %               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    +               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    -               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_SOME        reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    <               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    >               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LE           reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_GE           reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_EQ           reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_NE           reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    &               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ^               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    |               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LAND         reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ?               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LOR          reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ;               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    )               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ,               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    :               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    }               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ]               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    =               reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_EQ          reduce using rule 196 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)


state 216

    (180) PlainNewAllocationExpression -> ClassAllocationExpression { . }
    (182) PlainNewAllocationExpression -> ClassAllocationExpression { . FieldDeclarations }
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (78) ConstructorDeclaration -> . ConstructorDeclarator Block
    (81) StaticInitializer -> . STATIC Block
    (82) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (79) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (80) ConstructorDeclarator -> . IDENTIFIER ( )
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (87) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 292
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 69
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    ConstructorDeclaration         shift and go to state 42
    FieldDeclarations              shift and go to state 291
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 61
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 217

    (105) LabelStatement -> DEFAULT : .

    }               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    ;               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    IDENTIFIER      reduce using rule 105 (LabelStatement -> DEFAULT : .)
    DEFAULT         reduce using rule 105 (LabelStatement -> DEFAULT : .)
    IF              reduce using rule 105 (LabelStatement -> DEFAULT : .)
    SWITCH          reduce using rule 105 (LabelStatement -> DEFAULT : .)
    WHILE           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    DO              reduce using rule 105 (LabelStatement -> DEFAULT : .)
    FOR             reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BREAK           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CONTINUE        reduce using rule 105 (LabelStatement -> DEFAULT : .)
    RETURN          reduce using rule 105 (LabelStatement -> DEFAULT : .)
    THROW           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    {               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BOOLEAN         reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CHAR            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BYTE            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    SHORT           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    INT             reduce using rule 105 (LabelStatement -> DEFAULT : .)
    LONG            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    FLOAT           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    DOUBLE          reduce using rule 105 (LabelStatement -> DEFAULT : .)
    VOID            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    +               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    -               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    ~               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    !               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    THIS            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    SUPER           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    NULL            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    (               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    INT_LITERAL     reduce using rule 105 (LabelStatement -> DEFAULT : .)
    FLOAT_LITERAL   reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CHAR_LITERAL    reduce using rule 105 (LabelStatement -> DEFAULT : .)
    STRING_LITERAL  reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BOOL            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    NEW             reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CASE            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    ELSE            reduce using rule 105 (LabelStatement -> DEFAULT : .)


state 218

    (99) Statement -> JumpStatement M_instr .

    ELSE            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    }               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    ;               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    IDENTIFIER      reduce using rule 99 (Statement -> JumpStatement M_instr .)
    DEFAULT         reduce using rule 99 (Statement -> JumpStatement M_instr .)
    IF              reduce using rule 99 (Statement -> JumpStatement M_instr .)
    SWITCH          reduce using rule 99 (Statement -> JumpStatement M_instr .)
    WHILE           reduce using rule 99 (Statement -> JumpStatement M_instr .)
    DO              reduce using rule 99 (Statement -> JumpStatement M_instr .)
    FOR             reduce using rule 99 (Statement -> JumpStatement M_instr .)
    BREAK           reduce using rule 99 (Statement -> JumpStatement M_instr .)
    CONTINUE        reduce using rule 99 (Statement -> JumpStatement M_instr .)
    RETURN          reduce using rule 99 (Statement -> JumpStatement M_instr .)
    THROW           reduce using rule 99 (Statement -> JumpStatement M_instr .)
    {               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    BOOLEAN         reduce using rule 99 (Statement -> JumpStatement M_instr .)
    CHAR            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    BYTE            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    SHORT           reduce using rule 99 (Statement -> JumpStatement M_instr .)
    INT             reduce using rule 99 (Statement -> JumpStatement M_instr .)
    LONG            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    FLOAT           reduce using rule 99 (Statement -> JumpStatement M_instr .)
    DOUBLE          reduce using rule 99 (Statement -> JumpStatement M_instr .)
    VOID            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    +               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    -               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    ~               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    !               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    THIS            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    SUPER           reduce using rule 99 (Statement -> JumpStatement M_instr .)
    NULL            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    (               reduce using rule 99 (Statement -> JumpStatement M_instr .)
    INT_LITERAL     reduce using rule 99 (Statement -> JumpStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 99 (Statement -> JumpStatement M_instr .)
    CHAR_LITERAL    reduce using rule 99 (Statement -> JumpStatement M_instr .)
    STRING_LITERAL  reduce using rule 99 (Statement -> JumpStatement M_instr .)
    BOOL            reduce using rule 99 (Statement -> JumpStatement M_instr .)
    NEW             reduce using rule 99 (Statement -> JumpStatement M_instr .)
    CASE            reduce using rule 99 (Statement -> JumpStatement M_instr .)


state 219

    (114) IterationStatement -> WHILE M_instr_branch . ( Expression ) M_instr_branch Statement

    (               shift and go to state 293


state 220

    (185) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (186) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (187) ArrayAllocationExpression -> NEW TypeName . Dims
    (183) ClassAllocationExpression -> NEW TypeName . ( ArgumentList )
    (184) ClassAllocationExpression -> NEW TypeName . ( )
    (188) DimExprs -> . DimExpr
    (189) DimExprs -> . DimExprs DimExpr
    (191) Dims -> . OP_DIM
    (192) Dims -> . Dims OP_DIM
    (190) DimExpr -> . [ Expression ]
    (193) OP_DIM -> . [ ]

    (               shift and go to state 294
    [               shift and go to state 297

    Dims                           shift and go to state 296
    DimExpr                        shift and go to state 298
    DimExprs                       shift and go to state 295
    OP_DIM                         shift and go to state 81

state 221

    (93) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . ; M_instr
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               shift and go to state 299
    ,               shift and go to state 172


state 222

    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (193) OP_DIM -> . [ ]

    ,               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    ;               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 174
    [               shift and go to state 80

    OP_DIM                         shift and go to state 175

state 223

    (110) SelectionStatement -> SWITCH ( . Expression Mark_switch ) Block
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 300
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 224

    (232) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . M_OP ConditionalAndExpression
    (233) M_OP -> .

    +               reduce using rule 233 (M_OP -> .)
    -               reduce using rule 233 (M_OP -> .)
    ~               reduce using rule 233 (M_OP -> .)
    !               reduce using rule 233 (M_OP -> .)
    IDENTIFIER      reduce using rule 233 (M_OP -> .)
    THIS            reduce using rule 233 (M_OP -> .)
    SUPER           reduce using rule 233 (M_OP -> .)
    NULL            reduce using rule 233 (M_OP -> .)
    (               reduce using rule 233 (M_OP -> .)
    INT_LITERAL     reduce using rule 233 (M_OP -> .)
    FLOAT_LITERAL   reduce using rule 233 (M_OP -> .)
    CHAR_LITERAL    reduce using rule 233 (M_OP -> .)
    STRING_LITERAL  reduce using rule 233 (M_OP -> .)
    BOOL            reduce using rule 233 (M_OP -> .)
    NEW             reduce using rule 233 (M_OP -> .)
    BOOLEAN         reduce using rule 233 (M_OP -> .)
    CHAR            reduce using rule 233 (M_OP -> .)
    BYTE            reduce using rule 233 (M_OP -> .)
    SHORT           reduce using rule 233 (M_OP -> .)
    INT             reduce using rule 233 (M_OP -> .)
    LONG            reduce using rule 233 (M_OP -> .)
    FLOAT           reduce using rule 233 (M_OP -> .)
    DOUBLE          reduce using rule 233 (M_OP -> .)
    VOID            reduce using rule 233 (M_OP -> .)

    M_OP                           shift and go to state 301

state 225

    (235) ConditionalExpression -> ConditionalOrExpression ? . M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (101) M_instr -> .

    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 302

state 226

    (211) AdditiveExpression -> AdditiveExpression + . MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 303
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 227

    (212) AdditiveExpression -> AdditiveExpression - . MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 304
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 228

    (238) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 305
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 229

    (240) AssignmentOperator -> OPT_EQ .

    +               reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    -               reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    ~               reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    !               reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    IDENTIFIER      reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    THIS            reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    SUPER           reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    NULL            reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    (               reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    INT_LITERAL     reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    FLOAT_LITERAL   reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    CHAR_LITERAL    reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    STRING_LITERAL  reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    BOOL            reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    NEW             reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    BOOLEAN         reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    CHAR            reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    BYTE            reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    SHORT           reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    INT             reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    LONG            reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    FLOAT           reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    DOUBLE          reduce using rule 240 (AssignmentOperator -> OPT_EQ .)
    VOID            reduce using rule 240 (AssignmentOperator -> OPT_EQ .)


state 230

    (239) AssignmentOperator -> = .

    +               reduce using rule 239 (AssignmentOperator -> = .)
    -               reduce using rule 239 (AssignmentOperator -> = .)
    ~               reduce using rule 239 (AssignmentOperator -> = .)
    !               reduce using rule 239 (AssignmentOperator -> = .)
    IDENTIFIER      reduce using rule 239 (AssignmentOperator -> = .)
    THIS            reduce using rule 239 (AssignmentOperator -> = .)
    SUPER           reduce using rule 239 (AssignmentOperator -> = .)
    NULL            reduce using rule 239 (AssignmentOperator -> = .)
    (               reduce using rule 239 (AssignmentOperator -> = .)
    INT_LITERAL     reduce using rule 239 (AssignmentOperator -> = .)
    FLOAT_LITERAL   reduce using rule 239 (AssignmentOperator -> = .)
    CHAR_LITERAL    reduce using rule 239 (AssignmentOperator -> = .)
    STRING_LITERAL  reduce using rule 239 (AssignmentOperator -> = .)
    BOOL            reduce using rule 239 (AssignmentOperator -> = .)
    NEW             reduce using rule 239 (AssignmentOperator -> = .)
    BOOLEAN         reduce using rule 239 (AssignmentOperator -> = .)
    CHAR            reduce using rule 239 (AssignmentOperator -> = .)
    BYTE            reduce using rule 239 (AssignmentOperator -> = .)
    SHORT           reduce using rule 239 (AssignmentOperator -> = .)
    INT             reduce using rule 239 (AssignmentOperator -> = .)
    LONG            reduce using rule 239 (AssignmentOperator -> = .)
    FLOAT           reduce using rule 239 (AssignmentOperator -> = .)
    DOUBLE          reduce using rule 239 (AssignmentOperator -> = .)
    VOID            reduce using rule 239 (AssignmentOperator -> = .)


state 231

    (228) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 120
    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    ExclusiveOrExpression          shift and go to state 306
    Float_LIT                      shift and go to state 138
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 232

    (127) JumpStatement -> BREAK ; .

    ELSE            reduce using rule 127 (JumpStatement -> BREAK ; .)
    }               reduce using rule 127 (JumpStatement -> BREAK ; .)
    ;               reduce using rule 127 (JumpStatement -> BREAK ; .)
    IDENTIFIER      reduce using rule 127 (JumpStatement -> BREAK ; .)
    DEFAULT         reduce using rule 127 (JumpStatement -> BREAK ; .)
    IF              reduce using rule 127 (JumpStatement -> BREAK ; .)
    SWITCH          reduce using rule 127 (JumpStatement -> BREAK ; .)
    WHILE           reduce using rule 127 (JumpStatement -> BREAK ; .)
    DO              reduce using rule 127 (JumpStatement -> BREAK ; .)
    FOR             reduce using rule 127 (JumpStatement -> BREAK ; .)
    BREAK           reduce using rule 127 (JumpStatement -> BREAK ; .)
    CONTINUE        reduce using rule 127 (JumpStatement -> BREAK ; .)
    RETURN          reduce using rule 127 (JumpStatement -> BREAK ; .)
    THROW           reduce using rule 127 (JumpStatement -> BREAK ; .)
    {               reduce using rule 127 (JumpStatement -> BREAK ; .)
    BOOLEAN         reduce using rule 127 (JumpStatement -> BREAK ; .)
    CHAR            reduce using rule 127 (JumpStatement -> BREAK ; .)
    BYTE            reduce using rule 127 (JumpStatement -> BREAK ; .)
    SHORT           reduce using rule 127 (JumpStatement -> BREAK ; .)
    INT             reduce using rule 127 (JumpStatement -> BREAK ; .)
    LONG            reduce using rule 127 (JumpStatement -> BREAK ; .)
    FLOAT           reduce using rule 127 (JumpStatement -> BREAK ; .)
    DOUBLE          reduce using rule 127 (JumpStatement -> BREAK ; .)
    VOID            reduce using rule 127 (JumpStatement -> BREAK ; .)
    +               reduce using rule 127 (JumpStatement -> BREAK ; .)
    -               reduce using rule 127 (JumpStatement -> BREAK ; .)
    ~               reduce using rule 127 (JumpStatement -> BREAK ; .)
    !               reduce using rule 127 (JumpStatement -> BREAK ; .)
    THIS            reduce using rule 127 (JumpStatement -> BREAK ; .)
    SUPER           reduce using rule 127 (JumpStatement -> BREAK ; .)
    NULL            reduce using rule 127 (JumpStatement -> BREAK ; .)
    (               reduce using rule 127 (JumpStatement -> BREAK ; .)
    INT_LITERAL     reduce using rule 127 (JumpStatement -> BREAK ; .)
    FLOAT_LITERAL   reduce using rule 127 (JumpStatement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 127 (JumpStatement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 127 (JumpStatement -> BREAK ; .)
    BOOL            reduce using rule 127 (JumpStatement -> BREAK ; .)
    NEW             reduce using rule 127 (JumpStatement -> BREAK ; .)
    CASE            reduce using rule 127 (JumpStatement -> BREAK ; .)


state 233

    (126) JumpStatement -> BREAK IDENTIFIER . ;

    ;               shift and go to state 307


state 234

    (115) IterationStatement -> DO M_instr_branch . Statement WHILE M_instr_branch ( Expression ) ;
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    Statement                      shift and go to state 308
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    ConditionalOrExpression        shift and go to state 131
    PrimitiveType                  shift and go to state 184
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    SpecialName                    shift and go to state 119
    FieldAccess                    shift and go to state 141
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 235

    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (176) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (162) FieldAccess -> QualifiedName . . THIS
    (163) FieldAccess -> QualifiedName . . CLASS
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )

    IDENTIFIER      shift and go to state 72
    THIS            shift and go to state 309
    CLASS           shift and go to state 311
    NEW             shift and go to state 126

    ArrayAllocationExpression      shift and go to state 112
    ClassAllocationExpression      shift and go to state 122
    PlainNewAllocationExpression   shift and go to state 310

state 236

    (158) ArrayAccess -> QualifiedName [ . Expression ]
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    QualifiedName                  shift and go to state 186
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    LogicalUnaryOperator           shift and go to state 154
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 312
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 237

    (214) ShiftExpression -> ShiftExpression OPT_SOME . AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 313
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    FieldAccess                    shift and go to state 141
    Float_LIT                      shift and go to state 138
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 238

    (85) Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .

    ;               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    }               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    STATIC          reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    IDENTIFIER      reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    PUBLIC          reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    PRIVATE         reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    {               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CLASS           reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    INTERFACE       reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BOOLEAN         reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CHAR            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BYTE            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    SHORT           reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    INT             reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    LONG            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    FLOAT           reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    DOUBLE          reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    VOID            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    ELSE            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    DEFAULT         reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    IF              reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    SWITCH          reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    WHILE           reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    DO              reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    FOR             reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BREAK           reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CONTINUE        reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    RETURN          reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    THROW           reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    +               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    -               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    ~               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    !               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    THIS            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    SUPER           reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    NULL            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    (               reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    INT_LITERAL     reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    FLOAT_LITERAL   reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CHAR_LITERAL    reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    STRING_LITERAL  reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BOOL            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    NEW             reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CASE            reduce using rule 85 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)


state 239

    (90) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    }               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    {               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    +               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    -               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    !               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    (               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 240

    (160) FieldAccess -> NotJustName . . IDENTIFIER

    IDENTIFIER      shift and go to state 314


state 241

    (200) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    =               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_EQ          reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    *               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    /               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    %               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    +               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    -               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_SOME        reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    <               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    >               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ?               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    )               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ;               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ,               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    :               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    }               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ]               reduce using rule 200 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 242

    (108) SelectionStatement -> IF ( . Expression ) M_instr_branch Statement
    (109) SelectionStatement -> IF ( . Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 315
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 243

    (132) JumpStatement -> THROW Expression . ;

    ;               shift and go to state 316


state 244

    (98) Statement -> IterationStatement M_instr .

    ELSE            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    }               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    ;               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    IDENTIFIER      reduce using rule 98 (Statement -> IterationStatement M_instr .)
    DEFAULT         reduce using rule 98 (Statement -> IterationStatement M_instr .)
    IF              reduce using rule 98 (Statement -> IterationStatement M_instr .)
    SWITCH          reduce using rule 98 (Statement -> IterationStatement M_instr .)
    WHILE           reduce using rule 98 (Statement -> IterationStatement M_instr .)
    DO              reduce using rule 98 (Statement -> IterationStatement M_instr .)
    FOR             reduce using rule 98 (Statement -> IterationStatement M_instr .)
    BREAK           reduce using rule 98 (Statement -> IterationStatement M_instr .)
    CONTINUE        reduce using rule 98 (Statement -> IterationStatement M_instr .)
    RETURN          reduce using rule 98 (Statement -> IterationStatement M_instr .)
    THROW           reduce using rule 98 (Statement -> IterationStatement M_instr .)
    {               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    BOOLEAN         reduce using rule 98 (Statement -> IterationStatement M_instr .)
    CHAR            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    BYTE            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    SHORT           reduce using rule 98 (Statement -> IterationStatement M_instr .)
    INT             reduce using rule 98 (Statement -> IterationStatement M_instr .)
    LONG            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    FLOAT           reduce using rule 98 (Statement -> IterationStatement M_instr .)
    DOUBLE          reduce using rule 98 (Statement -> IterationStatement M_instr .)
    VOID            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    +               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    -               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    ~               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    !               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    THIS            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    SUPER           reduce using rule 98 (Statement -> IterationStatement M_instr .)
    NULL            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    (               reduce using rule 98 (Statement -> IterationStatement M_instr .)
    INT_LITERAL     reduce using rule 98 (Statement -> IterationStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 98 (Statement -> IterationStatement M_instr .)
    CHAR_LITERAL    reduce using rule 98 (Statement -> IterationStatement M_instr .)
    STRING_LITERAL  reduce using rule 98 (Statement -> IterationStatement M_instr .)
    BOOL            reduce using rule 98 (Statement -> IterationStatement M_instr .)
    NEW             reduce using rule 98 (Statement -> IterationStatement M_instr .)
    CASE            reduce using rule 98 (Statement -> IterationStatement M_instr .)


state 245

    (69) ParameterList -> Parameter .

    )               reduce using rule 69 (ParameterList -> Parameter .)
    ,               reduce using rule 69 (ParameterList -> Parameter .)


state 246

    (71) Parameter -> TypeSpecifier . DeclaratorName
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    DeclaratorName                 shift and go to state 317

state 247

    (80) ConstructorDeclarator -> IDENTIFIER ( ) .

    {               reduce using rule 80 (ConstructorDeclarator -> IDENTIFIER ( ) .)


state 248

    (79) ConstructorDeclarator -> IDENTIFIER ( ParameterList . )
    (70) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 318
    ,               shift and go to state 319


state 249

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 55 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 172


state 250

    (65) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (74) MethodBody -> . { LocalVariableDeclarationsAndStatements }
    (75) MethodBody -> . { }
    (76) MethodBody -> . ;

    {               shift and go to state 178
    ;               shift and go to state 177

    MethodBody                     shift and go to state 320

state 251

    (77) ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .

    ;               reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    }               reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    STATIC          reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    {               reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CLASS           reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CHAR            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BYTE            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SHORT           reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INT             reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LONG            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FLOAT           reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOID            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)


state 252

    (58) VariableDeclarators -> VariableDeclarators , VariableDeclarator .

    ;               reduce using rule 58 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)
    ,               reduce using rule 58 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)


state 253

    (68) MethodDeclarator -> DeclaratorName ( ) .

    {               reduce using rule 68 (MethodDeclarator -> DeclaratorName ( ) .)
    ;               reduce using rule 68 (MethodDeclarator -> DeclaratorName ( ) .)


state 254

    (67) MethodDeclarator -> DeclaratorName ( ParameterList . )
    (70) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 321
    ,               shift and go to state 319


state 255

    (60) VariableDeclarator -> DeclaratorName = VariableInitializer .

    ,               reduce using rule 60 (VariableDeclarator -> DeclaratorName = VariableInitializer .)
    ;               reduce using rule 60 (VariableDeclarator -> DeclaratorName = VariableInitializer .)


state 256

    (61) VariableInitializer -> Expression .

    }               reduce using rule 61 (VariableInitializer -> Expression .)
    ,               reduce using rule 61 (VariableInitializer -> Expression .)
    ;               reduce using rule 61 (VariableInitializer -> Expression .)


state 257

    (74) MethodBody -> { LocalVariableDeclarationsAndStatements . }
    (90) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (91) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (92) LocalVariableDeclarationOrStatement -> . Statement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    }               shift and go to state 322
    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    FieldAccess                    shift and go to state 141
    Statement                      shift and go to state 86
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    QualifiedName                  shift and go to state 148
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 154
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 150
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    ConditionalOrExpression        shift and go to state 131
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    PrimitiveType                  shift and go to state 85
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Char_LIT                       shift and go to state 155
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    LocalVariableDeclarationOrStatement shift and go to state 239
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 258

    (75) MethodBody -> { } .

    ;               reduce using rule 75 (MethodBody -> { } .)
    }               reduce using rule 75 (MethodBody -> { } .)
    STATIC          reduce using rule 75 (MethodBody -> { } .)
    IDENTIFIER      reduce using rule 75 (MethodBody -> { } .)
    PUBLIC          reduce using rule 75 (MethodBody -> { } .)
    PRIVATE         reduce using rule 75 (MethodBody -> { } .)
    {               reduce using rule 75 (MethodBody -> { } .)
    CLASS           reduce using rule 75 (MethodBody -> { } .)
    INTERFACE       reduce using rule 75 (MethodBody -> { } .)
    BOOLEAN         reduce using rule 75 (MethodBody -> { } .)
    CHAR            reduce using rule 75 (MethodBody -> { } .)
    BYTE            reduce using rule 75 (MethodBody -> { } .)
    SHORT           reduce using rule 75 (MethodBody -> { } .)
    INT             reduce using rule 75 (MethodBody -> { } .)
    LONG            reduce using rule 75 (MethodBody -> { } .)
    FLOAT           reduce using rule 75 (MethodBody -> { } .)
    DOUBLE          reduce using rule 75 (MethodBody -> { } .)
    VOID            reduce using rule 75 (MethodBody -> { } .)


state 259

    (96) Statement -> ExpressionStatement ; M_instr .

    ELSE            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    }               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    ;               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    IDENTIFIER      reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    DEFAULT         reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    IF              reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    SWITCH          reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    WHILE           reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    DO              reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    FOR             reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    BREAK           reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    CONTINUE        reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    RETURN          reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    THROW           reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    {               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    BOOLEAN         reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    CHAR            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    BYTE            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    SHORT           reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    INT             reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    LONG            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    FLOAT           reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    DOUBLE          reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    VOID            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    +               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    -               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    ~               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    !               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    THIS            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    SUPER           reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    NULL            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    (               reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    INT_LITERAL     reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    FLOAT_LITERAL   reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    CHAR_LITERAL    reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    STRING_LITERAL  reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    BOOL            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    NEW             reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)
    CASE            reduce using rule 96 (Statement -> ExpressionStatement ; M_instr .)


state 260

    (164) FieldAccess -> PrimitiveType . CLASS .

    [               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    .               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_INC_DEC     reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    =               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_EQ          reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    *               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    /               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    %               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    +               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    -               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_SOME        reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    <               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    >               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LE           reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OP_GE           reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OP_EQ           reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OP_NE           reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    &               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    ^               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    |               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LAND         reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    ?               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LOR          reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    ,               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    ;               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    (               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    )               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    :               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    }               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)
    ]               reduce using rule 164 (FieldAccess -> PrimitiveType . CLASS .)


state 261

    (224) AndExpression -> AndExpression & EqualityExpression .
    (221) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (222) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    ?               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    ;               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    )               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    ,               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    :               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    }               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    ]               reduce using rule 224 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 198
    OP_NE           shift and go to state 197


state 262

    (149) ComplexPrimary -> ( Expression ) .

    [               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 149 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 149 (ComplexPrimary -> ( Expression ) .)


state 263

    (242) ConstantExpression -> ConditionalExpression .

    :               reduce using rule 242 (ConstantExpression -> ConditionalExpression .)


state 264

    (104) LabelStatement -> Marker_case CASE ConstantExpression . :

    :               shift and go to state 323


state 265

    (230) ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP . InclusiveOrExpression
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    Float_LIT                      shift and go to state 138
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    InclusiveOrExpression          shift and go to state 324
    FieldAccess                    shift and go to state 141
    ExclusiveOrExpression          shift and go to state 114
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 266

    (130) JumpStatement -> RETURN Expression ; .

    ELSE            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    }               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    ;               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    IDENTIFIER      reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    DEFAULT         reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    IF              reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    SWITCH          reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    DO              reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    FOR             reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    CONTINUE        reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    THROW           reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    {               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    BOOLEAN         reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    CHAR            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    BYTE            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    SHORT           reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    INT             reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    LONG            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    FLOAT           reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    DOUBLE          reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    VOID            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    +               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    -               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    ~               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    !               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    THIS            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    SUPER           reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    NULL            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    (               reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    INT_LITERAL     reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    FLOAT_LITERAL   reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    CHAR_LITERAL    reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    STRING_LITERAL  reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    BOOL            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    NEW             reduce using rule 130 (JumpStatement -> RETURN Expression ; .)
    CASE            reduce using rule 130 (JumpStatement -> RETURN Expression ; .)


state 267

    (161) FieldAccess -> RealPostfixExpression . IDENTIFIER .

    [               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    .               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    =               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_EQ          reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    *               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    /               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    %               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    +               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    -               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_SOME        reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    <               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    >               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LE           reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_GE           reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_EQ           reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_NE           reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    &               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ^               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    |               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LAND         reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ?               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LOR          reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ,               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ;               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    (               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    )               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    :               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    }               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ]               reduce using rule 161 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)


state 268

    (222) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (216) RelationalExpression -> RelationalExpression . < ShiftExpression
    (217) RelationalExpression -> RelationalExpression . > ShiftExpression
    (218) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (219) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ?               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    )               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ;               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    }               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ,               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    :               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ]               reduce using rule 222 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    <               shift and go to state 208
    >               shift and go to state 211
    OP_LE           shift and go to state 209
    OP_GE           shift and go to state 210


state 269

    (221) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (216) RelationalExpression -> RelationalExpression . < ShiftExpression
    (217) RelationalExpression -> RelationalExpression . > ShiftExpression
    (218) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (219) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ?               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    )               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ;               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    }               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ,               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    :               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ]               reduce using rule 221 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    <               shift and go to state 208
    >               shift and go to state 211
    OP_LE           shift and go to state 209
    OP_GE           shift and go to state 210


state 270

    (207) MultiplicativeExpression -> MultiplicativeExpression * CastExpression .

    *               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    /               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    %               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    +               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    -               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OPT_SOME        reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    <               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    >               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LE           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_GE           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_EQ           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_NE           reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    &               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ^               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    |               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LAND         reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ?               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LOR          reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ;               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    )               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ,               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    :               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    }               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ]               reduce using rule 207 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)


state 271

    (209) MultiplicativeExpression -> MultiplicativeExpression % CastExpression .

    *               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    /               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    %               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    +               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    -               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OPT_SOME        reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    <               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    >               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LE           reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_GE           reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_EQ           reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_NE           reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    &               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ^               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    |               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LAND         reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ?               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LOR          reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ;               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    )               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ,               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    :               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    }               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ]               reduce using rule 209 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)


state 272

    (208) MultiplicativeExpression -> MultiplicativeExpression / CastExpression .

    *               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    /               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    %               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    +               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    -               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OPT_SOME        reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    <               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    >               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LE           reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_GE           reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_EQ           reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_NE           reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    &               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ^               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    |               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LAND         reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ?               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LOR          reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ;               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    )               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ,               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    :               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    }               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ]               reduce using rule 208 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)


state 273

    (124) ExpressionStatements -> ExpressionStatement .

    ,               reduce using rule 124 (ExpressionStatements -> ExpressionStatement .)
    )               reduce using rule 124 (ExpressionStatements -> ExpressionStatement .)
    ;               reduce using rule 124 (ExpressionStatements -> ExpressionStatement .)


state 274

    (119) ForInit -> ; .

    ;               reduce using rule 119 (ForInit -> ; .)
    +               reduce using rule 119 (ForInit -> ; .)
    -               reduce using rule 119 (ForInit -> ; .)
    ~               reduce using rule 119 (ForInit -> ; .)
    !               reduce using rule 119 (ForInit -> ; .)
    IDENTIFIER      reduce using rule 119 (ForInit -> ; .)
    THIS            reduce using rule 119 (ForInit -> ; .)
    SUPER           reduce using rule 119 (ForInit -> ; .)
    NULL            reduce using rule 119 (ForInit -> ; .)
    (               reduce using rule 119 (ForInit -> ; .)
    INT_LITERAL     reduce using rule 119 (ForInit -> ; .)
    FLOAT_LITERAL   reduce using rule 119 (ForInit -> ; .)
    CHAR_LITERAL    reduce using rule 119 (ForInit -> ; .)
    STRING_LITERAL  reduce using rule 119 (ForInit -> ; .)
    BOOL            reduce using rule 119 (ForInit -> ; .)
    NEW             reduce using rule 119 (ForInit -> ; .)
    BOOLEAN         reduce using rule 119 (ForInit -> ; .)
    CHAR            reduce using rule 119 (ForInit -> ; .)
    BYTE            reduce using rule 119 (ForInit -> ; .)
    SHORT           reduce using rule 119 (ForInit -> ; .)
    INT             reduce using rule 119 (ForInit -> ; .)
    LONG            reduce using rule 119 (ForInit -> ; .)
    FLOAT           reduce using rule 119 (ForInit -> ; .)
    DOUBLE          reduce using rule 119 (ForInit -> ; .)
    VOID            reduce using rule 119 (ForInit -> ; .)


state 275

    (116) IterationStatement -> FOR ( ForInit . M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (101) M_instr -> .

    ;               reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 325

state 276

    (117) ForInit -> ExpressionStatements . ;
    (125) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    ;               shift and go to state 326
    ,               shift and go to state 327


state 277

    (118) ForInit -> LocalVariableDeclarationStatement .

    ;               reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    +               reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    -               reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    !               reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    (               reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 118 (ForInit -> LocalVariableDeclarationStatement .)


state 278

    (179) PlainNewAllocationExpression -> ArrayAllocationExpression { } .

    .               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    *               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    /               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    %               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    +               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    -               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_SOME        reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    <               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    >               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LE           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_GE           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_EQ           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_NE           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    &               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ^               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    |               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LAND         reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ?               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LOR          reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ;               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    )               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ,               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    :               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    }               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ]               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    =               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_EQ          reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)


state 279

    (181) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers . }
    (63) ArrayInitializers -> ArrayInitializers . , VariableInitializer
    (64) ArrayInitializers -> ArrayInitializers . ,

    }               shift and go to state 329
    ,               shift and go to state 328


state 280

    (62) ArrayInitializers -> VariableInitializer .

    }               reduce using rule 62 (ArrayInitializers -> VariableInitializer .)
    ,               reduce using rule 62 (ArrayInitializers -> VariableInitializer .)


state 281

    (165) MethodCall -> MethodAccess ( ArgumentList . )
    (174) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 330
    ,               shift and go to state 331


state 282

    (173) ArgumentList -> Expression .

    )               reduce using rule 173 (ArgumentList -> Expression .)
    ,               reduce using rule 173 (ArgumentList -> Expression .)


state 283

    (166) MethodCall -> MethodAccess ( ) .

    [               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    .               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OPT_INC_DEC     reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    =               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OPT_EQ          reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    *               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    /               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    %               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    +               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    -               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OPT_SOME        reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    <               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    >               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OP_LE           reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OP_GE           reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OP_EQ           reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OP_NE           reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    &               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    ^               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    |               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OP_LAND         reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    ?               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    OP_LOR          reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    ;               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    )               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    ,               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    :               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    }               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    ]               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)
    (               reduce using rule 166 (MethodCall -> MethodAccess ( ) .)


state 284

    (226) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (224) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ?               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ;               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ]               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    :               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ,               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    )               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    }               reduce using rule 226 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 183


state 285

    (216) RelationalExpression -> RelationalExpression < ShiftExpression .
    (214) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    >               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LE           reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_GE           reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_EQ           reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_NE           reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    &               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ^               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    |               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LAND         reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ?               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LOR          reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    )               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    }               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ,               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ;               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    :               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ]               reduce using rule 216 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OPT_SOME        shift and go to state 237


state 286

    (218) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (214) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    >               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ?               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    )               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    }               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ,               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ;               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    :               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ]               reduce using rule 218 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OPT_SOME        shift and go to state 237


state 287

    (219) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (214) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    >               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ?               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    )               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    }               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ,               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ;               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    :               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ]               reduce using rule 219 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OPT_SOME        shift and go to state 237


state 288

    (217) RelationalExpression -> RelationalExpression > ShiftExpression .
    (214) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    >               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LE           reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_GE           reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_EQ           reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_NE           reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    &               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ^               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    |               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LAND         reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ?               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LOR          reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    )               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    }               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ,               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ;               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    :               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ]               reduce using rule 217 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OPT_SOME        shift and go to state 237


state 289

    (128) JumpStatement -> CONTINUE IDENTIFIER ; .

    ELSE            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    }               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ;               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DEFAULT         reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IF              reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SWITCH          reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    WHILE           reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DO              reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FOR             reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BREAK           reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CONTINUE        reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    RETURN          reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THROW           reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    {               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOLEAN         reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BYTE            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SHORT           reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT             reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    LONG            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT           reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DOUBLE          reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    VOID            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    +               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    -               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ~               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    !               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THIS            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SUPER           reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NULL            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    (               reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOL            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NEW             reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CASE            reduce using rule 128 (JumpStatement -> CONTINUE IDENTIFIER ; .)


state 290

    (159) ArrayAccess -> ComplexPrimary [ Expression . ]

    ]               shift and go to state 332


state 291

    (182) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations . }
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (78) ConstructorDeclaration -> . ConstructorDeclarator Block
    (81) StaticInitializer -> . STATIC Block
    (82) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (79) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (80) ConstructorDeclarator -> . IDENTIFIER ( )
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (87) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 333
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 69
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    ConstructorDeclaration         shift and go to state 42
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 167
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 292

    (180) PlainNewAllocationExpression -> ClassAllocationExpression { } .

    .               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    *               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    /               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    %               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    +               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    -               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_SOME        reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    <               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    >               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LE           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_GE           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_EQ           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_NE           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    &               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ^               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    |               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LAND         reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ?               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LOR          reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ;               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    )               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ,               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    :               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    }               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ]               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    =               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_EQ          reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)


state 293

    (114) IterationStatement -> WHILE M_instr_branch ( . Expression ) M_instr_branch Statement
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 334
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 294

    (183) ClassAllocationExpression -> NEW TypeName ( . ArgumentList )
    (184) ClassAllocationExpression -> NEW TypeName ( . )
    (173) ArgumentList -> . Expression
    (174) ArgumentList -> . ArgumentList , Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    )               shift and go to state 336
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    ArgumentList                   shift and go to state 335
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 282
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 295

    (185) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (186) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (189) DimExprs -> DimExprs . DimExpr
    (191) Dims -> . OP_DIM
    (192) Dims -> . Dims OP_DIM
    (190) DimExpr -> . [ Expression ]
    (193) OP_DIM -> . [ ]

    {               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    .               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_INC_DEC     reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    =               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_EQ          reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    *               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    /               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    %               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    +               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    -               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_SOME        reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    <               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    >               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ?               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    )               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ;               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ,               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    :               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    }               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ]               reduce using rule 186 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    [               shift and go to state 297

    DimExpr                        shift and go to state 337
    Dims                           shift and go to state 338
    OP_DIM                         shift and go to state 81

state 296

    (187) ArrayAllocationExpression -> NEW TypeName Dims .
    (192) Dims -> Dims . OP_DIM
    (193) OP_DIM -> . [ ]

    {               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    .               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_INC_DEC     reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    =               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_EQ          reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    *               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    /               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    %               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    +               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    -               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_SOME        reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    <               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    >               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ?               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    )               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ;               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ,               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    :               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    }               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ]               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName Dims .)
    [               shift and go to state 80

    OP_DIM                         shift and go to state 180

state 297

    (190) DimExpr -> [ . Expression ]
    (193) OP_DIM -> [ . ]
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ]               shift and go to state 179
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 339
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 298

    (188) DimExprs -> DimExpr .

    [               reduce using rule 188 (DimExprs -> DimExpr .)
    {               reduce using rule 188 (DimExprs -> DimExpr .)
    .               reduce using rule 188 (DimExprs -> DimExpr .)
    OPT_INC_DEC     reduce using rule 188 (DimExprs -> DimExpr .)
    =               reduce using rule 188 (DimExprs -> DimExpr .)
    OPT_EQ          reduce using rule 188 (DimExprs -> DimExpr .)
    *               reduce using rule 188 (DimExprs -> DimExpr .)
    /               reduce using rule 188 (DimExprs -> DimExpr .)
    %               reduce using rule 188 (DimExprs -> DimExpr .)
    +               reduce using rule 188 (DimExprs -> DimExpr .)
    -               reduce using rule 188 (DimExprs -> DimExpr .)
    OPT_SOME        reduce using rule 188 (DimExprs -> DimExpr .)
    <               reduce using rule 188 (DimExprs -> DimExpr .)
    >               reduce using rule 188 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 188 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 188 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 188 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 188 (DimExprs -> DimExpr .)
    &               reduce using rule 188 (DimExprs -> DimExpr .)
    ^               reduce using rule 188 (DimExprs -> DimExpr .)
    |               reduce using rule 188 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 188 (DimExprs -> DimExpr .)
    ?               reduce using rule 188 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 188 (DimExprs -> DimExpr .)
    ;               reduce using rule 188 (DimExprs -> DimExpr .)
    )               reduce using rule 188 (DimExprs -> DimExpr .)
    ,               reduce using rule 188 (DimExprs -> DimExpr .)
    :               reduce using rule 188 (DimExprs -> DimExpr .)
    }               reduce using rule 188 (DimExprs -> DimExpr .)
    ]               reduce using rule 188 (DimExprs -> DimExpr .)


state 299

    (93) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; . M_instr
    (101) M_instr -> .

    }               reduce using rule 101 (M_instr -> .)
    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 340

state 300

    (110) SelectionStatement -> SWITCH ( Expression . Mark_switch ) Block
    (111) Mark_switch -> .

    )               reduce using rule 111 (Mark_switch -> .)

    Mark_switch                    shift and go to state 341

state 301

    (232) ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP . ConditionalAndExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    Float_LIT                      shift and go to state 138
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 104
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    QualifiedName                  shift and go to state 186
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    UnaryExpression                shift and go to state 196
    InclusiveOrExpression          shift and go to state 137
    FieldAccess                    shift and go to state 141
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 342
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    MethodAccess                   shift and go to state 113
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 302

    (235) ConditionalExpression -> ConditionalOrExpression ? M_instr . Expression Mark : M_instr ConditionalExpression M_instr
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 343
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 303

    (211) AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .
    (207) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (208) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (209) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    -               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OPT_SOME        reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    <               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    >               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LE           reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_GE           reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_EQ           reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_NE           reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    &               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ^               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    |               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LAND         reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ?               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LOR          reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ;               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    )               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ,               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    :               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    }               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ]               reduce using rule 211 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    *               shift and go to state 199
    /               shift and go to state 201
    %               shift and go to state 200


state 304

    (212) AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .
    (207) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (208) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (209) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    -               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OPT_SOME        reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    <               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    >               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LE           reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_GE           reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_EQ           reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_NE           reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    &               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ^               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    |               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LAND         reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ?               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LOR          reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ;               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    )               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ,               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    :               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    }               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ]               reduce using rule 212 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    *               shift and go to state 199
    /               shift and go to state 201
    %               shift and go to state 200


state 305

    (238) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    ;               reduce using rule 238 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    )               reduce using rule 238 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ]               reduce using rule 238 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ,               reduce using rule 238 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    }               reduce using rule 238 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    :               reduce using rule 238 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 306

    (228) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (226) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ?               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ;               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    )               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ,               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    :               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    }               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ]               reduce using rule 228 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 207


state 307

    (126) JumpStatement -> BREAK IDENTIFIER ; .

    ELSE            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    }               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    ;               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    DEFAULT         reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    IF              reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    SWITCH          reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    WHILE           reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    DO              reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    FOR             reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    BREAK           reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    CONTINUE        reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    RETURN          reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    THROW           reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    {               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOLEAN         reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    BYTE            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    SHORT           reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT             reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    LONG            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT           reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    DOUBLE          reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    VOID            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    +               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    -               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    ~               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    !               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    THIS            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    SUPER           reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    NULL            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    (               reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOL            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    NEW             reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)
    CASE            reduce using rule 126 (JumpStatement -> BREAK IDENTIFIER ; .)


state 308

    (115) IterationStatement -> DO M_instr_branch Statement . WHILE M_instr_branch ( Expression ) ;

    WHILE           shift and go to state 344


state 309

    (162) FieldAccess -> QualifiedName . THIS .

    [               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    .               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OPT_INC_DEC     reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    =               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OPT_EQ          reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    *               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    /               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    %               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    +               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    -               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OPT_SOME        reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    <               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    >               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OP_LE           reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OP_GE           reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OP_EQ           reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OP_NE           reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    &               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    ^               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    |               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OP_LAND         reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    ?               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    OP_LOR          reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    ,               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    ;               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    (               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    )               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    :               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    }               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)
    ]               reduce using rule 162 (FieldAccess -> QualifiedName . THIS .)


state 310

    (176) NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .

    .               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    *               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    /               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    %               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    +               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    -               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    <               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    >               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LE           reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_GE           reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_NE           reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    &               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ^               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    |               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ?               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ;               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    )               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ,               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    :               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    }               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ]               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    =               reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 176 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)


state 311

    (163) FieldAccess -> QualifiedName . CLASS .

    [               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    .               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OPT_INC_DEC     reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    =               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OPT_EQ          reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    *               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    /               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    %               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    +               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    -               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OPT_SOME        reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    <               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    >               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OP_LE           reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OP_GE           reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OP_EQ           reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OP_NE           reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    &               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    ^               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    |               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OP_LAND         reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    ?               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    OP_LOR          reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    ,               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    ;               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    (               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    )               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    :               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    }               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)
    ]               reduce using rule 163 (FieldAccess -> QualifiedName . CLASS .)


state 312

    (158) ArrayAccess -> QualifiedName [ Expression . ]

    ]               shift and go to state 345


state 313

    (214) ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .
    (211) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (212) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    <               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    >               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LE           reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_GE           reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_EQ           reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_NE           reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    &               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ^               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    |               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LAND         reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ?               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LOR          reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ;               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    )               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ,               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    :               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    }               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ]               reduce using rule 214 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    +               shift and go to state 226
    -               shift and go to state 227


state 314

    (160) FieldAccess -> NotJustName . IDENTIFIER .

    [               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    .               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    =               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_EQ          reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    *               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    /               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    %               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    +               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    -               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_SOME        reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    <               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    >               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LE           reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_GE           reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_EQ           reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_NE           reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    &               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    ^               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    |               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LAND         reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    ?               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LOR          reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    ,               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    ;               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    (               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    )               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    :               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    }               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)
    ]               reduce using rule 160 (FieldAccess -> NotJustName . IDENTIFIER .)


state 315

    (108) SelectionStatement -> IF ( Expression . ) M_instr_branch Statement
    (109) SelectionStatement -> IF ( Expression . ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement

    )               shift and go to state 346


state 316

    (132) JumpStatement -> THROW Expression ; .

    ELSE            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    }               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    ;               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    IDENTIFIER      reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    DEFAULT         reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    IF              reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    SWITCH          reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    WHILE           reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    DO              reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    FOR             reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    BREAK           reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    CONTINUE        reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    RETURN          reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    THROW           reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    {               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    BOOLEAN         reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    CHAR            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    BYTE            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    SHORT           reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    INT             reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    LONG            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    FLOAT           reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    DOUBLE          reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    VOID            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    +               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    -               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    ~               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    !               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    THIS            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    SUPER           reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    NULL            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    (               reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    INT_LITERAL     reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    FLOAT_LITERAL   reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    CHAR_LITERAL    reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    STRING_LITERAL  reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    BOOL            reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    NEW             reduce using rule 132 (JumpStatement -> THROW Expression ; .)
    CASE            reduce using rule 132 (JumpStatement -> THROW Expression ; .)


state 317

    (71) Parameter -> TypeSpecifier DeclaratorName .
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (193) OP_DIM -> . [ ]

    )               reduce using rule 71 (Parameter -> TypeSpecifier DeclaratorName .)
    ,               reduce using rule 71 (Parameter -> TypeSpecifier DeclaratorName .)
    [               shift and go to state 80

    OP_DIM                         shift and go to state 175

state 318

    (79) ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .

    {               reduce using rule 79 (ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .)


state 319

    (70) ParameterList -> ParameterList , . Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 347
    TypeSpecifier                  shift and go to state 246

state 320

    (65) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 321

    (67) MethodDeclarator -> DeclaratorName ( ParameterList ) .

    {               reduce using rule 67 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)
    ;               reduce using rule 67 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)


state 322

    (74) MethodBody -> { LocalVariableDeclarationsAndStatements } .

    ;               reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    }               reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    STATIC          reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    IDENTIFIER      reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    PUBLIC          reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    PRIVATE         reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    {               reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    CLASS           reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    INTERFACE       reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    BOOLEAN         reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    CHAR            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    BYTE            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    SHORT           reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    INT             reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    LONG            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT           reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    DOUBLE          reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    VOID            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)


state 323

    (104) LabelStatement -> Marker_case CASE ConstantExpression : .

    }               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ;               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    IDENTIFIER      reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DEFAULT         reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    IF              reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SWITCH          reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    WHILE           reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DO              reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FOR             reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BREAK           reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CONTINUE        reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    RETURN          reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    THROW           reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    {               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BOOLEAN         reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CHAR            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BYTE            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SHORT           reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    INT             reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    LONG            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FLOAT           reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DOUBLE          reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    VOID            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    +               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    -               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ~               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    !               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    THIS            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SUPER           reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    NULL            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    (               reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    INT_LITERAL     reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FLOAT_LITERAL   reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CHAR_LITERAL    reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    STRING_LITERAL  reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BOOL            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    NEW             reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CASE            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ELSE            reduce using rule 104 (LabelStatement -> Marker_case CASE ConstantExpression : .)


state 324

    (230) ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .
    (228) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ?               reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    OP_LOR          reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ,               reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ;               reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    )               reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    }               reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ]               reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    :               reduce using rule 230 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    |               shift and go to state 231


state 325

    (116) IterationStatement -> FOR ( ForInit M_instr . ForExpr M_instr ForIncr ) M_instr Statement
    (120) ForExpr -> . Expression ;
    (121) ForExpr -> . ;
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 349
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ForExpr                        shift and go to state 348
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Expression                     shift and go to state 350
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 326

    (117) ForInit -> ExpressionStatements ; .

    ;               reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    +               reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    -               reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    ~               reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    !               reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    IDENTIFIER      reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    THIS            reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    SUPER           reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    NULL            reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    (               reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    INT_LITERAL     reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    FLOAT_LITERAL   reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    CHAR_LITERAL    reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    STRING_LITERAL  reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    BOOL            reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    NEW             reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    BOOLEAN         reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    CHAR            reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    BYTE            reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    SHORT           reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    INT             reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    LONG            reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    FLOAT           reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    DOUBLE          reduce using rule 117 (ForInit -> ExpressionStatements ; .)
    VOID            reduce using rule 117 (ForInit -> ExpressionStatements ; .)


state 327

    (125) ExpressionStatements -> ExpressionStatements , . ExpressionStatement
    (107) ExpressionStatement -> . Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ExpressionStatement            shift and go to state 351
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 133
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 328

    (63) ArrayInitializers -> ArrayInitializers , . VariableInitializer
    (64) ArrayInitializers -> ArrayInitializers , .
    (61) VariableInitializer -> . Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    }               reduce using rule 64 (ArrayInitializers -> ArrayInitializers , .)
    ,               reduce using rule 64 (ArrayInitializers -> ArrayInitializers , .)
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    VariableInitializer            shift and go to state 352
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 256
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 329

    (181) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .

    .               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_INC_DEC     reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    *               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    /               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    %               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    +               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    -               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_SOME        reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    <               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    >               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LE           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_GE           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_EQ           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_NE           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    &               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ^               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    |               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LAND         reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ?               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LOR          reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ;               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    )               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ,               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    :               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    }               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ]               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    =               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_EQ          reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)


state 330

    (165) MethodCall -> MethodAccess ( ArgumentList ) .

    [               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    .               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    =               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_EQ          reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    *               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    /               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    %               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    +               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    -               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_SOME        reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    <               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    >               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LE           reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_GE           reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_EQ           reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_NE           reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    &               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ^               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    |               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LAND         reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ?               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LOR          reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ;               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    )               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ,               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    :               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    }               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ]               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)
    (               reduce using rule 165 (MethodCall -> MethodAccess ( ArgumentList ) .)


state 331

    (174) ArgumentList -> ArgumentList , . Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 353
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 332

    (159) ArrayAccess -> ComplexPrimary [ Expression ] .

    [               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    .               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_INC_DEC     reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    =               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_EQ          reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    *               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    /               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    %               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    +               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    -               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_SOME        reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    <               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    >               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LE           reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_GE           reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_EQ           reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_NE           reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    &               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ^               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    |               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LAND         reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ?               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LOR          reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ,               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ;               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    (               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    )               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    :               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    }               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ]               reduce using rule 159 (ArrayAccess -> ComplexPrimary [ Expression ] .)


state 333

    (182) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .

    .               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_INC_DEC     reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    *               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    /               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    %               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    +               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    -               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_SOME        reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    <               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    >               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LE           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_GE           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_EQ           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_NE           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    &               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ^               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    |               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LAND         reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ?               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LOR          reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ;               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    )               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ,               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    :               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    }               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ]               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    =               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_EQ          reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)


state 334

    (114) IterationStatement -> WHILE M_instr_branch ( Expression . ) M_instr_branch Statement

    )               shift and go to state 354


state 335

    (183) ClassAllocationExpression -> NEW TypeName ( ArgumentList . )
    (174) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 355
    ,               shift and go to state 331


state 336

    (184) ClassAllocationExpression -> NEW TypeName ( ) .

    {               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    .               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_INC_DEC     reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    =               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_EQ          reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    *               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    /               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    %               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    +               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    -               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_SOME        reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    <               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    >               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LE           reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_GE           reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_EQ           reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_NE           reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    &               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ^               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    |               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LAND         reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ?               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LOR          reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ;               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    )               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ,               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    :               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    }               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ]               reduce using rule 184 (ClassAllocationExpression -> NEW TypeName ( ) .)


state 337

    (189) DimExprs -> DimExprs DimExpr .

    [               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    {               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    .               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OPT_INC_DEC     reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    =               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OPT_EQ          reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    *               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    /               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    %               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    +               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    -               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OPT_SOME        reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    <               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    >               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    ?               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    ;               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    )               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    ,               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    :               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    }               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)
    ]               reduce using rule 189 (DimExprs -> DimExprs DimExpr .)


state 338

    (185) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (192) Dims -> Dims . OP_DIM
    (193) OP_DIM -> . [ ]

    {               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    .               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_INC_DEC     reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    =               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_EQ          reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    *               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    /               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    %               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    +               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    -               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_SOME        reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    <               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    >               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ?               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    )               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ;               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ,               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    :               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    }               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ]               reduce using rule 185 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    [               shift and go to state 80

    OP_DIM                         shift and go to state 180

state 339

    (190) DimExpr -> [ Expression . ]

    ]               shift and go to state 356


state 340

    (93) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .

    }               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    ;               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    IDENTIFIER      reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DEFAULT         reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    IF              reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SWITCH          reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    WHILE           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DO              reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FOR             reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BREAK           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CONTINUE        reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    RETURN          reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    THROW           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    {               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BOOLEAN         reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CHAR            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BYTE            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SHORT           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    INT             reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    LONG            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FLOAT           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DOUBLE          reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    VOID            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    +               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    -               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    ~               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    !               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    THIS            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SUPER           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    NULL            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    (               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    INT_LITERAL     reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FLOAT_LITERAL   reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CHAR_LITERAL    reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    STRING_LITERAL  reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BOOL            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    NEW             reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CASE            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)


state 341

    (110) SelectionStatement -> SWITCH ( Expression Mark_switch . ) Block

    )               shift and go to state 357


state 342

    (232) ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .
    (230) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND M_OP InclusiveOrExpression

    ?               reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    OP_LOR          reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ;               reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ,               reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    )               reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ]               reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    }               reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    :               reduce using rule 232 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    OP_LAND         shift and go to state 189


state 343

    (235) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression . Mark : M_instr ConditionalExpression M_instr
    (236) Mark -> .

    :               reduce using rule 236 (Mark -> .)

    Mark                           shift and go to state 358

state 344

    (115) IterationStatement -> DO M_instr_branch Statement WHILE . M_instr_branch ( Expression ) ;
    (113) M_instr_branch -> .

    (               reduce using rule 113 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 359

state 345

    (158) ArrayAccess -> QualifiedName [ Expression ] .

    [               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    .               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_INC_DEC     reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    =               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_EQ          reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    *               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    /               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    %               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    +               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    -               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_SOME        reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    <               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    >               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LE           reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_GE           reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_EQ           reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_NE           reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    &               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    ^               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    |               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LAND         reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    ?               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LOR          reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    ,               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    ;               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    (               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    )               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    :               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    }               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)
    ]               reduce using rule 158 (ArrayAccess -> QualifiedName [ Expression ] .)


state 346

    (108) SelectionStatement -> IF ( Expression ) . M_instr_branch Statement
    (109) SelectionStatement -> IF ( Expression ) . M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (113) M_instr_branch -> .

    ;               reduce using rule 113 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 113 (M_instr_branch -> .)
    DEFAULT         reduce using rule 113 (M_instr_branch -> .)
    IF              reduce using rule 113 (M_instr_branch -> .)
    SWITCH          reduce using rule 113 (M_instr_branch -> .)
    WHILE           reduce using rule 113 (M_instr_branch -> .)
    DO              reduce using rule 113 (M_instr_branch -> .)
    FOR             reduce using rule 113 (M_instr_branch -> .)
    BREAK           reduce using rule 113 (M_instr_branch -> .)
    CONTINUE        reduce using rule 113 (M_instr_branch -> .)
    RETURN          reduce using rule 113 (M_instr_branch -> .)
    THROW           reduce using rule 113 (M_instr_branch -> .)
    {               reduce using rule 113 (M_instr_branch -> .)
    +               reduce using rule 113 (M_instr_branch -> .)
    -               reduce using rule 113 (M_instr_branch -> .)
    ~               reduce using rule 113 (M_instr_branch -> .)
    !               reduce using rule 113 (M_instr_branch -> .)
    THIS            reduce using rule 113 (M_instr_branch -> .)
    SUPER           reduce using rule 113 (M_instr_branch -> .)
    NULL            reduce using rule 113 (M_instr_branch -> .)
    (               reduce using rule 113 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 113 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 113 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 113 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 113 (M_instr_branch -> .)
    BOOL            reduce using rule 113 (M_instr_branch -> .)
    NEW             reduce using rule 113 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 113 (M_instr_branch -> .)
    CHAR            reduce using rule 113 (M_instr_branch -> .)
    BYTE            reduce using rule 113 (M_instr_branch -> .)
    SHORT           reduce using rule 113 (M_instr_branch -> .)
    INT             reduce using rule 113 (M_instr_branch -> .)
    LONG            reduce using rule 113 (M_instr_branch -> .)
    FLOAT           reduce using rule 113 (M_instr_branch -> .)
    DOUBLE          reduce using rule 113 (M_instr_branch -> .)
    VOID            reduce using rule 113 (M_instr_branch -> .)
    CASE            reduce using rule 113 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 360

state 347

    (70) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 70 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 70 (ParameterList -> ParameterList , Parameter .)


state 348

    (116) IterationStatement -> FOR ( ForInit M_instr ForExpr . M_instr ForIncr ) M_instr Statement
    (101) M_instr -> .

    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    )               reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 361

state 349

    (121) ForExpr -> ; .

    +               reduce using rule 121 (ForExpr -> ; .)
    -               reduce using rule 121 (ForExpr -> ; .)
    ~               reduce using rule 121 (ForExpr -> ; .)
    !               reduce using rule 121 (ForExpr -> ; .)
    IDENTIFIER      reduce using rule 121 (ForExpr -> ; .)
    THIS            reduce using rule 121 (ForExpr -> ; .)
    SUPER           reduce using rule 121 (ForExpr -> ; .)
    NULL            reduce using rule 121 (ForExpr -> ; .)
    (               reduce using rule 121 (ForExpr -> ; .)
    INT_LITERAL     reduce using rule 121 (ForExpr -> ; .)
    FLOAT_LITERAL   reduce using rule 121 (ForExpr -> ; .)
    CHAR_LITERAL    reduce using rule 121 (ForExpr -> ; .)
    STRING_LITERAL  reduce using rule 121 (ForExpr -> ; .)
    BOOL            reduce using rule 121 (ForExpr -> ; .)
    NEW             reduce using rule 121 (ForExpr -> ; .)
    BOOLEAN         reduce using rule 121 (ForExpr -> ; .)
    CHAR            reduce using rule 121 (ForExpr -> ; .)
    BYTE            reduce using rule 121 (ForExpr -> ; .)
    SHORT           reduce using rule 121 (ForExpr -> ; .)
    INT             reduce using rule 121 (ForExpr -> ; .)
    LONG            reduce using rule 121 (ForExpr -> ; .)
    FLOAT           reduce using rule 121 (ForExpr -> ; .)
    DOUBLE          reduce using rule 121 (ForExpr -> ; .)
    VOID            reduce using rule 121 (ForExpr -> ; .)
    )               reduce using rule 121 (ForExpr -> ; .)


state 350

    (120) ForExpr -> Expression . ;

    ;               shift and go to state 362


state 351

    (125) ExpressionStatements -> ExpressionStatements , ExpressionStatement .

    ,               reduce using rule 125 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    )               reduce using rule 125 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    ;               reduce using rule 125 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)


state 352

    (63) ArrayInitializers -> ArrayInitializers , VariableInitializer .

    }               reduce using rule 63 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)
    ,               reduce using rule 63 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)


state 353

    (174) ArgumentList -> ArgumentList , Expression .

    )               reduce using rule 174 (ArgumentList -> ArgumentList , Expression .)
    ,               reduce using rule 174 (ArgumentList -> ArgumentList , Expression .)


state 354

    (114) IterationStatement -> WHILE M_instr_branch ( Expression ) . M_instr_branch Statement
    (113) M_instr_branch -> .

    ;               reduce using rule 113 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 113 (M_instr_branch -> .)
    DEFAULT         reduce using rule 113 (M_instr_branch -> .)
    IF              reduce using rule 113 (M_instr_branch -> .)
    SWITCH          reduce using rule 113 (M_instr_branch -> .)
    WHILE           reduce using rule 113 (M_instr_branch -> .)
    DO              reduce using rule 113 (M_instr_branch -> .)
    FOR             reduce using rule 113 (M_instr_branch -> .)
    BREAK           reduce using rule 113 (M_instr_branch -> .)
    CONTINUE        reduce using rule 113 (M_instr_branch -> .)
    RETURN          reduce using rule 113 (M_instr_branch -> .)
    THROW           reduce using rule 113 (M_instr_branch -> .)
    {               reduce using rule 113 (M_instr_branch -> .)
    +               reduce using rule 113 (M_instr_branch -> .)
    -               reduce using rule 113 (M_instr_branch -> .)
    ~               reduce using rule 113 (M_instr_branch -> .)
    !               reduce using rule 113 (M_instr_branch -> .)
    THIS            reduce using rule 113 (M_instr_branch -> .)
    SUPER           reduce using rule 113 (M_instr_branch -> .)
    NULL            reduce using rule 113 (M_instr_branch -> .)
    (               reduce using rule 113 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 113 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 113 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 113 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 113 (M_instr_branch -> .)
    BOOL            reduce using rule 113 (M_instr_branch -> .)
    NEW             reduce using rule 113 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 113 (M_instr_branch -> .)
    CHAR            reduce using rule 113 (M_instr_branch -> .)
    BYTE            reduce using rule 113 (M_instr_branch -> .)
    SHORT           reduce using rule 113 (M_instr_branch -> .)
    INT             reduce using rule 113 (M_instr_branch -> .)
    LONG            reduce using rule 113 (M_instr_branch -> .)
    FLOAT           reduce using rule 113 (M_instr_branch -> .)
    DOUBLE          reduce using rule 113 (M_instr_branch -> .)
    VOID            reduce using rule 113 (M_instr_branch -> .)
    CASE            reduce using rule 113 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 363

state 355

    (183) ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .

    {               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    .               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    =               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_EQ          reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    *               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    /               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    %               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    +               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    -               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_SOME        reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    <               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    >               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LE           reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_GE           reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_EQ           reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_NE           reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    &               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ^               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    |               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LAND         reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ?               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LOR          reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ;               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    )               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ,               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    :               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    }               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ]               reduce using rule 183 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)


state 356

    (190) DimExpr -> [ Expression ] .

    [               reduce using rule 190 (DimExpr -> [ Expression ] .)
    {               reduce using rule 190 (DimExpr -> [ Expression ] .)
    .               reduce using rule 190 (DimExpr -> [ Expression ] .)
    OPT_INC_DEC     reduce using rule 190 (DimExpr -> [ Expression ] .)
    =               reduce using rule 190 (DimExpr -> [ Expression ] .)
    OPT_EQ          reduce using rule 190 (DimExpr -> [ Expression ] .)
    *               reduce using rule 190 (DimExpr -> [ Expression ] .)
    /               reduce using rule 190 (DimExpr -> [ Expression ] .)
    %               reduce using rule 190 (DimExpr -> [ Expression ] .)
    +               reduce using rule 190 (DimExpr -> [ Expression ] .)
    -               reduce using rule 190 (DimExpr -> [ Expression ] .)
    OPT_SOME        reduce using rule 190 (DimExpr -> [ Expression ] .)
    <               reduce using rule 190 (DimExpr -> [ Expression ] .)
    >               reduce using rule 190 (DimExpr -> [ Expression ] .)
    OP_LE           reduce using rule 190 (DimExpr -> [ Expression ] .)
    OP_GE           reduce using rule 190 (DimExpr -> [ Expression ] .)
    OP_EQ           reduce using rule 190 (DimExpr -> [ Expression ] .)
    OP_NE           reduce using rule 190 (DimExpr -> [ Expression ] .)
    &               reduce using rule 190 (DimExpr -> [ Expression ] .)
    ^               reduce using rule 190 (DimExpr -> [ Expression ] .)
    |               reduce using rule 190 (DimExpr -> [ Expression ] .)
    OP_LAND         reduce using rule 190 (DimExpr -> [ Expression ] .)
    ?               reduce using rule 190 (DimExpr -> [ Expression ] .)
    OP_LOR          reduce using rule 190 (DimExpr -> [ Expression ] .)
    ;               reduce using rule 190 (DimExpr -> [ Expression ] .)
    )               reduce using rule 190 (DimExpr -> [ Expression ] .)
    ,               reduce using rule 190 (DimExpr -> [ Expression ] .)
    :               reduce using rule 190 (DimExpr -> [ Expression ] .)
    }               reduce using rule 190 (DimExpr -> [ Expression ] .)
    ]               reduce using rule 190 (DimExpr -> [ Expression ] .)


state 357

    (110) SelectionStatement -> SWITCH ( Expression Mark_switch ) . Block
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (87) Lparen -> . {

    {               shift and go to state 69

    Lparen                         shift and go to state 54
    Block                          shift and go to state 364

state 358

    (235) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark . : M_instr ConditionalExpression M_instr

    :               shift and go to state 365


state 359

    (115) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch . ( Expression ) ;

    (               shift and go to state 366


state 360

    (108) SelectionStatement -> IF ( Expression ) M_instr_branch . Statement
    (109) SelectionStatement -> IF ( Expression ) M_instr_branch . Statement ELSE N_instr M_instr_branch Statement
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    Statement                      shift and go to state 367
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    ConditionalOrExpression        shift and go to state 131
    PrimitiveType                  shift and go to state 184
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    SpecialName                    shift and go to state 119
    FieldAccess                    shift and go to state 141
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 361

    (116) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr . ForIncr ) M_instr Statement
    (122) ForIncr -> . ExpressionStatements
    (123) ForIncr -> .
    (124) ExpressionStatements -> . ExpressionStatement
    (125) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (107) ExpressionStatement -> . Expression
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    )               reduce using rule 123 (ForIncr -> .)
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    ArithmeticUnaryOperator        shift and go to state 99
    ExclusiveOrExpression          shift and go to state 114
    ExpressionStatement            shift and go to state 273
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Expression                     shift and go to state 133
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    PrimaryExpression              shift and go to state 129
    ExpressionStatements           shift and go to state 369
    ConditionalAndExpression       shift and go to state 94
    ForIncr                        shift and go to state 368
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 362

    (120) ForExpr -> Expression ; .

    +               reduce using rule 120 (ForExpr -> Expression ; .)
    -               reduce using rule 120 (ForExpr -> Expression ; .)
    ~               reduce using rule 120 (ForExpr -> Expression ; .)
    !               reduce using rule 120 (ForExpr -> Expression ; .)
    IDENTIFIER      reduce using rule 120 (ForExpr -> Expression ; .)
    THIS            reduce using rule 120 (ForExpr -> Expression ; .)
    SUPER           reduce using rule 120 (ForExpr -> Expression ; .)
    NULL            reduce using rule 120 (ForExpr -> Expression ; .)
    (               reduce using rule 120 (ForExpr -> Expression ; .)
    INT_LITERAL     reduce using rule 120 (ForExpr -> Expression ; .)
    FLOAT_LITERAL   reduce using rule 120 (ForExpr -> Expression ; .)
    CHAR_LITERAL    reduce using rule 120 (ForExpr -> Expression ; .)
    STRING_LITERAL  reduce using rule 120 (ForExpr -> Expression ; .)
    BOOL            reduce using rule 120 (ForExpr -> Expression ; .)
    NEW             reduce using rule 120 (ForExpr -> Expression ; .)
    BOOLEAN         reduce using rule 120 (ForExpr -> Expression ; .)
    CHAR            reduce using rule 120 (ForExpr -> Expression ; .)
    BYTE            reduce using rule 120 (ForExpr -> Expression ; .)
    SHORT           reduce using rule 120 (ForExpr -> Expression ; .)
    INT             reduce using rule 120 (ForExpr -> Expression ; .)
    LONG            reduce using rule 120 (ForExpr -> Expression ; .)
    FLOAT           reduce using rule 120 (ForExpr -> Expression ; .)
    DOUBLE          reduce using rule 120 (ForExpr -> Expression ; .)
    VOID            reduce using rule 120 (ForExpr -> Expression ; .)
    )               reduce using rule 120 (ForExpr -> Expression ; .)


state 363

    (114) IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch . Statement
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    Statement                      shift and go to state 370
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    ConditionalOrExpression        shift and go to state 131
    PrimitiveType                  shift and go to state 184
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    SpecialName                    shift and go to state 119
    FieldAccess                    shift and go to state 141
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 364

    (110) SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .

    ELSE            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    }               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    ;               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    IDENTIFIER      reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DEFAULT         reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    IF              reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SWITCH          reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    WHILE           reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DO              reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FOR             reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BREAK           reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CONTINUE        reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    RETURN          reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    THROW           reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    {               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BOOLEAN         reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CHAR            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BYTE            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SHORT           reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    INT             reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    LONG            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FLOAT           reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DOUBLE          reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    VOID            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    +               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    -               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    ~               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    !               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    THIS            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SUPER           reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    NULL            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    (               reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    INT_LITERAL     reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FLOAT_LITERAL   reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CHAR_LITERAL    reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    STRING_LITERAL  reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BOOL            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    NEW             reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CASE            reduce using rule 110 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)


state 365

    (235) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : . M_instr ConditionalExpression M_instr
    (101) M_instr -> .

    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 371

state 366

    (115) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( . Expression ) ;
    (241) Expression -> . AssignmentExpression
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    FieldAccess                    shift and go to state 141
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    Expression                     shift and go to state 372
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    UnaryExpression                shift and go to state 136
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 367

    (108) SelectionStatement -> IF ( Expression ) M_instr_branch Statement .
    (109) SelectionStatement -> IF ( Expression ) M_instr_branch Statement . ELSE N_instr M_instr_branch Statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ;               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DEFAULT         reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    IF              reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SWITCH          reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    WHILE           reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DO              reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FOR             reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BREAK           reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CONTINUE        reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    RETURN          reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    THROW           reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    {               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BOOLEAN         reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CHAR            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BYTE            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SHORT           reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    INT             reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    LONG            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FLOAT           reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DOUBLE          reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    VOID            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    +               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    -               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ~               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    !               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    THIS            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SUPER           reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    NULL            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    (               reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BOOL            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    NEW             reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CASE            reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ELSE            shift and go to state 373

  ! ELSE            [ reduce using rule 108 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .) ]


state 368

    (116) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr . ) M_instr Statement

    )               shift and go to state 374


state 369

    (122) ForIncr -> ExpressionStatements .
    (125) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    )               reduce using rule 122 (ForIncr -> ExpressionStatements .)
    ,               shift and go to state 327


state 370

    (114) IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .

    ELSE            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    }               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    ;               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DEFAULT         reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    IF              reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SWITCH          reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    WHILE           reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DO              reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FOR             reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BREAK           reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CONTINUE        reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    RETURN          reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    THROW           reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    {               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BOOLEAN         reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CHAR            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BYTE            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SHORT           reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    INT             reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    LONG            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FLOAT           reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DOUBLE          reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    VOID            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    +               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    -               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    ~               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    !               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    THIS            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SUPER           reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    NULL            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    (               reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BOOL            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    NEW             reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CASE            reduce using rule 114 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)


state 371

    (235) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr . ConditionalExpression M_instr
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName

    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    ComplexPrimary                 shift and go to state 120
    Bool_LIT                       shift and go to state 83
    CastExpression                 shift and go to state 145
    PrimitiveType                  shift and go to state 184
    RealPostfixExpression          shift and go to state 98
    ArithmeticUnaryOperator        shift and go to state 99
    AndExpression                  shift and go to state 87
    ArrayAccess                    shift and go to state 110
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    MultiplicativeExpression       shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 151
    NewAllocationExpression        shift and go to state 132
    NotJustName                    shift and go to state 153
    Char_LIT                       shift and go to state 155
    MethodCall                     shift and go to state 104
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 375
    UnaryExpression                shift and go to state 196
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    FieldAccess                    shift and go to state 141
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    Float_LIT                      shift and go to state 138
    SpecialName                    shift and go to state 119
    Integer_LIT                    shift and go to state 89

state 372

    (115) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression . ) ;

    )               shift and go to state 376


state 373

    (109) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE . N_instr M_instr_branch Statement
    (112) N_instr -> .

    ;               reduce using rule 112 (N_instr -> .)
    IDENTIFIER      reduce using rule 112 (N_instr -> .)
    DEFAULT         reduce using rule 112 (N_instr -> .)
    IF              reduce using rule 112 (N_instr -> .)
    SWITCH          reduce using rule 112 (N_instr -> .)
    WHILE           reduce using rule 112 (N_instr -> .)
    DO              reduce using rule 112 (N_instr -> .)
    FOR             reduce using rule 112 (N_instr -> .)
    BREAK           reduce using rule 112 (N_instr -> .)
    CONTINUE        reduce using rule 112 (N_instr -> .)
    RETURN          reduce using rule 112 (N_instr -> .)
    THROW           reduce using rule 112 (N_instr -> .)
    {               reduce using rule 112 (N_instr -> .)
    +               reduce using rule 112 (N_instr -> .)
    -               reduce using rule 112 (N_instr -> .)
    ~               reduce using rule 112 (N_instr -> .)
    !               reduce using rule 112 (N_instr -> .)
    THIS            reduce using rule 112 (N_instr -> .)
    SUPER           reduce using rule 112 (N_instr -> .)
    NULL            reduce using rule 112 (N_instr -> .)
    (               reduce using rule 112 (N_instr -> .)
    INT_LITERAL     reduce using rule 112 (N_instr -> .)
    FLOAT_LITERAL   reduce using rule 112 (N_instr -> .)
    CHAR_LITERAL    reduce using rule 112 (N_instr -> .)
    STRING_LITERAL  reduce using rule 112 (N_instr -> .)
    BOOL            reduce using rule 112 (N_instr -> .)
    NEW             reduce using rule 112 (N_instr -> .)
    BOOLEAN         reduce using rule 112 (N_instr -> .)
    CHAR            reduce using rule 112 (N_instr -> .)
    BYTE            reduce using rule 112 (N_instr -> .)
    SHORT           reduce using rule 112 (N_instr -> .)
    INT             reduce using rule 112 (N_instr -> .)
    LONG            reduce using rule 112 (N_instr -> .)
    FLOAT           reduce using rule 112 (N_instr -> .)
    DOUBLE          reduce using rule 112 (N_instr -> .)
    VOID            reduce using rule 112 (N_instr -> .)
    CASE            reduce using rule 112 (N_instr -> .)

    N_instr                        shift and go to state 377

state 374

    (116) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) . M_instr Statement
    (101) M_instr -> .

    ;               reduce using rule 101 (M_instr -> .)
    IDENTIFIER      reduce using rule 101 (M_instr -> .)
    DEFAULT         reduce using rule 101 (M_instr -> .)
    IF              reduce using rule 101 (M_instr -> .)
    SWITCH          reduce using rule 101 (M_instr -> .)
    WHILE           reduce using rule 101 (M_instr -> .)
    DO              reduce using rule 101 (M_instr -> .)
    FOR             reduce using rule 101 (M_instr -> .)
    BREAK           reduce using rule 101 (M_instr -> .)
    CONTINUE        reduce using rule 101 (M_instr -> .)
    RETURN          reduce using rule 101 (M_instr -> .)
    THROW           reduce using rule 101 (M_instr -> .)
    {               reduce using rule 101 (M_instr -> .)
    +               reduce using rule 101 (M_instr -> .)
    -               reduce using rule 101 (M_instr -> .)
    ~               reduce using rule 101 (M_instr -> .)
    !               reduce using rule 101 (M_instr -> .)
    THIS            reduce using rule 101 (M_instr -> .)
    SUPER           reduce using rule 101 (M_instr -> .)
    NULL            reduce using rule 101 (M_instr -> .)
    (               reduce using rule 101 (M_instr -> .)
    INT_LITERAL     reduce using rule 101 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 101 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 101 (M_instr -> .)
    STRING_LITERAL  reduce using rule 101 (M_instr -> .)
    BOOL            reduce using rule 101 (M_instr -> .)
    NEW             reduce using rule 101 (M_instr -> .)
    BOOLEAN         reduce using rule 101 (M_instr -> .)
    CHAR            reduce using rule 101 (M_instr -> .)
    BYTE            reduce using rule 101 (M_instr -> .)
    SHORT           reduce using rule 101 (M_instr -> .)
    INT             reduce using rule 101 (M_instr -> .)
    LONG            reduce using rule 101 (M_instr -> .)
    FLOAT           reduce using rule 101 (M_instr -> .)
    DOUBLE          reduce using rule 101 (M_instr -> .)
    VOID            reduce using rule 101 (M_instr -> .)
    CASE            reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 378

state 375

    (235) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression . M_instr
    (101) M_instr -> .

    ;               reduce using rule 101 (M_instr -> .)
    )               reduce using rule 101 (M_instr -> .)
    ,               reduce using rule 101 (M_instr -> .)
    :               reduce using rule 101 (M_instr -> .)
    }               reduce using rule 101 (M_instr -> .)
    ]               reduce using rule 101 (M_instr -> .)

    M_instr                        shift and go to state 379

state 376

    (115) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) . ;

    ;               shift and go to state 380


state 377

    (109) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr . M_instr_branch Statement
    (113) M_instr_branch -> .

    ;               reduce using rule 113 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 113 (M_instr_branch -> .)
    DEFAULT         reduce using rule 113 (M_instr_branch -> .)
    IF              reduce using rule 113 (M_instr_branch -> .)
    SWITCH          reduce using rule 113 (M_instr_branch -> .)
    WHILE           reduce using rule 113 (M_instr_branch -> .)
    DO              reduce using rule 113 (M_instr_branch -> .)
    FOR             reduce using rule 113 (M_instr_branch -> .)
    BREAK           reduce using rule 113 (M_instr_branch -> .)
    CONTINUE        reduce using rule 113 (M_instr_branch -> .)
    RETURN          reduce using rule 113 (M_instr_branch -> .)
    THROW           reduce using rule 113 (M_instr_branch -> .)
    {               reduce using rule 113 (M_instr_branch -> .)
    +               reduce using rule 113 (M_instr_branch -> .)
    -               reduce using rule 113 (M_instr_branch -> .)
    ~               reduce using rule 113 (M_instr_branch -> .)
    !               reduce using rule 113 (M_instr_branch -> .)
    THIS            reduce using rule 113 (M_instr_branch -> .)
    SUPER           reduce using rule 113 (M_instr_branch -> .)
    NULL            reduce using rule 113 (M_instr_branch -> .)
    (               reduce using rule 113 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 113 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 113 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 113 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 113 (M_instr_branch -> .)
    BOOL            reduce using rule 113 (M_instr_branch -> .)
    NEW             reduce using rule 113 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 113 (M_instr_branch -> .)
    CHAR            reduce using rule 113 (M_instr_branch -> .)
    BYTE            reduce using rule 113 (M_instr_branch -> .)
    SHORT           reduce using rule 113 (M_instr_branch -> .)
    INT             reduce using rule 113 (M_instr_branch -> .)
    LONG            reduce using rule 113 (M_instr_branch -> .)
    FLOAT           reduce using rule 113 (M_instr_branch -> .)
    DOUBLE          reduce using rule 113 (M_instr_branch -> .)
    VOID            reduce using rule 113 (M_instr_branch -> .)
    CASE            reduce using rule 113 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 381

state 378

    (116) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr . Statement
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    Statement                      shift and go to state 382
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    ConditionalOrExpression        shift and go to state 131
    PrimitiveType                  shift and go to state 184
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    SpecialName                    shift and go to state 119
    FieldAccess                    shift and go to state 141
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 379

    (235) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .

    ;               reduce using rule 235 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    ,               reduce using rule 235 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    )               reduce using rule 235 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    }               reduce using rule 235 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    ]               reduce using rule 235 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    :               reduce using rule 235 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)


state 380

    (115) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .

    ELSE            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    }               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    ;               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    IDENTIFIER      reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DEFAULT         reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    IF              reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SWITCH          reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    WHILE           reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DO              reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FOR             reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BREAK           reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CONTINUE        reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    RETURN          reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    THROW           reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    {               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BOOLEAN         reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CHAR            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BYTE            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SHORT           reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    INT             reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    LONG            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FLOAT           reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DOUBLE          reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    VOID            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    +               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    -               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    ~               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    !               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    THIS            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SUPER           reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    NULL            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    (               reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    INT_LITERAL     reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FLOAT_LITERAL   reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CHAR_LITERAL    reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    STRING_LITERAL  reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BOOL            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    NEW             reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CASE            reduce using rule 115 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)


state 381

    (109) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch . Statement
    (94) Statement -> . EmptyStatement M_instr
    (95) Statement -> . LabelStatement M_instr
    (96) Statement -> . ExpressionStatement ; M_instr
    (97) Statement -> . SelectionStatement M_instr
    (98) Statement -> . IterationStatement M_instr
    (99) Statement -> . JumpStatement M_instr
    (100) Statement -> . Block M_instr
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . Marker_case CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (107) ExpressionStatement -> . Expression
    (108) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (109) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (110) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (114) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (115) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (116) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (126) JumpStatement -> . BREAK IDENTIFIER ;
    (127) JumpStatement -> . BREAK ;
    (128) JumpStatement -> . CONTINUE IDENTIFIER ;
    (129) JumpStatement -> . CONTINUE ;
    (130) JumpStatement -> . RETURN Expression ;
    (131) JumpStatement -> . RETURN ;
    (132) JumpStatement -> . THROW Expression ;
    (85) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (86) Block -> . Lparen Rparen
    (106) Marker_case -> .
    (241) Expression -> . AssignmentExpression
    (87) Lparen -> . {
    (237) AssignmentExpression -> . ConditionalExpression
    (238) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (234) ConditionalExpression -> . ConditionalOrExpression
    (235) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (197) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (198) UnaryExpression -> . LogicalUnaryExpression
    (231) ConditionalOrExpression -> . ConditionalAndExpression
    (232) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (203) ArithmeticUnaryOperator -> . +
    (204) ArithmeticUnaryOperator -> . -
    (199) LogicalUnaryExpression -> . PostfixExpression
    (200) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (229) ConditionalAndExpression -> . InclusiveOrExpression
    (230) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (194) PostfixExpression -> . PrimaryExpression
    (195) PostfixExpression -> . RealPostfixExpression
    (201) LogicalUnaryOperator -> . ~
    (202) LogicalUnaryOperator -> . !
    (227) InclusiveOrExpression -> . ExclusiveOrExpression
    (228) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (138) PrimaryExpression -> . QualifiedName
    (139) PrimaryExpression -> . NotJustName
    (196) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (225) ExclusiveOrExpression -> . AndExpression
    (226) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (140) NotJustName -> . SpecialName
    (141) NotJustName -> . NewAllocationExpression
    (142) NotJustName -> . ComplexPrimary
    (223) AndExpression -> . EqualityExpression
    (224) AndExpression -> . AndExpression & EqualityExpression
    (170) SpecialName -> . THIS
    (171) SpecialName -> . SUPER
    (172) SpecialName -> . NULL
    (175) NewAllocationExpression -> . PlainNewAllocationExpression
    (176) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (143) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (144) ComplexPrimary -> . Integer_LIT
    (145) ComplexPrimary -> . Float_LIT
    (146) ComplexPrimary -> . Char_LIT
    (147) ComplexPrimary -> . String_LIT
    (148) ComplexPrimary -> . Bool_LIT
    (149) ComplexPrimary -> . ( Expression )
    (220) EqualityExpression -> . RelationalExpression
    (221) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (222) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (177) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (178) PlainNewAllocationExpression -> . ClassAllocationExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (150) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (151) ComplexPrimaryNoParenthesis -> . FieldAccess
    (152) ComplexPrimaryNoParenthesis -> . MethodCall
    (153) Integer_LIT -> . INT_LITERAL
    (154) Float_LIT -> . FLOAT_LITERAL
    (155) Char_LIT -> . CHAR_LITERAL
    (156) String_LIT -> . STRING_LITERAL
    (157) Bool_LIT -> . BOOL
    (215) RelationalExpression -> . ShiftExpression
    (216) RelationalExpression -> . RelationalExpression < ShiftExpression
    (217) RelationalExpression -> . RelationalExpression > ShiftExpression
    (218) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (219) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (185) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (186) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (187) ArrayAllocationExpression -> . NEW TypeName Dims
    (183) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (184) ClassAllocationExpression -> . NEW TypeName ( )
    (158) ArrayAccess -> . QualifiedName [ Expression ]
    (159) ArrayAccess -> . ComplexPrimary [ Expression ]
    (160) FieldAccess -> . NotJustName . IDENTIFIER
    (161) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (162) FieldAccess -> . QualifiedName . THIS
    (163) FieldAccess -> . QualifiedName . CLASS
    (164) FieldAccess -> . PrimitiveType . CLASS
    (165) MethodCall -> . MethodAccess ( ArgumentList )
    (166) MethodCall -> . MethodAccess ( )
    (213) ShiftExpression -> . AdditiveExpression
    (214) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (167) MethodAccess -> . ComplexPrimaryNoParenthesis
    (168) MethodAccess -> . SpecialName
    (169) MethodAccess -> . QualifiedName
    (210) AdditiveExpression -> . MultiplicativeExpression
    (211) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (212) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (206) MultiplicativeExpression -> . CastExpression
    (207) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (208) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (209) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (205) CastExpression -> . UnaryExpression

    ;               shift and go to state 105
    IDENTIFIER      shift and go to state 90
    DEFAULT         shift and go to state 123
    IF              shift and go to state 158
    SWITCH          shift and go to state 130
    WHILE           shift and go to state 125
    DO              shift and go to state 144
    FOR             shift and go to state 109
    BREAK           shift and go to state 139
    CONTINUE        shift and go to state 117
    RETURN          shift and go to state 97
    THROW           shift and go to state 162
    CASE            reduce using rule 106 (Marker_case -> .)
    {               shift and go to state 69
    +               shift and go to state 103
    -               shift and go to state 149
    ~               shift and go to state 143
    !               shift and go to state 147
    THIS            shift and go to state 92
    SUPER           shift and go to state 160
    NULL            shift and go to state 146
    (               shift and go to state 88
    INT_LITERAL     shift and go to state 142
    FLOAT_LITERAL   shift and go to state 127
    CHAR_LITERAL    shift and go to state 93
    STRING_LITERAL  shift and go to state 159
    BOOL            shift and go to state 140
    NEW             shift and go to state 126
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 57
    BYTE            shift and go to state 67
    SHORT           shift and go to state 41
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 121
    Bool_LIT                       shift and go to state 83
    LabelStatement                 shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 99
    AssignmentExpression           shift and go to state 107
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 98
    Statement                      shift and go to state 383
    AndExpression                  shift and go to state 87
    MultiplicativeExpression       shift and go to state 102
    CastExpression                 shift and go to state 145
    EqualityExpression             shift and go to state 100
    LogicalUnaryOperator           shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 101
    ArrayAccess                    shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    QualifiedName                  shift and go to state 186
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 151
    SelectionStatement             shift and go to state 106
    ConditionalOrExpression        shift and go to state 131
    PrimitiveType                  shift and go to state 184
    NotJustName                    shift and go to state 153
    ComplexPrimary                 shift and go to state 120
    MethodCall                     shift and go to state 104
    Char_LIT                       shift and go to state 155
    LogicalUnaryExpression         shift and go to state 156
    String_LIT                     shift and go to state 157
    UnaryExpression                shift and go to state 136
    Marker_case                    shift and go to state 91
    Expression                     shift and go to state 133
    Block                          shift and go to state 111
    AdditiveExpression             shift and go to state 134
    ArrayAllocationExpression      shift and go to state 112
    ConditionalExpression          shift and go to state 135
    InclusiveOrExpression          shift and go to state 137
    MethodAccess                   shift and go to state 113
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 114
    ConditionalAndExpression       shift and go to state 94
    RelationalExpression           shift and go to state 115
    PlainNewAllocationExpression   shift and go to state 116
    NewAllocationExpression        shift and go to state 132
    Float_LIT                      shift and go to state 138
    EmptyStatement                 shift and go to state 95
    SpecialName                    shift and go to state 119
    FieldAccess                    shift and go to state 141
    IterationStatement             shift and go to state 163
    Integer_LIT                    shift and go to state 89

state 382

    (116) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .

    ELSE            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    }               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    ;               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    IDENTIFIER      reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DEFAULT         reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    IF              reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SWITCH          reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    WHILE           reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DO              reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FOR             reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BREAK           reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CONTINUE        reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    RETURN          reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    THROW           reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    {               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BOOLEAN         reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CHAR            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BYTE            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SHORT           reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    INT             reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    LONG            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FLOAT           reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DOUBLE          reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    VOID            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    +               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    -               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    ~               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    !               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    THIS            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SUPER           reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    NULL            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    (               reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    INT_LITERAL     reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FLOAT_LITERAL   reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CHAR_LITERAL    reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    STRING_LITERAL  reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BOOL            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    NEW             reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CASE            reduce using rule 116 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)


state 383

    (109) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .

    ELSE            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    }               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    ;               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DEFAULT         reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    IF              reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SWITCH          reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    WHILE           reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DO              reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FOR             reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BREAK           reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CONTINUE        reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    RETURN          reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    THROW           reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    {               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BOOLEAN         reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CHAR            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BYTE            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SHORT           reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    INT             reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    LONG            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FLOAT           reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DOUBLE          reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    VOID            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    +               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    -               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    ~               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    !               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    THIS            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SUPER           reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    NULL            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    (               reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BOOL            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    NEW             reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CASE            reduce using rule 109 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 148 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 367 resolved as shift
