Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PROTECTED
    COMMENT
    GOTO
    ENUM
    THROWS
    TRANSIENT
    SYNCHRONIZED
    FINAL
    TRY
    INSTANCEOF
    NATIVE
    IGNORE_WHITESPACE
    STRICTFP
    IMPLEMENTS
    VOLATILE
    CONST
    ABSTRACT
    ASSERT
    FINALLY

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     TypeSpecifier -> TypeName
Rule 3     TypeSpecifier -> TypeName Dims
Rule 4     TypeName -> PrimitiveType
Rule 5     TypeName -> QualifiedName
Rule 6     ClassNameList -> QualifiedName
Rule 7     ClassNameList -> ClassNameList , QualifiedName
Rule 8     PrimitiveType -> BOOLEAN
Rule 9     PrimitiveType -> CHAR
Rule 10    PrimitiveType -> BYTE
Rule 11    PrimitiveType -> SHORT
Rule 12    PrimitiveType -> INT
Rule 13    PrimitiveType -> LONG
Rule 14    PrimitiveType -> FLOAT
Rule 15    PrimitiveType -> DOUBLE
Rule 16    PrimitiveType -> VOID
Rule 17    SemiColons -> ;
Rule 18    SemiColons -> SemiColons ;
Rule 19    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 20    ProgramFile -> PackageStatement TypeDeclarations
Rule 21    ProgramFile -> ImportStatements TypeDeclarations
Rule 22    ProgramFile -> TypeDeclarations
Rule 23    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 24    TypeDeclarations -> TypeDeclarationOptSemi
Rule 25    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 26    TypeDeclarationOptSemi -> TypeDeclaration
Rule 27    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 28    ImportStatements -> ImportStatement
Rule 29    ImportStatements -> ImportStatements ImportStatement
Rule 30    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 31    ImportStatement -> IMPORT QualifiedName . * SemiColons
Rule 32    QualifiedName -> IDENTIFIER
Rule 33    QualifiedName -> QualifiedName . IDENTIFIER
Rule 34    TypeDeclaration -> ClassHeader { FieldDeclarations Rparen
Rule 35    TypeDeclaration -> ClassHeader { Rparen
Rule 36    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 37    ClassHeader -> ClassWord IDENTIFIER
Rule 38    Modifiers -> Modifier
Rule 39    Modifiers -> Modifiers Modifier
Rule 40    Modifier -> PUBLIC
Rule 41    Modifier -> PRIVATE
Rule 42    Modifier -> STATIC
Rule 43    ClassWord -> CLASS
Rule 44    ClassWord -> INTERFACE
Rule 45    FieldDeclarations -> FieldDeclarationOptSemi
Rule 46    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 47    FieldDeclarationOptSemi -> FieldDeclaration
Rule 48    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 49    FieldDeclaration -> FieldVariableDeclaration ;
Rule 50    FieldDeclaration -> MethodDeclaration
Rule 51    FieldDeclaration -> ConstructorDeclaration
Rule 52    FieldDeclaration -> StaticInitializer
Rule 53    FieldDeclaration -> NonStaticInitializer
Rule 54    FieldDeclaration -> TypeDeclaration
Rule 55    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 56    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 57    VariableDeclarators -> VariableDeclarator
Rule 58    VariableDeclarators -> VariableDeclarators , VariableDeclarator
Rule 59    VariableDeclarator -> DeclaratorName
Rule 60    VariableDeclarator -> DeclaratorName = VariableInitializer
Rule 61    VariableInitializer -> Expression
Rule 62    ArrayInitializers -> VariableInitializer
Rule 63    ArrayInitializers -> ArrayInitializers , VariableInitializer
Rule 64    ArrayInitializers -> ArrayInitializers ,
Rule 65    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 66    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 67    MethodDeclarator -> DeclaratorName ( ParameterList )
Rule 68    MethodDeclarator -> DeclaratorName ( )
Rule 69    ParameterList -> Parameter
Rule 70    ParameterList -> ParameterList , Parameter
Rule 71    Parameter -> TypeSpecifier DeclaratorName
Rule 72    DeclaratorName -> IDENTIFIER
Rule 73    DeclaratorName -> DeclaratorName OP_DIM
Rule 74    MethodBody -> { LocalVariableDeclarationsAndStatements }
Rule 75    MethodBody -> { }
Rule 76    MethodBody -> ;
Rule 77    ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
Rule 78    ConstructorDeclaration -> Modifiers ConstructorDeclarator { }
Rule 79    ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
Rule 80    ConstructorDeclaration -> ConstructorDeclarator { }
Rule 81    ConstructorDeclarator -> IDENTIFIER ( ParameterList )
Rule 82    ConstructorDeclarator -> IDENTIFIER ( )
Rule 83    StaticInitializer -> STATIC Block
Rule 84    NonStaticInitializer -> Block
Rule 85    Extends -> EXTENDS TypeName
Rule 86    Extends -> Extends , TypeName
Rule 87    Block -> Lparen LocalVariableDeclarationsAndStatements Rparen
Rule 88    Block -> Lparen Rparen
Rule 89    Lparen -> {
Rule 90    Rparen -> }
Rule 91    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 92    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 93    LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 94    LocalVariableDeclarationOrStatement -> Statement
Rule 95    LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr
Rule 96    Statement -> EmptyStatement M_instr
Rule 97    Statement -> LabelStatement M_instr
Rule 98    Statement -> ExpressionStatement ; M_instr
Rule 99    Statement -> SelectionStatement M_instr
Rule 100   Statement -> IterationStatement M_instr
Rule 101   Statement -> JumpStatement M_instr
Rule 102   Statement -> Block M_instr
Rule 103   M_instr -> <empty>
Rule 104   EmptyStatement -> ;
Rule 105   LabelStatement -> IDENTIFIER :
Rule 106   LabelStatement -> Marker_case CASE ConstantExpression :
Rule 107   LabelStatement -> DEFAULT :
Rule 108   Marker_case -> <empty>
Rule 109   ExpressionStatement -> Expression
Rule 110   SelectionStatement -> IF ( Expression ) M_instr_branch Statement
Rule 111   SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
Rule 112   SelectionStatement -> SWITCH ( Expression Mark_switch ) Block
Rule 113   Mark_switch -> <empty>
Rule 114   N_instr -> <empty>
Rule 115   M_instr_branch -> <empty>
Rule 116   IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement
Rule 117   IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
Rule 118   IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
Rule 119   ForInit -> ExpressionStatements ;
Rule 120   ForInit -> LocalVariableDeclarationStatement
Rule 121   ForInit -> ;
Rule 122   ForExpr -> Expression ;
Rule 123   ForExpr -> ;
Rule 124   ForIncr -> ExpressionStatements
Rule 125   ForIncr -> <empty>
Rule 126   ExpressionStatements -> ExpressionStatement
Rule 127   ExpressionStatements -> ExpressionStatements , ExpressionStatement
Rule 128   JumpStatement -> BREAK IDENTIFIER ;
Rule 129   JumpStatement -> BREAK ;
Rule 130   JumpStatement -> CONTINUE IDENTIFIER ;
Rule 131   JumpStatement -> CONTINUE ;
Rule 132   JumpStatement -> RETURN Expression ;
Rule 133   JumpStatement -> RETURN ;
Rule 134   JumpStatement -> THROW Expression ;
Rule 135   Catches -> Catch
Rule 136   Catches -> Catches Catch
Rule 137   Catch -> CatchHeader Block
Rule 138   CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER )
Rule 139   CatchHeader -> CATCH ( TypeSpecifier )
Rule 140   PrimaryExpression -> QualifiedName
Rule 141   PrimaryExpression -> NotJustName
Rule 142   NotJustName -> SpecialName
Rule 143   NotJustName -> NewAllocationExpression
Rule 144   NotJustName -> ComplexPrimary
Rule 145   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 146   ComplexPrimary -> Integer_LIT
Rule 147   ComplexPrimary -> Float_LIT
Rule 148   ComplexPrimary -> Char_LIT
Rule 149   ComplexPrimary -> String_LIT
Rule 150   ComplexPrimary -> Bool_LIT
Rule 151   ComplexPrimary -> ( Expression )
Rule 152   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 153   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 154   ComplexPrimaryNoParenthesis -> MethodCall
Rule 155   Integer_LIT -> INT_LITERAL
Rule 156   Float_LIT -> FLOAT_LITERAL
Rule 157   Char_LIT -> CHAR_LITERAL
Rule 158   String_LIT -> STRING_LITERAL
Rule 159   Bool_LIT -> BOOL
Rule 160   ArrayAccess -> QualifiedName [ Expression ]
Rule 161   ArrayAccess -> ComplexPrimary [ Expression ]
Rule 162   FieldAccess -> NotJustName . IDENTIFIER
Rule 163   FieldAccess -> RealPostfixExpression . IDENTIFIER
Rule 164   FieldAccess -> QualifiedName . THIS
Rule 165   FieldAccess -> QualifiedName . CLASS
Rule 166   FieldAccess -> PrimitiveType . CLASS
Rule 167   MethodCall -> MethodAccess ( ArgumentList )
Rule 168   MethodCall -> MethodAccess ( )
Rule 169   MethodAccess -> ComplexPrimaryNoParenthesis
Rule 170   MethodAccess -> SpecialName
Rule 171   MethodAccess -> QualifiedName
Rule 172   SpecialName -> THIS
Rule 173   SpecialName -> SUPER
Rule 174   SpecialName -> NULL
Rule 175   ArgumentList -> Expression
Rule 176   ArgumentList -> ArgumentList , Expression
Rule 177   NewAllocationExpression -> PlainNewAllocationExpression
Rule 178   NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression
Rule 179   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 180   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 181   PlainNewAllocationExpression -> ArrayAllocationExpression { }
Rule 182   PlainNewAllocationExpression -> ClassAllocationExpression { }
Rule 183   PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers }
Rule 184   PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations }
Rule 185   ClassAllocationExpression -> NEW TypeName ( ArgumentList )
Rule 186   ClassAllocationExpression -> NEW TypeName ( )
Rule 187   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 188   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 189   ArrayAllocationExpression -> NEW TypeName Dims
Rule 190   DimExprs -> DimExpr
Rule 191   DimExprs -> DimExprs DimExpr
Rule 192   DimExpr -> [ Expression ]
Rule 193   Dims -> OP_DIM
Rule 194   Dims -> Dims OP_DIM
Rule 195   OP_DIM -> [ ]
Rule 196   PostfixExpression -> PrimaryExpression
Rule 197   PostfixExpression -> RealPostfixExpression
Rule 198   RealPostfixExpression -> PostfixExpression OPT_INC_DEC
Rule 199   UnaryExpression -> OPT_INC_DEC UnaryExpression
Rule 200   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 201   UnaryExpression -> LogicalUnaryExpression
Rule 202   LogicalUnaryExpression -> PostfixExpression
Rule 203   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 204   LogicalUnaryOperator -> ~
Rule 205   LogicalUnaryOperator -> !
Rule 206   ArithmeticUnaryOperator -> +
Rule 207   ArithmeticUnaryOperator -> -
Rule 208   CastExpression -> UnaryExpression
Rule 209   MultiplicativeExpression -> CastExpression
Rule 210   MultiplicativeExpression -> MultiplicativeExpression * CastExpression
Rule 211   MultiplicativeExpression -> MultiplicativeExpression / CastExpression
Rule 212   MultiplicativeExpression -> MultiplicativeExpression % CastExpression
Rule 213   AdditiveExpression -> MultiplicativeExpression
Rule 214   AdditiveExpression -> AdditiveExpression + MultiplicativeExpression
Rule 215   AdditiveExpression -> AdditiveExpression - MultiplicativeExpression
Rule 216   ShiftExpression -> AdditiveExpression
Rule 217   ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression
Rule 218   RelationalExpression -> ShiftExpression
Rule 219   RelationalExpression -> RelationalExpression < ShiftExpression
Rule 220   RelationalExpression -> RelationalExpression > ShiftExpression
Rule 221   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 222   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 223   EqualityExpression -> RelationalExpression
Rule 224   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 225   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 226   AndExpression -> EqualityExpression
Rule 227   AndExpression -> AndExpression & EqualityExpression
Rule 228   ExclusiveOrExpression -> AndExpression
Rule 229   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 230   InclusiveOrExpression -> ExclusiveOrExpression
Rule 231   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 232   ConditionalAndExpression -> InclusiveOrExpression
Rule 233   ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
Rule 234   ConditionalOrExpression -> ConditionalAndExpression
Rule 235   ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
Rule 236   M_OP -> <empty>
Rule 237   ConditionalExpression -> ConditionalOrExpression
Rule 238   ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
Rule 239   Mark -> <empty>
Rule 240   AssignmentExpression -> ConditionalExpression
Rule 241   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 242   AssignmentOperator -> =
Rule 243   AssignmentOperator -> OPT_EQ
Rule 244   Expression -> AssignmentExpression
Rule 245   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

!                    : 205
%                    : 212
&                    : 227
(                    : 67 68 81 82 110 111 112 116 117 118 138 139 151 167 168 185 186
)                    : 67 68 81 82 110 111 112 116 117 118 138 139 151 167 168 185 186
*                    : 31 210
+                    : 206 214
,                    : 7 58 63 64 70 86 127 176
-                    : 207 215
.                    : 31 33 162 163 164 165 166 178
/                    : 211
:                    : 105 106 107 238
;                    : 17 18 49 76 95 98 104 117 119 121 122 123 128 129 130 131 132 133 134
<                    : 219
=                    : 60 242
>                    : 220
?                    : 238
ABSTRACT             : 
ASSERT               : 
BOOL                 : 159
BOOLEAN              : 8
BREAK                : 128 129
BYTE                 : 10
CASE                 : 106
CATCH                : 138 139
CHAR                 : 9
CHAR_LITERAL         : 157
CLASS                : 43 165 166
COMMENT              : 
CONST                : 
CONTINUE             : 130 131
DEFAULT              : 107
DO                   : 117
DOUBLE               : 15
ELSE                 : 111
ENUM                 : 
EXTENDS              : 85
FINAL                : 
FINALLY              : 
FLOAT                : 14
FLOAT_LITERAL        : 156
FOR                  : 118
GOTO                 : 
IDENTIFIER           : 32 33 36 37 72 81 82 105 128 130 138 162 163
IF                   : 110 111
IGNORE_WHITESPACE    : 
IMPLEMENTS           : 
IMPORT               : 30 31
INSTANCEOF           : 
INT                  : 12
INTERFACE            : 44
INT_LITERAL          : 155
LONG                 : 13
NATIVE               : 
NEW                  : 185 186 187 188 189
NULL                 : 174
OPT_EQ               : 243
OPT_INC_DEC          : 198 199
OPT_SOME             : 217
OP_EQ                : 224
OP_GE                : 222
OP_LAND              : 233
OP_LE                : 221
OP_LOR               : 235
OP_NE                : 225
PACKAGE              : 23
PRIVATE              : 41
PROTECTED            : 
PUBLIC               : 40
RETURN               : 132 133
SHORT                : 11
STATIC               : 42 83
STRICTFP             : 
STRING_LITERAL       : 158
SUPER                : 173
SWITCH               : 112
SYNCHRONIZED         : 
THIS                 : 164 172
THROW                : 134
THROWS               : 
TRANSIENT            : 
TRY                  : 
VOID                 : 16
VOLATILE             : 
WHILE                : 116 117
[                    : 160 161 192 195
]                    : 160 161 192 195
^                    : 229
error                : 
{                    : 34 35 74 75 77 78 79 80 89 181 182 183 184
|                    : 231
}                    : 74 75 77 78 79 80 90 181 182 183 184
~                    : 204

Nonterminals, with rules where they appear

AdditiveExpression   : 214 215 216 217
AndExpression        : 227 228 229
ArgumentList         : 167 176 185
ArithmeticUnaryOperator : 200
ArrayAccess          : 152
ArrayAllocationExpression : 179 181 183
ArrayInitializers    : 63 64 183
AssignmentExpression : 241 244
AssignmentOperator   : 241
Block                : 83 84 102 112 137
Bool_LIT             : 150
CastExpression       : 200 209 210 211 212
Catch                : 135 136
CatchHeader          : 137
Catches              : 136
Char_LIT             : 148
ClassAllocationExpression : 180 182 184
ClassHeader          : 34 35
ClassNameList        : 7
ClassWord            : 36 37
CompilationUnit      : 0
ComplexPrimary       : 144 161
ComplexPrimaryNoParenthesis : 145 169
ConditionalAndExpression : 233 234 235
ConditionalExpression : 238 240 245
ConditionalOrExpression : 235 237 238
ConstantExpression   : 106
ConstructorDeclaration : 51
ConstructorDeclarator : 77 78 79 80
DeclaratorName       : 59 60 67 68 71 73
DimExpr              : 190 191
DimExprs             : 187 188 191
Dims                 : 3 187 189 194
EmptyStatement       : 96
EqualityExpression   : 224 225 226 227
ExclusiveOrExpression : 229 230 231
Expression           : 61 109 110 111 112 116 117 122 132 134 151 160 161 175 176 192 238
ExpressionStatement  : 98 126 127
ExpressionStatements : 119 124 127
Extends              : 86
FieldAccess          : 153
FieldDeclaration     : 47 48
FieldDeclarationOptSemi : 45 46
FieldDeclarations    : 34 46 184
FieldVariableDeclaration : 49
Float_LIT            : 147
ForExpr              : 118
ForIncr              : 118
ForInit              : 118
ImportStatement      : 28 29
ImportStatements     : 19 21 29
InclusiveOrExpression : 231 232 233
Integer_LIT          : 146
IterationStatement   : 100
JumpStatement        : 101
LabelStatement       : 97
LocalVariableDeclarationOrStatement : 91 92
LocalVariableDeclarationStatement : 93 120
LocalVariableDeclarationsAndStatements : 74 77 79 87 92
LogicalUnaryExpression : 201
LogicalUnaryOperator : 203
Lparen               : 87 88
M_OP                 : 233 235
M_instr              : 95 96 97 98 99 100 101 102 118 118 118 238 238 238
M_instr_branch       : 110 111 111 116 116 117 117
Mark                 : 238
Mark_switch          : 112
Marker_case          : 106
MethodAccess         : 167 168
MethodBody           : 65 66
MethodCall           : 154
MethodDeclaration    : 50
MethodDeclarator     : 65 66
Modifier             : 38 39
Modifiers            : 36 39 55 65 77 78
MultiplicativeExpression : 210 211 212 213 214 215
N_instr              : 111
NewAllocationExpression : 143
NonStaticInitializer : 53
NotJustName          : 141 162
OP_DIM               : 73 193 194
PackageStatement     : 19 20
Parameter            : 69 70
ParameterList        : 67 70 81
PlainNewAllocationExpression : 177 178
PostfixExpression    : 198 202
PrimaryExpression    : 196
PrimitiveType        : 4 166
ProgramFile          : 1
QualifiedName        : 5 6 7 23 30 31 33 140 160 164 165 171 178
RealPostfixExpression : 163 197
RelationalExpression : 219 220 221 222 223 224 225
Rparen               : 34 35 87 88
SelectionStatement   : 99
SemiColons           : 18 23 27 30 31 48
ShiftExpression      : 217 218 219 220 221 222
SpecialName          : 142 170
Statement            : 94 110 111 111 116 117 118
StaticInitializer    : 52
String_LIT           : 149
TypeDeclaration      : 26 27 54
TypeDeclarationOptSemi : 24 25
TypeDeclarations     : 19 20 21 22 25
TypeName             : 2 3 85 86 185 186 187 188 189
TypeSpecifier        : 55 56 65 66 71 95 138 139
UnaryExpression      : 199 203 208 241
VariableDeclarator   : 57 58
VariableDeclarators  : 55 56 58 95
VariableInitializer  : 60 62 63

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (19) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (20) ProgramFile -> . PackageStatement TypeDeclarations
    (21) ProgramFile -> . ImportStatements TypeDeclarations
    (22) ProgramFile -> . TypeDeclarations
    (23) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    PACKAGE         shift and go to state 9
    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 15
    TypeDeclarations               shift and go to state 16
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    PackageStatement               shift and go to state 10
    CompilationUnit                shift and go to state 13
    TypeDeclarationOptSemi         shift and go to state 7

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (26) TypeDeclarationOptSemi -> TypeDeclaration .
    (27) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    CLASS           reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    INTERFACE       reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 21

state 3

    (42) Modifier -> STATIC .

    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)


state 4

    (41) Modifier -> PRIVATE .

    CLASS           reduce using rule 41 (Modifier -> PRIVATE .)
    INTERFACE       reduce using rule 41 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 41 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 41 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 41 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 41 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 41 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 41 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 41 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 41 (Modifier -> PRIVATE .)
    INT             reduce using rule 41 (Modifier -> PRIVATE .)
    LONG            reduce using rule 41 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 41 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 41 (Modifier -> PRIVATE .)
    VOID            reduce using rule 41 (Modifier -> PRIVATE .)


state 5

    (30) ImportStatement -> IMPORT . QualifiedName SemiColons
    (31) ImportStatement -> IMPORT . QualifiedName . * SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 22

state 6

    (43) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 43 (ClassWord -> CLASS .)


state 7

    (24) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 8

    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (39) Modifiers -> Modifiers . Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 24
    Modifier                       shift and go to state 25

state 9

    (23) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 26

state 10

    (19) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (20) ProgramFile -> PackageStatement . TypeDeclarations
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 27
    TypeDeclarations               shift and go to state 28
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 11

    (28) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 28 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 28 (ImportStatements -> ImportStatement .)
    INTERFACE       reduce using rule 28 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 28 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 28 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 28 (ImportStatements -> ImportStatement .)


state 12

    (38) Modifiers -> Modifier .

    CLASS           reduce using rule 38 (Modifiers -> Modifier .)
    INTERFACE       reduce using rule 38 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 38 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 38 (Modifiers -> Modifier .)
    STATIC          reduce using rule 38 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 38 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 38 (Modifiers -> Modifier .)
    CHAR            reduce using rule 38 (Modifiers -> Modifier .)
    BYTE            reduce using rule 38 (Modifiers -> Modifier .)
    SHORT           reduce using rule 38 (Modifiers -> Modifier .)
    INT             reduce using rule 38 (Modifiers -> Modifier .)
    LONG            reduce using rule 38 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 38 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 38 (Modifiers -> Modifier .)
    VOID            reduce using rule 38 (Modifiers -> Modifier .)


state 13

    (0) S' -> CompilationUnit .



state 14

    (37) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 29


state 15

    (21) ProgramFile -> ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 31
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 7

state 16

    (22) ProgramFile -> TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 22 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 17

    (34) TypeDeclaration -> ClassHeader . { FieldDeclarations Rparen
    (35) TypeDeclaration -> ClassHeader . { Rparen

    {               shift and go to state 33


state 18

    (44) ClassWord -> INTERFACE .

    IDENTIFIER      reduce using rule 44 (ClassWord -> INTERFACE .)


state 19

    (40) Modifier -> PUBLIC .

    CLASS           reduce using rule 40 (Modifier -> PUBLIC .)
    INTERFACE       reduce using rule 40 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 40 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 40 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 40 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 40 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 40 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 40 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 40 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 40 (Modifier -> PUBLIC .)
    INT             reduce using rule 40 (Modifier -> PUBLIC .)
    LONG            reduce using rule 40 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 40 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 40 (Modifier -> PUBLIC .)
    VOID            reduce using rule 40 (Modifier -> PUBLIC .)


state 20

    (17) SemiColons -> ; .

    ;               reduce using rule 17 (SemiColons -> ; .)
    IMPORT          reduce using rule 17 (SemiColons -> ; .)
    CLASS           reduce using rule 17 (SemiColons -> ; .)
    INTERFACE       reduce using rule 17 (SemiColons -> ; .)
    PUBLIC          reduce using rule 17 (SemiColons -> ; .)
    PRIVATE         reduce using rule 17 (SemiColons -> ; .)
    STATIC          reduce using rule 17 (SemiColons -> ; .)
    }               reduce using rule 17 (SemiColons -> ; .)
    IDENTIFIER      reduce using rule 17 (SemiColons -> ; .)
    {               reduce using rule 17 (SemiColons -> ; .)
    BOOLEAN         reduce using rule 17 (SemiColons -> ; .)
    CHAR            reduce using rule 17 (SemiColons -> ; .)
    BYTE            reduce using rule 17 (SemiColons -> ; .)
    SHORT           reduce using rule 17 (SemiColons -> ; .)
    INT             reduce using rule 17 (SemiColons -> ; .)
    LONG            reduce using rule 17 (SemiColons -> ; .)
    FLOAT           reduce using rule 17 (SemiColons -> ; .)
    DOUBLE          reduce using rule 17 (SemiColons -> ; .)
    VOID            reduce using rule 17 (SemiColons -> ; .)
    $end            reduce using rule 17 (SemiColons -> ; .)


state 21

    (27) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    CLASS           reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    INTERFACE       reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    ;               shift and go to state 34


state 22

    (30) ImportStatement -> IMPORT QualifiedName . SemiColons
    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 35
    ;               shift and go to state 20

    SemiColons                     shift and go to state 36

state 23

    (32) QualifiedName -> IDENTIFIER .

    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    )               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ,               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    :               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    }               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ]               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 24

    (36) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 25

    (39) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INTERFACE       reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 39 (Modifiers -> Modifiers Modifier .)


state 26

    (23) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 38
    ;               shift and go to state 20

    SemiColons                     shift and go to state 39

state 27

    (19) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 40
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 28

    (20) ProgramFile -> PackageStatement TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 20 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 29

    (37) ClassHeader -> ClassWord IDENTIFIER .

    {               reduce using rule 37 (ClassHeader -> ClassWord IDENTIFIER .)


state 30

    (29) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    INTERFACE       reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)


state 31

    (21) ProgramFile -> ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 21 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 32

    (25) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 33

    (34) TypeDeclaration -> ClassHeader { . FieldDeclarations Rparen
    (35) TypeDeclaration -> ClassHeader { . Rparen
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (90) Rparen -> . }
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (78) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { }
    (79) ConstructorDeclaration -> . ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (80) ConstructorDeclaration -> . ConstructorDeclarator { }
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (89) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 71
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 70
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    Rparen                         shift and go to state 59
    FieldDeclarations              shift and go to state 60
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 62
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 34

    (18) SemiColons -> SemiColons ; .

    ;               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IMPORT          reduce using rule 18 (SemiColons -> SemiColons ; .)
    CLASS           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INTERFACE       reduce using rule 18 (SemiColons -> SemiColons ; .)
    PUBLIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    PRIVATE         reduce using rule 18 (SemiColons -> SemiColons ; .)
    STATIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    }               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SemiColons ; .)
    {               reduce using rule 18 (SemiColons -> SemiColons ; .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SemiColons ; .)
    CHAR            reduce using rule 18 (SemiColons -> SemiColons ; .)
    BYTE            reduce using rule 18 (SemiColons -> SemiColons ; .)
    SHORT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INT             reduce using rule 18 (SemiColons -> SemiColons ; .)
    LONG            reduce using rule 18 (SemiColons -> SemiColons ; .)
    FLOAT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    DOUBLE          reduce using rule 18 (SemiColons -> SemiColons ; .)
    VOID            reduce using rule 18 (SemiColons -> SemiColons ; .)
    $end            reduce using rule 18 (SemiColons -> SemiColons ; .)


state 35

    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    *               shift and go to state 72
    IDENTIFIER      shift and go to state 73


state 36

    (30) ImportStatement -> IMPORT QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    INTERFACE       reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    ;               shift and go to state 34


state 37

    (36) ClassHeader -> Modifiers ClassWord IDENTIFIER .

    {               reduce using rule 36 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)


state 38

    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    IDENTIFIER      shift and go to state 73


state 39

    (23) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    INTERFACE       reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    ;               shift and go to state 34


state 40

    (19) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 19 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 41

    (11) PrimitiveType -> SHORT .

    (               reduce using rule 11 (PrimitiveType -> SHORT .)
    [               reduce using rule 11 (PrimitiveType -> SHORT .)
    .               reduce using rule 11 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> SHORT .)


state 42

    (51) FieldDeclaration -> ConstructorDeclaration .

    ;               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    }               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    {               reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INTERFACE       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)


state 43

    (49) FieldDeclaration -> FieldVariableDeclaration . ;

    ;               shift and go to state 74


state 44

    (16) PrimitiveType -> VOID .

    (               reduce using rule 16 (PrimitiveType -> VOID .)
    [               reduce using rule 16 (PrimitiveType -> VOID .)
    .               reduce using rule 16 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> VOID .)


state 45

    (54) FieldDeclaration -> TypeDeclaration .

    ;               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    }               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    {               reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INTERFACE       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)


state 46

    (4) TypeName -> PrimitiveType .

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    (               reduce using rule 4 (TypeName -> PrimitiveType .)


state 47

    (52) FieldDeclaration -> StaticInitializer .

    ;               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    }               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    {               reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INTERFACE       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)


state 48

    (83) StaticInitializer -> STATIC . Block
    (42) Modifier -> STATIC .
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (89) Lparen -> . {

    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)
    {               shift and go to state 70

    Lparen                         shift and go to state 54
    Block                          shift and go to state 75

state 49

    (13) PrimitiveType -> LONG .

    (               reduce using rule 13 (PrimitiveType -> LONG .)
    [               reduce using rule 13 (PrimitiveType -> LONG .)
    .               reduce using rule 13 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> LONG .)


state 50

    (53) FieldDeclaration -> NonStaticInitializer .

    ;               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    }               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    {               reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INTERFACE       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)


state 51

    (56) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (66) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (67) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (68) MethodDeclarator -> . DeclaratorName ( )
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    VariableDeclarators            shift and go to state 76
    DeclaratorName                 shift and go to state 77
    MethodDeclarator               shift and go to state 78
    VariableDeclarator             shift and go to state 80

state 52

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    [               reduce using rule 5 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    (               reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 38


state 53

    (2) TypeSpecifier -> TypeName .
    (3) TypeSpecifier -> TypeName . Dims
    (193) Dims -> . OP_DIM
    (194) Dims -> . Dims OP_DIM
    (195) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 2 (TypeSpecifier -> TypeName .)
    [               shift and go to state 81

    OP_DIM                         shift and go to state 82
    Dims                           shift and go to state 83

state 54

    (87) Block -> Lparen . LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> Lparen . Rparen
    (91) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (92) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (90) Rparen -> . }
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 71
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    LocalVariableDeclarationsAndStatements shift and go to state 154
    Rparen                         shift and go to state 109
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 120
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 55

    (81) ConstructorDeclarator -> IDENTIFIER . ( ParameterList )
    (82) ConstructorDeclarator -> IDENTIFIER . ( )
    (32) QualifiedName -> IDENTIFIER .

    (               shift and go to state 165
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 56

    (50) FieldDeclaration -> MethodDeclaration .

    ;               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    }               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    {               reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INTERFACE       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)


state 57

    (9) PrimitiveType -> CHAR .

    (               reduce using rule 9 (PrimitiveType -> CHAR .)
    [               reduce using rule 9 (PrimitiveType -> CHAR .)
    .               reduce using rule 9 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> CHAR .)


state 58

    (55) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> Modifiers . ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (78) ConstructorDeclaration -> Modifiers . ConstructorDeclarator { }
    (39) Modifiers -> Modifiers . Modifier
    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    QualifiedName                  shift and go to state 52
    ConstructorDeclarator          shift and go to state 167
    PrimitiveType                  shift and go to state 46
    ClassWord                      shift and go to state 24
    TypeName                       shift and go to state 53
    Modifier                       shift and go to state 25
    TypeSpecifier                  shift and go to state 166

state 59

    (35) TypeDeclaration -> ClassHeader { Rparen .

    ;               reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    CLASS           reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    INTERFACE       reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    PUBLIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    PRIVATE         reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    STATIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    $end            reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    }               reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    IDENTIFIER      reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    {               reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    BOOLEAN         reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    CHAR            reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    BYTE            reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    SHORT           reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    INT             reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    LONG            reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    FLOAT           reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    DOUBLE          reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)
    VOID            reduce using rule 35 (TypeDeclaration -> ClassHeader { Rparen .)


state 60

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations . Rparen
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (90) Rparen -> . }
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (78) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { }
    (79) ConstructorDeclaration -> . ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (80) ConstructorDeclaration -> . ConstructorDeclarator { }
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (89) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 71
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 70
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    Rparen                         shift and go to state 168
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 169
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 61

    (84) NonStaticInitializer -> Block .

    ;               reduce using rule 84 (NonStaticInitializer -> Block .)
    }               reduce using rule 84 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 84 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 84 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 84 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 84 (NonStaticInitializer -> Block .)
    {               reduce using rule 84 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 84 (NonStaticInitializer -> Block .)
    INTERFACE       reduce using rule 84 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 84 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 84 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 84 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 84 (NonStaticInitializer -> Block .)
    INT             reduce using rule 84 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 84 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 84 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 84 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 84 (NonStaticInitializer -> Block .)


state 62

    (45) FieldDeclarations -> FieldDeclarationOptSemi .

    }               reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    {               reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 63

    (79) ConstructorDeclaration -> ConstructorDeclarator . { LocalVariableDeclarationsAndStatements }
    (80) ConstructorDeclaration -> ConstructorDeclarator . { }

    {               shift and go to state 170


state 64

    (12) PrimitiveType -> INT .

    (               reduce using rule 12 (PrimitiveType -> INT .)
    [               reduce using rule 12 (PrimitiveType -> INT .)
    .               reduce using rule 12 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> INT .)


state 65

    (15) PrimitiveType -> DOUBLE .

    (               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    [               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    .               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> DOUBLE .)


state 66

    (14) PrimitiveType -> FLOAT .

    (               reduce using rule 14 (PrimitiveType -> FLOAT .)
    [               reduce using rule 14 (PrimitiveType -> FLOAT .)
    .               reduce using rule 14 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> FLOAT .)


state 67

    (8) PrimitiveType -> BOOLEAN .

    (               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    [               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    .               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 8 (PrimitiveType -> BOOLEAN .)


state 68

    (10) PrimitiveType -> BYTE .

    (               reduce using rule 10 (PrimitiveType -> BYTE .)
    [               reduce using rule 10 (PrimitiveType -> BYTE .)
    .               reduce using rule 10 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> BYTE .)


state 69

    (47) FieldDeclarationOptSemi -> FieldDeclaration .
    (48) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    }               reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    {               reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INTERFACE       reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 171

state 70

    (89) Lparen -> { .

    }               reduce using rule 89 (Lparen -> { .)
    ;               reduce using rule 89 (Lparen -> { .)
    IDENTIFIER      reduce using rule 89 (Lparen -> { .)
    DEFAULT         reduce using rule 89 (Lparen -> { .)
    IF              reduce using rule 89 (Lparen -> { .)
    SWITCH          reduce using rule 89 (Lparen -> { .)
    WHILE           reduce using rule 89 (Lparen -> { .)
    DO              reduce using rule 89 (Lparen -> { .)
    FOR             reduce using rule 89 (Lparen -> { .)
    BREAK           reduce using rule 89 (Lparen -> { .)
    CONTINUE        reduce using rule 89 (Lparen -> { .)
    RETURN          reduce using rule 89 (Lparen -> { .)
    THROW           reduce using rule 89 (Lparen -> { .)
    {               reduce using rule 89 (Lparen -> { .)
    BOOLEAN         reduce using rule 89 (Lparen -> { .)
    CHAR            reduce using rule 89 (Lparen -> { .)
    BYTE            reduce using rule 89 (Lparen -> { .)
    SHORT           reduce using rule 89 (Lparen -> { .)
    INT             reduce using rule 89 (Lparen -> { .)
    LONG            reduce using rule 89 (Lparen -> { .)
    FLOAT           reduce using rule 89 (Lparen -> { .)
    DOUBLE          reduce using rule 89 (Lparen -> { .)
    VOID            reduce using rule 89 (Lparen -> { .)
    OPT_INC_DEC     reduce using rule 89 (Lparen -> { .)
    +               reduce using rule 89 (Lparen -> { .)
    -               reduce using rule 89 (Lparen -> { .)
    ~               reduce using rule 89 (Lparen -> { .)
    !               reduce using rule 89 (Lparen -> { .)
    THIS            reduce using rule 89 (Lparen -> { .)
    SUPER           reduce using rule 89 (Lparen -> { .)
    NULL            reduce using rule 89 (Lparen -> { .)
    (               reduce using rule 89 (Lparen -> { .)
    INT_LITERAL     reduce using rule 89 (Lparen -> { .)
    FLOAT_LITERAL   reduce using rule 89 (Lparen -> { .)
    CHAR_LITERAL    reduce using rule 89 (Lparen -> { .)
    STRING_LITERAL  reduce using rule 89 (Lparen -> { .)
    BOOL            reduce using rule 89 (Lparen -> { .)
    NEW             reduce using rule 89 (Lparen -> { .)
    CASE            reduce using rule 89 (Lparen -> { .)


state 71

    (90) Rparen -> } .

    ;               reduce using rule 90 (Rparen -> } .)
    CLASS           reduce using rule 90 (Rparen -> } .)
    INTERFACE       reduce using rule 90 (Rparen -> } .)
    PUBLIC          reduce using rule 90 (Rparen -> } .)
    PRIVATE         reduce using rule 90 (Rparen -> } .)
    STATIC          reduce using rule 90 (Rparen -> } .)
    $end            reduce using rule 90 (Rparen -> } .)
    }               reduce using rule 90 (Rparen -> } .)
    IDENTIFIER      reduce using rule 90 (Rparen -> } .)
    {               reduce using rule 90 (Rparen -> } .)
    BOOLEAN         reduce using rule 90 (Rparen -> } .)
    CHAR            reduce using rule 90 (Rparen -> } .)
    BYTE            reduce using rule 90 (Rparen -> } .)
    SHORT           reduce using rule 90 (Rparen -> } .)
    INT             reduce using rule 90 (Rparen -> } .)
    LONG            reduce using rule 90 (Rparen -> } .)
    FLOAT           reduce using rule 90 (Rparen -> } .)
    DOUBLE          reduce using rule 90 (Rparen -> } .)
    VOID            reduce using rule 90 (Rparen -> } .)
    DEFAULT         reduce using rule 90 (Rparen -> } .)
    IF              reduce using rule 90 (Rparen -> } .)
    SWITCH          reduce using rule 90 (Rparen -> } .)
    WHILE           reduce using rule 90 (Rparen -> } .)
    DO              reduce using rule 90 (Rparen -> } .)
    FOR             reduce using rule 90 (Rparen -> } .)
    BREAK           reduce using rule 90 (Rparen -> } .)
    CONTINUE        reduce using rule 90 (Rparen -> } .)
    RETURN          reduce using rule 90 (Rparen -> } .)
    THROW           reduce using rule 90 (Rparen -> } .)
    OPT_INC_DEC     reduce using rule 90 (Rparen -> } .)
    +               reduce using rule 90 (Rparen -> } .)
    -               reduce using rule 90 (Rparen -> } .)
    ~               reduce using rule 90 (Rparen -> } .)
    !               reduce using rule 90 (Rparen -> } .)
    THIS            reduce using rule 90 (Rparen -> } .)
    SUPER           reduce using rule 90 (Rparen -> } .)
    NULL            reduce using rule 90 (Rparen -> } .)
    (               reduce using rule 90 (Rparen -> } .)
    INT_LITERAL     reduce using rule 90 (Rparen -> } .)
    FLOAT_LITERAL   reduce using rule 90 (Rparen -> } .)
    CHAR_LITERAL    reduce using rule 90 (Rparen -> } .)
    STRING_LITERAL  reduce using rule 90 (Rparen -> } .)
    BOOL            reduce using rule 90 (Rparen -> } .)
    NEW             reduce using rule 90 (Rparen -> } .)
    CASE            reduce using rule 90 (Rparen -> } .)
    ELSE            reduce using rule 90 (Rparen -> } .)


state 72

    (31) ImportStatement -> IMPORT QualifiedName . * . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    ;               shift and go to state 20

    SemiColons                     shift and go to state 172

state 73

    (33) QualifiedName -> QualifiedName . IDENTIFIER .

    .               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    [               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    *               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    /               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    %               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    +               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    -               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_SOME        reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    <               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    >               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ?               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ;               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    )               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ,               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    :               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    }               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ]               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    (               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    =               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_EQ          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)


state 74

    (49) FieldDeclaration -> FieldVariableDeclaration ; .

    ;               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    }               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    STATIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    IDENTIFIER      reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PUBLIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PRIVATE         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    {               reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CLASS           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INTERFACE       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BOOLEAN         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CHAR            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BYTE            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    SHORT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INT             reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    LONG            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    FLOAT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    DOUBLE          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)
    VOID            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration ; .)


state 75

    (83) StaticInitializer -> STATIC Block .

    ;               reduce using rule 83 (StaticInitializer -> STATIC Block .)
    }               reduce using rule 83 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 83 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 83 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 83 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 83 (StaticInitializer -> STATIC Block .)
    {               reduce using rule 83 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 83 (StaticInitializer -> STATIC Block .)
    INTERFACE       reduce using rule 83 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 83 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 83 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 83 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 83 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 83 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 83 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 83 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 83 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 83 (StaticInitializer -> STATIC Block .)


state 76

    (56) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 56 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 173


state 77

    (67) MethodDeclarator -> DeclaratorName . ( ParameterList )
    (68) MethodDeclarator -> DeclaratorName . ( )
    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (195) OP_DIM -> . [ ]

    (               shift and go to state 174
    ,               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    ;               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 175
    [               shift and go to state 81

    OP_DIM                         shift and go to state 176

state 78

    (66) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (74) MethodBody -> . { LocalVariableDeclarationsAndStatements }
    (75) MethodBody -> . { }
    (76) MethodBody -> . ;

    {               shift and go to state 179
    ;               shift and go to state 178

    MethodBody                     shift and go to state 177

state 79

    (72) DeclaratorName -> IDENTIFIER .

    =               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    [               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    ;               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    ,               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    (               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)
    )               reduce using rule 72 (DeclaratorName -> IDENTIFIER .)


state 80

    (57) VariableDeclarators -> VariableDeclarator .

    ,               reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)
    ;               reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)


state 81

    (195) OP_DIM -> [ . ]

    ]               shift and go to state 180


state 82

    (193) Dims -> OP_DIM .

    [               reduce using rule 193 (Dims -> OP_DIM .)
    {               reduce using rule 193 (Dims -> OP_DIM .)
    .               reduce using rule 193 (Dims -> OP_DIM .)
    OPT_INC_DEC     reduce using rule 193 (Dims -> OP_DIM .)
    =               reduce using rule 193 (Dims -> OP_DIM .)
    OPT_EQ          reduce using rule 193 (Dims -> OP_DIM .)
    *               reduce using rule 193 (Dims -> OP_DIM .)
    /               reduce using rule 193 (Dims -> OP_DIM .)
    %               reduce using rule 193 (Dims -> OP_DIM .)
    +               reduce using rule 193 (Dims -> OP_DIM .)
    -               reduce using rule 193 (Dims -> OP_DIM .)
    OPT_SOME        reduce using rule 193 (Dims -> OP_DIM .)
    <               reduce using rule 193 (Dims -> OP_DIM .)
    >               reduce using rule 193 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 193 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 193 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 193 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 193 (Dims -> OP_DIM .)
    &               reduce using rule 193 (Dims -> OP_DIM .)
    ^               reduce using rule 193 (Dims -> OP_DIM .)
    |               reduce using rule 193 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 193 (Dims -> OP_DIM .)
    ?               reduce using rule 193 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 193 (Dims -> OP_DIM .)
    ;               reduce using rule 193 (Dims -> OP_DIM .)
    )               reduce using rule 193 (Dims -> OP_DIM .)
    ,               reduce using rule 193 (Dims -> OP_DIM .)
    :               reduce using rule 193 (Dims -> OP_DIM .)
    }               reduce using rule 193 (Dims -> OP_DIM .)
    ]               reduce using rule 193 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 193 (Dims -> OP_DIM .)


state 83

    (3) TypeSpecifier -> TypeName Dims .
    (194) Dims -> Dims . OP_DIM
    (195) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    [               shift and go to state 81

    OP_DIM                         shift and go to state 181

state 84

    (150) ComplexPrimary -> Bool_LIT .

    [               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    .               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OPT_INC_DEC     reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    *               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    /               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    %               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    +               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    -               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OPT_SOME        reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    <               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    >               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OP_LE           reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OP_GE           reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OP_EQ           reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OP_NE           reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    &               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    ^               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    |               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OP_LAND         reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    ?               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OP_LOR          reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    ;               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    )               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    ,               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    :               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    }               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    ]               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    =               reduce using rule 150 (ComplexPrimary -> Bool_LIT .)
    OPT_EQ          reduce using rule 150 (ComplexPrimary -> Bool_LIT .)


state 85

    (98) Statement -> ExpressionStatement . ; M_instr

    ;               shift and go to state 182


state 86

    (4) TypeName -> PrimitiveType .
    (166) FieldAccess -> PrimitiveType . . CLASS

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    .               shift and go to state 183


state 87

    (94) LocalVariableDeclarationOrStatement -> Statement .

    }               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    ;               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    SWITCH          reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    CONTINUE        reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    THROW           reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    {               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    OPT_INC_DEC     reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    +               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    -               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    !               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    (               reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    INT_LITERAL     reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT_LITERAL   reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR_LITERAL    reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    STRING_LITERAL  reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOL            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 94 (LocalVariableDeclarationOrStatement -> Statement .)


state 88

    (228) ExclusiveOrExpression -> AndExpression .
    (227) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    ?               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    ,               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    )               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    ;               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    :               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    }               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    ]               reduce using rule 228 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 184


state 89

    (151) ComplexPrimary -> ( . Expression )
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 186
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 90

    (146) ComplexPrimary -> Integer_LIT .

    [               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    .               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OPT_INC_DEC     reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    *               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    /               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    %               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    +               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    -               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OPT_SOME        reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    <               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    >               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OP_LE           reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OP_GE           reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OP_EQ           reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OP_NE           reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    &               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    ^               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    |               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OP_LAND         reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    ?               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OP_LOR          reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    ;               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    )               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    ,               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    :               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    }               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    ]               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    =               reduce using rule 146 (ComplexPrimary -> Integer_LIT .)
    OPT_EQ          reduce using rule 146 (ComplexPrimary -> Integer_LIT .)


state 91

    (105) LabelStatement -> IDENTIFIER . :
    (32) QualifiedName -> IDENTIFIER .

    :               shift and go to state 188
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 92

    (106) LabelStatement -> Marker_case . CASE ConstantExpression :

    CASE            shift and go to state 189


state 93

    (172) SpecialName -> THIS .

    .               reduce using rule 172 (SpecialName -> THIS .)
    OPT_INC_DEC     reduce using rule 172 (SpecialName -> THIS .)
    *               reduce using rule 172 (SpecialName -> THIS .)
    /               reduce using rule 172 (SpecialName -> THIS .)
    %               reduce using rule 172 (SpecialName -> THIS .)
    +               reduce using rule 172 (SpecialName -> THIS .)
    -               reduce using rule 172 (SpecialName -> THIS .)
    OPT_SOME        reduce using rule 172 (SpecialName -> THIS .)
    <               reduce using rule 172 (SpecialName -> THIS .)
    >               reduce using rule 172 (SpecialName -> THIS .)
    OP_LE           reduce using rule 172 (SpecialName -> THIS .)
    OP_GE           reduce using rule 172 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 172 (SpecialName -> THIS .)
    OP_NE           reduce using rule 172 (SpecialName -> THIS .)
    &               reduce using rule 172 (SpecialName -> THIS .)
    ^               reduce using rule 172 (SpecialName -> THIS .)
    |               reduce using rule 172 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 172 (SpecialName -> THIS .)
    ?               reduce using rule 172 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 172 (SpecialName -> THIS .)
    ;               reduce using rule 172 (SpecialName -> THIS .)
    )               reduce using rule 172 (SpecialName -> THIS .)
    ,               reduce using rule 172 (SpecialName -> THIS .)
    :               reduce using rule 172 (SpecialName -> THIS .)
    }               reduce using rule 172 (SpecialName -> THIS .)
    ]               reduce using rule 172 (SpecialName -> THIS .)
    (               reduce using rule 172 (SpecialName -> THIS .)
    =               reduce using rule 172 (SpecialName -> THIS .)
    OPT_EQ          reduce using rule 172 (SpecialName -> THIS .)


state 94

    (157) Char_LIT -> CHAR_LITERAL .

    [               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    .               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OPT_INC_DEC     reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    *               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    /               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    %               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    +               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    -               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OPT_SOME        reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    <               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    >               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OP_LE           reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OP_GE           reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OP_EQ           reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OP_NE           reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    &               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    ^               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    |               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OP_LAND         reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    ?               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OP_LOR          reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    ;               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    )               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    ,               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    :               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    }               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    ]               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    =               reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)
    OPT_EQ          reduce using rule 157 (Char_LIT -> CHAR_LITERAL .)


state 95

    (234) ConditionalOrExpression -> ConditionalAndExpression .
    (233) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND M_OP InclusiveOrExpression

    ?               reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LOR          reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    )               reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    ;               reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    ,               reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    }               reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    :               reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    ]               reduce using rule 234 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 190


state 96

    (96) Statement -> EmptyStatement . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)
    ELSE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 191

state 97

    (97) Statement -> LabelStatement . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)
    ELSE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 192

state 98

    (132) JumpStatement -> RETURN . Expression ;
    (133) JumpStatement -> RETURN . ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 193
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 194
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 99

    (197) PostfixExpression -> RealPostfixExpression .
    (163) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    *               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    /               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    %               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    +               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    -               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OPT_SOME        reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    <               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    >               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    ?               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    ;               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    )               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    ,               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    :               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    }               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    ]               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    =               reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    OPT_EQ          reduce using rule 197 (PostfixExpression -> RealPostfixExpression .)
    .               shift and go to state 195


state 100

    (200) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 196
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 101

    (226) AndExpression -> EqualityExpression .
    (224) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (225) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 226 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 226 (AndExpression -> EqualityExpression .)
    |               reduce using rule 226 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 226 (AndExpression -> EqualityExpression .)
    ?               reduce using rule 226 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 226 (AndExpression -> EqualityExpression .)
    ;               reduce using rule 226 (AndExpression -> EqualityExpression .)
    :               reduce using rule 226 (AndExpression -> EqualityExpression .)
    )               reduce using rule 226 (AndExpression -> EqualityExpression .)
    ,               reduce using rule 226 (AndExpression -> EqualityExpression .)
    }               reduce using rule 226 (AndExpression -> EqualityExpression .)
    ]               reduce using rule 226 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 199
    OP_NE           shift and go to state 198


state 102

    (145) ComplexPrimary -> ComplexPrimaryNoParenthesis .
    (169) MethodAccess -> ComplexPrimaryNoParenthesis .

    [               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    .               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_INC_DEC     reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    *               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    /               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    %               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    +               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    -               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_SOME        reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    <               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    >               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ?               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ;               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    )               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ,               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    :               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    }               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ]               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    =               reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_EQ          reduce using rule 145 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    (               reduce using rule 169 (MethodAccess -> ComplexPrimaryNoParenthesis .)


state 103

    (213) AdditiveExpression -> MultiplicativeExpression .
    (210) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (211) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (212) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    -               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    OPT_SOME        reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    <               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    >               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    ?               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    ;               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    )               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    ,               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    :               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    }               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    ]               reduce using rule 213 (AdditiveExpression -> MultiplicativeExpression .)
    *               shift and go to state 200
    /               shift and go to state 202
    %               shift and go to state 201


state 104

    (206) ArithmeticUnaryOperator -> + .

    OPT_INC_DEC     reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    +               reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    -               reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    ~               reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    !               reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    IDENTIFIER      reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    THIS            reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    SUPER           reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    NULL            reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    (               reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    INT_LITERAL     reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    FLOAT_LITERAL   reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    CHAR_LITERAL    reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    STRING_LITERAL  reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    BOOL            reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    NEW             reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    BOOLEAN         reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    CHAR            reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    BYTE            reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    SHORT           reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    INT             reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    LONG            reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    FLOAT           reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    DOUBLE          reduce using rule 206 (ArithmeticUnaryOperator -> + .)
    VOID            reduce using rule 206 (ArithmeticUnaryOperator -> + .)


state 105

    (154) ComplexPrimaryNoParenthesis -> MethodCall .

    [               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    .               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_INC_DEC     reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    =               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_EQ          reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    *               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    /               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    %               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    +               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    -               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_SOME        reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    <               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    >               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ?               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ;               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    (               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    )               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ,               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    :               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    }               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ]               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 106

    (104) EmptyStatement -> ; .

    }               reduce using rule 104 (EmptyStatement -> ; .)
    ;               reduce using rule 104 (EmptyStatement -> ; .)
    IDENTIFIER      reduce using rule 104 (EmptyStatement -> ; .)
    DEFAULT         reduce using rule 104 (EmptyStatement -> ; .)
    IF              reduce using rule 104 (EmptyStatement -> ; .)
    SWITCH          reduce using rule 104 (EmptyStatement -> ; .)
    WHILE           reduce using rule 104 (EmptyStatement -> ; .)
    DO              reduce using rule 104 (EmptyStatement -> ; .)
    FOR             reduce using rule 104 (EmptyStatement -> ; .)
    BREAK           reduce using rule 104 (EmptyStatement -> ; .)
    CONTINUE        reduce using rule 104 (EmptyStatement -> ; .)
    RETURN          reduce using rule 104 (EmptyStatement -> ; .)
    THROW           reduce using rule 104 (EmptyStatement -> ; .)
    {               reduce using rule 104 (EmptyStatement -> ; .)
    BOOLEAN         reduce using rule 104 (EmptyStatement -> ; .)
    CHAR            reduce using rule 104 (EmptyStatement -> ; .)
    BYTE            reduce using rule 104 (EmptyStatement -> ; .)
    SHORT           reduce using rule 104 (EmptyStatement -> ; .)
    INT             reduce using rule 104 (EmptyStatement -> ; .)
    LONG            reduce using rule 104 (EmptyStatement -> ; .)
    FLOAT           reduce using rule 104 (EmptyStatement -> ; .)
    DOUBLE          reduce using rule 104 (EmptyStatement -> ; .)
    VOID            reduce using rule 104 (EmptyStatement -> ; .)
    OPT_INC_DEC     reduce using rule 104 (EmptyStatement -> ; .)
    +               reduce using rule 104 (EmptyStatement -> ; .)
    -               reduce using rule 104 (EmptyStatement -> ; .)
    ~               reduce using rule 104 (EmptyStatement -> ; .)
    !               reduce using rule 104 (EmptyStatement -> ; .)
    THIS            reduce using rule 104 (EmptyStatement -> ; .)
    SUPER           reduce using rule 104 (EmptyStatement -> ; .)
    NULL            reduce using rule 104 (EmptyStatement -> ; .)
    (               reduce using rule 104 (EmptyStatement -> ; .)
    INT_LITERAL     reduce using rule 104 (EmptyStatement -> ; .)
    FLOAT_LITERAL   reduce using rule 104 (EmptyStatement -> ; .)
    CHAR_LITERAL    reduce using rule 104 (EmptyStatement -> ; .)
    STRING_LITERAL  reduce using rule 104 (EmptyStatement -> ; .)
    BOOL            reduce using rule 104 (EmptyStatement -> ; .)
    NEW             reduce using rule 104 (EmptyStatement -> ; .)
    CASE            reduce using rule 104 (EmptyStatement -> ; .)
    ELSE            reduce using rule 104 (EmptyStatement -> ; .)


state 107

    (99) Statement -> SelectionStatement . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)
    ELSE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 203

state 108

    (244) Expression -> AssignmentExpression .

    ;               reduce using rule 244 (Expression -> AssignmentExpression .)
    ,               reduce using rule 244 (Expression -> AssignmentExpression .)
    )               reduce using rule 244 (Expression -> AssignmentExpression .)
    ]               reduce using rule 244 (Expression -> AssignmentExpression .)
    :               reduce using rule 244 (Expression -> AssignmentExpression .)
    }               reduce using rule 244 (Expression -> AssignmentExpression .)


state 109

    (88) Block -> Lparen Rparen .

    ;               reduce using rule 88 (Block -> Lparen Rparen .)
    }               reduce using rule 88 (Block -> Lparen Rparen .)
    STATIC          reduce using rule 88 (Block -> Lparen Rparen .)
    IDENTIFIER      reduce using rule 88 (Block -> Lparen Rparen .)
    PUBLIC          reduce using rule 88 (Block -> Lparen Rparen .)
    PRIVATE         reduce using rule 88 (Block -> Lparen Rparen .)
    {               reduce using rule 88 (Block -> Lparen Rparen .)
    CLASS           reduce using rule 88 (Block -> Lparen Rparen .)
    INTERFACE       reduce using rule 88 (Block -> Lparen Rparen .)
    BOOLEAN         reduce using rule 88 (Block -> Lparen Rparen .)
    CHAR            reduce using rule 88 (Block -> Lparen Rparen .)
    BYTE            reduce using rule 88 (Block -> Lparen Rparen .)
    SHORT           reduce using rule 88 (Block -> Lparen Rparen .)
    INT             reduce using rule 88 (Block -> Lparen Rparen .)
    LONG            reduce using rule 88 (Block -> Lparen Rparen .)
    FLOAT           reduce using rule 88 (Block -> Lparen Rparen .)
    DOUBLE          reduce using rule 88 (Block -> Lparen Rparen .)
    VOID            reduce using rule 88 (Block -> Lparen Rparen .)
    DEFAULT         reduce using rule 88 (Block -> Lparen Rparen .)
    IF              reduce using rule 88 (Block -> Lparen Rparen .)
    SWITCH          reduce using rule 88 (Block -> Lparen Rparen .)
    WHILE           reduce using rule 88 (Block -> Lparen Rparen .)
    DO              reduce using rule 88 (Block -> Lparen Rparen .)
    FOR             reduce using rule 88 (Block -> Lparen Rparen .)
    BREAK           reduce using rule 88 (Block -> Lparen Rparen .)
    CONTINUE        reduce using rule 88 (Block -> Lparen Rparen .)
    RETURN          reduce using rule 88 (Block -> Lparen Rparen .)
    THROW           reduce using rule 88 (Block -> Lparen Rparen .)
    OPT_INC_DEC     reduce using rule 88 (Block -> Lparen Rparen .)
    +               reduce using rule 88 (Block -> Lparen Rparen .)
    -               reduce using rule 88 (Block -> Lparen Rparen .)
    ~               reduce using rule 88 (Block -> Lparen Rparen .)
    !               reduce using rule 88 (Block -> Lparen Rparen .)
    THIS            reduce using rule 88 (Block -> Lparen Rparen .)
    SUPER           reduce using rule 88 (Block -> Lparen Rparen .)
    NULL            reduce using rule 88 (Block -> Lparen Rparen .)
    (               reduce using rule 88 (Block -> Lparen Rparen .)
    INT_LITERAL     reduce using rule 88 (Block -> Lparen Rparen .)
    FLOAT_LITERAL   reduce using rule 88 (Block -> Lparen Rparen .)
    CHAR_LITERAL    reduce using rule 88 (Block -> Lparen Rparen .)
    STRING_LITERAL  reduce using rule 88 (Block -> Lparen Rparen .)
    BOOL            reduce using rule 88 (Block -> Lparen Rparen .)
    NEW             reduce using rule 88 (Block -> Lparen Rparen .)
    CASE            reduce using rule 88 (Block -> Lparen Rparen .)
    ELSE            reduce using rule 88 (Block -> Lparen Rparen .)


state 110

    (118) IterationStatement -> FOR . ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement

    (               shift and go to state 204


state 111

    (199) UnaryExpression -> OPT_INC_DEC . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 205
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 112

    (152) ComplexPrimaryNoParenthesis -> ArrayAccess .

    [               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    .               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_INC_DEC     reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    =               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_EQ          reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    *               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    /               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    %               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    +               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    -               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_SOME        reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    <               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    >               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ?               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ;               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    (               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    )               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ,               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    :               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    }               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ]               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 113

    (102) Statement -> Block . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)
    ELSE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 206

state 114

    (179) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (181) PlainNewAllocationExpression -> ArrayAllocationExpression . { }
    (183) PlainNewAllocationExpression -> ArrayAllocationExpression . { ArrayInitializers }

    .               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_INC_DEC     reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    =               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_EQ          reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    *               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    /               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    %               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    +               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    -               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_SOME        reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    <               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    >               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ?               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    :               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ;               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    )               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ,               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    }               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ]               reduce using rule 179 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    {               shift and go to state 207


state 115

    (167) MethodCall -> MethodAccess . ( ArgumentList )
    (168) MethodCall -> MethodAccess . ( )

    (               shift and go to state 208


state 116

    (230) InclusiveOrExpression -> ExclusiveOrExpression .
    (229) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ?               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ;               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    )               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ,               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    :               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    }               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ]               reduce using rule 230 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 209


state 117

    (223) EqualityExpression -> RelationalExpression .
    (219) RelationalExpression -> RelationalExpression . < ShiftExpression
    (220) RelationalExpression -> RelationalExpression . > ShiftExpression
    (221) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (222) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    ?               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    ;               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    )               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    ,               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    }               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    :               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    ]               reduce using rule 223 (EqualityExpression -> RelationalExpression .)
    <               shift and go to state 210
    >               shift and go to state 213
    OP_LE           shift and go to state 211
    OP_GE           shift and go to state 212


state 118

    (177) NewAllocationExpression -> PlainNewAllocationExpression .

    .               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    =               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    *               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    /               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    %               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    +               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    -               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    <               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    >               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ?               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ;               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    )               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ,               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    :               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    }               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ]               reduce using rule 177 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 119

    (130) JumpStatement -> CONTINUE . IDENTIFIER ;
    (131) JumpStatement -> CONTINUE . ;

    IDENTIFIER      shift and go to state 214
    ;               shift and go to state 215


state 120

    (91) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    }               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    {               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    +               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    -               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    !               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    (               reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 91 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 121

    (142) NotJustName -> SpecialName .
    (170) MethodAccess -> SpecialName .

    .               reduce using rule 142 (NotJustName -> SpecialName .)
    OPT_INC_DEC     reduce using rule 142 (NotJustName -> SpecialName .)
    =               reduce using rule 142 (NotJustName -> SpecialName .)
    OPT_EQ          reduce using rule 142 (NotJustName -> SpecialName .)
    *               reduce using rule 142 (NotJustName -> SpecialName .)
    /               reduce using rule 142 (NotJustName -> SpecialName .)
    %               reduce using rule 142 (NotJustName -> SpecialName .)
    +               reduce using rule 142 (NotJustName -> SpecialName .)
    -               reduce using rule 142 (NotJustName -> SpecialName .)
    OPT_SOME        reduce using rule 142 (NotJustName -> SpecialName .)
    <               reduce using rule 142 (NotJustName -> SpecialName .)
    >               reduce using rule 142 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 142 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 142 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 142 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 142 (NotJustName -> SpecialName .)
    &               reduce using rule 142 (NotJustName -> SpecialName .)
    ^               reduce using rule 142 (NotJustName -> SpecialName .)
    |               reduce using rule 142 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 142 (NotJustName -> SpecialName .)
    ?               reduce using rule 142 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 142 (NotJustName -> SpecialName .)
    ;               reduce using rule 142 (NotJustName -> SpecialName .)
    )               reduce using rule 142 (NotJustName -> SpecialName .)
    ,               reduce using rule 142 (NotJustName -> SpecialName .)
    :               reduce using rule 142 (NotJustName -> SpecialName .)
    }               reduce using rule 142 (NotJustName -> SpecialName .)
    ]               reduce using rule 142 (NotJustName -> SpecialName .)
    (               reduce using rule 170 (MethodAccess -> SpecialName .)


state 122

    (144) NotJustName -> ComplexPrimary .
    (161) ArrayAccess -> ComplexPrimary . [ Expression ]

    .               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OPT_INC_DEC     reduce using rule 144 (NotJustName -> ComplexPrimary .)
    =               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OPT_EQ          reduce using rule 144 (NotJustName -> ComplexPrimary .)
    *               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    /               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    %               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    +               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    -               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OPT_SOME        reduce using rule 144 (NotJustName -> ComplexPrimary .)
    <               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    >               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ?               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ;               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    )               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ,               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    :               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    }               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ]               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    [               shift and go to state 216


state 123

    (202) LogicalUnaryExpression -> PostfixExpression .
    (198) RealPostfixExpression -> PostfixExpression . OPT_INC_DEC

    =               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_EQ          reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    *               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    /               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    %               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    +               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    -               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_SOME        reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    <               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    >               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    ?               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    }               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    ,               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    ;               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    )               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    :               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    ]               reduce using rule 202 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_INC_DEC     shift and go to state 217


state 124

    (180) PlainNewAllocationExpression -> ClassAllocationExpression .
    (182) PlainNewAllocationExpression -> ClassAllocationExpression . { }
    (184) PlainNewAllocationExpression -> ClassAllocationExpression . { FieldDeclarations }

    .               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_INC_DEC     reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    =               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_EQ          reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    *               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    /               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    %               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    +               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    -               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_SOME        reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    <               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    >               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ?               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    :               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ;               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    )               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ,               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    }               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ]               reduce using rule 180 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    {               shift and go to state 218


state 125

    (107) LabelStatement -> DEFAULT . :

    :               shift and go to state 219


state 126

    (101) Statement -> JumpStatement . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)
    ELSE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 220

state 127

    (116) IterationStatement -> WHILE . M_instr_branch ( Expression ) M_instr_branch Statement
    (115) M_instr_branch -> .

    (               reduce using rule 115 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 221

state 128

    (187) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (189) ArrayAllocationExpression -> NEW . TypeName Dims
    (185) ClassAllocationExpression -> NEW . TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> NEW . TypeName ( )
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 222

state 129

    (156) Float_LIT -> FLOAT_LITERAL .

    [               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    .               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OPT_INC_DEC     reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    =               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OPT_EQ          reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    *               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    /               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    %               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    +               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    -               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OPT_SOME        reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    <               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    >               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OP_LE           reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OP_GE           reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OP_EQ           reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OP_NE           reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    &               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    ^               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    |               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OP_LAND         reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    ?               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    OP_LOR          reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    ;               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    )               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    ,               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    :               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    }               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)
    ]               reduce using rule 156 (Float_LIT -> FLOAT_LITERAL .)


state 130

    (95) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators ; M_instr
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    VariableDeclarators            shift and go to state 223
    DeclaratorName                 shift and go to state 224
    VariableDeclarator             shift and go to state 80

state 131

    (196) PostfixExpression -> PrimaryExpression .

    OPT_INC_DEC     reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    *               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    /               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    %               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    +               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    -               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OPT_SOME        reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    <               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    >               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    ?               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    ;               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    )               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    ,               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    :               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    }               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    ]               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    =               reduce using rule 196 (PostfixExpression -> PrimaryExpression .)
    OPT_EQ          reduce using rule 196 (PostfixExpression -> PrimaryExpression .)


state 132

    (112) SelectionStatement -> SWITCH . ( Expression Mark_switch ) Block

    (               shift and go to state 225


state 133

    (237) ConditionalExpression -> ConditionalOrExpression .
    (238) ConditionalExpression -> ConditionalOrExpression . ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (235) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR M_OP ConditionalAndExpression

    ;               reduce using rule 237 (ConditionalExpression -> ConditionalOrExpression .)
    ,               reduce using rule 237 (ConditionalExpression -> ConditionalOrExpression .)
    )               reduce using rule 237 (ConditionalExpression -> ConditionalOrExpression .)
    }               reduce using rule 237 (ConditionalExpression -> ConditionalOrExpression .)
    :               reduce using rule 237 (ConditionalExpression -> ConditionalOrExpression .)
    ]               reduce using rule 237 (ConditionalExpression -> ConditionalOrExpression .)
    ?               shift and go to state 227
    OP_LOR          shift and go to state 226


state 134

    (143) NotJustName -> NewAllocationExpression .

    .               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    =               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OPT_EQ          reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    *               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    /               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    %               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    +               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    -               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OPT_SOME        reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    <               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    >               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ?               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ;               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    )               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ,               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    :               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    }               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ]               reduce using rule 143 (NotJustName -> NewAllocationExpression .)


state 135

    (109) ExpressionStatement -> Expression .

    ;               reduce using rule 109 (ExpressionStatement -> Expression .)
    ,               reduce using rule 109 (ExpressionStatement -> Expression .)
    )               reduce using rule 109 (ExpressionStatement -> Expression .)


state 136

    (216) ShiftExpression -> AdditiveExpression .
    (214) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (215) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    <               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    >               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    ?               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    ;               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    )               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    ,               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    :               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    }               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    ]               reduce using rule 216 (ShiftExpression -> AdditiveExpression .)
    +               shift and go to state 228
    -               shift and go to state 229


state 137

    (240) AssignmentExpression -> ConditionalExpression .

    }               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    ,               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    ;               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    ]               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    )               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    :               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)


state 138

    (241) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (208) CastExpression -> UnaryExpression .
    (242) AssignmentOperator -> . =
    (243) AssignmentOperator -> . OPT_EQ

    *               reduce using rule 208 (CastExpression -> UnaryExpression .)
    /               reduce using rule 208 (CastExpression -> UnaryExpression .)
    %               reduce using rule 208 (CastExpression -> UnaryExpression .)
    +               reduce using rule 208 (CastExpression -> UnaryExpression .)
    -               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 208 (CastExpression -> UnaryExpression .)
    <               reduce using rule 208 (CastExpression -> UnaryExpression .)
    >               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 208 (CastExpression -> UnaryExpression .)
    &               reduce using rule 208 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 208 (CastExpression -> UnaryExpression .)
    |               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 208 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 208 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 208 (CastExpression -> UnaryExpression .)
    )               reduce using rule 208 (CastExpression -> UnaryExpression .)
    }               reduce using rule 208 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 208 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 208 (CastExpression -> UnaryExpression .)
    :               reduce using rule 208 (CastExpression -> UnaryExpression .)
    =               shift and go to state 232
    OPT_EQ          shift and go to state 231

    AssignmentOperator             shift and go to state 230

state 139

    (232) ConditionalAndExpression -> InclusiveOrExpression .
    (231) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    ?               reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    ;               reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    )               reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    ,               reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    :               reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    }               reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    ]               reduce using rule 232 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 233


state 140

    (147) ComplexPrimary -> Float_LIT .

    [               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    .               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OPT_INC_DEC     reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    *               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    /               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    %               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    +               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    -               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OPT_SOME        reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    <               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    >               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OP_LE           reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OP_GE           reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OP_EQ           reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OP_NE           reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    &               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    ^               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    |               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OP_LAND         reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    ?               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OP_LOR          reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    ;               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    )               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    ,               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    :               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    }               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    ]               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    =               reduce using rule 147 (ComplexPrimary -> Float_LIT .)
    OPT_EQ          reduce using rule 147 (ComplexPrimary -> Float_LIT .)


state 141

    (128) JumpStatement -> BREAK . IDENTIFIER ;
    (129) JumpStatement -> BREAK . ;

    IDENTIFIER      shift and go to state 235
    ;               shift and go to state 234


state 142

    (159) Bool_LIT -> BOOL .

    [               reduce using rule 159 (Bool_LIT -> BOOL .)
    .               reduce using rule 159 (Bool_LIT -> BOOL .)
    OPT_INC_DEC     reduce using rule 159 (Bool_LIT -> BOOL .)
    *               reduce using rule 159 (Bool_LIT -> BOOL .)
    /               reduce using rule 159 (Bool_LIT -> BOOL .)
    %               reduce using rule 159 (Bool_LIT -> BOOL .)
    +               reduce using rule 159 (Bool_LIT -> BOOL .)
    -               reduce using rule 159 (Bool_LIT -> BOOL .)
    OPT_SOME        reduce using rule 159 (Bool_LIT -> BOOL .)
    <               reduce using rule 159 (Bool_LIT -> BOOL .)
    >               reduce using rule 159 (Bool_LIT -> BOOL .)
    OP_LE           reduce using rule 159 (Bool_LIT -> BOOL .)
    OP_GE           reduce using rule 159 (Bool_LIT -> BOOL .)
    OP_EQ           reduce using rule 159 (Bool_LIT -> BOOL .)
    OP_NE           reduce using rule 159 (Bool_LIT -> BOOL .)
    &               reduce using rule 159 (Bool_LIT -> BOOL .)
    ^               reduce using rule 159 (Bool_LIT -> BOOL .)
    |               reduce using rule 159 (Bool_LIT -> BOOL .)
    OP_LAND         reduce using rule 159 (Bool_LIT -> BOOL .)
    ?               reduce using rule 159 (Bool_LIT -> BOOL .)
    OP_LOR          reduce using rule 159 (Bool_LIT -> BOOL .)
    ;               reduce using rule 159 (Bool_LIT -> BOOL .)
    )               reduce using rule 159 (Bool_LIT -> BOOL .)
    ,               reduce using rule 159 (Bool_LIT -> BOOL .)
    :               reduce using rule 159 (Bool_LIT -> BOOL .)
    }               reduce using rule 159 (Bool_LIT -> BOOL .)
    ]               reduce using rule 159 (Bool_LIT -> BOOL .)
    =               reduce using rule 159 (Bool_LIT -> BOOL .)
    OPT_EQ          reduce using rule 159 (Bool_LIT -> BOOL .)


state 143

    (153) ComplexPrimaryNoParenthesis -> FieldAccess .

    [               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    .               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_INC_DEC     reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    =               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_EQ          reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    *               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    /               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    %               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    +               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    -               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_SOME        reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    <               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    >               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ?               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ;               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    (               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    )               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ,               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    :               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    }               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ]               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 144

    (155) Integer_LIT -> INT_LITERAL .

    [               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    .               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OPT_INC_DEC     reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    *               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    /               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    %               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    +               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    -               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OPT_SOME        reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    <               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    >               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OP_LE           reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OP_GE           reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OP_EQ           reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OP_NE           reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    &               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    ^               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    |               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OP_LAND         reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    ?               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OP_LOR          reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    ;               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    )               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    ,               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    :               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    }               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    ]               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    =               reduce using rule 155 (Integer_LIT -> INT_LITERAL .)
    OPT_EQ          reduce using rule 155 (Integer_LIT -> INT_LITERAL .)


state 145

    (204) LogicalUnaryOperator -> ~ .

    OPT_INC_DEC     reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    +               reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    -               reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    !               reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    (               reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    INT_LITERAL     reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    FLOAT_LITERAL   reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    CHAR_LITERAL    reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    STRING_LITERAL  reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    BOOL            reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 204 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 204 (LogicalUnaryOperator -> ~ .)


state 146

    (117) IterationStatement -> DO . M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (115) M_instr_branch -> .

    ;               reduce using rule 115 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 115 (M_instr_branch -> .)
    DEFAULT         reduce using rule 115 (M_instr_branch -> .)
    IF              reduce using rule 115 (M_instr_branch -> .)
    SWITCH          reduce using rule 115 (M_instr_branch -> .)
    WHILE           reduce using rule 115 (M_instr_branch -> .)
    DO              reduce using rule 115 (M_instr_branch -> .)
    FOR             reduce using rule 115 (M_instr_branch -> .)
    BREAK           reduce using rule 115 (M_instr_branch -> .)
    CONTINUE        reduce using rule 115 (M_instr_branch -> .)
    RETURN          reduce using rule 115 (M_instr_branch -> .)
    THROW           reduce using rule 115 (M_instr_branch -> .)
    {               reduce using rule 115 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 115 (M_instr_branch -> .)
    +               reduce using rule 115 (M_instr_branch -> .)
    -               reduce using rule 115 (M_instr_branch -> .)
    ~               reduce using rule 115 (M_instr_branch -> .)
    !               reduce using rule 115 (M_instr_branch -> .)
    THIS            reduce using rule 115 (M_instr_branch -> .)
    SUPER           reduce using rule 115 (M_instr_branch -> .)
    NULL            reduce using rule 115 (M_instr_branch -> .)
    (               reduce using rule 115 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 115 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 115 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 115 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 115 (M_instr_branch -> .)
    BOOL            reduce using rule 115 (M_instr_branch -> .)
    NEW             reduce using rule 115 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 115 (M_instr_branch -> .)
    CHAR            reduce using rule 115 (M_instr_branch -> .)
    BYTE            reduce using rule 115 (M_instr_branch -> .)
    SHORT           reduce using rule 115 (M_instr_branch -> .)
    INT             reduce using rule 115 (M_instr_branch -> .)
    LONG            reduce using rule 115 (M_instr_branch -> .)
    FLOAT           reduce using rule 115 (M_instr_branch -> .)
    DOUBLE          reduce using rule 115 (M_instr_branch -> .)
    VOID            reduce using rule 115 (M_instr_branch -> .)
    CASE            reduce using rule 115 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 236

state 147

    (209) MultiplicativeExpression -> CastExpression .

    *               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    /               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    %               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    +               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    -               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    OPT_SOME        reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    <               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    >               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    ?               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    ;               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    }               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    ,               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    )               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    :               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)
    ]               reduce using rule 209 (MultiplicativeExpression -> CastExpression .)


state 148

    (174) SpecialName -> NULL .

    .               reduce using rule 174 (SpecialName -> NULL .)
    OPT_INC_DEC     reduce using rule 174 (SpecialName -> NULL .)
    *               reduce using rule 174 (SpecialName -> NULL .)
    /               reduce using rule 174 (SpecialName -> NULL .)
    %               reduce using rule 174 (SpecialName -> NULL .)
    +               reduce using rule 174 (SpecialName -> NULL .)
    -               reduce using rule 174 (SpecialName -> NULL .)
    OPT_SOME        reduce using rule 174 (SpecialName -> NULL .)
    <               reduce using rule 174 (SpecialName -> NULL .)
    >               reduce using rule 174 (SpecialName -> NULL .)
    OP_LE           reduce using rule 174 (SpecialName -> NULL .)
    OP_GE           reduce using rule 174 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 174 (SpecialName -> NULL .)
    OP_NE           reduce using rule 174 (SpecialName -> NULL .)
    &               reduce using rule 174 (SpecialName -> NULL .)
    ^               reduce using rule 174 (SpecialName -> NULL .)
    |               reduce using rule 174 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 174 (SpecialName -> NULL .)
    ?               reduce using rule 174 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 174 (SpecialName -> NULL .)
    ;               reduce using rule 174 (SpecialName -> NULL .)
    )               reduce using rule 174 (SpecialName -> NULL .)
    ,               reduce using rule 174 (SpecialName -> NULL .)
    :               reduce using rule 174 (SpecialName -> NULL .)
    }               reduce using rule 174 (SpecialName -> NULL .)
    ]               reduce using rule 174 (SpecialName -> NULL .)
    (               reduce using rule 174 (SpecialName -> NULL .)
    =               reduce using rule 174 (SpecialName -> NULL .)
    OPT_EQ          reduce using rule 174 (SpecialName -> NULL .)


state 149

    (205) LogicalUnaryOperator -> ! .

    OPT_INC_DEC     reduce using rule 205 (LogicalUnaryOperator -> ! .)
    +               reduce using rule 205 (LogicalUnaryOperator -> ! .)
    -               reduce using rule 205 (LogicalUnaryOperator -> ! .)
    ~               reduce using rule 205 (LogicalUnaryOperator -> ! .)
    !               reduce using rule 205 (LogicalUnaryOperator -> ! .)
    IDENTIFIER      reduce using rule 205 (LogicalUnaryOperator -> ! .)
    THIS            reduce using rule 205 (LogicalUnaryOperator -> ! .)
    SUPER           reduce using rule 205 (LogicalUnaryOperator -> ! .)
    NULL            reduce using rule 205 (LogicalUnaryOperator -> ! .)
    (               reduce using rule 205 (LogicalUnaryOperator -> ! .)
    INT_LITERAL     reduce using rule 205 (LogicalUnaryOperator -> ! .)
    FLOAT_LITERAL   reduce using rule 205 (LogicalUnaryOperator -> ! .)
    CHAR_LITERAL    reduce using rule 205 (LogicalUnaryOperator -> ! .)
    STRING_LITERAL  reduce using rule 205 (LogicalUnaryOperator -> ! .)
    BOOL            reduce using rule 205 (LogicalUnaryOperator -> ! .)
    NEW             reduce using rule 205 (LogicalUnaryOperator -> ! .)
    BOOLEAN         reduce using rule 205 (LogicalUnaryOperator -> ! .)
    CHAR            reduce using rule 205 (LogicalUnaryOperator -> ! .)
    BYTE            reduce using rule 205 (LogicalUnaryOperator -> ! .)
    SHORT           reduce using rule 205 (LogicalUnaryOperator -> ! .)
    INT             reduce using rule 205 (LogicalUnaryOperator -> ! .)
    LONG            reduce using rule 205 (LogicalUnaryOperator -> ! .)
    FLOAT           reduce using rule 205 (LogicalUnaryOperator -> ! .)
    DOUBLE          reduce using rule 205 (LogicalUnaryOperator -> ! .)
    VOID            reduce using rule 205 (LogicalUnaryOperator -> ! .)


state 150

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (140) PrimaryExpression -> QualifiedName .
    (178) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (160) ArrayAccess -> QualifiedName . [ Expression ]
    (164) FieldAccess -> QualifiedName . . THIS
    (165) FieldAccess -> QualifiedName . . CLASS
    (171) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for [ resolved as shift
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 237
    OPT_INC_DEC     reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    [               shift and go to state 238
    (               reduce using rule 171 (MethodAccess -> QualifiedName .)

  ! [               [ reduce using rule 5 (TypeName -> QualifiedName .) ]


state 151

    (207) ArithmeticUnaryOperator -> - .

    OPT_INC_DEC     reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    +               reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    -               reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    ~               reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    !               reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    IDENTIFIER      reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    THIS            reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    SUPER           reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    NULL            reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    (               reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    INT_LITERAL     reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    FLOAT_LITERAL   reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    CHAR_LITERAL    reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    STRING_LITERAL  reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    BOOL            reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    NEW             reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    BOOLEAN         reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    CHAR            reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    BYTE            reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    SHORT           reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    INT             reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    LONG            reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    FLOAT           reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    DOUBLE          reduce using rule 207 (ArithmeticUnaryOperator -> - .)
    VOID            reduce using rule 207 (ArithmeticUnaryOperator -> - .)


state 152

    (93) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    }               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ;               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THROW           reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    {               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    +               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    -               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    !               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    (               reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 93 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 153

    (218) RelationalExpression -> ShiftExpression .
    (217) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    >               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    ?               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    ;               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    }               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    ,               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    )               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    :               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    ]               reduce using rule 218 (RelationalExpression -> ShiftExpression .)
    OPT_SOME        shift and go to state 239


state 154

    (87) Block -> Lparen LocalVariableDeclarationsAndStatements . Rparen
    (92) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (90) Rparen -> . }
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 71
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    Rparen                         shift and go to state 240
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 241
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 155

    (141) PrimaryExpression -> NotJustName .
    (162) FieldAccess -> NotJustName . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 141 (PrimaryExpression -> NotJustName .)
    =               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OPT_EQ          reduce using rule 141 (PrimaryExpression -> NotJustName .)
    *               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    /               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    %               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    +               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    -               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OPT_SOME        reduce using rule 141 (PrimaryExpression -> NotJustName .)
    <               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    >               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ?               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ;               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    :               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    )               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ,               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    }               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ]               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    .               shift and go to state 242


state 156

    (203) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 243
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 157

    (148) ComplexPrimary -> Char_LIT .

    [               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    .               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OPT_INC_DEC     reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    *               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    /               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    %               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    +               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    -               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OPT_SOME        reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    <               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    >               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OP_LE           reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OP_GE           reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OP_EQ           reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OP_NE           reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    &               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    ^               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    |               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OP_LAND         reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    ?               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OP_LOR          reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    ;               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    )               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    ,               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    :               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    }               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    ]               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    =               reduce using rule 148 (ComplexPrimary -> Char_LIT .)
    OPT_EQ          reduce using rule 148 (ComplexPrimary -> Char_LIT .)


state 158

    (201) UnaryExpression -> LogicalUnaryExpression .

    =               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_EQ          reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    *               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    /               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    %               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    +               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    -               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_SOME        reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    <               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    >               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    ?               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    ;               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    )               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    ,               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    :               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    }               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)
    ]               reduce using rule 201 (UnaryExpression -> LogicalUnaryExpression .)


state 159

    (149) ComplexPrimary -> String_LIT .

    [               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    .               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OPT_INC_DEC     reduce using rule 149 (ComplexPrimary -> String_LIT .)
    *               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    /               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    %               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    +               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    -               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OPT_SOME        reduce using rule 149 (ComplexPrimary -> String_LIT .)
    <               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    >               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OP_LE           reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OP_GE           reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OP_EQ           reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OP_NE           reduce using rule 149 (ComplexPrimary -> String_LIT .)
    &               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    ^               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    |               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OP_LAND         reduce using rule 149 (ComplexPrimary -> String_LIT .)
    ?               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OP_LOR          reduce using rule 149 (ComplexPrimary -> String_LIT .)
    ;               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    )               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    ,               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    :               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    }               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    ]               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    =               reduce using rule 149 (ComplexPrimary -> String_LIT .)
    OPT_EQ          reduce using rule 149 (ComplexPrimary -> String_LIT .)


state 160

    (110) SelectionStatement -> IF . ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> IF . ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement

    (               shift and go to state 244


state 161

    (158) String_LIT -> STRING_LITERAL .

    [               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    .               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OPT_INC_DEC     reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    *               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    /               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    %               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    +               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    -               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OPT_SOME        reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    <               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    >               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OP_LE           reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OP_GE           reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OP_EQ           reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OP_NE           reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    &               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    ^               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    |               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OP_LAND         reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    ?               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OP_LOR          reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    ;               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    )               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    ,               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    :               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    }               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    ]               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    =               reduce using rule 158 (String_LIT -> STRING_LITERAL .)
    OPT_EQ          reduce using rule 158 (String_LIT -> STRING_LITERAL .)


state 162

    (173) SpecialName -> SUPER .

    .               reduce using rule 173 (SpecialName -> SUPER .)
    OPT_INC_DEC     reduce using rule 173 (SpecialName -> SUPER .)
    *               reduce using rule 173 (SpecialName -> SUPER .)
    /               reduce using rule 173 (SpecialName -> SUPER .)
    %               reduce using rule 173 (SpecialName -> SUPER .)
    +               reduce using rule 173 (SpecialName -> SUPER .)
    -               reduce using rule 173 (SpecialName -> SUPER .)
    OPT_SOME        reduce using rule 173 (SpecialName -> SUPER .)
    <               reduce using rule 173 (SpecialName -> SUPER .)
    >               reduce using rule 173 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 173 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 173 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 173 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 173 (SpecialName -> SUPER .)
    &               reduce using rule 173 (SpecialName -> SUPER .)
    ^               reduce using rule 173 (SpecialName -> SUPER .)
    |               reduce using rule 173 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 173 (SpecialName -> SUPER .)
    ?               reduce using rule 173 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 173 (SpecialName -> SUPER .)
    ;               reduce using rule 173 (SpecialName -> SUPER .)
    )               reduce using rule 173 (SpecialName -> SUPER .)
    ,               reduce using rule 173 (SpecialName -> SUPER .)
    :               reduce using rule 173 (SpecialName -> SUPER .)
    }               reduce using rule 173 (SpecialName -> SUPER .)
    ]               reduce using rule 173 (SpecialName -> SUPER .)
    (               reduce using rule 173 (SpecialName -> SUPER .)
    =               reduce using rule 173 (SpecialName -> SUPER .)
    OPT_EQ          reduce using rule 173 (SpecialName -> SUPER .)


state 163

    (134) JumpStatement -> THROW . Expression ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 245
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 164

    (100) Statement -> IterationStatement . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)
    ELSE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 246

state 165

    (81) ConstructorDeclarator -> IDENTIFIER ( . ParameterList )
    (82) ConstructorDeclarator -> IDENTIFIER ( . )
    (69) ParameterList -> . Parameter
    (70) ParameterList -> . ParameterList , Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 249
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 250
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 247
    TypeSpecifier                  shift and go to state 248

state 166

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (65) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (67) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (68) MethodDeclarator -> . DeclaratorName ( )
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    VariableDeclarators            shift and go to state 251
    DeclaratorName                 shift and go to state 77
    MethodDeclarator               shift and go to state 252
    VariableDeclarator             shift and go to state 80

state 167

    (77) ConstructorDeclaration -> Modifiers ConstructorDeclarator . { LocalVariableDeclarationsAndStatements }
    (78) ConstructorDeclaration -> Modifiers ConstructorDeclarator . { }

    {               shift and go to state 253


state 168

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .

    ;               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    CLASS           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    INTERFACE       reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    PUBLIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    PRIVATE         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    STATIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    $end            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    }               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    IDENTIFIER      reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    {               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    BOOLEAN         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    CHAR            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    BYTE            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    SHORT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    INT             reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    LONG            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    FLOAT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    DOUBLE          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)
    VOID            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations Rparen .)


state 169

    (46) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    }               reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    {               reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 170

    (79) ConstructorDeclaration -> ConstructorDeclarator { . LocalVariableDeclarationsAndStatements }
    (80) ConstructorDeclaration -> ConstructorDeclarator { . }
    (91) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (92) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 255
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    MethodAccess                   shift and go to state 115
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    LocalVariableDeclarationsAndStatements shift and go to state 254
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 120
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    UnaryExpression                shift and go to state 138
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 171

    (48) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    }               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    {               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INTERFACE       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    ;               shift and go to state 34


state 172

    (31) ImportStatement -> IMPORT QualifiedName . * SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    CLASS           reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    INTERFACE       reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PUBLIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PRIVATE         reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    STATIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    ;               shift and go to state 34


state 173

    (58) VariableDeclarators -> VariableDeclarators , . VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    DeclaratorName                 shift and go to state 224
    VariableDeclarator             shift and go to state 256

state 174

    (67) MethodDeclarator -> DeclaratorName ( . ParameterList )
    (68) MethodDeclarator -> DeclaratorName ( . )
    (69) ParameterList -> . Parameter
    (70) ParameterList -> . ParameterList , Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 257
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 258
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 247
    TypeSpecifier                  shift and go to state 248

state 175

    (60) VariableDeclarator -> DeclaratorName = . VariableInitializer
    (61) VariableInitializer -> . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    VariableInitializer            shift and go to state 259
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 260
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 176

    (73) DeclaratorName -> DeclaratorName OP_DIM .

    =               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    [               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    ;               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    ,               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    (               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)
    )               reduce using rule 73 (DeclaratorName -> DeclaratorName OP_DIM .)


state 177

    (66) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 66 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 178

    (76) MethodBody -> ; .

    ;               reduce using rule 76 (MethodBody -> ; .)
    }               reduce using rule 76 (MethodBody -> ; .)
    STATIC          reduce using rule 76 (MethodBody -> ; .)
    IDENTIFIER      reduce using rule 76 (MethodBody -> ; .)
    PUBLIC          reduce using rule 76 (MethodBody -> ; .)
    PRIVATE         reduce using rule 76 (MethodBody -> ; .)
    {               reduce using rule 76 (MethodBody -> ; .)
    CLASS           reduce using rule 76 (MethodBody -> ; .)
    INTERFACE       reduce using rule 76 (MethodBody -> ; .)
    BOOLEAN         reduce using rule 76 (MethodBody -> ; .)
    CHAR            reduce using rule 76 (MethodBody -> ; .)
    BYTE            reduce using rule 76 (MethodBody -> ; .)
    SHORT           reduce using rule 76 (MethodBody -> ; .)
    INT             reduce using rule 76 (MethodBody -> ; .)
    LONG            reduce using rule 76 (MethodBody -> ; .)
    FLOAT           reduce using rule 76 (MethodBody -> ; .)
    DOUBLE          reduce using rule 76 (MethodBody -> ; .)
    VOID            reduce using rule 76 (MethodBody -> ; .)


state 179

    (74) MethodBody -> { . LocalVariableDeclarationsAndStatements }
    (75) MethodBody -> { . }
    (91) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (92) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 262
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    LocalVariableDeclarationsAndStatements shift and go to state 261
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 120
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 180

    (195) OP_DIM -> [ ] .

    [               reduce using rule 195 (OP_DIM -> [ ] .)
    {               reduce using rule 195 (OP_DIM -> [ ] .)
    .               reduce using rule 195 (OP_DIM -> [ ] .)
    OPT_INC_DEC     reduce using rule 195 (OP_DIM -> [ ] .)
    =               reduce using rule 195 (OP_DIM -> [ ] .)
    OPT_EQ          reduce using rule 195 (OP_DIM -> [ ] .)
    *               reduce using rule 195 (OP_DIM -> [ ] .)
    /               reduce using rule 195 (OP_DIM -> [ ] .)
    %               reduce using rule 195 (OP_DIM -> [ ] .)
    +               reduce using rule 195 (OP_DIM -> [ ] .)
    -               reduce using rule 195 (OP_DIM -> [ ] .)
    OPT_SOME        reduce using rule 195 (OP_DIM -> [ ] .)
    <               reduce using rule 195 (OP_DIM -> [ ] .)
    >               reduce using rule 195 (OP_DIM -> [ ] .)
    OP_LE           reduce using rule 195 (OP_DIM -> [ ] .)
    OP_GE           reduce using rule 195 (OP_DIM -> [ ] .)
    OP_EQ           reduce using rule 195 (OP_DIM -> [ ] .)
    OP_NE           reduce using rule 195 (OP_DIM -> [ ] .)
    &               reduce using rule 195 (OP_DIM -> [ ] .)
    ^               reduce using rule 195 (OP_DIM -> [ ] .)
    |               reduce using rule 195 (OP_DIM -> [ ] .)
    OP_LAND         reduce using rule 195 (OP_DIM -> [ ] .)
    ?               reduce using rule 195 (OP_DIM -> [ ] .)
    OP_LOR          reduce using rule 195 (OP_DIM -> [ ] .)
    ;               reduce using rule 195 (OP_DIM -> [ ] .)
    )               reduce using rule 195 (OP_DIM -> [ ] .)
    ,               reduce using rule 195 (OP_DIM -> [ ] .)
    :               reduce using rule 195 (OP_DIM -> [ ] .)
    }               reduce using rule 195 (OP_DIM -> [ ] .)
    ]               reduce using rule 195 (OP_DIM -> [ ] .)
    (               reduce using rule 195 (OP_DIM -> [ ] .)
    IDENTIFIER      reduce using rule 195 (OP_DIM -> [ ] .)


state 181

    (194) Dims -> Dims OP_DIM .

    [               reduce using rule 194 (Dims -> Dims OP_DIM .)
    {               reduce using rule 194 (Dims -> Dims OP_DIM .)
    .               reduce using rule 194 (Dims -> Dims OP_DIM .)
    OPT_INC_DEC     reduce using rule 194 (Dims -> Dims OP_DIM .)
    =               reduce using rule 194 (Dims -> Dims OP_DIM .)
    OPT_EQ          reduce using rule 194 (Dims -> Dims OP_DIM .)
    *               reduce using rule 194 (Dims -> Dims OP_DIM .)
    /               reduce using rule 194 (Dims -> Dims OP_DIM .)
    %               reduce using rule 194 (Dims -> Dims OP_DIM .)
    +               reduce using rule 194 (Dims -> Dims OP_DIM .)
    -               reduce using rule 194 (Dims -> Dims OP_DIM .)
    OPT_SOME        reduce using rule 194 (Dims -> Dims OP_DIM .)
    <               reduce using rule 194 (Dims -> Dims OP_DIM .)
    >               reduce using rule 194 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 194 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 194 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 194 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 194 (Dims -> Dims OP_DIM .)
    &               reduce using rule 194 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 194 (Dims -> Dims OP_DIM .)
    |               reduce using rule 194 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 194 (Dims -> Dims OP_DIM .)
    ?               reduce using rule 194 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 194 (Dims -> Dims OP_DIM .)
    ;               reduce using rule 194 (Dims -> Dims OP_DIM .)
    )               reduce using rule 194 (Dims -> Dims OP_DIM .)
    ,               reduce using rule 194 (Dims -> Dims OP_DIM .)
    :               reduce using rule 194 (Dims -> Dims OP_DIM .)
    }               reduce using rule 194 (Dims -> Dims OP_DIM .)
    ]               reduce using rule 194 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 194 (Dims -> Dims OP_DIM .)


state 182

    (98) Statement -> ExpressionStatement ; . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)
    ELSE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 263

state 183

    (166) FieldAccess -> PrimitiveType . . CLASS

    CLASS           shift and go to state 264


state 184

    (227) AndExpression -> AndExpression & . EqualityExpression
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 122
    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    EqualityExpression             shift and go to state 265
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 185

    (166) FieldAccess -> PrimitiveType . . CLASS

    .               shift and go to state 183


state 186

    (151) ComplexPrimary -> ( Expression . )

    )               shift and go to state 266


state 187

    (140) PrimaryExpression -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (178) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (160) ArrayAccess -> QualifiedName . [ Expression ]
    (164) FieldAccess -> QualifiedName . . THIS
    (165) FieldAccess -> QualifiedName . . CLASS
    (171) MethodAccess -> QualifiedName .

    OPT_INC_DEC     reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    :               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    )               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    }               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ]               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    .               shift and go to state 237
    [               shift and go to state 238
    (               reduce using rule 171 (MethodAccess -> QualifiedName .)


state 188

    (105) LabelStatement -> IDENTIFIER : .

    }               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    ;               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    IDENTIFIER      reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    DEFAULT         reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    IF              reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    SWITCH          reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    WHILE           reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    DO              reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    FOR             reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    BREAK           reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    CONTINUE        reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    RETURN          reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    THROW           reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    {               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    BOOLEAN         reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    CHAR            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    BYTE            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    SHORT           reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    INT             reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    LONG            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    FLOAT           reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    DOUBLE          reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    VOID            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    OPT_INC_DEC     reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    +               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    -               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    ~               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    !               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    THIS            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    SUPER           reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    NULL            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    (               reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    INT_LITERAL     reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    FLOAT_LITERAL   reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    CHAR_LITERAL    reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    STRING_LITERAL  reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    BOOL            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    NEW             reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    CASE            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)
    ELSE            reduce using rule 105 (LabelStatement -> IDENTIFIER : .)


state 189

    (106) LabelStatement -> Marker_case CASE . ConstantExpression :
    (245) ConstantExpression -> . ConditionalExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    ConstantExpression             shift and go to state 268
    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 267
    UnaryExpression                shift and go to state 197
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    FieldAccess                    shift and go to state 143
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 190

    (233) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . M_OP InclusiveOrExpression
    (236) M_OP -> .

    OPT_INC_DEC     reduce using rule 236 (M_OP -> .)
    +               reduce using rule 236 (M_OP -> .)
    -               reduce using rule 236 (M_OP -> .)
    ~               reduce using rule 236 (M_OP -> .)
    !               reduce using rule 236 (M_OP -> .)
    IDENTIFIER      reduce using rule 236 (M_OP -> .)
    THIS            reduce using rule 236 (M_OP -> .)
    SUPER           reduce using rule 236 (M_OP -> .)
    NULL            reduce using rule 236 (M_OP -> .)
    (               reduce using rule 236 (M_OP -> .)
    INT_LITERAL     reduce using rule 236 (M_OP -> .)
    FLOAT_LITERAL   reduce using rule 236 (M_OP -> .)
    CHAR_LITERAL    reduce using rule 236 (M_OP -> .)
    STRING_LITERAL  reduce using rule 236 (M_OP -> .)
    BOOL            reduce using rule 236 (M_OP -> .)
    NEW             reduce using rule 236 (M_OP -> .)
    BOOLEAN         reduce using rule 236 (M_OP -> .)
    CHAR            reduce using rule 236 (M_OP -> .)
    BYTE            reduce using rule 236 (M_OP -> .)
    SHORT           reduce using rule 236 (M_OP -> .)
    INT             reduce using rule 236 (M_OP -> .)
    LONG            reduce using rule 236 (M_OP -> .)
    FLOAT           reduce using rule 236 (M_OP -> .)
    DOUBLE          reduce using rule 236 (M_OP -> .)
    VOID            reduce using rule 236 (M_OP -> .)

    M_OP                           shift and go to state 269

state 191

    (96) Statement -> EmptyStatement M_instr .

    ELSE            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    }               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    ;               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    IDENTIFIER      reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    DEFAULT         reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    IF              reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    SWITCH          reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    WHILE           reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    DO              reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    FOR             reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    BREAK           reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    CONTINUE        reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    RETURN          reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    THROW           reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    {               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    BOOLEAN         reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    CHAR            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    BYTE            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    SHORT           reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    INT             reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    LONG            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    FLOAT           reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    DOUBLE          reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    VOID            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    OPT_INC_DEC     reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    +               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    -               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    ~               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    !               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    THIS            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    SUPER           reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    NULL            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    (               reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    INT_LITERAL     reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    CHAR_LITERAL    reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    STRING_LITERAL  reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    BOOL            reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    NEW             reduce using rule 96 (Statement -> EmptyStatement M_instr .)
    CASE            reduce using rule 96 (Statement -> EmptyStatement M_instr .)


state 192

    (97) Statement -> LabelStatement M_instr .

    ELSE            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    }               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    ;               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    IDENTIFIER      reduce using rule 97 (Statement -> LabelStatement M_instr .)
    DEFAULT         reduce using rule 97 (Statement -> LabelStatement M_instr .)
    IF              reduce using rule 97 (Statement -> LabelStatement M_instr .)
    SWITCH          reduce using rule 97 (Statement -> LabelStatement M_instr .)
    WHILE           reduce using rule 97 (Statement -> LabelStatement M_instr .)
    DO              reduce using rule 97 (Statement -> LabelStatement M_instr .)
    FOR             reduce using rule 97 (Statement -> LabelStatement M_instr .)
    BREAK           reduce using rule 97 (Statement -> LabelStatement M_instr .)
    CONTINUE        reduce using rule 97 (Statement -> LabelStatement M_instr .)
    RETURN          reduce using rule 97 (Statement -> LabelStatement M_instr .)
    THROW           reduce using rule 97 (Statement -> LabelStatement M_instr .)
    {               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    BOOLEAN         reduce using rule 97 (Statement -> LabelStatement M_instr .)
    CHAR            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    BYTE            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    SHORT           reduce using rule 97 (Statement -> LabelStatement M_instr .)
    INT             reduce using rule 97 (Statement -> LabelStatement M_instr .)
    LONG            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    FLOAT           reduce using rule 97 (Statement -> LabelStatement M_instr .)
    DOUBLE          reduce using rule 97 (Statement -> LabelStatement M_instr .)
    VOID            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    OPT_INC_DEC     reduce using rule 97 (Statement -> LabelStatement M_instr .)
    +               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    -               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    ~               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    !               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    THIS            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    SUPER           reduce using rule 97 (Statement -> LabelStatement M_instr .)
    NULL            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    (               reduce using rule 97 (Statement -> LabelStatement M_instr .)
    INT_LITERAL     reduce using rule 97 (Statement -> LabelStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 97 (Statement -> LabelStatement M_instr .)
    CHAR_LITERAL    reduce using rule 97 (Statement -> LabelStatement M_instr .)
    STRING_LITERAL  reduce using rule 97 (Statement -> LabelStatement M_instr .)
    BOOL            reduce using rule 97 (Statement -> LabelStatement M_instr .)
    NEW             reduce using rule 97 (Statement -> LabelStatement M_instr .)
    CASE            reduce using rule 97 (Statement -> LabelStatement M_instr .)


state 193

    (133) JumpStatement -> RETURN ; .

    }               reduce using rule 133 (JumpStatement -> RETURN ; .)
    ;               reduce using rule 133 (JumpStatement -> RETURN ; .)
    IDENTIFIER      reduce using rule 133 (JumpStatement -> RETURN ; .)
    DEFAULT         reduce using rule 133 (JumpStatement -> RETURN ; .)
    IF              reduce using rule 133 (JumpStatement -> RETURN ; .)
    SWITCH          reduce using rule 133 (JumpStatement -> RETURN ; .)
    WHILE           reduce using rule 133 (JumpStatement -> RETURN ; .)
    DO              reduce using rule 133 (JumpStatement -> RETURN ; .)
    FOR             reduce using rule 133 (JumpStatement -> RETURN ; .)
    BREAK           reduce using rule 133 (JumpStatement -> RETURN ; .)
    CONTINUE        reduce using rule 133 (JumpStatement -> RETURN ; .)
    RETURN          reduce using rule 133 (JumpStatement -> RETURN ; .)
    THROW           reduce using rule 133 (JumpStatement -> RETURN ; .)
    {               reduce using rule 133 (JumpStatement -> RETURN ; .)
    BOOLEAN         reduce using rule 133 (JumpStatement -> RETURN ; .)
    CHAR            reduce using rule 133 (JumpStatement -> RETURN ; .)
    BYTE            reduce using rule 133 (JumpStatement -> RETURN ; .)
    SHORT           reduce using rule 133 (JumpStatement -> RETURN ; .)
    INT             reduce using rule 133 (JumpStatement -> RETURN ; .)
    LONG            reduce using rule 133 (JumpStatement -> RETURN ; .)
    FLOAT           reduce using rule 133 (JumpStatement -> RETURN ; .)
    DOUBLE          reduce using rule 133 (JumpStatement -> RETURN ; .)
    VOID            reduce using rule 133 (JumpStatement -> RETURN ; .)
    OPT_INC_DEC     reduce using rule 133 (JumpStatement -> RETURN ; .)
    +               reduce using rule 133 (JumpStatement -> RETURN ; .)
    -               reduce using rule 133 (JumpStatement -> RETURN ; .)
    ~               reduce using rule 133 (JumpStatement -> RETURN ; .)
    !               reduce using rule 133 (JumpStatement -> RETURN ; .)
    THIS            reduce using rule 133 (JumpStatement -> RETURN ; .)
    SUPER           reduce using rule 133 (JumpStatement -> RETURN ; .)
    NULL            reduce using rule 133 (JumpStatement -> RETURN ; .)
    (               reduce using rule 133 (JumpStatement -> RETURN ; .)
    INT_LITERAL     reduce using rule 133 (JumpStatement -> RETURN ; .)
    FLOAT_LITERAL   reduce using rule 133 (JumpStatement -> RETURN ; .)
    CHAR_LITERAL    reduce using rule 133 (JumpStatement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 133 (JumpStatement -> RETURN ; .)
    BOOL            reduce using rule 133 (JumpStatement -> RETURN ; .)
    NEW             reduce using rule 133 (JumpStatement -> RETURN ; .)
    CASE            reduce using rule 133 (JumpStatement -> RETURN ; .)
    ELSE            reduce using rule 133 (JumpStatement -> RETURN ; .)


state 194

    (132) JumpStatement -> RETURN Expression . ;

    ;               shift and go to state 270


state 195

    (163) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    IDENTIFIER      shift and go to state 271


state 196

    (200) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    =               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_EQ          reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    *               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    /               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    %               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    +               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    -               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_SOME        reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    <               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    >               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ?               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ;               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    )               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ,               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    :               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    }               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ]               reduce using rule 200 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 197

    (208) CastExpression -> UnaryExpression .

    *               reduce using rule 208 (CastExpression -> UnaryExpression .)
    /               reduce using rule 208 (CastExpression -> UnaryExpression .)
    %               reduce using rule 208 (CastExpression -> UnaryExpression .)
    +               reduce using rule 208 (CastExpression -> UnaryExpression .)
    -               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 208 (CastExpression -> UnaryExpression .)
    <               reduce using rule 208 (CastExpression -> UnaryExpression .)
    >               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 208 (CastExpression -> UnaryExpression .)
    &               reduce using rule 208 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 208 (CastExpression -> UnaryExpression .)
    |               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 208 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 208 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 208 (CastExpression -> UnaryExpression .)
    )               reduce using rule 208 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 208 (CastExpression -> UnaryExpression .)
    :               reduce using rule 208 (CastExpression -> UnaryExpression .)
    }               reduce using rule 208 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 208 (CastExpression -> UnaryExpression .)
    =               reduce using rule 208 (CastExpression -> UnaryExpression .)
    OPT_EQ          reduce using rule 208 (CastExpression -> UnaryExpression .)


state 198

    (225) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    RelationalExpression           shift and go to state 272
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 199

    (224) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    RelationalExpression           shift and go to state 273
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 200

    (210) MultiplicativeExpression -> MultiplicativeExpression * . CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 274
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 201

    (212) MultiplicativeExpression -> MultiplicativeExpression % . CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 275
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 202

    (211) MultiplicativeExpression -> MultiplicativeExpression / . CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 276
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 203

    (99) Statement -> SelectionStatement M_instr .

    ELSE            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    }               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    ;               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    IDENTIFIER      reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    DEFAULT         reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    IF              reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    SWITCH          reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    WHILE           reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    DO              reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    FOR             reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    BREAK           reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    CONTINUE        reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    RETURN          reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    THROW           reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    {               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    BOOLEAN         reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    CHAR            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    BYTE            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    SHORT           reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    INT             reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    LONG            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    FLOAT           reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    DOUBLE          reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    VOID            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    OPT_INC_DEC     reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    +               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    -               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    ~               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    !               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    THIS            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    SUPER           reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    NULL            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    (               reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    INT_LITERAL     reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    CHAR_LITERAL    reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    STRING_LITERAL  reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    BOOL            reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    NEW             reduce using rule 99 (Statement -> SelectionStatement M_instr .)
    CASE            reduce using rule 99 (Statement -> SelectionStatement M_instr .)


state 204

    (118) IterationStatement -> FOR ( . ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (119) ForInit -> . ExpressionStatements ;
    (120) ForInit -> . LocalVariableDeclarationStatement
    (121) ForInit -> . ;
    (126) ExpressionStatements -> . ExpressionStatement
    (127) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (109) ExpressionStatement -> . Expression
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (244) Expression -> . AssignmentExpression
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 278
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    ArithmeticUnaryOperator        shift and go to state 100
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ExpressionStatement            shift and go to state 277
    PrimitiveType                  shift and go to state 86
    RealPostfixExpression          shift and go to state 99
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    ComplexPrimaryNoParenthesis    shift and go to state 102
    TypeName                       shift and go to state 53
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    ConditionalOrExpression        shift and go to state 133
    LocalVariableDeclarationStatement shift and go to state 281
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Expression                     shift and go to state 135
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    ForInit                        shift and go to state 279
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExpressionStatements           shift and go to state 280
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 205

    (199) UnaryExpression -> OPT_INC_DEC UnaryExpression .

    =               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_EQ          reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    *               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    /               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    %               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    +               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    -               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_SOME        reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    <               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    >               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LE           reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_GE           reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_EQ           reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_NE           reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    &               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ^               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    |               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LAND         reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ?               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LOR          reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ;               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    )               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ,               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    :               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    }               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ]               reduce using rule 199 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)


state 206

    (102) Statement -> Block M_instr .

    ELSE            reduce using rule 102 (Statement -> Block M_instr .)
    }               reduce using rule 102 (Statement -> Block M_instr .)
    ;               reduce using rule 102 (Statement -> Block M_instr .)
    IDENTIFIER      reduce using rule 102 (Statement -> Block M_instr .)
    DEFAULT         reduce using rule 102 (Statement -> Block M_instr .)
    IF              reduce using rule 102 (Statement -> Block M_instr .)
    SWITCH          reduce using rule 102 (Statement -> Block M_instr .)
    WHILE           reduce using rule 102 (Statement -> Block M_instr .)
    DO              reduce using rule 102 (Statement -> Block M_instr .)
    FOR             reduce using rule 102 (Statement -> Block M_instr .)
    BREAK           reduce using rule 102 (Statement -> Block M_instr .)
    CONTINUE        reduce using rule 102 (Statement -> Block M_instr .)
    RETURN          reduce using rule 102 (Statement -> Block M_instr .)
    THROW           reduce using rule 102 (Statement -> Block M_instr .)
    {               reduce using rule 102 (Statement -> Block M_instr .)
    BOOLEAN         reduce using rule 102 (Statement -> Block M_instr .)
    CHAR            reduce using rule 102 (Statement -> Block M_instr .)
    BYTE            reduce using rule 102 (Statement -> Block M_instr .)
    SHORT           reduce using rule 102 (Statement -> Block M_instr .)
    INT             reduce using rule 102 (Statement -> Block M_instr .)
    LONG            reduce using rule 102 (Statement -> Block M_instr .)
    FLOAT           reduce using rule 102 (Statement -> Block M_instr .)
    DOUBLE          reduce using rule 102 (Statement -> Block M_instr .)
    VOID            reduce using rule 102 (Statement -> Block M_instr .)
    OPT_INC_DEC     reduce using rule 102 (Statement -> Block M_instr .)
    +               reduce using rule 102 (Statement -> Block M_instr .)
    -               reduce using rule 102 (Statement -> Block M_instr .)
    ~               reduce using rule 102 (Statement -> Block M_instr .)
    !               reduce using rule 102 (Statement -> Block M_instr .)
    THIS            reduce using rule 102 (Statement -> Block M_instr .)
    SUPER           reduce using rule 102 (Statement -> Block M_instr .)
    NULL            reduce using rule 102 (Statement -> Block M_instr .)
    (               reduce using rule 102 (Statement -> Block M_instr .)
    INT_LITERAL     reduce using rule 102 (Statement -> Block M_instr .)
    FLOAT_LITERAL   reduce using rule 102 (Statement -> Block M_instr .)
    CHAR_LITERAL    reduce using rule 102 (Statement -> Block M_instr .)
    STRING_LITERAL  reduce using rule 102 (Statement -> Block M_instr .)
    BOOL            reduce using rule 102 (Statement -> Block M_instr .)
    NEW             reduce using rule 102 (Statement -> Block M_instr .)
    CASE            reduce using rule 102 (Statement -> Block M_instr .)


state 207

    (181) PlainNewAllocationExpression -> ArrayAllocationExpression { . }
    (183) PlainNewAllocationExpression -> ArrayAllocationExpression { . ArrayInitializers }
    (62) ArrayInitializers -> . VariableInitializer
    (63) ArrayInitializers -> . ArrayInitializers , VariableInitializer
    (64) ArrayInitializers -> . ArrayInitializers ,
    (61) VariableInitializer -> . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 282
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    VariableInitializer            shift and go to state 284
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    ArrayInitializers              shift and go to state 283
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 260
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 208

    (167) MethodCall -> MethodAccess ( . ArgumentList )
    (168) MethodCall -> MethodAccess ( . )
    (175) ArgumentList -> . Expression
    (176) ArgumentList -> . ArgumentList , Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    )               shift and go to state 287
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    Float_LIT                      shift and go to state 140
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    ArgumentList                   shift and go to state 285
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 286
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 209

    (229) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 122
    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 288
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 210

    (219) RelationalExpression -> RelationalExpression < . ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 289
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 211

    (221) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 290
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 212

    (222) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 291
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 213

    (220) RelationalExpression -> RelationalExpression > . ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 292
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 214

    (130) JumpStatement -> CONTINUE IDENTIFIER . ;

    ;               shift and go to state 293


state 215

    (131) JumpStatement -> CONTINUE ; .

    }               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    ;               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    DEFAULT         reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    IF              reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    SWITCH          reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    WHILE           reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    DO              reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    FOR             reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    BREAK           reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    CONTINUE        reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    RETURN          reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    THROW           reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    {               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    BOOLEAN         reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    CHAR            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    BYTE            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    SHORT           reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    INT             reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    LONG            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    FLOAT           reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    DOUBLE          reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    VOID            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    OPT_INC_DEC     reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    +               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    -               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    ~               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    !               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    THIS            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    SUPER           reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    NULL            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    (               reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    INT_LITERAL     reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    FLOAT_LITERAL   reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    CHAR_LITERAL    reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    BOOL            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    NEW             reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    CASE            reduce using rule 131 (JumpStatement -> CONTINUE ; .)
    ELSE            reduce using rule 131 (JumpStatement -> CONTINUE ; .)


state 216

    (161) ArrayAccess -> ComplexPrimary [ . Expression ]
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 122
    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 294
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 217

    (198) RealPostfixExpression -> PostfixExpression OPT_INC_DEC .

    .               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_INC_DEC     reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    =               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_EQ          reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    *               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    /               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    %               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    +               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    -               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_SOME        reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    <               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    >               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LE           reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_GE           reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_EQ           reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_NE           reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    &               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ^               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    |               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LAND         reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ?               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LOR          reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ;               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    :               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    )               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ,               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    }               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ]               reduce using rule 198 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)


state 218

    (182) PlainNewAllocationExpression -> ClassAllocationExpression { . }
    (184) PlainNewAllocationExpression -> ClassAllocationExpression { . FieldDeclarations }
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (78) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { }
    (79) ConstructorDeclaration -> . ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (80) ConstructorDeclaration -> . ConstructorDeclarator { }
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (89) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 296
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 70
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    ConstructorDeclaration         shift and go to state 42
    FieldDeclarations              shift and go to state 295
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 62
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 219

    (107) LabelStatement -> DEFAULT : .

    }               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    ;               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    IDENTIFIER      reduce using rule 107 (LabelStatement -> DEFAULT : .)
    DEFAULT         reduce using rule 107 (LabelStatement -> DEFAULT : .)
    IF              reduce using rule 107 (LabelStatement -> DEFAULT : .)
    SWITCH          reduce using rule 107 (LabelStatement -> DEFAULT : .)
    WHILE           reduce using rule 107 (LabelStatement -> DEFAULT : .)
    DO              reduce using rule 107 (LabelStatement -> DEFAULT : .)
    FOR             reduce using rule 107 (LabelStatement -> DEFAULT : .)
    BREAK           reduce using rule 107 (LabelStatement -> DEFAULT : .)
    CONTINUE        reduce using rule 107 (LabelStatement -> DEFAULT : .)
    RETURN          reduce using rule 107 (LabelStatement -> DEFAULT : .)
    THROW           reduce using rule 107 (LabelStatement -> DEFAULT : .)
    {               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    BOOLEAN         reduce using rule 107 (LabelStatement -> DEFAULT : .)
    CHAR            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    BYTE            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    SHORT           reduce using rule 107 (LabelStatement -> DEFAULT : .)
    INT             reduce using rule 107 (LabelStatement -> DEFAULT : .)
    LONG            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    FLOAT           reduce using rule 107 (LabelStatement -> DEFAULT : .)
    DOUBLE          reduce using rule 107 (LabelStatement -> DEFAULT : .)
    VOID            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    OPT_INC_DEC     reduce using rule 107 (LabelStatement -> DEFAULT : .)
    +               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    -               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    ~               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    !               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    THIS            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    SUPER           reduce using rule 107 (LabelStatement -> DEFAULT : .)
    NULL            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    (               reduce using rule 107 (LabelStatement -> DEFAULT : .)
    INT_LITERAL     reduce using rule 107 (LabelStatement -> DEFAULT : .)
    FLOAT_LITERAL   reduce using rule 107 (LabelStatement -> DEFAULT : .)
    CHAR_LITERAL    reduce using rule 107 (LabelStatement -> DEFAULT : .)
    STRING_LITERAL  reduce using rule 107 (LabelStatement -> DEFAULT : .)
    BOOL            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    NEW             reduce using rule 107 (LabelStatement -> DEFAULT : .)
    CASE            reduce using rule 107 (LabelStatement -> DEFAULT : .)
    ELSE            reduce using rule 107 (LabelStatement -> DEFAULT : .)


state 220

    (101) Statement -> JumpStatement M_instr .

    ELSE            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    }               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    ;               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    IDENTIFIER      reduce using rule 101 (Statement -> JumpStatement M_instr .)
    DEFAULT         reduce using rule 101 (Statement -> JumpStatement M_instr .)
    IF              reduce using rule 101 (Statement -> JumpStatement M_instr .)
    SWITCH          reduce using rule 101 (Statement -> JumpStatement M_instr .)
    WHILE           reduce using rule 101 (Statement -> JumpStatement M_instr .)
    DO              reduce using rule 101 (Statement -> JumpStatement M_instr .)
    FOR             reduce using rule 101 (Statement -> JumpStatement M_instr .)
    BREAK           reduce using rule 101 (Statement -> JumpStatement M_instr .)
    CONTINUE        reduce using rule 101 (Statement -> JumpStatement M_instr .)
    RETURN          reduce using rule 101 (Statement -> JumpStatement M_instr .)
    THROW           reduce using rule 101 (Statement -> JumpStatement M_instr .)
    {               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    BOOLEAN         reduce using rule 101 (Statement -> JumpStatement M_instr .)
    CHAR            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    BYTE            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    SHORT           reduce using rule 101 (Statement -> JumpStatement M_instr .)
    INT             reduce using rule 101 (Statement -> JumpStatement M_instr .)
    LONG            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    FLOAT           reduce using rule 101 (Statement -> JumpStatement M_instr .)
    DOUBLE          reduce using rule 101 (Statement -> JumpStatement M_instr .)
    VOID            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    OPT_INC_DEC     reduce using rule 101 (Statement -> JumpStatement M_instr .)
    +               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    -               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    ~               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    !               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    THIS            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    SUPER           reduce using rule 101 (Statement -> JumpStatement M_instr .)
    NULL            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    (               reduce using rule 101 (Statement -> JumpStatement M_instr .)
    INT_LITERAL     reduce using rule 101 (Statement -> JumpStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 101 (Statement -> JumpStatement M_instr .)
    CHAR_LITERAL    reduce using rule 101 (Statement -> JumpStatement M_instr .)
    STRING_LITERAL  reduce using rule 101 (Statement -> JumpStatement M_instr .)
    BOOL            reduce using rule 101 (Statement -> JumpStatement M_instr .)
    NEW             reduce using rule 101 (Statement -> JumpStatement M_instr .)
    CASE            reduce using rule 101 (Statement -> JumpStatement M_instr .)


state 221

    (116) IterationStatement -> WHILE M_instr_branch . ( Expression ) M_instr_branch Statement

    (               shift and go to state 297


state 222

    (187) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (188) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (189) ArrayAllocationExpression -> NEW TypeName . Dims
    (185) ClassAllocationExpression -> NEW TypeName . ( ArgumentList )
    (186) ClassAllocationExpression -> NEW TypeName . ( )
    (190) DimExprs -> . DimExpr
    (191) DimExprs -> . DimExprs DimExpr
    (193) Dims -> . OP_DIM
    (194) Dims -> . Dims OP_DIM
    (192) DimExpr -> . [ Expression ]
    (195) OP_DIM -> . [ ]

    (               shift and go to state 298
    [               shift and go to state 301

    Dims                           shift and go to state 300
    DimExpr                        shift and go to state 302
    DimExprs                       shift and go to state 299
    OP_DIM                         shift and go to state 82

state 223

    (95) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . ; M_instr
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               shift and go to state 303
    ,               shift and go to state 173


state 224

    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (195) OP_DIM -> . [ ]

    ;               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    ,               reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 175
    [               shift and go to state 81

    OP_DIM                         shift and go to state 176

state 225

    (112) SelectionStatement -> SWITCH ( . Expression Mark_switch ) Block
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 304
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 226

    (235) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . M_OP ConditionalAndExpression
    (236) M_OP -> .

    OPT_INC_DEC     reduce using rule 236 (M_OP -> .)
    +               reduce using rule 236 (M_OP -> .)
    -               reduce using rule 236 (M_OP -> .)
    ~               reduce using rule 236 (M_OP -> .)
    !               reduce using rule 236 (M_OP -> .)
    IDENTIFIER      reduce using rule 236 (M_OP -> .)
    THIS            reduce using rule 236 (M_OP -> .)
    SUPER           reduce using rule 236 (M_OP -> .)
    NULL            reduce using rule 236 (M_OP -> .)
    (               reduce using rule 236 (M_OP -> .)
    INT_LITERAL     reduce using rule 236 (M_OP -> .)
    FLOAT_LITERAL   reduce using rule 236 (M_OP -> .)
    CHAR_LITERAL    reduce using rule 236 (M_OP -> .)
    STRING_LITERAL  reduce using rule 236 (M_OP -> .)
    BOOL            reduce using rule 236 (M_OP -> .)
    NEW             reduce using rule 236 (M_OP -> .)
    BOOLEAN         reduce using rule 236 (M_OP -> .)
    CHAR            reduce using rule 236 (M_OP -> .)
    BYTE            reduce using rule 236 (M_OP -> .)
    SHORT           reduce using rule 236 (M_OP -> .)
    INT             reduce using rule 236 (M_OP -> .)
    LONG            reduce using rule 236 (M_OP -> .)
    FLOAT           reduce using rule 236 (M_OP -> .)
    DOUBLE          reduce using rule 236 (M_OP -> .)
    VOID            reduce using rule 236 (M_OP -> .)

    M_OP                           shift and go to state 305

state 227

    (238) ConditionalExpression -> ConditionalOrExpression ? . M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (103) M_instr -> .

    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 306

state 228

    (214) AdditiveExpression -> AdditiveExpression + . MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 307
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 229

    (215) AdditiveExpression -> AdditiveExpression - . MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 308
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 230

    (241) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 309
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 231

    (243) AssignmentOperator -> OPT_EQ .

    OPT_INC_DEC     reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    +               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    -               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    ~               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    !               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    IDENTIFIER      reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    THIS            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    SUPER           reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    NULL            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    (               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    INT_LITERAL     reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    FLOAT_LITERAL   reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    CHAR_LITERAL    reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    STRING_LITERAL  reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    BOOL            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    NEW             reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    BOOLEAN         reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    CHAR            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    BYTE            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    SHORT           reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    INT             reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    LONG            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    FLOAT           reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    DOUBLE          reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    VOID            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)


state 232

    (242) AssignmentOperator -> = .

    OPT_INC_DEC     reduce using rule 242 (AssignmentOperator -> = .)
    +               reduce using rule 242 (AssignmentOperator -> = .)
    -               reduce using rule 242 (AssignmentOperator -> = .)
    ~               reduce using rule 242 (AssignmentOperator -> = .)
    !               reduce using rule 242 (AssignmentOperator -> = .)
    IDENTIFIER      reduce using rule 242 (AssignmentOperator -> = .)
    THIS            reduce using rule 242 (AssignmentOperator -> = .)
    SUPER           reduce using rule 242 (AssignmentOperator -> = .)
    NULL            reduce using rule 242 (AssignmentOperator -> = .)
    (               reduce using rule 242 (AssignmentOperator -> = .)
    INT_LITERAL     reduce using rule 242 (AssignmentOperator -> = .)
    FLOAT_LITERAL   reduce using rule 242 (AssignmentOperator -> = .)
    CHAR_LITERAL    reduce using rule 242 (AssignmentOperator -> = .)
    STRING_LITERAL  reduce using rule 242 (AssignmentOperator -> = .)
    BOOL            reduce using rule 242 (AssignmentOperator -> = .)
    NEW             reduce using rule 242 (AssignmentOperator -> = .)
    BOOLEAN         reduce using rule 242 (AssignmentOperator -> = .)
    CHAR            reduce using rule 242 (AssignmentOperator -> = .)
    BYTE            reduce using rule 242 (AssignmentOperator -> = .)
    SHORT           reduce using rule 242 (AssignmentOperator -> = .)
    INT             reduce using rule 242 (AssignmentOperator -> = .)
    LONG            reduce using rule 242 (AssignmentOperator -> = .)
    FLOAT           reduce using rule 242 (AssignmentOperator -> = .)
    DOUBLE          reduce using rule 242 (AssignmentOperator -> = .)
    VOID            reduce using rule 242 (AssignmentOperator -> = .)


state 233

    (231) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 122
    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    ExclusiveOrExpression          shift and go to state 310
    Float_LIT                      shift and go to state 140
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 234

    (129) JumpStatement -> BREAK ; .

    }               reduce using rule 129 (JumpStatement -> BREAK ; .)
    ;               reduce using rule 129 (JumpStatement -> BREAK ; .)
    IDENTIFIER      reduce using rule 129 (JumpStatement -> BREAK ; .)
    DEFAULT         reduce using rule 129 (JumpStatement -> BREAK ; .)
    IF              reduce using rule 129 (JumpStatement -> BREAK ; .)
    SWITCH          reduce using rule 129 (JumpStatement -> BREAK ; .)
    WHILE           reduce using rule 129 (JumpStatement -> BREAK ; .)
    DO              reduce using rule 129 (JumpStatement -> BREAK ; .)
    FOR             reduce using rule 129 (JumpStatement -> BREAK ; .)
    BREAK           reduce using rule 129 (JumpStatement -> BREAK ; .)
    CONTINUE        reduce using rule 129 (JumpStatement -> BREAK ; .)
    RETURN          reduce using rule 129 (JumpStatement -> BREAK ; .)
    THROW           reduce using rule 129 (JumpStatement -> BREAK ; .)
    {               reduce using rule 129 (JumpStatement -> BREAK ; .)
    BOOLEAN         reduce using rule 129 (JumpStatement -> BREAK ; .)
    CHAR            reduce using rule 129 (JumpStatement -> BREAK ; .)
    BYTE            reduce using rule 129 (JumpStatement -> BREAK ; .)
    SHORT           reduce using rule 129 (JumpStatement -> BREAK ; .)
    INT             reduce using rule 129 (JumpStatement -> BREAK ; .)
    LONG            reduce using rule 129 (JumpStatement -> BREAK ; .)
    FLOAT           reduce using rule 129 (JumpStatement -> BREAK ; .)
    DOUBLE          reduce using rule 129 (JumpStatement -> BREAK ; .)
    VOID            reduce using rule 129 (JumpStatement -> BREAK ; .)
    OPT_INC_DEC     reduce using rule 129 (JumpStatement -> BREAK ; .)
    +               reduce using rule 129 (JumpStatement -> BREAK ; .)
    -               reduce using rule 129 (JumpStatement -> BREAK ; .)
    ~               reduce using rule 129 (JumpStatement -> BREAK ; .)
    !               reduce using rule 129 (JumpStatement -> BREAK ; .)
    THIS            reduce using rule 129 (JumpStatement -> BREAK ; .)
    SUPER           reduce using rule 129 (JumpStatement -> BREAK ; .)
    NULL            reduce using rule 129 (JumpStatement -> BREAK ; .)
    (               reduce using rule 129 (JumpStatement -> BREAK ; .)
    INT_LITERAL     reduce using rule 129 (JumpStatement -> BREAK ; .)
    FLOAT_LITERAL   reduce using rule 129 (JumpStatement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 129 (JumpStatement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 129 (JumpStatement -> BREAK ; .)
    BOOL            reduce using rule 129 (JumpStatement -> BREAK ; .)
    NEW             reduce using rule 129 (JumpStatement -> BREAK ; .)
    CASE            reduce using rule 129 (JumpStatement -> BREAK ; .)
    ELSE            reduce using rule 129 (JumpStatement -> BREAK ; .)


state 235

    (128) JumpStatement -> BREAK IDENTIFIER . ;

    ;               shift and go to state 311


state 236

    (117) IterationStatement -> DO M_instr_branch . Statement WHILE M_instr_branch ( Expression ) ;
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    Statement                      shift and go to state 312
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    PrimitiveType                  shift and go to state 185
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    SpecialName                    shift and go to state 121
    FieldAccess                    shift and go to state 143
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 237

    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (178) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (164) FieldAccess -> QualifiedName . . THIS
    (165) FieldAccess -> QualifiedName . . CLASS
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )

    IDENTIFIER      shift and go to state 73
    THIS            shift and go to state 313
    CLASS           shift and go to state 315
    NEW             shift and go to state 128

    ArrayAllocationExpression      shift and go to state 114
    ClassAllocationExpression      shift and go to state 124
    PlainNewAllocationExpression   shift and go to state 314

state 238

    (160) ArrayAccess -> QualifiedName [ . Expression ]
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 187
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    LogicalUnaryOperator           shift and go to state 156
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 316
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 239

    (217) ShiftExpression -> ShiftExpression OPT_SOME . AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 317
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    FieldAccess                    shift and go to state 143
    Float_LIT                      shift and go to state 140
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 240

    (87) Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .

    ;               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    }               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    STATIC          reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    IDENTIFIER      reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    PUBLIC          reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    PRIVATE         reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    {               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CLASS           reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    INTERFACE       reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BOOLEAN         reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CHAR            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BYTE            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    SHORT           reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    INT             reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    LONG            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    FLOAT           reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    DOUBLE          reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    VOID            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    DEFAULT         reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    IF              reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    SWITCH          reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    WHILE           reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    DO              reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    FOR             reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BREAK           reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CONTINUE        reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    RETURN          reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    THROW           reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    OPT_INC_DEC     reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    +               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    -               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    ~               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    !               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    THIS            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    SUPER           reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    NULL            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    (               reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    INT_LITERAL     reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    FLOAT_LITERAL   reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CHAR_LITERAL    reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    STRING_LITERAL  reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    BOOL            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    NEW             reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    CASE            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)
    ELSE            reduce using rule 87 (Block -> Lparen LocalVariableDeclarationsAndStatements Rparen .)


state 241

    (92) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    }               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    {               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    +               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    -               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    !               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    (               reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 92 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 242

    (162) FieldAccess -> NotJustName . . IDENTIFIER

    IDENTIFIER      shift and go to state 318


state 243

    (203) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    =               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_EQ          reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    *               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    /               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    %               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    +               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    -               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_SOME        reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    <               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    >               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ?               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    }               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ,               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ;               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    )               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    :               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ]               reduce using rule 203 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 244

    (110) SelectionStatement -> IF ( . Expression ) M_instr_branch Statement
    (111) SelectionStatement -> IF ( . Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 319
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 245

    (134) JumpStatement -> THROW Expression . ;

    ;               shift and go to state 320


state 246

    (100) Statement -> IterationStatement M_instr .

    ELSE            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    }               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    ;               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    IDENTIFIER      reduce using rule 100 (Statement -> IterationStatement M_instr .)
    DEFAULT         reduce using rule 100 (Statement -> IterationStatement M_instr .)
    IF              reduce using rule 100 (Statement -> IterationStatement M_instr .)
    SWITCH          reduce using rule 100 (Statement -> IterationStatement M_instr .)
    WHILE           reduce using rule 100 (Statement -> IterationStatement M_instr .)
    DO              reduce using rule 100 (Statement -> IterationStatement M_instr .)
    FOR             reduce using rule 100 (Statement -> IterationStatement M_instr .)
    BREAK           reduce using rule 100 (Statement -> IterationStatement M_instr .)
    CONTINUE        reduce using rule 100 (Statement -> IterationStatement M_instr .)
    RETURN          reduce using rule 100 (Statement -> IterationStatement M_instr .)
    THROW           reduce using rule 100 (Statement -> IterationStatement M_instr .)
    {               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    BOOLEAN         reduce using rule 100 (Statement -> IterationStatement M_instr .)
    CHAR            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    BYTE            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    SHORT           reduce using rule 100 (Statement -> IterationStatement M_instr .)
    INT             reduce using rule 100 (Statement -> IterationStatement M_instr .)
    LONG            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    FLOAT           reduce using rule 100 (Statement -> IterationStatement M_instr .)
    DOUBLE          reduce using rule 100 (Statement -> IterationStatement M_instr .)
    VOID            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    OPT_INC_DEC     reduce using rule 100 (Statement -> IterationStatement M_instr .)
    +               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    -               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    ~               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    !               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    THIS            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    SUPER           reduce using rule 100 (Statement -> IterationStatement M_instr .)
    NULL            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    (               reduce using rule 100 (Statement -> IterationStatement M_instr .)
    INT_LITERAL     reduce using rule 100 (Statement -> IterationStatement M_instr .)
    FLOAT_LITERAL   reduce using rule 100 (Statement -> IterationStatement M_instr .)
    CHAR_LITERAL    reduce using rule 100 (Statement -> IterationStatement M_instr .)
    STRING_LITERAL  reduce using rule 100 (Statement -> IterationStatement M_instr .)
    BOOL            reduce using rule 100 (Statement -> IterationStatement M_instr .)
    NEW             reduce using rule 100 (Statement -> IterationStatement M_instr .)
    CASE            reduce using rule 100 (Statement -> IterationStatement M_instr .)


state 247

    (69) ParameterList -> Parameter .

    )               reduce using rule 69 (ParameterList -> Parameter .)
    ,               reduce using rule 69 (ParameterList -> Parameter .)


state 248

    (71) Parameter -> TypeSpecifier . DeclaratorName
    (72) DeclaratorName -> . IDENTIFIER
    (73) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    DeclaratorName                 shift and go to state 321

state 249

    (82) ConstructorDeclarator -> IDENTIFIER ( ) .

    {               reduce using rule 82 (ConstructorDeclarator -> IDENTIFIER ( ) .)


state 250

    (81) ConstructorDeclarator -> IDENTIFIER ( ParameterList . )
    (70) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 322
    ,               shift and go to state 323


state 251

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 55 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 173


state 252

    (65) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (74) MethodBody -> . { LocalVariableDeclarationsAndStatements }
    (75) MethodBody -> . { }
    (76) MethodBody -> . ;

    {               shift and go to state 179
    ;               shift and go to state 178

    MethodBody                     shift and go to state 324

state 253

    (77) ConstructorDeclaration -> Modifiers ConstructorDeclarator { . LocalVariableDeclarationsAndStatements }
    (78) ConstructorDeclaration -> Modifiers ConstructorDeclarator { . }
    (91) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (92) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 326
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    MethodAccess                   shift and go to state 115
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    LocalVariableDeclarationsAndStatements shift and go to state 325
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 120
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    UnaryExpression                shift and go to state 138
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 254

    (79) ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements . }
    (92) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 327
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    MethodAccess                   shift and go to state 115
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 241
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    UnaryExpression                shift and go to state 138
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 255

    (80) ConstructorDeclaration -> ConstructorDeclarator { } .

    ;               reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    }               reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    STATIC          reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    IDENTIFIER      reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    PUBLIC          reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    PRIVATE         reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    {               reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    CLASS           reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    INTERFACE       reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    BOOLEAN         reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    CHAR            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    BYTE            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    SHORT           reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    INT             reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    LONG            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    FLOAT           reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    DOUBLE          reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)
    VOID            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator { } .)


state 256

    (58) VariableDeclarators -> VariableDeclarators , VariableDeclarator .

    ,               reduce using rule 58 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)
    ;               reduce using rule 58 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)


state 257

    (68) MethodDeclarator -> DeclaratorName ( ) .

    {               reduce using rule 68 (MethodDeclarator -> DeclaratorName ( ) .)
    ;               reduce using rule 68 (MethodDeclarator -> DeclaratorName ( ) .)


state 258

    (67) MethodDeclarator -> DeclaratorName ( ParameterList . )
    (70) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 328
    ,               shift and go to state 323


state 259

    (60) VariableDeclarator -> DeclaratorName = VariableInitializer .

    ;               reduce using rule 60 (VariableDeclarator -> DeclaratorName = VariableInitializer .)
    ,               reduce using rule 60 (VariableDeclarator -> DeclaratorName = VariableInitializer .)


state 260

    (61) VariableInitializer -> Expression .

    }               reduce using rule 61 (VariableInitializer -> Expression .)
    ,               reduce using rule 61 (VariableInitializer -> Expression .)
    ;               reduce using rule 61 (VariableInitializer -> Expression .)


state 261

    (74) MethodBody -> { LocalVariableDeclarationsAndStatements . }
    (92) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 329
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 241
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 262

    (75) MethodBody -> { } .

    ;               reduce using rule 75 (MethodBody -> { } .)
    }               reduce using rule 75 (MethodBody -> { } .)
    STATIC          reduce using rule 75 (MethodBody -> { } .)
    IDENTIFIER      reduce using rule 75 (MethodBody -> { } .)
    PUBLIC          reduce using rule 75 (MethodBody -> { } .)
    PRIVATE         reduce using rule 75 (MethodBody -> { } .)
    {               reduce using rule 75 (MethodBody -> { } .)
    CLASS           reduce using rule 75 (MethodBody -> { } .)
    INTERFACE       reduce using rule 75 (MethodBody -> { } .)
    BOOLEAN         reduce using rule 75 (MethodBody -> { } .)
    CHAR            reduce using rule 75 (MethodBody -> { } .)
    BYTE            reduce using rule 75 (MethodBody -> { } .)
    SHORT           reduce using rule 75 (MethodBody -> { } .)
    INT             reduce using rule 75 (MethodBody -> { } .)
    LONG            reduce using rule 75 (MethodBody -> { } .)
    FLOAT           reduce using rule 75 (MethodBody -> { } .)
    DOUBLE          reduce using rule 75 (MethodBody -> { } .)
    VOID            reduce using rule 75 (MethodBody -> { } .)


state 263

    (98) Statement -> ExpressionStatement ; M_instr .

    ELSE            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    }               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    ;               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    IDENTIFIER      reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    DEFAULT         reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    IF              reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    SWITCH          reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    WHILE           reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    DO              reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    FOR             reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    BREAK           reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    CONTINUE        reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    RETURN          reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    THROW           reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    {               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    BOOLEAN         reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    CHAR            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    BYTE            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    SHORT           reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    INT             reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    LONG            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    FLOAT           reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    DOUBLE          reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    VOID            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    OPT_INC_DEC     reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    +               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    -               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    ~               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    !               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    THIS            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    SUPER           reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    NULL            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    (               reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    INT_LITERAL     reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    FLOAT_LITERAL   reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    CHAR_LITERAL    reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    STRING_LITERAL  reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    BOOL            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    NEW             reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)
    CASE            reduce using rule 98 (Statement -> ExpressionStatement ; M_instr .)


state 264

    (166) FieldAccess -> PrimitiveType . CLASS .

    [               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    .               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_INC_DEC     reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    *               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    /               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    %               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    +               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    -               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_SOME        reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    <               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    >               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LE           reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OP_GE           reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OP_EQ           reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OP_NE           reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    &               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    ^               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    |               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LAND         reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    ?               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LOR          reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    ;               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    )               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    ,               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    :               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    }               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    ]               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    (               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    =               reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_EQ          reduce using rule 166 (FieldAccess -> PrimitiveType . CLASS .)


state 265

    (227) AndExpression -> AndExpression & EqualityExpression .
    (224) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (225) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    ?               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    ;               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    :               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    )               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    ,               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    }               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    ]               reduce using rule 227 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 199
    OP_NE           shift and go to state 198


state 266

    (151) ComplexPrimary -> ( Expression ) .

    [               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 151 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 151 (ComplexPrimary -> ( Expression ) .)


state 267

    (245) ConstantExpression -> ConditionalExpression .

    :               reduce using rule 245 (ConstantExpression -> ConditionalExpression .)


state 268

    (106) LabelStatement -> Marker_case CASE ConstantExpression . :

    :               shift and go to state 330


state 269

    (233) ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP . InclusiveOrExpression
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    Float_LIT                      shift and go to state 140
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    InclusiveOrExpression          shift and go to state 331
    FieldAccess                    shift and go to state 143
    ExclusiveOrExpression          shift and go to state 116
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 270

    (132) JumpStatement -> RETURN Expression ; .

    }               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    ;               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    IDENTIFIER      reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    DEFAULT         reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    IF              reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    SWITCH          reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    DO              reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    FOR             reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    CONTINUE        reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    THROW           reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    {               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    BOOLEAN         reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    CHAR            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    BYTE            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    SHORT           reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    INT             reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    LONG            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    FLOAT           reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    DOUBLE          reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    VOID            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    OPT_INC_DEC     reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    +               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    -               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    ~               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    !               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    THIS            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    SUPER           reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    NULL            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    (               reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    INT_LITERAL     reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    FLOAT_LITERAL   reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    CHAR_LITERAL    reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    STRING_LITERAL  reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    BOOL            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    NEW             reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    CASE            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)
    ELSE            reduce using rule 132 (JumpStatement -> RETURN Expression ; .)


state 271

    (163) FieldAccess -> RealPostfixExpression . IDENTIFIER .

    [               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    .               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    *               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    /               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    %               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    +               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    -               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_SOME        reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    <               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    >               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LE           reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_GE           reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_EQ           reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_NE           reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    &               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ^               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    |               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LAND         reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ?               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LOR          reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ;               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    )               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ,               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    :               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    }               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ]               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    (               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    =               reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_EQ          reduce using rule 163 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)


state 272

    (225) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (219) RelationalExpression -> RelationalExpression . < ShiftExpression
    (220) RelationalExpression -> RelationalExpression . > ShiftExpression
    (221) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (222) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ?               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ;               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    )               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ,               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    }               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    :               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ]               reduce using rule 225 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    <               shift and go to state 210
    >               shift and go to state 213
    OP_LE           shift and go to state 211
    OP_GE           shift and go to state 212


state 273

    (224) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (219) RelationalExpression -> RelationalExpression . < ShiftExpression
    (220) RelationalExpression -> RelationalExpression . > ShiftExpression
    (221) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (222) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ?               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ;               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    )               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ,               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    }               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    :               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ]               reduce using rule 224 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    <               shift and go to state 210
    >               shift and go to state 213
    OP_LE           shift and go to state 211
    OP_GE           shift and go to state 212


state 274

    (210) MultiplicativeExpression -> MultiplicativeExpression * CastExpression .

    *               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    /               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    %               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    +               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    -               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OPT_SOME        reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    <               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    >               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LE           reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_GE           reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_EQ           reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_NE           reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    &               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ^               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    |               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LAND         reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ?               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LOR          reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ;               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    }               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ,               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    )               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    :               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ]               reduce using rule 210 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)


state 275

    (212) MultiplicativeExpression -> MultiplicativeExpression % CastExpression .

    *               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    /               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    %               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    +               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    -               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OPT_SOME        reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    <               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    >               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LE           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_GE           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_EQ           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_NE           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    &               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ^               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    |               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LAND         reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ?               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LOR          reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ;               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    }               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ,               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    )               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    :               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ]               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)


state 276

    (211) MultiplicativeExpression -> MultiplicativeExpression / CastExpression .

    *               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    /               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    %               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    +               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    -               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OPT_SOME        reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    <               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    >               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LE           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_GE           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_EQ           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_NE           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    &               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ^               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    |               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LAND         reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ?               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LOR          reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ;               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    }               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ,               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    )               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    :               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ]               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)


state 277

    (126) ExpressionStatements -> ExpressionStatement .

    ,               reduce using rule 126 (ExpressionStatements -> ExpressionStatement .)
    )               reduce using rule 126 (ExpressionStatements -> ExpressionStatement .)
    ;               reduce using rule 126 (ExpressionStatements -> ExpressionStatement .)


state 278

    (121) ForInit -> ; .

    ;               reduce using rule 121 (ForInit -> ; .)
    OPT_INC_DEC     reduce using rule 121 (ForInit -> ; .)
    +               reduce using rule 121 (ForInit -> ; .)
    -               reduce using rule 121 (ForInit -> ; .)
    ~               reduce using rule 121 (ForInit -> ; .)
    !               reduce using rule 121 (ForInit -> ; .)
    IDENTIFIER      reduce using rule 121 (ForInit -> ; .)
    THIS            reduce using rule 121 (ForInit -> ; .)
    SUPER           reduce using rule 121 (ForInit -> ; .)
    NULL            reduce using rule 121 (ForInit -> ; .)
    (               reduce using rule 121 (ForInit -> ; .)
    INT_LITERAL     reduce using rule 121 (ForInit -> ; .)
    FLOAT_LITERAL   reduce using rule 121 (ForInit -> ; .)
    CHAR_LITERAL    reduce using rule 121 (ForInit -> ; .)
    STRING_LITERAL  reduce using rule 121 (ForInit -> ; .)
    BOOL            reduce using rule 121 (ForInit -> ; .)
    NEW             reduce using rule 121 (ForInit -> ; .)
    BOOLEAN         reduce using rule 121 (ForInit -> ; .)
    CHAR            reduce using rule 121 (ForInit -> ; .)
    BYTE            reduce using rule 121 (ForInit -> ; .)
    SHORT           reduce using rule 121 (ForInit -> ; .)
    INT             reduce using rule 121 (ForInit -> ; .)
    LONG            reduce using rule 121 (ForInit -> ; .)
    FLOAT           reduce using rule 121 (ForInit -> ; .)
    DOUBLE          reduce using rule 121 (ForInit -> ; .)
    VOID            reduce using rule 121 (ForInit -> ; .)


state 279

    (118) IterationStatement -> FOR ( ForInit . M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (103) M_instr -> .

    ;               reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 332

state 280

    (119) ForInit -> ExpressionStatements . ;
    (127) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    ;               shift and go to state 333
    ,               shift and go to state 334


state 281

    (120) ForInit -> LocalVariableDeclarationStatement .

    ;               reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    +               reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    -               reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    !               reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    (               reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 120 (ForInit -> LocalVariableDeclarationStatement .)


state 282

    (181) PlainNewAllocationExpression -> ArrayAllocationExpression { } .

    .               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    =               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_EQ          reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    *               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    /               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    %               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    +               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    -               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_SOME        reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    <               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    >               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LE           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_GE           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_EQ           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_NE           reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    &               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ^               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    |               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LAND         reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ?               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LOR          reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    :               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ;               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    )               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ,               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    }               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ]               reduce using rule 181 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)


state 283

    (183) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers . }
    (63) ArrayInitializers -> ArrayInitializers . , VariableInitializer
    (64) ArrayInitializers -> ArrayInitializers . ,

    }               shift and go to state 336
    ,               shift and go to state 335


state 284

    (62) ArrayInitializers -> VariableInitializer .

    }               reduce using rule 62 (ArrayInitializers -> VariableInitializer .)
    ,               reduce using rule 62 (ArrayInitializers -> VariableInitializer .)


state 285

    (167) MethodCall -> MethodAccess ( ArgumentList . )
    (176) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 337
    ,               shift and go to state 338


state 286

    (175) ArgumentList -> Expression .

    )               reduce using rule 175 (ArgumentList -> Expression .)
    ,               reduce using rule 175 (ArgumentList -> Expression .)


state 287

    (168) MethodCall -> MethodAccess ( ) .

    [               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    .               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OPT_INC_DEC     reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    =               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OPT_EQ          reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    *               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    /               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    %               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    +               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    -               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OPT_SOME        reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    <               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    >               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OP_LE           reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OP_GE           reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OP_EQ           reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OP_NE           reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    &               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    ^               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    |               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OP_LAND         reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    ?               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    OP_LOR          reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    ;               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    (               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    )               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    ,               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    :               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    }               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)
    ]               reduce using rule 168 (MethodCall -> MethodAccess ( ) .)


state 288

    (229) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (227) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ?               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ,               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    )               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ;               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    :               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    }               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ]               reduce using rule 229 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 184


state 289

    (219) RelationalExpression -> RelationalExpression < ShiftExpression .
    (217) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    >               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LE           reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_GE           reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_EQ           reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_NE           reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    &               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ^               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    |               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LAND         reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ?               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LOR          reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ;               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    }               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ,               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    )               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    :               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ]               reduce using rule 219 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OPT_SOME        shift and go to state 239


state 290

    (221) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (217) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    >               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ?               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ;               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    }               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ,               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    )               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    :               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ]               reduce using rule 221 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OPT_SOME        shift and go to state 239


state 291

    (222) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (217) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    >               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ?               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ;               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    }               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ,               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    )               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    :               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ]               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OPT_SOME        shift and go to state 239


state 292

    (220) RelationalExpression -> RelationalExpression > ShiftExpression .
    (217) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    >               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LE           reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_GE           reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_EQ           reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_NE           reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    &               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ^               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    |               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LAND         reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ?               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LOR          reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ;               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    }               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ,               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    )               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    :               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ]               reduce using rule 220 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OPT_SOME        shift and go to state 239


state 293

    (130) JumpStatement -> CONTINUE IDENTIFIER ; .

    }               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ;               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DEFAULT         reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IF              reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SWITCH          reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    WHILE           reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DO              reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FOR             reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BREAK           reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CONTINUE        reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    RETURN          reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THROW           reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    {               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOLEAN         reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BYTE            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SHORT           reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT             reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    LONG            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT           reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DOUBLE          reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    VOID            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    +               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    -               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ~               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    !               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THIS            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SUPER           reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NULL            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    (               reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOL            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NEW             reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CASE            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ELSE            reduce using rule 130 (JumpStatement -> CONTINUE IDENTIFIER ; .)


state 294

    (161) ArrayAccess -> ComplexPrimary [ Expression . ]

    ]               shift and go to state 339


state 295

    (184) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations . }
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration ;
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (65) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (66) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (77) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (78) ConstructorDeclaration -> . Modifiers ConstructorDeclarator { }
    (79) ConstructorDeclaration -> . ConstructorDeclarator { LocalVariableDeclarationsAndStatements }
    (80) ConstructorDeclaration -> . ConstructorDeclarator { }
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations Rparen
    (35) TypeDeclaration -> . ClassHeader { Rparen
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (89) Lparen -> . {
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 340
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    {               shift and go to state 70
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 58
    ConstructorDeclaration         shift and go to state 42
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 169
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 296

    (182) PlainNewAllocationExpression -> ClassAllocationExpression { } .

    .               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    =               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_EQ          reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    *               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    /               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    %               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    +               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    -               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_SOME        reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    <               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    >               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LE           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_GE           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_EQ           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_NE           reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    &               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ^               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    |               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LAND         reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ?               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LOR          reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    :               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ;               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    )               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ,               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    }               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ]               reduce using rule 182 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)


state 297

    (116) IterationStatement -> WHILE M_instr_branch ( . Expression ) M_instr_branch Statement
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 341
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 298

    (185) ClassAllocationExpression -> NEW TypeName ( . ArgumentList )
    (186) ClassAllocationExpression -> NEW TypeName ( . )
    (175) ArgumentList -> . Expression
    (176) ArgumentList -> . ArgumentList , Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    )               shift and go to state 343
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    ArgumentList                   shift and go to state 342
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 286
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 299

    (187) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (188) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (191) DimExprs -> DimExprs . DimExpr
    (193) Dims -> . OP_DIM
    (194) Dims -> . Dims OP_DIM
    (192) DimExpr -> . [ Expression ]
    (195) OP_DIM -> . [ ]

    {               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    .               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_INC_DEC     reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    =               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_EQ          reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    *               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    /               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    %               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    +               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    -               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_SOME        reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    <               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    >               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ?               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ;               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    )               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ,               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    :               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    }               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ]               reduce using rule 188 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    [               shift and go to state 301

    DimExpr                        shift and go to state 344
    Dims                           shift and go to state 345
    OP_DIM                         shift and go to state 82

state 300

    (189) ArrayAllocationExpression -> NEW TypeName Dims .
    (194) Dims -> Dims . OP_DIM
    (195) OP_DIM -> . [ ]

    {               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    .               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_INC_DEC     reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    =               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_EQ          reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    *               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    /               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    %               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    +               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    -               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_SOME        reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    <               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    >               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ?               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ;               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    )               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ,               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    :               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    }               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ]               reduce using rule 189 (ArrayAllocationExpression -> NEW TypeName Dims .)
    [               shift and go to state 81

    OP_DIM                         shift and go to state 181

state 301

    (192) DimExpr -> [ . Expression ]
    (195) OP_DIM -> [ . ]
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ]               shift and go to state 180
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 346
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 302

    (190) DimExprs -> DimExpr .

    [               reduce using rule 190 (DimExprs -> DimExpr .)
    {               reduce using rule 190 (DimExprs -> DimExpr .)
    .               reduce using rule 190 (DimExprs -> DimExpr .)
    OPT_INC_DEC     reduce using rule 190 (DimExprs -> DimExpr .)
    =               reduce using rule 190 (DimExprs -> DimExpr .)
    OPT_EQ          reduce using rule 190 (DimExprs -> DimExpr .)
    *               reduce using rule 190 (DimExprs -> DimExpr .)
    /               reduce using rule 190 (DimExprs -> DimExpr .)
    %               reduce using rule 190 (DimExprs -> DimExpr .)
    +               reduce using rule 190 (DimExprs -> DimExpr .)
    -               reduce using rule 190 (DimExprs -> DimExpr .)
    OPT_SOME        reduce using rule 190 (DimExprs -> DimExpr .)
    <               reduce using rule 190 (DimExprs -> DimExpr .)
    >               reduce using rule 190 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 190 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 190 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 190 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 190 (DimExprs -> DimExpr .)
    &               reduce using rule 190 (DimExprs -> DimExpr .)
    ^               reduce using rule 190 (DimExprs -> DimExpr .)
    |               reduce using rule 190 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 190 (DimExprs -> DimExpr .)
    ?               reduce using rule 190 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 190 (DimExprs -> DimExpr .)
    ;               reduce using rule 190 (DimExprs -> DimExpr .)
    )               reduce using rule 190 (DimExprs -> DimExpr .)
    ,               reduce using rule 190 (DimExprs -> DimExpr .)
    :               reduce using rule 190 (DimExprs -> DimExpr .)
    }               reduce using rule 190 (DimExprs -> DimExpr .)
    ]               reduce using rule 190 (DimExprs -> DimExpr .)


state 303

    (95) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; . M_instr
    (103) M_instr -> .

    }               reduce using rule 103 (M_instr -> .)
    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 347

state 304

    (112) SelectionStatement -> SWITCH ( Expression . Mark_switch ) Block
    (113) Mark_switch -> .

    )               reduce using rule 113 (Mark_switch -> .)

    Mark_switch                    shift and go to state 348

state 305

    (235) ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP . ConditionalAndExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    Float_LIT                      shift and go to state 140
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    MethodCall                     shift and go to state 105
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    QualifiedName                  shift and go to state 187
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    UnaryExpression                shift and go to state 197
    InclusiveOrExpression          shift and go to state 139
    FieldAccess                    shift and go to state 143
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 349
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    MethodAccess                   shift and go to state 115
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 306

    (238) ConditionalExpression -> ConditionalOrExpression ? M_instr . Expression Mark : M_instr ConditionalExpression M_instr
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 350
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 307

    (214) AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .
    (210) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (211) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (212) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    -               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OPT_SOME        reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    <               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    >               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LE           reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_GE           reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_EQ           reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_NE           reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    &               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ^               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    |               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LAND         reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ?               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LOR          reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ;               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    )               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ,               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    :               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    }               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ]               reduce using rule 214 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    *               shift and go to state 200
    /               shift and go to state 202
    %               shift and go to state 201


state 308

    (215) AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .
    (210) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (211) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (212) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    -               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OPT_SOME        reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    <               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    >               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LE           reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_GE           reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_EQ           reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_NE           reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    &               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ^               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    |               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LAND         reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ?               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LOR          reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ;               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    )               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ,               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    :               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    }               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ]               reduce using rule 215 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    *               shift and go to state 200
    /               shift and go to state 202
    %               shift and go to state 201


state 309

    (241) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    }               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ,               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ;               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ]               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    )               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    :               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 310

    (231) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (229) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ?               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ;               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    )               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ,               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    :               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    }               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ]               reduce using rule 231 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 209


state 311

    (128) JumpStatement -> BREAK IDENTIFIER ; .

    }               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    ;               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    DEFAULT         reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    IF              reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    SWITCH          reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    WHILE           reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    DO              reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    FOR             reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    BREAK           reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    CONTINUE        reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    RETURN          reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    THROW           reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    {               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOLEAN         reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    BYTE            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    SHORT           reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT             reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    LONG            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT           reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    DOUBLE          reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    VOID            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    +               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    -               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    ~               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    !               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    THIS            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    SUPER           reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    NULL            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    (               reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOL            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    NEW             reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    CASE            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)
    ELSE            reduce using rule 128 (JumpStatement -> BREAK IDENTIFIER ; .)


state 312

    (117) IterationStatement -> DO M_instr_branch Statement . WHILE M_instr_branch ( Expression ) ;

    WHILE           shift and go to state 351


state 313

    (164) FieldAccess -> QualifiedName . THIS .

    [               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    .               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OPT_INC_DEC     reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    *               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    /               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    %               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    +               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    -               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OPT_SOME        reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    <               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    >               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OP_LE           reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OP_GE           reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OP_EQ           reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OP_NE           reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    &               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    ^               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    |               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OP_LAND         reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    ?               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OP_LOR          reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    ;               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    )               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    ,               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    :               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    }               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    ]               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    (               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    =               reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)
    OPT_EQ          reduce using rule 164 (FieldAccess -> QualifiedName . THIS .)


state 314

    (178) NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .

    .               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    =               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    *               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    /               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    %               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    +               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    -               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    <               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    >               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LE           reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_GE           reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_NE           reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    &               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ^               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    |               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ?               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ;               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    )               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ,               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    :               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    }               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ]               reduce using rule 178 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)


state 315

    (165) FieldAccess -> QualifiedName . CLASS .

    [               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    .               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OPT_INC_DEC     reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    *               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    /               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    %               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    +               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    -               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OPT_SOME        reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    <               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    >               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OP_LE           reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OP_GE           reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OP_EQ           reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OP_NE           reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    &               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    ^               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    |               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OP_LAND         reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    ?               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OP_LOR          reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    ;               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    )               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    ,               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    :               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    }               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    ]               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    (               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    =               reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)
    OPT_EQ          reduce using rule 165 (FieldAccess -> QualifiedName . CLASS .)


state 316

    (160) ArrayAccess -> QualifiedName [ Expression . ]

    ]               shift and go to state 352


state 317

    (217) ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .
    (214) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (215) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    <               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    >               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LE           reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_GE           reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_EQ           reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_NE           reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    &               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ^               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    |               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LAND         reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ?               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LOR          reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ;               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    )               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ,               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    :               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    }               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ]               reduce using rule 217 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    +               shift and go to state 228
    -               shift and go to state 229


state 318

    (162) FieldAccess -> NotJustName . IDENTIFIER .

    [               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    .               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    *               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    /               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    %               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    +               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    -               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_SOME        reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    <               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    >               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LE           reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_GE           reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_EQ           reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_NE           reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    &               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    ^               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    |               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LAND         reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    ?               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LOR          reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    ;               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    )               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    ,               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    :               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    }               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    ]               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    (               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    =               reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_EQ          reduce using rule 162 (FieldAccess -> NotJustName . IDENTIFIER .)


state 319

    (110) SelectionStatement -> IF ( Expression . ) M_instr_branch Statement
    (111) SelectionStatement -> IF ( Expression . ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement

    )               shift and go to state 353


state 320

    (134) JumpStatement -> THROW Expression ; .

    }               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    ;               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    IDENTIFIER      reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    DEFAULT         reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    IF              reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    SWITCH          reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    WHILE           reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    DO              reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    FOR             reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    BREAK           reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    CONTINUE        reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    RETURN          reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    THROW           reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    {               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    BOOLEAN         reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    CHAR            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    BYTE            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    SHORT           reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    INT             reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    LONG            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    FLOAT           reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    DOUBLE          reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    VOID            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    OPT_INC_DEC     reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    +               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    -               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    ~               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    !               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    THIS            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    SUPER           reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    NULL            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    (               reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    INT_LITERAL     reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    FLOAT_LITERAL   reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    CHAR_LITERAL    reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    STRING_LITERAL  reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    BOOL            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    NEW             reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    CASE            reduce using rule 134 (JumpStatement -> THROW Expression ; .)
    ELSE            reduce using rule 134 (JumpStatement -> THROW Expression ; .)


state 321

    (71) Parameter -> TypeSpecifier DeclaratorName .
    (73) DeclaratorName -> DeclaratorName . OP_DIM
    (195) OP_DIM -> . [ ]

    )               reduce using rule 71 (Parameter -> TypeSpecifier DeclaratorName .)
    ,               reduce using rule 71 (Parameter -> TypeSpecifier DeclaratorName .)
    [               shift and go to state 81

    OP_DIM                         shift and go to state 176

state 322

    (81) ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .

    {               reduce using rule 81 (ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .)


state 323

    (70) ParameterList -> ParameterList , . Parameter
    (71) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 354
    TypeSpecifier                  shift and go to state 248

state 324

    (65) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 65 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 325

    (77) ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements . }
    (92) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (93) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (94) LocalVariableDeclarationOrStatement -> . Statement
    (95) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ; M_instr
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               shift and go to state 355
    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    FieldAccess                    shift and go to state 143
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    TypeSpecifier                  shift and go to state 130
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    QualifiedName                  shift and go to state 150
    MethodAccess                   shift and go to state 115
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    LogicalUnaryOperator           shift and go to state 156
    TypeName                       shift and go to state 53
    Lparen                         shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 152
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    PrimitiveType                  shift and go to state 86
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Char_LIT                       shift and go to state 157
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    LocalVariableDeclarationOrStatement shift and go to state 241
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    UnaryExpression                shift and go to state 138
    SpecialName                    shift and go to state 121
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 326

    (78) ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .

    ;               reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    }               reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    STATIC          reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    IDENTIFIER      reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    PUBLIC          reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    PRIVATE         reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    {               reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    CLASS           reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    INTERFACE       reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    BOOLEAN         reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    CHAR            reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    BYTE            reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    SHORT           reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    INT             reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    LONG            reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    FLOAT           reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    DOUBLE          reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)
    VOID            reduce using rule 78 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { } .)


state 327

    (79) ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .

    ;               reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    }               reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    STATIC          reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    IDENTIFIER      reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    PUBLIC          reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    PRIVATE         reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    {               reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    CLASS           reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    INTERFACE       reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    BOOLEAN         reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    CHAR            reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    BYTE            reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    SHORT           reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    INT             reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    LONG            reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    FLOAT           reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    DOUBLE          reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    VOID            reduce using rule 79 (ConstructorDeclaration -> ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)


state 328

    (67) MethodDeclarator -> DeclaratorName ( ParameterList ) .

    {               reduce using rule 67 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)
    ;               reduce using rule 67 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)


state 329

    (74) MethodBody -> { LocalVariableDeclarationsAndStatements } .

    ;               reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    }               reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    STATIC          reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    IDENTIFIER      reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    PUBLIC          reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    PRIVATE         reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    {               reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    CLASS           reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    INTERFACE       reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    BOOLEAN         reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    CHAR            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    BYTE            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    SHORT           reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    INT             reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    LONG            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT           reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    DOUBLE          reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)
    VOID            reduce using rule 74 (MethodBody -> { LocalVariableDeclarationsAndStatements } .)


state 330

    (106) LabelStatement -> Marker_case CASE ConstantExpression : .

    }               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ;               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    IDENTIFIER      reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DEFAULT         reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    IF              reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SWITCH          reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    WHILE           reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DO              reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FOR             reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BREAK           reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CONTINUE        reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    RETURN          reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    THROW           reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    {               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BOOLEAN         reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CHAR            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BYTE            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SHORT           reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    INT             reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    LONG            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FLOAT           reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    DOUBLE          reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    VOID            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    OPT_INC_DEC     reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    +               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    -               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ~               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    !               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    THIS            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    SUPER           reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    NULL            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    (               reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    INT_LITERAL     reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    FLOAT_LITERAL   reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CHAR_LITERAL    reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    STRING_LITERAL  reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    BOOL            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    NEW             reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    CASE            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)
    ELSE            reduce using rule 106 (LabelStatement -> Marker_case CASE ConstantExpression : .)


state 331

    (233) ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .
    (231) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ?               reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    OP_LOR          reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ;               reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    )               reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ,               reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    :               reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    }               reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    ]               reduce using rule 233 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression .)
    |               shift and go to state 233


state 332

    (118) IterationStatement -> FOR ( ForInit M_instr . ForExpr M_instr ForIncr ) M_instr Statement
    (122) ForExpr -> . Expression ;
    (123) ForExpr -> . ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 357
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ForExpr                        shift and go to state 356
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Expression                     shift and go to state 358
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 333

    (119) ForInit -> ExpressionStatements ; .

    ;               reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    OPT_INC_DEC     reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    +               reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    -               reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    ~               reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    !               reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    IDENTIFIER      reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    THIS            reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    SUPER           reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    NULL            reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    (               reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    INT_LITERAL     reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    FLOAT_LITERAL   reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    CHAR_LITERAL    reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    STRING_LITERAL  reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    BOOL            reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    NEW             reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    BOOLEAN         reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    CHAR            reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    BYTE            reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    SHORT           reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    INT             reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    LONG            reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    FLOAT           reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    DOUBLE          reduce using rule 119 (ForInit -> ExpressionStatements ; .)
    VOID            reduce using rule 119 (ForInit -> ExpressionStatements ; .)


state 334

    (127) ExpressionStatements -> ExpressionStatements , . ExpressionStatement
    (109) ExpressionStatement -> . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ExpressionStatement            shift and go to state 359
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 135
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 335

    (63) ArrayInitializers -> ArrayInitializers , . VariableInitializer
    (64) ArrayInitializers -> ArrayInitializers , .
    (61) VariableInitializer -> . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    }               reduce using rule 64 (ArrayInitializers -> ArrayInitializers , .)
    ,               reduce using rule 64 (ArrayInitializers -> ArrayInitializers , .)
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    VariableInitializer            shift and go to state 360
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 260
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 336

    (183) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .

    .               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_INC_DEC     reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    =               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_EQ          reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    *               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    /               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    %               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    +               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    -               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_SOME        reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    <               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    >               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LE           reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_GE           reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_EQ           reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_NE           reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    &               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ^               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    |               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LAND         reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ?               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LOR          reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    :               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ;               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    )               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ,               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    }               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ]               reduce using rule 183 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)


state 337

    (167) MethodCall -> MethodAccess ( ArgumentList ) .

    [               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    .               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    =               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_EQ          reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    *               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    /               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    %               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    +               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    -               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_SOME        reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    <               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    >               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LE           reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_GE           reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_EQ           reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_NE           reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    &               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ^               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    |               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LAND         reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ?               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LOR          reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ;               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    (               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    )               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ,               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    :               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    }               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ]               reduce using rule 167 (MethodCall -> MethodAccess ( ArgumentList ) .)


state 338

    (176) ArgumentList -> ArgumentList , . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 361
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 339

    (161) ArrayAccess -> ComplexPrimary [ Expression ] .

    [               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    .               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_INC_DEC     reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    =               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_EQ          reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    *               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    /               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    %               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    +               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    -               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_SOME        reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    <               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    >               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LE           reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_GE           reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_EQ           reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_NE           reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    &               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ^               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    |               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LAND         reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ?               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LOR          reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    )               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ,               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    (               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ;               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    :               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    }               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ]               reduce using rule 161 (ArrayAccess -> ComplexPrimary [ Expression ] .)


state 340

    (184) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .

    .               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_INC_DEC     reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    =               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_EQ          reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    *               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    /               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    %               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    +               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    -               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_SOME        reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    <               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    >               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LE           reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_GE           reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_EQ           reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_NE           reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    &               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ^               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    |               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LAND         reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ?               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LOR          reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    :               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ;               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    )               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ,               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    }               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ]               reduce using rule 184 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)


state 341

    (116) IterationStatement -> WHILE M_instr_branch ( Expression . ) M_instr_branch Statement

    )               shift and go to state 362


state 342

    (185) ClassAllocationExpression -> NEW TypeName ( ArgumentList . )
    (176) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 363
    ,               shift and go to state 338


state 343

    (186) ClassAllocationExpression -> NEW TypeName ( ) .

    {               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    .               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_INC_DEC     reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    =               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_EQ          reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    *               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    /               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    %               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    +               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    -               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_SOME        reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    <               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    >               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LE           reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_GE           reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_EQ           reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_NE           reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    &               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ^               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    |               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LAND         reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ?               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LOR          reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    )               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ,               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ;               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ]               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    :               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)
    }               reduce using rule 186 (ClassAllocationExpression -> NEW TypeName ( ) .)


state 344

    (191) DimExprs -> DimExprs DimExpr .

    [               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    {               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    .               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OPT_INC_DEC     reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    =               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OPT_EQ          reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    *               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    /               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    %               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    +               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    -               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OPT_SOME        reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    <               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    >               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    ?               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    ;               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    )               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    ,               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    :               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    }               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)
    ]               reduce using rule 191 (DimExprs -> DimExprs DimExpr .)


state 345

    (187) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (194) Dims -> Dims . OP_DIM
    (195) OP_DIM -> . [ ]

    {               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    .               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_INC_DEC     reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    =               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_EQ          reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    *               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    /               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    %               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    +               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    -               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_SOME        reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    <               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    >               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ?               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ;               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    )               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ,               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    :               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    }               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ]               reduce using rule 187 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    [               shift and go to state 81

    OP_DIM                         shift and go to state 181

state 346

    (192) DimExpr -> [ Expression . ]

    ]               shift and go to state 364


state 347

    (95) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .

    }               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    ;               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    IDENTIFIER      reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DEFAULT         reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    IF              reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SWITCH          reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    WHILE           reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DO              reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FOR             reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BREAK           reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CONTINUE        reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    RETURN          reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    THROW           reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    {               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BOOLEAN         reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CHAR            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BYTE            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SHORT           reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    INT             reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    LONG            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FLOAT           reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    DOUBLE          reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    VOID            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    OPT_INC_DEC     reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    +               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    -               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    ~               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    !               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    THIS            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    SUPER           reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    NULL            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    (               reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    INT_LITERAL     reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    FLOAT_LITERAL   reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CHAR_LITERAL    reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    STRING_LITERAL  reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    BOOL            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    NEW             reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)
    CASE            reduce using rule 95 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; M_instr .)


state 348

    (112) SelectionStatement -> SWITCH ( Expression Mark_switch . ) Block

    )               shift and go to state 365


state 349

    (235) ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .
    (233) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND M_OP InclusiveOrExpression

    ?               reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    OP_LOR          reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    )               reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ;               reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ,               reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    }               reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    :               reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    ]               reduce using rule 235 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression .)
    OP_LAND         shift and go to state 190


state 350

    (238) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression . Mark : M_instr ConditionalExpression M_instr
    (239) Mark -> .

    :               reduce using rule 239 (Mark -> .)

    Mark                           shift and go to state 366

state 351

    (117) IterationStatement -> DO M_instr_branch Statement WHILE . M_instr_branch ( Expression ) ;
    (115) M_instr_branch -> .

    (               reduce using rule 115 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 367

state 352

    (160) ArrayAccess -> QualifiedName [ Expression ] .

    [               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    .               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_INC_DEC     reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    =               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_EQ          reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    *               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    /               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    %               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    +               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    -               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_SOME        reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    <               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    >               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LE           reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_GE           reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_EQ           reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_NE           reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    &               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    ^               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    |               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LAND         reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    ?               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LOR          reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    )               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    ,               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    (               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    ;               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    :               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    }               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)
    ]               reduce using rule 160 (ArrayAccess -> QualifiedName [ Expression ] .)


state 353

    (110) SelectionStatement -> IF ( Expression ) . M_instr_branch Statement
    (111) SelectionStatement -> IF ( Expression ) . M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (115) M_instr_branch -> .

    ;               reduce using rule 115 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 115 (M_instr_branch -> .)
    DEFAULT         reduce using rule 115 (M_instr_branch -> .)
    IF              reduce using rule 115 (M_instr_branch -> .)
    SWITCH          reduce using rule 115 (M_instr_branch -> .)
    WHILE           reduce using rule 115 (M_instr_branch -> .)
    DO              reduce using rule 115 (M_instr_branch -> .)
    FOR             reduce using rule 115 (M_instr_branch -> .)
    BREAK           reduce using rule 115 (M_instr_branch -> .)
    CONTINUE        reduce using rule 115 (M_instr_branch -> .)
    RETURN          reduce using rule 115 (M_instr_branch -> .)
    THROW           reduce using rule 115 (M_instr_branch -> .)
    {               reduce using rule 115 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 115 (M_instr_branch -> .)
    +               reduce using rule 115 (M_instr_branch -> .)
    -               reduce using rule 115 (M_instr_branch -> .)
    ~               reduce using rule 115 (M_instr_branch -> .)
    !               reduce using rule 115 (M_instr_branch -> .)
    THIS            reduce using rule 115 (M_instr_branch -> .)
    SUPER           reduce using rule 115 (M_instr_branch -> .)
    NULL            reduce using rule 115 (M_instr_branch -> .)
    (               reduce using rule 115 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 115 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 115 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 115 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 115 (M_instr_branch -> .)
    BOOL            reduce using rule 115 (M_instr_branch -> .)
    NEW             reduce using rule 115 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 115 (M_instr_branch -> .)
    CHAR            reduce using rule 115 (M_instr_branch -> .)
    BYTE            reduce using rule 115 (M_instr_branch -> .)
    SHORT           reduce using rule 115 (M_instr_branch -> .)
    INT             reduce using rule 115 (M_instr_branch -> .)
    LONG            reduce using rule 115 (M_instr_branch -> .)
    FLOAT           reduce using rule 115 (M_instr_branch -> .)
    DOUBLE          reduce using rule 115 (M_instr_branch -> .)
    VOID            reduce using rule 115 (M_instr_branch -> .)
    CASE            reduce using rule 115 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 368

state 354

    (70) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 70 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 70 (ParameterList -> ParameterList , Parameter .)


state 355

    (77) ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .

    ;               reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    }               reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    STATIC          reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    IDENTIFIER      reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    PUBLIC          reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    PRIVATE         reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    {               reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    CLASS           reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    INTERFACE       reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    BOOLEAN         reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    CHAR            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    BYTE            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    SHORT           reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    INT             reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    LONG            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    FLOAT           reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    DOUBLE          reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)
    VOID            reduce using rule 77 (ConstructorDeclaration -> Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } .)


state 356

    (118) IterationStatement -> FOR ( ForInit M_instr ForExpr . M_instr ForIncr ) M_instr Statement
    (103) M_instr -> .

    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    )               reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 369

state 357

    (123) ForExpr -> ; .

    OPT_INC_DEC     reduce using rule 123 (ForExpr -> ; .)
    +               reduce using rule 123 (ForExpr -> ; .)
    -               reduce using rule 123 (ForExpr -> ; .)
    ~               reduce using rule 123 (ForExpr -> ; .)
    !               reduce using rule 123 (ForExpr -> ; .)
    IDENTIFIER      reduce using rule 123 (ForExpr -> ; .)
    THIS            reduce using rule 123 (ForExpr -> ; .)
    SUPER           reduce using rule 123 (ForExpr -> ; .)
    NULL            reduce using rule 123 (ForExpr -> ; .)
    (               reduce using rule 123 (ForExpr -> ; .)
    INT_LITERAL     reduce using rule 123 (ForExpr -> ; .)
    FLOAT_LITERAL   reduce using rule 123 (ForExpr -> ; .)
    CHAR_LITERAL    reduce using rule 123 (ForExpr -> ; .)
    STRING_LITERAL  reduce using rule 123 (ForExpr -> ; .)
    BOOL            reduce using rule 123 (ForExpr -> ; .)
    NEW             reduce using rule 123 (ForExpr -> ; .)
    BOOLEAN         reduce using rule 123 (ForExpr -> ; .)
    CHAR            reduce using rule 123 (ForExpr -> ; .)
    BYTE            reduce using rule 123 (ForExpr -> ; .)
    SHORT           reduce using rule 123 (ForExpr -> ; .)
    INT             reduce using rule 123 (ForExpr -> ; .)
    LONG            reduce using rule 123 (ForExpr -> ; .)
    FLOAT           reduce using rule 123 (ForExpr -> ; .)
    DOUBLE          reduce using rule 123 (ForExpr -> ; .)
    VOID            reduce using rule 123 (ForExpr -> ; .)
    )               reduce using rule 123 (ForExpr -> ; .)


state 358

    (122) ForExpr -> Expression . ;

    ;               shift and go to state 370


state 359

    (127) ExpressionStatements -> ExpressionStatements , ExpressionStatement .

    ,               reduce using rule 127 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    )               reduce using rule 127 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    ;               reduce using rule 127 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)


state 360

    (63) ArrayInitializers -> ArrayInitializers , VariableInitializer .

    }               reduce using rule 63 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)
    ,               reduce using rule 63 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)


state 361

    (176) ArgumentList -> ArgumentList , Expression .

    )               reduce using rule 176 (ArgumentList -> ArgumentList , Expression .)
    ,               reduce using rule 176 (ArgumentList -> ArgumentList , Expression .)


state 362

    (116) IterationStatement -> WHILE M_instr_branch ( Expression ) . M_instr_branch Statement
    (115) M_instr_branch -> .

    ;               reduce using rule 115 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 115 (M_instr_branch -> .)
    DEFAULT         reduce using rule 115 (M_instr_branch -> .)
    IF              reduce using rule 115 (M_instr_branch -> .)
    SWITCH          reduce using rule 115 (M_instr_branch -> .)
    WHILE           reduce using rule 115 (M_instr_branch -> .)
    DO              reduce using rule 115 (M_instr_branch -> .)
    FOR             reduce using rule 115 (M_instr_branch -> .)
    BREAK           reduce using rule 115 (M_instr_branch -> .)
    CONTINUE        reduce using rule 115 (M_instr_branch -> .)
    RETURN          reduce using rule 115 (M_instr_branch -> .)
    THROW           reduce using rule 115 (M_instr_branch -> .)
    {               reduce using rule 115 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 115 (M_instr_branch -> .)
    +               reduce using rule 115 (M_instr_branch -> .)
    -               reduce using rule 115 (M_instr_branch -> .)
    ~               reduce using rule 115 (M_instr_branch -> .)
    !               reduce using rule 115 (M_instr_branch -> .)
    THIS            reduce using rule 115 (M_instr_branch -> .)
    SUPER           reduce using rule 115 (M_instr_branch -> .)
    NULL            reduce using rule 115 (M_instr_branch -> .)
    (               reduce using rule 115 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 115 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 115 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 115 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 115 (M_instr_branch -> .)
    BOOL            reduce using rule 115 (M_instr_branch -> .)
    NEW             reduce using rule 115 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 115 (M_instr_branch -> .)
    CHAR            reduce using rule 115 (M_instr_branch -> .)
    BYTE            reduce using rule 115 (M_instr_branch -> .)
    SHORT           reduce using rule 115 (M_instr_branch -> .)
    INT             reduce using rule 115 (M_instr_branch -> .)
    LONG            reduce using rule 115 (M_instr_branch -> .)
    FLOAT           reduce using rule 115 (M_instr_branch -> .)
    DOUBLE          reduce using rule 115 (M_instr_branch -> .)
    VOID            reduce using rule 115 (M_instr_branch -> .)
    CASE            reduce using rule 115 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 371

state 363

    (185) ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .

    {               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    .               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    =               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_EQ          reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    *               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    /               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    %               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    +               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    -               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_SOME        reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    <               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    >               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LE           reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_GE           reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_EQ           reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_NE           reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    &               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ^               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    |               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LAND         reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ?               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LOR          reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    )               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ,               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ;               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ]               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    :               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    }               reduce using rule 185 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)


state 364

    (192) DimExpr -> [ Expression ] .

    [               reduce using rule 192 (DimExpr -> [ Expression ] .)
    {               reduce using rule 192 (DimExpr -> [ Expression ] .)
    .               reduce using rule 192 (DimExpr -> [ Expression ] .)
    OPT_INC_DEC     reduce using rule 192 (DimExpr -> [ Expression ] .)
    =               reduce using rule 192 (DimExpr -> [ Expression ] .)
    OPT_EQ          reduce using rule 192 (DimExpr -> [ Expression ] .)
    *               reduce using rule 192 (DimExpr -> [ Expression ] .)
    /               reduce using rule 192 (DimExpr -> [ Expression ] .)
    %               reduce using rule 192 (DimExpr -> [ Expression ] .)
    +               reduce using rule 192 (DimExpr -> [ Expression ] .)
    -               reduce using rule 192 (DimExpr -> [ Expression ] .)
    OPT_SOME        reduce using rule 192 (DimExpr -> [ Expression ] .)
    <               reduce using rule 192 (DimExpr -> [ Expression ] .)
    >               reduce using rule 192 (DimExpr -> [ Expression ] .)
    OP_LE           reduce using rule 192 (DimExpr -> [ Expression ] .)
    OP_GE           reduce using rule 192 (DimExpr -> [ Expression ] .)
    OP_EQ           reduce using rule 192 (DimExpr -> [ Expression ] .)
    OP_NE           reduce using rule 192 (DimExpr -> [ Expression ] .)
    &               reduce using rule 192 (DimExpr -> [ Expression ] .)
    ^               reduce using rule 192 (DimExpr -> [ Expression ] .)
    |               reduce using rule 192 (DimExpr -> [ Expression ] .)
    OP_LAND         reduce using rule 192 (DimExpr -> [ Expression ] .)
    ?               reduce using rule 192 (DimExpr -> [ Expression ] .)
    OP_LOR          reduce using rule 192 (DimExpr -> [ Expression ] .)
    ;               reduce using rule 192 (DimExpr -> [ Expression ] .)
    )               reduce using rule 192 (DimExpr -> [ Expression ] .)
    ,               reduce using rule 192 (DimExpr -> [ Expression ] .)
    :               reduce using rule 192 (DimExpr -> [ Expression ] .)
    }               reduce using rule 192 (DimExpr -> [ Expression ] .)
    ]               reduce using rule 192 (DimExpr -> [ Expression ] .)


state 365

    (112) SelectionStatement -> SWITCH ( Expression Mark_switch ) . Block
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (89) Lparen -> . {

    {               shift and go to state 70

    Lparen                         shift and go to state 54
    Block                          shift and go to state 372

state 366

    (238) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark . : M_instr ConditionalExpression M_instr

    :               shift and go to state 373


state 367

    (117) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch . ( Expression ) ;

    (               shift and go to state 374


state 368

    (110) SelectionStatement -> IF ( Expression ) M_instr_branch . Statement
    (111) SelectionStatement -> IF ( Expression ) M_instr_branch . Statement ELSE N_instr M_instr_branch Statement
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    Statement                      shift and go to state 375
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    PrimitiveType                  shift and go to state 185
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    SpecialName                    shift and go to state 121
    FieldAccess                    shift and go to state 143
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 369

    (118) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr . ForIncr ) M_instr Statement
    (124) ForIncr -> . ExpressionStatements
    (125) ForIncr -> .
    (126) ExpressionStatements -> . ExpressionStatement
    (127) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (109) ExpressionStatement -> . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    )               reduce using rule 125 (ForIncr -> .)
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    ArithmeticUnaryOperator        shift and go to state 100
    ExclusiveOrExpression          shift and go to state 116
    ExpressionStatement            shift and go to state 277
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Expression                     shift and go to state 135
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    PrimaryExpression              shift and go to state 131
    ExpressionStatements           shift and go to state 377
    ConditionalAndExpression       shift and go to state 95
    ForIncr                        shift and go to state 376
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 370

    (122) ForExpr -> Expression ; .

    OPT_INC_DEC     reduce using rule 122 (ForExpr -> Expression ; .)
    +               reduce using rule 122 (ForExpr -> Expression ; .)
    -               reduce using rule 122 (ForExpr -> Expression ; .)
    ~               reduce using rule 122 (ForExpr -> Expression ; .)
    !               reduce using rule 122 (ForExpr -> Expression ; .)
    IDENTIFIER      reduce using rule 122 (ForExpr -> Expression ; .)
    THIS            reduce using rule 122 (ForExpr -> Expression ; .)
    SUPER           reduce using rule 122 (ForExpr -> Expression ; .)
    NULL            reduce using rule 122 (ForExpr -> Expression ; .)
    (               reduce using rule 122 (ForExpr -> Expression ; .)
    INT_LITERAL     reduce using rule 122 (ForExpr -> Expression ; .)
    FLOAT_LITERAL   reduce using rule 122 (ForExpr -> Expression ; .)
    CHAR_LITERAL    reduce using rule 122 (ForExpr -> Expression ; .)
    STRING_LITERAL  reduce using rule 122 (ForExpr -> Expression ; .)
    BOOL            reduce using rule 122 (ForExpr -> Expression ; .)
    NEW             reduce using rule 122 (ForExpr -> Expression ; .)
    BOOLEAN         reduce using rule 122 (ForExpr -> Expression ; .)
    CHAR            reduce using rule 122 (ForExpr -> Expression ; .)
    BYTE            reduce using rule 122 (ForExpr -> Expression ; .)
    SHORT           reduce using rule 122 (ForExpr -> Expression ; .)
    INT             reduce using rule 122 (ForExpr -> Expression ; .)
    LONG            reduce using rule 122 (ForExpr -> Expression ; .)
    FLOAT           reduce using rule 122 (ForExpr -> Expression ; .)
    DOUBLE          reduce using rule 122 (ForExpr -> Expression ; .)
    VOID            reduce using rule 122 (ForExpr -> Expression ; .)
    )               reduce using rule 122 (ForExpr -> Expression ; .)


state 371

    (116) IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch . Statement
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    Statement                      shift and go to state 378
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    PrimitiveType                  shift and go to state 185
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    SpecialName                    shift and go to state 121
    FieldAccess                    shift and go to state 143
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 372

    (112) SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .

    }               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    ;               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    IDENTIFIER      reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DEFAULT         reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    IF              reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SWITCH          reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    WHILE           reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DO              reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FOR             reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BREAK           reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CONTINUE        reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    RETURN          reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    THROW           reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    {               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BOOLEAN         reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CHAR            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BYTE            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SHORT           reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    INT             reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    LONG            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FLOAT           reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    DOUBLE          reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    VOID            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    OPT_INC_DEC     reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    +               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    -               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    ~               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    !               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    THIS            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    SUPER           reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    NULL            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    (               reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    INT_LITERAL     reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    FLOAT_LITERAL   reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CHAR_LITERAL    reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    STRING_LITERAL  reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    BOOL            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    NEW             reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    CASE            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)
    ELSE            reduce using rule 112 (SelectionStatement -> SWITCH ( Expression Mark_switch ) Block .)


state 373

    (238) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : . M_instr ConditionalExpression M_instr
    (103) M_instr -> .

    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 379

state 374

    (117) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( . Expression ) ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    FieldAccess                    shift and go to state 143
    PrimaryExpression              shift and go to state 131
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    Expression                     shift and go to state 380
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    UnaryExpression                shift and go to state 138
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 375

    (110) SelectionStatement -> IF ( Expression ) M_instr_branch Statement .
    (111) SelectionStatement -> IF ( Expression ) M_instr_branch Statement . ELSE N_instr M_instr_branch Statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ;               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DEFAULT         reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    IF              reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SWITCH          reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    WHILE           reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DO              reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FOR             reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BREAK           reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CONTINUE        reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    RETURN          reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    THROW           reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    {               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BOOLEAN         reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CHAR            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BYTE            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SHORT           reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    INT             reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    LONG            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FLOAT           reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    DOUBLE          reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    VOID            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    OPT_INC_DEC     reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    +               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    -               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ~               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    !               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    THIS            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    SUPER           reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    NULL            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    (               reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    BOOL            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    NEW             reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    CASE            reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .)
    ELSE            shift and go to state 381

  ! ELSE            [ reduce using rule 110 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement .) ]


state 376

    (118) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr . ) M_instr Statement

    )               shift and go to state 382


state 377

    (124) ForIncr -> ExpressionStatements .
    (127) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    )               reduce using rule 124 (ForIncr -> ExpressionStatements .)
    ,               shift and go to state 334


state 378

    (116) IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .

    WHILE           reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    }               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    ;               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DEFAULT         reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    IF              reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SWITCH          reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DO              reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FOR             reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BREAK           reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CONTINUE        reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    RETURN          reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    THROW           reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    {               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BOOLEAN         reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CHAR            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BYTE            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SHORT           reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    INT             reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    LONG            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FLOAT           reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    DOUBLE          reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    VOID            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    OPT_INC_DEC     reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    +               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    -               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    ~               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    !               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    THIS            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    SUPER           reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    NULL            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    (               reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    BOOL            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    NEW             reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    CASE            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)
    ELSE            reduce using rule 116 (IterationStatement -> WHILE M_instr_branch ( Expression ) M_instr_branch Statement .)


state 379

    (238) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr . ConditionalExpression M_instr
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    ComplexPrimary                 shift and go to state 122
    Bool_LIT                       shift and go to state 84
    CastExpression                 shift and go to state 147
    PrimitiveType                  shift and go to state 185
    RealPostfixExpression          shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 100
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 112
    PrimaryExpression              shift and go to state 131
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    MultiplicativeExpression       shift and go to state 103
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 153
    NewAllocationExpression        shift and go to state 134
    NotJustName                    shift and go to state 155
    Char_LIT                       shift and go to state 157
    MethodCall                     shift and go to state 105
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 383
    UnaryExpression                shift and go to state 197
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    FieldAccess                    shift and go to state 143
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    Float_LIT                      shift and go to state 140
    SpecialName                    shift and go to state 121
    Integer_LIT                    shift and go to state 90

state 380

    (117) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression . ) ;

    )               shift and go to state 384


state 381

    (111) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE . N_instr M_instr_branch Statement
    (114) N_instr -> .

    ;               reduce using rule 114 (N_instr -> .)
    IDENTIFIER      reduce using rule 114 (N_instr -> .)
    DEFAULT         reduce using rule 114 (N_instr -> .)
    IF              reduce using rule 114 (N_instr -> .)
    SWITCH          reduce using rule 114 (N_instr -> .)
    WHILE           reduce using rule 114 (N_instr -> .)
    DO              reduce using rule 114 (N_instr -> .)
    FOR             reduce using rule 114 (N_instr -> .)
    BREAK           reduce using rule 114 (N_instr -> .)
    CONTINUE        reduce using rule 114 (N_instr -> .)
    RETURN          reduce using rule 114 (N_instr -> .)
    THROW           reduce using rule 114 (N_instr -> .)
    {               reduce using rule 114 (N_instr -> .)
    OPT_INC_DEC     reduce using rule 114 (N_instr -> .)
    +               reduce using rule 114 (N_instr -> .)
    -               reduce using rule 114 (N_instr -> .)
    ~               reduce using rule 114 (N_instr -> .)
    !               reduce using rule 114 (N_instr -> .)
    THIS            reduce using rule 114 (N_instr -> .)
    SUPER           reduce using rule 114 (N_instr -> .)
    NULL            reduce using rule 114 (N_instr -> .)
    (               reduce using rule 114 (N_instr -> .)
    INT_LITERAL     reduce using rule 114 (N_instr -> .)
    FLOAT_LITERAL   reduce using rule 114 (N_instr -> .)
    CHAR_LITERAL    reduce using rule 114 (N_instr -> .)
    STRING_LITERAL  reduce using rule 114 (N_instr -> .)
    BOOL            reduce using rule 114 (N_instr -> .)
    NEW             reduce using rule 114 (N_instr -> .)
    BOOLEAN         reduce using rule 114 (N_instr -> .)
    CHAR            reduce using rule 114 (N_instr -> .)
    BYTE            reduce using rule 114 (N_instr -> .)
    SHORT           reduce using rule 114 (N_instr -> .)
    INT             reduce using rule 114 (N_instr -> .)
    LONG            reduce using rule 114 (N_instr -> .)
    FLOAT           reduce using rule 114 (N_instr -> .)
    DOUBLE          reduce using rule 114 (N_instr -> .)
    VOID            reduce using rule 114 (N_instr -> .)
    CASE            reduce using rule 114 (N_instr -> .)

    N_instr                        shift and go to state 385

state 382

    (118) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) . M_instr Statement
    (103) M_instr -> .

    ;               reduce using rule 103 (M_instr -> .)
    IDENTIFIER      reduce using rule 103 (M_instr -> .)
    DEFAULT         reduce using rule 103 (M_instr -> .)
    IF              reduce using rule 103 (M_instr -> .)
    SWITCH          reduce using rule 103 (M_instr -> .)
    WHILE           reduce using rule 103 (M_instr -> .)
    DO              reduce using rule 103 (M_instr -> .)
    FOR             reduce using rule 103 (M_instr -> .)
    BREAK           reduce using rule 103 (M_instr -> .)
    CONTINUE        reduce using rule 103 (M_instr -> .)
    RETURN          reduce using rule 103 (M_instr -> .)
    THROW           reduce using rule 103 (M_instr -> .)
    {               reduce using rule 103 (M_instr -> .)
    OPT_INC_DEC     reduce using rule 103 (M_instr -> .)
    +               reduce using rule 103 (M_instr -> .)
    -               reduce using rule 103 (M_instr -> .)
    ~               reduce using rule 103 (M_instr -> .)
    !               reduce using rule 103 (M_instr -> .)
    THIS            reduce using rule 103 (M_instr -> .)
    SUPER           reduce using rule 103 (M_instr -> .)
    NULL            reduce using rule 103 (M_instr -> .)
    (               reduce using rule 103 (M_instr -> .)
    INT_LITERAL     reduce using rule 103 (M_instr -> .)
    FLOAT_LITERAL   reduce using rule 103 (M_instr -> .)
    CHAR_LITERAL    reduce using rule 103 (M_instr -> .)
    STRING_LITERAL  reduce using rule 103 (M_instr -> .)
    BOOL            reduce using rule 103 (M_instr -> .)
    NEW             reduce using rule 103 (M_instr -> .)
    BOOLEAN         reduce using rule 103 (M_instr -> .)
    CHAR            reduce using rule 103 (M_instr -> .)
    BYTE            reduce using rule 103 (M_instr -> .)
    SHORT           reduce using rule 103 (M_instr -> .)
    INT             reduce using rule 103 (M_instr -> .)
    LONG            reduce using rule 103 (M_instr -> .)
    FLOAT           reduce using rule 103 (M_instr -> .)
    DOUBLE          reduce using rule 103 (M_instr -> .)
    VOID            reduce using rule 103 (M_instr -> .)
    CASE            reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 386

state 383

    (238) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression . M_instr
    (103) M_instr -> .

    ;               reduce using rule 103 (M_instr -> .)
    )               reduce using rule 103 (M_instr -> .)
    ,               reduce using rule 103 (M_instr -> .)
    :               reduce using rule 103 (M_instr -> .)
    }               reduce using rule 103 (M_instr -> .)
    ]               reduce using rule 103 (M_instr -> .)

    M_instr                        shift and go to state 387

state 384

    (117) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) . ;

    ;               shift and go to state 388


state 385

    (111) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr . M_instr_branch Statement
    (115) M_instr_branch -> .

    ;               reduce using rule 115 (M_instr_branch -> .)
    IDENTIFIER      reduce using rule 115 (M_instr_branch -> .)
    DEFAULT         reduce using rule 115 (M_instr_branch -> .)
    IF              reduce using rule 115 (M_instr_branch -> .)
    SWITCH          reduce using rule 115 (M_instr_branch -> .)
    WHILE           reduce using rule 115 (M_instr_branch -> .)
    DO              reduce using rule 115 (M_instr_branch -> .)
    FOR             reduce using rule 115 (M_instr_branch -> .)
    BREAK           reduce using rule 115 (M_instr_branch -> .)
    CONTINUE        reduce using rule 115 (M_instr_branch -> .)
    RETURN          reduce using rule 115 (M_instr_branch -> .)
    THROW           reduce using rule 115 (M_instr_branch -> .)
    {               reduce using rule 115 (M_instr_branch -> .)
    OPT_INC_DEC     reduce using rule 115 (M_instr_branch -> .)
    +               reduce using rule 115 (M_instr_branch -> .)
    -               reduce using rule 115 (M_instr_branch -> .)
    ~               reduce using rule 115 (M_instr_branch -> .)
    !               reduce using rule 115 (M_instr_branch -> .)
    THIS            reduce using rule 115 (M_instr_branch -> .)
    SUPER           reduce using rule 115 (M_instr_branch -> .)
    NULL            reduce using rule 115 (M_instr_branch -> .)
    (               reduce using rule 115 (M_instr_branch -> .)
    INT_LITERAL     reduce using rule 115 (M_instr_branch -> .)
    FLOAT_LITERAL   reduce using rule 115 (M_instr_branch -> .)
    CHAR_LITERAL    reduce using rule 115 (M_instr_branch -> .)
    STRING_LITERAL  reduce using rule 115 (M_instr_branch -> .)
    BOOL            reduce using rule 115 (M_instr_branch -> .)
    NEW             reduce using rule 115 (M_instr_branch -> .)
    BOOLEAN         reduce using rule 115 (M_instr_branch -> .)
    CHAR            reduce using rule 115 (M_instr_branch -> .)
    BYTE            reduce using rule 115 (M_instr_branch -> .)
    SHORT           reduce using rule 115 (M_instr_branch -> .)
    INT             reduce using rule 115 (M_instr_branch -> .)
    LONG            reduce using rule 115 (M_instr_branch -> .)
    FLOAT           reduce using rule 115 (M_instr_branch -> .)
    DOUBLE          reduce using rule 115 (M_instr_branch -> .)
    VOID            reduce using rule 115 (M_instr_branch -> .)
    CASE            reduce using rule 115 (M_instr_branch -> .)

    M_instr_branch                 shift and go to state 389

state 386

    (118) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr . Statement
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    Statement                      shift and go to state 390
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    PrimitiveType                  shift and go to state 185
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    SpecialName                    shift and go to state 121
    FieldAccess                    shift and go to state 143
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 387

    (238) ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .

    ;               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    ,               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    )               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    }               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    :               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)
    ]               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr .)


state 388

    (117) IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .

    WHILE           reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    }               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    ;               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    IDENTIFIER      reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DEFAULT         reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    IF              reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SWITCH          reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DO              reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FOR             reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BREAK           reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CONTINUE        reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    RETURN          reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    THROW           reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    {               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BOOLEAN         reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CHAR            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BYTE            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SHORT           reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    INT             reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    LONG            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FLOAT           reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    DOUBLE          reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    VOID            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    OPT_INC_DEC     reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    +               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    -               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    ~               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    !               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    THIS            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    SUPER           reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    NULL            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    (               reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    INT_LITERAL     reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    FLOAT_LITERAL   reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CHAR_LITERAL    reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    STRING_LITERAL  reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    BOOL            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    NEW             reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    CASE            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)
    ELSE            reduce using rule 117 (IterationStatement -> DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ; .)


state 389

    (111) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch . Statement
    (96) Statement -> . EmptyStatement M_instr
    (97) Statement -> . LabelStatement M_instr
    (98) Statement -> . ExpressionStatement ; M_instr
    (99) Statement -> . SelectionStatement M_instr
    (100) Statement -> . IterationStatement M_instr
    (101) Statement -> . JumpStatement M_instr
    (102) Statement -> . Block M_instr
    (104) EmptyStatement -> . ;
    (105) LabelStatement -> . IDENTIFIER :
    (106) LabelStatement -> . Marker_case CASE ConstantExpression :
    (107) LabelStatement -> . DEFAULT :
    (109) ExpressionStatement -> . Expression
    (110) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement
    (111) SelectionStatement -> . IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement
    (112) SelectionStatement -> . SWITCH ( Expression Mark_switch ) Block
    (116) IterationStatement -> . WHILE M_instr_branch ( Expression ) M_instr_branch Statement
    (117) IterationStatement -> . DO M_instr_branch Statement WHILE M_instr_branch ( Expression ) ;
    (118) IterationStatement -> . FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement
    (128) JumpStatement -> . BREAK IDENTIFIER ;
    (129) JumpStatement -> . BREAK ;
    (130) JumpStatement -> . CONTINUE IDENTIFIER ;
    (131) JumpStatement -> . CONTINUE ;
    (132) JumpStatement -> . RETURN Expression ;
    (133) JumpStatement -> . RETURN ;
    (134) JumpStatement -> . THROW Expression ;
    (87) Block -> . Lparen LocalVariableDeclarationsAndStatements Rparen
    (88) Block -> . Lparen Rparen
    (108) Marker_case -> .
    (244) Expression -> . AssignmentExpression
    (89) Lparen -> . {
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (237) ConditionalExpression -> . ConditionalOrExpression
    (238) ConditionalExpression -> . ConditionalOrExpression ? M_instr Expression Mark : M_instr ConditionalExpression M_instr
    (199) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (200) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (201) UnaryExpression -> . LogicalUnaryExpression
    (234) ConditionalOrExpression -> . ConditionalAndExpression
    (235) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR M_OP ConditionalAndExpression
    (206) ArithmeticUnaryOperator -> . +
    (207) ArithmeticUnaryOperator -> . -
    (202) LogicalUnaryExpression -> . PostfixExpression
    (203) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (232) ConditionalAndExpression -> . InclusiveOrExpression
    (233) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND M_OP InclusiveOrExpression
    (196) PostfixExpression -> . PrimaryExpression
    (197) PostfixExpression -> . RealPostfixExpression
    (204) LogicalUnaryOperator -> . ~
    (205) LogicalUnaryOperator -> . !
    (230) InclusiveOrExpression -> . ExclusiveOrExpression
    (231) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (198) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (228) ExclusiveOrExpression -> . AndExpression
    (229) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (226) AndExpression -> . EqualityExpression
    (227) AndExpression -> . AndExpression & EqualityExpression
    (172) SpecialName -> . THIS
    (173) SpecialName -> . SUPER
    (174) SpecialName -> . NULL
    (177) NewAllocationExpression -> . PlainNewAllocationExpression
    (178) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (146) ComplexPrimary -> . Integer_LIT
    (147) ComplexPrimary -> . Float_LIT
    (148) ComplexPrimary -> . Char_LIT
    (149) ComplexPrimary -> . String_LIT
    (150) ComplexPrimary -> . Bool_LIT
    (151) ComplexPrimary -> . ( Expression )
    (223) EqualityExpression -> . RelationalExpression
    (224) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (225) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (179) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (180) PlainNewAllocationExpression -> . ClassAllocationExpression
    (181) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (182) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (183) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (184) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (155) Integer_LIT -> . INT_LITERAL
    (156) Float_LIT -> . FLOAT_LITERAL
    (157) Char_LIT -> . CHAR_LITERAL
    (158) String_LIT -> . STRING_LITERAL
    (159) Bool_LIT -> . BOOL
    (218) RelationalExpression -> . ShiftExpression
    (219) RelationalExpression -> . RelationalExpression < ShiftExpression
    (220) RelationalExpression -> . RelationalExpression > ShiftExpression
    (221) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (187) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (188) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (189) ArrayAllocationExpression -> . NEW TypeName Dims
    (185) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (186) ClassAllocationExpression -> . NEW TypeName ( )
    (160) ArrayAccess -> . QualifiedName [ Expression ]
    (161) ArrayAccess -> . ComplexPrimary [ Expression ]
    (162) FieldAccess -> . NotJustName . IDENTIFIER
    (163) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (164) FieldAccess -> . QualifiedName . THIS
    (165) FieldAccess -> . QualifiedName . CLASS
    (166) FieldAccess -> . PrimitiveType . CLASS
    (167) MethodCall -> . MethodAccess ( ArgumentList )
    (168) MethodCall -> . MethodAccess ( )
    (216) ShiftExpression -> . AdditiveExpression
    (217) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (169) MethodAccess -> . ComplexPrimaryNoParenthesis
    (170) MethodAccess -> . SpecialName
    (171) MethodAccess -> . QualifiedName
    (213) AdditiveExpression -> . MultiplicativeExpression
    (214) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (209) MultiplicativeExpression -> . CastExpression
    (210) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (208) CastExpression -> . UnaryExpression

    ;               shift and go to state 106
    IDENTIFIER      shift and go to state 91
    DEFAULT         shift and go to state 125
    IF              shift and go to state 160
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 127
    DO              shift and go to state 146
    FOR             shift and go to state 110
    BREAK           shift and go to state 141
    CONTINUE        shift and go to state 119
    RETURN          shift and go to state 98
    THROW           shift and go to state 163
    CASE            reduce using rule 108 (Marker_case -> .)
    {               shift and go to state 70
    OPT_INC_DEC     shift and go to state 111
    +               shift and go to state 104
    -               shift and go to state 151
    ~               shift and go to state 145
    !               shift and go to state 149
    THIS            shift and go to state 93
    SUPER           shift and go to state 162
    NULL            shift and go to state 148
    (               shift and go to state 89
    INT_LITERAL     shift and go to state 144
    FLOAT_LITERAL   shift and go to state 129
    CHAR_LITERAL    shift and go to state 94
    STRING_LITERAL  shift and go to state 161
    BOOL            shift and go to state 142
    NEW             shift and go to state 128
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 41
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 123
    Bool_LIT                       shift and go to state 84
    LabelStatement                 shift and go to state 97
    ArithmeticUnaryOperator        shift and go to state 100
    AssignmentExpression           shift and go to state 108
    ExpressionStatement            shift and go to state 85
    JumpStatement                  shift and go to state 126
    RealPostfixExpression          shift and go to state 99
    Statement                      shift and go to state 391
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 103
    CastExpression                 shift and go to state 147
    EqualityExpression             shift and go to state 101
    LogicalUnaryOperator           shift and go to state 156
    ComplexPrimaryNoParenthesis    shift and go to state 102
    ArrayAccess                    shift and go to state 112
    ClassAllocationExpression      shift and go to state 124
    QualifiedName                  shift and go to state 187
    Lparen                         shift and go to state 54
    ShiftExpression                shift and go to state 153
    SelectionStatement             shift and go to state 107
    ConditionalOrExpression        shift and go to state 133
    PrimitiveType                  shift and go to state 185
    NotJustName                    shift and go to state 155
    ComplexPrimary                 shift and go to state 122
    MethodCall                     shift and go to state 105
    Char_LIT                       shift and go to state 157
    LogicalUnaryExpression         shift and go to state 158
    String_LIT                     shift and go to state 159
    UnaryExpression                shift and go to state 138
    Marker_case                    shift and go to state 92
    Expression                     shift and go to state 135
    Block                          shift and go to state 113
    AdditiveExpression             shift and go to state 136
    ArrayAllocationExpression      shift and go to state 114
    ConditionalExpression          shift and go to state 137
    InclusiveOrExpression          shift and go to state 139
    MethodAccess                   shift and go to state 115
    PrimaryExpression              shift and go to state 131
    ExclusiveOrExpression          shift and go to state 116
    ConditionalAndExpression       shift and go to state 95
    RelationalExpression           shift and go to state 117
    PlainNewAllocationExpression   shift and go to state 118
    NewAllocationExpression        shift and go to state 134
    Float_LIT                      shift and go to state 140
    EmptyStatement                 shift and go to state 96
    SpecialName                    shift and go to state 121
    FieldAccess                    shift and go to state 143
    IterationStatement             shift and go to state 164
    Integer_LIT                    shift and go to state 90

state 390

    (118) IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .

    WHILE           reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    }               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    ;               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    IDENTIFIER      reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DEFAULT         reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    IF              reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SWITCH          reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DO              reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FOR             reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BREAK           reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CONTINUE        reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    RETURN          reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    THROW           reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    {               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BOOLEAN         reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CHAR            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BYTE            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SHORT           reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    INT             reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    LONG            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FLOAT           reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    DOUBLE          reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    VOID            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    OPT_INC_DEC     reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    +               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    -               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    ~               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    !               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    THIS            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    SUPER           reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    NULL            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    (               reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    INT_LITERAL     reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    FLOAT_LITERAL   reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CHAR_LITERAL    reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    STRING_LITERAL  reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    BOOL            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    NEW             reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    CASE            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)
    ELSE            reduce using rule 118 (IterationStatement -> FOR ( ForInit M_instr ForExpr M_instr ForIncr ) M_instr Statement .)


state 391

    (111) SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .

    }               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    ;               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    IDENTIFIER      reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DEFAULT         reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    IF              reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SWITCH          reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    WHILE           reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DO              reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FOR             reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BREAK           reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CONTINUE        reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    RETURN          reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    THROW           reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    {               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BOOLEAN         reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CHAR            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BYTE            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SHORT           reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    INT             reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    LONG            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FLOAT           reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    DOUBLE          reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    VOID            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    OPT_INC_DEC     reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    +               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    -               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    ~               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    !               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    THIS            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    SUPER           reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    NULL            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    (               reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    INT_LITERAL     reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    FLOAT_LITERAL   reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CHAR_LITERAL    reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    STRING_LITERAL  reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    BOOL            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    NEW             reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    CASE            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)
    ELSE            reduce using rule 111 (SelectionStatement -> IF ( Expression ) M_instr_branch Statement ELSE N_instr M_instr_branch Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 150 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 375 resolved as shift
