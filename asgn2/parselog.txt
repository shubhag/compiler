   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PUBLIC,'public',1,0)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : PUBLIC . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : Modifier . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : Modifiers . LexToken(CLASS,'class',1,7)
   yacc.py: 366:Action : Shift and goto state 11
   yacc.py: 337:
   yacc.py: 338:State  : 11
   yacc.py: 352:Stack  : Modifiers CLASS . LexToken(IDENTIFIER,'testing',1,13)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 59
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 31
   yacc.py: 352:Stack  : Modifiers ClassWord . LexToken(IDENTIFIER,'testing',1,13)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : Modifiers ClassWord IDENTIFIER . LexToken({,'{',1,20)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [None,None,'testing'] and goto state 43
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',1,20)
   yacc.py: 366:Action : Shift and goto state 40
   yacc.py: 337:
   yacc.py: 338:State  : 40
   yacc.py: 352:Stack  : ClassHeader { . LexToken(PUBLIC,'public',2,26)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : ClassHeader { PUBLIC . LexToken(STATIC,'static',2,33)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader { Modifier . LexToken(STATIC,'static',2,33)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(STATIC,'static',2,33)
   yacc.py: 366:Action : Shift and goto state 25
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : ClassHeader { Modifiers STATIC . LexToken(VOID,'void',2,40)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 54
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 32
   yacc.py: 352:Stack  : ClassHeader { Modifiers Modifier . LexToken(VOID,'void',2,40)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [None,None] and goto state 48
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(VOID,'void',2,40)
   yacc.py: 366:Action : Shift and goto state 69
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { Modifiers VOID . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { Modifiers PrimitiveType . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeName . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier . LexToken(IDENTIFIER,'main',2,45)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',2,49)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['main'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',2,49)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'String',2,50)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'args',2,57)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken([,'[',2,61)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['args'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken([,'[',2,61)
   yacc.py: 366:Action : Shift and goto state 97
   yacc.py: 337:
   yacc.py: 338:State  : 97
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName [ . LexToken(],']',2,62)
   yacc.py: 366:Action : Shift and goto state 202
   yacc.py: 337:
   yacc.py: 338:State  : 202
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName [ ] . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 214
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 196
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName OP_DIM . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> DeclaratorName OP_DIM] with [None,None] and goto state 96
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',2,63)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 289
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',2,63)
   yacc.py: 366:Action : Shift and goto state 373
   yacc.py: 337:
   yacc.py: 338:State  : 373
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',2,65)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',2,65)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',3,75)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { INT . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'x',3,79)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(=,'=',3,81)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['x'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(=,'=',3,81)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'10',3,83)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['10'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = Expression . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',3,85)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',3,85)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(WHILE,'while',5,96)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(WHILE,'while',5,96)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(WHILE,'while',5,96)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(WHILE,'while',5,96)
   yacc.py: 366:Action : Shift and goto state 150
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE . LexToken((,'(',5,101)
   yacc.py: 366:Action : Shift and goto state 258
   yacc.py: 337:
   yacc.py: 338:State  : 258
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( . LexToken(IDENTIFIER,'x',5,103)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( IDENTIFIER . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['x'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( QualifiedName . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( PrimaryExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( PostfixExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( LogicalUnaryExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( UnaryExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( CastExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( MultiplicativeExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( AdditiveExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( ShiftExpression . LexToken(<,'<',5,105)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression . LexToken(<,'<',5,105)
   yacc.py: 366:Action : Shift and goto state 248
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < . LexToken(INT_LITERAL,'13',5,107)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < INT_LITERAL . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['13'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < ComplexPrimaryNoParenthesis . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < ComplexPrimary . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < NotJustName . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < PrimaryExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < PostfixExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < LogicalUnaryExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < UnaryExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < CastExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < MultiplicativeExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < AdditiveExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 340
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression < ShiftExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with [None,'<',None] and goto state 244
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( RelationalExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( EqualityExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( AndExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( ExclusiveOrExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( InclusiveOrExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( ConditionalAndExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( ConditionalOrExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( ConditionalExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( AssignmentExpression . LexToken(),')',5,110)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 348
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression . LexToken(),')',5,110)
   yacc.py: 366:Action : Shift and goto state 402
   yacc.py: 337:
   yacc.py: 338:State  : 402
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) . LexToken({,'{',5,112)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { . LexToken(IDENTIFIER,'System',6,126)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { IDENTIFIER . LexToken(.,'.',6,132)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { QualifiedName . LexToken(.,'.',6,132)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { QualifiedName . . LexToken(IDENTIFIER,'out',6,133)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { QualifiedName . IDENTIFIER . LexToken(.,'.',6,136)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { QualifiedName . LexToken(.,'.',6,136)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { QualifiedName . . LexToken(IDENTIFIER,'print',6,137)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { QualifiedName . IDENTIFIER . LexToken((,'(',6,142)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','print'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { QualifiedName . LexToken((,'(',6,142)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess . LexToken((,'(',6,142)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( . LexToken(STRING_LITERAL,'"x : "',6,143)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( STRING_LITERAL . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with ['"x : "'] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ComplexPrimary . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( NotJustName . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( PrimaryExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( PostfixExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( UnaryExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( CastExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( MultiplicativeExpression . LexToken(+,'+',6,150)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression . LexToken(+,'+',6,150)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'x',6,152)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['x'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AdditiveExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ShiftExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( RelationalExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( EqualityExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AndExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ExclusiveOrExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( InclusiveOrExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ConditionalAndExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ConditionalOrExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ConditionalExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( AssignmentExpression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( Expression . LexToken(),')',6,154)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ArgumentList . LexToken(),')',6,154)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodAccess ( ArgumentList ) . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MethodCall . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ComplexPrimaryNoParenthesis . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ComplexPrimary . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { NotJustName . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { PrimaryExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { PostfixExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LogicalUnaryExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { UnaryExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { CastExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { MultiplicativeExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { AdditiveExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ShiftExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { RelationalExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { EqualityExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { AndExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ExclusiveOrExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { InclusiveOrExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ConditionalAndExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ConditionalOrExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ConditionalExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { AssignmentExpression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { Expression . LexToken(;,';',6,155)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ExpressionStatement . LexToken(;,';',6,155)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { ExpressionStatement ; . LexToken(IDENTIFIER,'x',7,169)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { Statement . LexToken(IDENTIFIER,'x',7,169)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'x',7,169)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'x',7,169)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(OPT_INC_DEC,'++',7,170)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['x'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(OPT_INC_DEC,'++',7,170)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(OPT_INC_DEC,'++',7,170)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(OPT_INC_DEC,'++',7,170)
   yacc.py: 366:Action : Shift and goto state 255
   yacc.py: 337:
   yacc.py: 338:State  : 255
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression OPT_INC_DEC . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [RealPostfixExpression -> PostfixExpression OPT_INC_DEC] with [None,'++'] and goto state 217
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 121
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements RealPostfixExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> RealPostfixExpression] with [None] and goto state 216
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',7,172)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',7,172)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'System',8,186)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',8,186)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',8,186)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',8,186)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',8,192)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',8,192)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',8,193)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',8,196)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',8,196)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'print',8,197)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',8,202)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','print'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',8,202)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',8,202)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'".................\\n"',8,203)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8f630>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',8,224)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',8,224)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',8,225)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',8,225)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',9,235)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',9,235)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',9,235)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',9,235)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(INT,'int',10,245)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) Block . LexToken(INT,'int',10,245)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 423
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements WHILE ( Expression ) Statement . LexToken(INT,'int',10,245)
   yacc.py: 389:Action : Reduce rule [IterationStatement -> WHILE ( Expression ) Statement] with ['while','(',None,')',None] and goto state 135
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 188
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement . LexToken(INT,'int',10,245)
   yacc.py: 389:Action : Reduce rule [Statement -> IterationStatement] with [None] and goto state 122
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(INT,'int',10,245)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(INT,'int',10,245)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(INT,'int',10,245)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements INT . LexToken(IDENTIFIER,'y',10,249)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'y',10,249)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'y',10,249)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'y',10,249)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',10,251)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['y'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',10,251)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'10',10,253)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['10'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Expression . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',10,255)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',10,255)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(IF,'if',12,266)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(IF,'if',12,266)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IF,'if',12,266)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IF,'if',12,266)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF . LexToken((,'(',12,268)
   yacc.py: 366:Action : Shift and goto state 284
   yacc.py: 337:
   yacc.py: 338:State  : 284
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( . LexToken(IDENTIFIER,'y',12,270)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( IDENTIFIER . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['y'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( QualifiedName . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PrimaryExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PostfixExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( LogicalUnaryExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( UnaryExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( CastExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( MultiplicativeExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AdditiveExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ShiftExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression . LexToken(OP_EQ,'==',12,272)
   yacc.py: 366:Action : Shift and goto state 235
   yacc.py: 337:
   yacc.py: 338:State  : 235
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ . LexToken(INT_LITERAL,'10',12,275)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ INT_LITERAL . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['10'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ ComplexPrimaryNoParenthesis . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ ComplexPrimary . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ NotJustName . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ CastExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 316
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with [None,'==',None] and goto state 250
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AndExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ExclusiveOrExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( InclusiveOrExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalAndExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalOrExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AssignmentExpression . LexToken(),')',12,278)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 371
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression . LexToken(),')',12,278)
   yacc.py: 366:Action : Shift and goto state 412
   yacc.py: 337:
   yacc.py: 338:State  : 412
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) . LexToken({,'{',12,279)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { . LexToken(IDENTIFIER,'System',13,293)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { IDENTIFIER . LexToken(.,'.',13,299)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . LexToken(.,'.',13,299)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . . LexToken(IDENTIFIER,'out',13,300)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . IDENTIFIER . LexToken(.,'.',13,303)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . LexToken(.,'.',13,303)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . . LexToken(IDENTIFIER,'print',13,304)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . IDENTIFIER . LexToken((,'(',13,309)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','print'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . LexToken((,'(',13,309)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess . LexToken((,'(',13,309)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( . LexToken(STRING_LITERAL,'"This is if\\" statement"',13,310)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( STRING_LITERAL . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8f930>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ComplexPrimary . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( NotJustName . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( PrimaryExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( PostfixExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( LogicalUnaryExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( UnaryExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( CastExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( MultiplicativeExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( AdditiveExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ShiftExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( RelationalExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( EqualityExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( AndExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ExclusiveOrExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( InclusiveOrExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ConditionalAndExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ConditionalOrExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ConditionalExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( AssignmentExpression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( Expression . LexToken(),')',13,334)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ArgumentList . LexToken(),')',13,334)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodAccess ( ArgumentList ) . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MethodCall . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ComplexPrimaryNoParenthesis . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ComplexPrimary . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { NotJustName . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { PrimaryExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { PostfixExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LogicalUnaryExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { CastExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { MultiplicativeExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { AdditiveExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ShiftExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RelationalExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { EqualityExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { AndExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ExclusiveOrExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { InclusiveOrExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ConditionalAndExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ConditionalOrExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ConditionalExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { AssignmentExpression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { Expression . LexToken(;,';',13,335)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ExpressionStatement . LexToken(;,';',13,335)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ExpressionStatement ; . LexToken(},'}',14,345)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { Statement . LexToken(},'}',14,345)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',14,345)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',14,345)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',14,346)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Block . LexToken(ELSE,'else',14,346)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 429
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement . LexToken(ELSE,'else',14,346)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE . LexToken({,'{',14,350)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { . LexToken(IDENTIFIER,'System',15,364)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { IDENTIFIER . LexToken(.,'.',15,370)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . LexToken(.,'.',15,370)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . . LexToken(IDENTIFIER,'out',15,371)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . IDENTIFIER . LexToken(.,'.',15,374)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . LexToken(.,'.',15,374)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . . LexToken(IDENTIFIER,'print',15,375)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . IDENTIFIER . LexToken((,'(',15,380)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','print'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . LexToken((,'(',15,380)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess . LexToken((,'(',15,380)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( . LexToken(STRING_LITERAL,'"This is else statement"',15,381)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( STRING_LITERAL . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8f830>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ComplexPrimary . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( NotJustName . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( PrimaryExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( PostfixExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( LogicalUnaryExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( UnaryExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( CastExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( MultiplicativeExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( AdditiveExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ShiftExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( RelationalExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( EqualityExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( AndExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ExclusiveOrExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( InclusiveOrExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ConditionalAndExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ConditionalOrExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ConditionalExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( AssignmentExpression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( Expression . LexToken(),')',15,405)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ArgumentList . LexToken(),')',15,405)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodAccess ( ArgumentList ) . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MethodCall . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ComplexPrimaryNoParenthesis . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ComplexPrimary . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { NotJustName . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { PrimaryExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { PostfixExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LogicalUnaryExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { CastExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { MultiplicativeExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { AdditiveExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ShiftExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RelationalExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { EqualityExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { AndExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ExclusiveOrExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { InclusiveOrExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ConditionalAndExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ConditionalOrExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ConditionalExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { AssignmentExpression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { Expression . LexToken(;,';',15,406)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ExpressionStatement . LexToken(;,';',15,406)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ExpressionStatement ; . LexToken(},'}',16,416)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { Statement . LexToken(},'}',16,416)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationOrStatement . LexToken(},'}',16,416)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements . LexToken(},'}',16,416)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements } . LexToken(FOR,'for',19,428)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Block . LexToken(FOR,'for',19,428)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Statement . LexToken(FOR,'for',19,428)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ELSE Statement] with ['if','(',None,')',None,'else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement . LexToken(FOR,'for',19,428)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 126
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 239
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement M_instr . LexToken(FOR,'for',19,428)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement M_instr] with [None,None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(FOR,'for',19,428)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(FOR,'for',19,428)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(FOR,'for',19,428)
   yacc.py: 366:Action : Shift and goto state 132
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR . LexToken((,'(',19,431)
   yacc.py: 366:Action : Shift and goto state 240
   yacc.py: 337:
   yacc.py: 338:State  : 240
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( . LexToken(INT,'int',19,432)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( INT . LexToken(IDENTIFIER,'z',19,436)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( PrimitiveType . LexToken(IDENTIFIER,'z',19,436)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeName . LexToken(IDENTIFIER,'z',19,436)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier . LexToken(IDENTIFIER,'z',19,436)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier IDENTIFIER . LexToken(=,'=',19,438)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['z'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName . LexToken(=,'=',19,438)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'10',19,440)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['10'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = Expression . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier VariableDeclarator . LexToken(;,';',19,442)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier VariableDeclarators . LexToken(;,';',19,442)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'z',19,444)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'z',19,444)
   yacc.py: 389:Action : Reduce rule [ForInit -> LocalVariableDeclarationStatement] with [None] and goto state 140
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 322
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit . LexToken(IDENTIFIER,'z',19,444)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit IDENTIFIER . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['z'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit QualifiedName . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit PrimaryExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit PostfixExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit LogicalUnaryExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit UnaryExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit CastExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit MultiplicativeExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit AdditiveExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ShiftExpression . LexToken(<,'<',19,446)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression . LexToken(<,'<',19,446)
   yacc.py: 366:Action : Shift and goto state 248
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < . LexToken(INT_LITERAL,'120',19,448)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < INT_LITERAL . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['120'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < ComplexPrimaryNoParenthesis . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < ComplexPrimary . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < NotJustName . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < PrimaryExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < PostfixExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < LogicalUnaryExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < UnaryExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < CastExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < MultiplicativeExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < AdditiveExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 340
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < ShiftExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with [None,'<',None] and goto state 244
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit EqualityExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit AndExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ExclusiveOrExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit InclusiveOrExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ConditionalAndExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ConditionalOrExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ConditionalExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit AssignmentExpression . LexToken(;,';',19,451)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 387
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit Expression . LexToken(;,';',19,451)
   yacc.py: 366:Action : Shift and goto state 418
   yacc.py: 337:
   yacc.py: 338:State  : 418
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit Expression ; . LexToken(IDENTIFIER,'z',19,453)
   yacc.py: 389:Action : Reduce rule [ForExpr -> Expression ;] with [None,';'] and goto state 142
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 385
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr . LexToken(IDENTIFIER,'z',19,453)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr IDENTIFIER . LexToken(=,'=',19,455)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['z'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr QualifiedName . LexToken(=,'=',19,455)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr PrimaryExpression . LexToken(=,'=',19,455)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr PostfixExpression . LexToken(=,'=',19,455)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr LogicalUnaryExpression . LexToken(=,'=',19,455)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression . LexToken(=,'=',19,455)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression = . LexToken(IDENTIFIER,'z',19,457)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'z',19,457)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator IDENTIFIER . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['z'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator QualifiedName . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator PrimaryExpression . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator PostfixExpression . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator UnaryExpression . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator CastExpression . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(+,'+',19,458)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression . LexToken(+,'+',19,458)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + . LexToken(INT_LITERAL,'1',19,459)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + INT_LITERAL . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['1'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + ComplexPrimaryNoParenthesis . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + ComplexPrimary . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + NotJustName . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + PrimaryExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + PostfixExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + LogicalUnaryExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + UnaryExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + CastExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AdditiveExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator ShiftExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator RelationalExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator EqualityExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AndExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator ConditionalExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression AssignmentOperator AssignmentExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr AssignmentExpression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr Expression . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ExpressionStatement . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ExpressionStatements -> ExpressionStatement] with [None] and goto state 145
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 416
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ExpressionStatements . LexToken(),')',19,460)
   yacc.py: 389:Action : Reduce rule [ForIncr -> ExpressionStatements] with [None] and goto state 144
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 415
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr . LexToken(),')',19,460)
   yacc.py: 366:Action : Shift and goto state 430
   yacc.py: 337:
   yacc.py: 338:State  : 430
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) . LexToken({,'{',19,462)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { . LexToken(IDENTIFIER,'System',20,476)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { IDENTIFIER . LexToken(.,'.',20,482)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . LexToken(.,'.',20,482)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . . LexToken(IDENTIFIER,'out',20,483)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . IDENTIFIER . LexToken(.,'.',20,486)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . LexToken(.,'.',20,486)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . . LexToken(IDENTIFIER,'print',20,487)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . IDENTIFIER . LexToken((,'(',20,492)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','print'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . LexToken((,'(',20,492)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess . LexToken((,'(',20,492)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( . LexToken(STRING_LITERAL,'"value of z : "',20,493)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( STRING_LITERAL . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8adf8>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ComplexPrimary . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( NotJustName . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( PrimaryExpression . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( PostfixExpression . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( UnaryExpression . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( CastExpression . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( MultiplicativeExpression . LexToken(+,'+',20,509)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression . LexToken(+,'+',20,509)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'z',20,511)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['z'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ShiftExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( RelationalExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( EqualityExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AndExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ExclusiveOrExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( InclusiveOrExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ConditionalAndExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ConditionalOrExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ConditionalExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AssignmentExpression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( Expression . LexToken(),')',20,513)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ArgumentList . LexToken(),')',20,513)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ArgumentList ) . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodCall . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ComplexPrimaryNoParenthesis . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ComplexPrimary . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { NotJustName . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { PrimaryExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { PostfixExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LogicalUnaryExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { UnaryExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { CastExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MultiplicativeExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { AdditiveExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ShiftExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { RelationalExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { EqualityExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { AndExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ExclusiveOrExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { InclusiveOrExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ConditionalAndExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ConditionalOrExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ConditionalExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { AssignmentExpression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { Expression . LexToken(;,';',20,514)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ExpressionStatement . LexToken(;,';',20,514)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ExpressionStatement ; . LexToken(IDENTIFIER,'System',21,528)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { Statement . LexToken(IDENTIFIER,'System',21,528)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',21,528)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',21,528)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',21,534)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',21,534)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',21,535)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',21,538)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',21,538)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'print',21,539)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',21,544)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','print'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',21,544)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',21,544)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"\\n"',21,545)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with ['"\\n"'] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',21,549)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',21,549)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',21,550)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',21,550)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',22,560)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',22,560)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',22,560)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',22,560)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements } . LexToken(DOUBLE,'double',24,571)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) Block . LexToken(DOUBLE,'double',24,571)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 436
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) Statement . LexToken(DOUBLE,'double',24,571)
   yacc.py: 389:Action : Reduce rule [IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement] with ['for','(',None,None,None,')',None] and goto state 137
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 188
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement . LexToken(DOUBLE,'double',24,571)
   yacc.py: 389:Action : Reduce rule [Statement -> IterationStatement] with [None] and goto state 122
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(DOUBLE,'double',24,571)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(DOUBLE,'double',24,571)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(DOUBLE,'double',24,571)
   yacc.py: 366:Action : Shift and goto state 75
   yacc.py: 337:
   yacc.py: 338:State  : 75
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DOUBLE . LexToken([,'[',24,577)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> DOUBLE] with ['double'] and goto state 15
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken([,'[',24,577)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken([,'[',24,577)
   yacc.py: 366:Action : Shift and goto state 97
   yacc.py: 337:
   yacc.py: 338:State  : 97
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName [ . LexToken(],']',24,578)
   yacc.py: 366:Action : Shift and goto state 202
   yacc.py: 337:
   yacc.py: 338:State  : 202
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName [ ] . LexToken(IDENTIFIER,'list',24,580)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 214
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 98
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName OP_DIM . LexToken(IDENTIFIER,'list',24,580)
   yacc.py: 389:Action : Reduce rule [Dims -> OP_DIM] with [None] and goto state 212
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 99
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName Dims . LexToken(IDENTIFIER,'list',24,580)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName Dims] with [None,None] and goto state 3
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'list',24,580)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',24,585)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['list'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',24,585)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken({,'{',24,587)
   yacc.py: 366:Action : Shift and goto state 290
   yacc.py: 337:
   yacc.py: 338:State  : 290
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { . LexToken(FLOAT_LITERAL,'1.91',24,588)
   yacc.py: 366:Action : Shift and goto state 152
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { FLOAT_LITERAL . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> FLOAT_LITERAL] with ['1.91'] and goto state 171
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ComplexPrimaryNoParenthesis . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ComplexPrimary . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { NotJustName . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { PrimaryExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { PostfixExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { LogicalUnaryExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { UnaryExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { CastExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { MultiplicativeExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { AdditiveExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ShiftExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { RelationalExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { EqualityExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { AndExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ExclusiveOrExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { InclusiveOrExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ConditionalAndExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ConditionalOrExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ConditionalExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { AssignmentExpression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { Expression . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { VariableInitializer . LexToken(,,',',24,592)
   yacc.py: 389:Action : Reduce rule [ArrayInitializers -> VariableInitializer] with [None] and goto state 81
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 375
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers . LexToken(,,',',24,592)
   yacc.py: 366:Action : Shift and goto state 396
   yacc.py: 337:
   yacc.py: 338:State  : 396
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , . LexToken(FLOAT_LITERAL,'2.19',24,594)
   yacc.py: 366:Action : Shift and goto state 152
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , FLOAT_LITERAL . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> FLOAT_LITERAL] with ['2.19'] and goto state 171
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ComplexPrimaryNoParenthesis . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ComplexPrimary . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , NotJustName . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , PrimaryExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , PostfixExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , LogicalUnaryExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , UnaryExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , CastExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , MultiplicativeExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AdditiveExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ShiftExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , RelationalExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , EqualityExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AndExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ExclusiveOrExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , InclusiveOrExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalAndExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalOrExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AssignmentExpression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , Expression . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , VariableInitializer . LexToken(,,',',24,598)
   yacc.py: 389:Action : Reduce rule [ArrayInitializers -> ArrayInitializers , VariableInitializer] with [None,',',None] and goto state 82
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 375
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers . LexToken(,,',',24,598)
   yacc.py: 366:Action : Shift and goto state 396
   yacc.py: 337:
   yacc.py: 338:State  : 396
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , . LexToken(FLOAT_LITERAL,'3.14',24,600)
   yacc.py: 366:Action : Shift and goto state 152
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , FLOAT_LITERAL . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> FLOAT_LITERAL] with ['3.14'] and goto state 171
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ComplexPrimaryNoParenthesis . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ComplexPrimary . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , NotJustName . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , PrimaryExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , PostfixExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , LogicalUnaryExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , UnaryExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , CastExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , MultiplicativeExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AdditiveExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ShiftExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , RelationalExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , EqualityExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AndExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ExclusiveOrExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , InclusiveOrExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalAndExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalOrExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AssignmentExpression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , Expression . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , VariableInitializer . LexToken(,,',',24,604)
   yacc.py: 389:Action : Reduce rule [ArrayInitializers -> ArrayInitializers , VariableInitializer] with [None,',',None] and goto state 82
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 375
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers . LexToken(,,',',24,604)
   yacc.py: 366:Action : Shift and goto state 396
   yacc.py: 337:
   yacc.py: 338:State  : 396
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , . LexToken(FLOAT_LITERAL,'3.15',24,606)
   yacc.py: 366:Action : Shift and goto state 152
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , FLOAT_LITERAL . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> FLOAT_LITERAL] with ['3.15'] and goto state 171
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ComplexPrimaryNoParenthesis . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ComplexPrimary . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , NotJustName . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , PrimaryExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , PostfixExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , LogicalUnaryExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , UnaryExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , CastExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , MultiplicativeExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AdditiveExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ShiftExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , RelationalExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , EqualityExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AndExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ExclusiveOrExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , InclusiveOrExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalAndExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalOrExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , ConditionalExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , AssignmentExpression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , Expression . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers , VariableInitializer . LexToken(},'}',24,610)
   yacc.py: 389:Action : Reduce rule [ArrayInitializers -> ArrayInitializers , VariableInitializer] with [None,',',None] and goto state 82
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 375
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers . LexToken(},'}',24,610)
   yacc.py: 366:Action : Shift and goto state 413
   yacc.py: 337:
   yacc.py: 338:State  : 413
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = { ArrayInitializers } . LexToken(;,';',24,611)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> { ArrayInitializers }] with ['{',None,'}'] and goto state 80
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',24,611)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',24,611)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',24,611)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(FOR,'for',27,662)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(FOR,'for',27,662)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(FOR,'for',27,662)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(FOR,'for',27,662)
   yacc.py: 366:Action : Shift and goto state 132
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR . LexToken((,'(',27,666)
   yacc.py: 366:Action : Shift and goto state 240
   yacc.py: 337:
   yacc.py: 338:State  : 240
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( . LexToken(INT,'int',27,667)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( INT . LexToken(IDENTIFIER,'i',27,671)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( PrimitiveType . LexToken(IDENTIFIER,'i',27,671)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeName . LexToken(IDENTIFIER,'i',27,671)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier . LexToken(IDENTIFIER,'i',27,671)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier IDENTIFIER . LexToken(=,'=',27,673)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['i'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName . LexToken(=,'=',27,673)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'0',27,675)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['0'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = Expression . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier VariableDeclarator . LexToken(;,';',27,676)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier VariableDeclarators . LexToken(;,';',27,676)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'i',27,678)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 324
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'i',27,678)
   yacc.py: 389:Action : Reduce rule [ForInit -> LocalVariableDeclarationStatement] with [None] and goto state 140
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 322
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit . LexToken(IDENTIFIER,'i',27,678)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit IDENTIFIER . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit QualifiedName . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit PrimaryExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit PostfixExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit LogicalUnaryExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit UnaryExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit CastExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit MultiplicativeExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit AdditiveExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ShiftExpression . LexToken(<,'<',27,680)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression . LexToken(<,'<',27,680)
   yacc.py: 366:Action : Shift and goto state 248
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < . LexToken(IDENTIFIER,'myList',27,682)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < IDENTIFIER . LexToken(.,'.',27,688)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['myList'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < QualifiedName . LexToken(.,'.',27,688)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < QualifiedName . . LexToken(IDENTIFIER,'length',27,689)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < QualifiedName . IDENTIFIER . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','length'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < QualifiedName . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < PrimaryExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < PostfixExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < LogicalUnaryExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < UnaryExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < CastExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < MultiplicativeExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < AdditiveExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 340
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression < ShiftExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with [None,'<',None] and goto state 244
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit RelationalExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit EqualityExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit AndExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ExclusiveOrExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit InclusiveOrExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ConditionalAndExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ConditionalOrExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ConditionalExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit AssignmentExpression . LexToken(;,';',27,695)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 387
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit Expression . LexToken(;,';',27,695)
   yacc.py: 366:Action : Shift and goto state 418
   yacc.py: 337:
   yacc.py: 338:State  : 418
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit Expression ; . LexToken(IDENTIFIER,'i',27,697)
   yacc.py: 389:Action : Reduce rule [ForExpr -> Expression ;] with [None,';'] and goto state 142
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 385
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr . LexToken(IDENTIFIER,'i',27,697)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr IDENTIFIER . LexToken(OPT_INC_DEC,'++',27,698)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr QualifiedName . LexToken(OPT_INC_DEC,'++',27,698)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr PrimaryExpression . LexToken(OPT_INC_DEC,'++',27,698)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr PostfixExpression . LexToken(OPT_INC_DEC,'++',27,698)
   yacc.py: 366:Action : Shift and goto state 255
   yacc.py: 337:
   yacc.py: 338:State  : 255
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr PostfixExpression OPT_INC_DEC . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [RealPostfixExpression -> PostfixExpression OPT_INC_DEC] with [None,'++'] and goto state 217
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 121
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr RealPostfixExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> RealPostfixExpression] with [None] and goto state 216
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr PostfixExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr LogicalUnaryExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr UnaryExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr CastExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr MultiplicativeExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr AdditiveExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ShiftExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr RelationalExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr EqualityExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr AndExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ExclusiveOrExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr InclusiveOrExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ConditionalAndExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ConditionalOrExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ConditionalExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr AssignmentExpression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr Expression . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 320
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ExpressionStatement . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ExpressionStatements -> ExpressionStatement] with [None] and goto state 145
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 416
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ExpressionStatements . LexToken(),')',27,700)
   yacc.py: 389:Action : Reduce rule [ForIncr -> ExpressionStatements] with [None] and goto state 144
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 415
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr . LexToken(),')',27,700)
   yacc.py: 366:Action : Shift and goto state 430
   yacc.py: 337:
   yacc.py: 338:State  : 430
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) . LexToken({,'{',27,702)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { . LexToken(IDENTIFIER,'System',28,716)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { IDENTIFIER . LexToken(.,'.',28,722)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . LexToken(.,'.',28,722)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . . LexToken(IDENTIFIER,'out',28,723)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . IDENTIFIER . LexToken(.,'.',28,726)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . LexToken(.,'.',28,726)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . . LexToken(IDENTIFIER,'println',28,727)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . IDENTIFIER . LexToken((,'(',28,734)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { QualifiedName . LexToken((,'(',28,734)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess . LexToken((,'(',28,734)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( . LexToken(IDENTIFIER,'myList',28,735)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( IDENTIFIER . LexToken([,'[',28,741)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['myList'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName . LexToken([,'[',28,741)
   yacc.py: 366:Action : Shift and goto state 278
   yacc.py: 337:
   yacc.py: 338:State  : 278
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ . LexToken(IDENTIFIER,'i',28,742)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ IDENTIFIER . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ QualifiedName . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ PrimaryExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ PostfixExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ LogicalUnaryExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ UnaryExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ CastExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ MultiplicativeExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ AdditiveExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ ShiftExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ RelationalExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ EqualityExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ AndExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ ExclusiveOrExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ InclusiveOrExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ ConditionalAndExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ ConditionalOrExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ ConditionalExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ AssignmentExpression . LexToken(],']',28,743)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 368
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ Expression . LexToken(],']',28,743)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( QualifiedName [ Expression ] . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [ArrayAccess -> QualifiedName [ Expression ]] with [None,'[',None,']'] and goto state 179
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 135
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ArrayAccess . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> ArrayAccess] with [None] and goto state 176
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ComplexPrimary . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( NotJustName . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( PrimaryExpression . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( PostfixExpression . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( UnaryExpression . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( CastExpression . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( MultiplicativeExpression . LexToken(+,'+',28,745)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression . LexToken(+,'+',28,745)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + . LexToken(STRING_LITERAL,'"........ "',28,747)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + STRING_LITERAL . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with ['"........ "'] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + ComplexPrimaryNoParenthesis . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + ComplexPrimary . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + NotJustName . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AdditiveExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ShiftExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( RelationalExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( EqualityExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AndExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ExclusiveOrExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( InclusiveOrExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ConditionalAndExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ConditionalOrExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ConditionalExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( AssignmentExpression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( Expression . LexToken(),')',28,758)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ArgumentList . LexToken(),')',28,758)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodAccess ( ArgumentList ) . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MethodCall . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ComplexPrimaryNoParenthesis . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ComplexPrimary . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { NotJustName . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { PrimaryExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { PostfixExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LogicalUnaryExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { UnaryExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { CastExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { MultiplicativeExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { AdditiveExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ShiftExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { RelationalExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { EqualityExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { AndExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ExclusiveOrExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { InclusiveOrExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ConditionalAndExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ConditionalOrExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ConditionalExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { AssignmentExpression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { Expression . LexToken(;,';',28,759)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ExpressionStatement . LexToken(;,';',28,759)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { ExpressionStatement ; . LexToken(},'}',29,769)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { Statement . LexToken(},'}',29,769)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationOrStatement . LexToken(},'}',29,769)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',29,769)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) { LocalVariableDeclarationsAndStatements } . LexToken(INT,'int',32,781)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) Block . LexToken(INT,'int',32,781)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 436
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements FOR ( ForInit ForExpr ForIncr ) Statement . LexToken(INT,'int',32,781)
   yacc.py: 389:Action : Reduce rule [IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement] with ['for','(',None,None,None,')',None] and goto state 137
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 188
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement . LexToken(INT,'int',32,781)
   yacc.py: 389:Action : Reduce rule [Statement -> IterationStatement] with [None] and goto state 122
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(INT,'int',32,781)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(INT,'int',32,781)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(INT,'int',32,781)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements INT . LexToken(IDENTIFIER,'i',32,785)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'i',32,785)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'i',32,785)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'i',32,785)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',32,787)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['i'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',32,787)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'0',32,788)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['0'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Expression . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',32,789)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',32,789)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(DO,'do',34,805)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(DO,'do',34,805)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(DO,'do',34,805)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(DO,'do',34,805)
   yacc.py: 366:Action : Shift and goto state 171
   yacc.py: 337:
   yacc.py: 338:State  : 171
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO . LexToken({,'{',35,816)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { . LexToken(IDENTIFIER,'System',36,828)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { IDENTIFIER . LexToken(.,'.',36,834)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { QualifiedName . LexToken(.,'.',36,834)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { QualifiedName . . LexToken(IDENTIFIER,'out',36,835)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { QualifiedName . IDENTIFIER . LexToken(.,'.',36,838)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { QualifiedName . LexToken(.,'.',36,838)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { QualifiedName . . LexToken(IDENTIFIER,'println',36,839)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { QualifiedName . IDENTIFIER . LexToken((,'(',36,846)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { QualifiedName . LexToken((,'(',36,846)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess . LexToken((,'(',36,846)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( . LexToken(STRING_LITERAL,'"i is : "',36,847)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( STRING_LITERAL . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with ['"i is : "'] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ComplexPrimary . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( NotJustName . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( PrimaryExpression . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( PostfixExpression . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( UnaryExpression . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( CastExpression . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( MultiplicativeExpression . LexToken(+,'+',36,857)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression . LexToken(+,'+',36,857)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'i',36,859)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AdditiveExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ShiftExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( RelationalExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( EqualityExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AndExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ExclusiveOrExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( InclusiveOrExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ConditionalAndExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ConditionalOrExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ConditionalExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( AssignmentExpression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( Expression . LexToken(),')',36,860)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ArgumentList . LexToken(),')',36,860)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodAccess ( ArgumentList ) . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MethodCall . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ComplexPrimaryNoParenthesis . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ComplexPrimary . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { NotJustName . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { PrimaryExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { PostfixExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LogicalUnaryExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { UnaryExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { CastExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { MultiplicativeExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { AdditiveExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ShiftExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { RelationalExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { EqualityExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { AndExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ExclusiveOrExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { InclusiveOrExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ConditionalAndExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ConditionalOrExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ConditionalExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { AssignmentExpression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { Expression . LexToken(;,';',36,861)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ExpressionStatement . LexToken(;,';',36,861)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { ExpressionStatement ; . LexToken(IDENTIFIER,'i',37,873)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { Statement . LexToken(IDENTIFIER,'i',37,873)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'i',37,873)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'i',37,873)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(OPT_INC_DEC,'++',37,874)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(OPT_INC_DEC,'++',37,874)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(OPT_INC_DEC,'++',37,874)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(OPT_INC_DEC,'++',37,874)
   yacc.py: 366:Action : Shift and goto state 255
   yacc.py: 337:
   yacc.py: 338:State  : 255
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements PostfixExpression OPT_INC_DEC . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [RealPostfixExpression -> PostfixExpression OPT_INC_DEC] with [None,'++'] and goto state 217
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 121
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements RealPostfixExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> RealPostfixExpression] with [None] and goto state 216
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',37,876)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',37,876)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',39,896)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',39,896)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',39,896)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements . LexToken(},'}',39,896)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO { LocalVariableDeclarationsAndStatements } . LexToken(WHILE,'while',39,897)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Block . LexToken(WHILE,'while',39,897)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement . LexToken(WHILE,'while',39,897)
   yacc.py: 366:Action : Shift and goto state 364
   yacc.py: 337:
   yacc.py: 338:State  : 364
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE . LexToken((,'(',39,902)
   yacc.py: 366:Action : Shift and goto state 410
   yacc.py: 337:
   yacc.py: 338:State  : 410
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( . LexToken(IDENTIFIER,'i',39,903)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( IDENTIFIER . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['i'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( QualifiedName . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( PrimaryExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( PostfixExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( LogicalUnaryExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( UnaryExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( CastExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( MultiplicativeExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( AdditiveExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( ShiftExpression . LexToken(<,'<',39,905)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression . LexToken(<,'<',39,905)
   yacc.py: 366:Action : Shift and goto state 248
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < . LexToken(INT_LITERAL,'5',39,907)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < INT_LITERAL . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['5'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < ComplexPrimaryNoParenthesis . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < ComplexPrimary . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < NotJustName . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < PrimaryExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < PostfixExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < LogicalUnaryExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < UnaryExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < CastExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < MultiplicativeExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < AdditiveExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 340
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression < ShiftExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with [None,'<',None] and goto state 244
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( RelationalExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( EqualityExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( AndExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( ExclusiveOrExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( InclusiveOrExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( ConditionalAndExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( ConditionalOrExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( ConditionalExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( AssignmentExpression . LexToken(),')',39,908)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( Expression . LexToken(),')',39,908)
   yacc.py: 366:Action : Shift and goto state 434
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( Expression ) . LexToken(;,';',39,909)
   yacc.py: 366:Action : Shift and goto state 438
   yacc.py: 337:
   yacc.py: 338:State  : 438
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements DO Statement WHILE ( Expression ) ; . LexToken(CHAR,'char',43,930)
   yacc.py: 389:Action : Reduce rule [IterationStatement -> DO Statement WHILE ( Expression ) ;] with ['do',None,'while','(',None,')',';'] and goto state 136
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 188
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IterationStatement . LexToken(CHAR,'char',43,930)
   yacc.py: 389:Action : Reduce rule [Statement -> IterationStatement] with [None] and goto state 122
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(CHAR,'char',43,930)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(CHAR,'char',43,930)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(CHAR,'char',43,930)
   yacc.py: 366:Action : Shift and goto state 67
   yacc.py: 337:
   yacc.py: 338:State  : 67
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CHAR . LexToken(IDENTIFIER,'grade',43,935)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> CHAR] with ['char'] and goto state 9
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'grade',43,935)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'grade',43,935)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'grade',43,935)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',43,941)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['grade'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',43,941)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken(CHAR_LITERAL,"'C'",43,943)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CHAR_LITERAL . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> CHAR_LITERAL] with ["'C'"] and goto state 173
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Expression . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',43,946)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',43,946)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(SWITCH,'switch',45,957)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(SWITCH,'switch',45,957)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(SWITCH,'switch',45,957)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(SWITCH,'switch',45,957)
   yacc.py: 366:Action : Shift and goto state 156
   yacc.py: 337:
   yacc.py: 338:State  : 156
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH . LexToken((,'(',45,963)
   yacc.py: 366:Action : Shift and goto state 264
   yacc.py: 337:
   yacc.py: 338:State  : 264
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( . LexToken(IDENTIFIER,'grade',45,964)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( IDENTIFIER . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['grade'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( QualifiedName . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( PrimaryExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( PostfixExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( LogicalUnaryExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( UnaryExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( CastExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( MultiplicativeExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( AdditiveExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( ShiftExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( RelationalExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( EqualityExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( AndExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( ExclusiveOrExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( InclusiveOrExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( ConditionalAndExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( ConditionalOrExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( ConditionalExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( AssignmentExpression . LexToken(),')',45,969)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 356
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression . LexToken(),')',45,969)
   yacc.py: 366:Action : Shift and goto state 408
   yacc.py: 337:
   yacc.py: 338:State  : 408
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) . LexToken({,'{',46,979)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { . LexToken(CASE,'case',47,990)
   yacc.py: 366:Action : Shift and goto state 155
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE . LexToken(CHAR_LITERAL,"'A'",47,995)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE CHAR_LITERAL . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> CHAR_LITERAL] with ["'A'"] and goto state 173
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ComplexPrimaryNoParenthesis . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ComplexPrimary . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE NotJustName . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE PrimaryExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE PostfixExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE LogicalUnaryExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE UnaryExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE CastExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE MultiplicativeExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE AdditiveExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ShiftExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE RelationalExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE EqualityExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE AndExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ExclusiveOrExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE InclusiveOrExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ConditionalAndExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ConditionalOrExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 262
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ConditionalExpression . LexToken(:,':',47,999)
   yacc.py: 389:Action : Reduce rule [ConstantExpression -> ConditionalExpression] with [None] and goto state 269
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ConstantExpression . LexToken(:,':',47,999)
   yacc.py: 366:Action : Shift and goto state 355
   yacc.py: 337:
   yacc.py: 338:State  : 355
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { CASE ConstantExpression : . LexToken(IDENTIFIER,'System',48,1013)
   yacc.py: 389:Action : Reduce rule [LabelStatement -> CASE ConstantExpression :] with ['case',None,':'] and goto state 129
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LabelStatement . LexToken(IDENTIFIER,'System',48,1013)
   yacc.py: 389:Action : Reduce rule [Statement -> LabelStatement] with [None] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { Statement . LexToken(IDENTIFIER,'System',48,1013)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',48,1013)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',48,1013)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',48,1019)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',48,1019)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',48,1020)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',48,1023)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',48,1023)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',48,1024)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',48,1031)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',48,1031)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',48,1031)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Excellent!"',48,1032)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with ['"Excellent!"'] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',48,1044)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',48,1044)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',48,1045)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',48,1045)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(BREAK,'break',49,1060)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(BREAK,'break',49,1060)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(BREAK,'break',49,1060)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(BREAK,'break',49,1060)
   yacc.py: 366:Action : Shift and goto state 166
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements BREAK . LexToken(;,';',49,1065)
   yacc.py: 366:Action : Shift and goto state 274
   yacc.py: 337:
   yacc.py: 338:State  : 274
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements BREAK ; . LexToken(CASE,'case',50,1076)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> BREAK ;] with ['break',';'] and goto state 148
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 149
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(CASE,'case',50,1076)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(CASE,'case',50,1076)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(CASE,'case',50,1076)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(CASE,'case',50,1076)
   yacc.py: 366:Action : Shift and goto state 155
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE . LexToken(CHAR_LITERAL,"'B'",50,1081)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CHAR_LITERAL . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> CHAR_LITERAL] with ["'B'"] and goto state 173
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimaryNoParenthesis . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimary . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE NotJustName . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PrimaryExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PostfixExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE LogicalUnaryExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE UnaryExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CastExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE MultiplicativeExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AdditiveExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ShiftExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE RelationalExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE EqualityExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AndExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ExclusiveOrExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE InclusiveOrExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalAndExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalOrExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 262
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalExpression . LexToken(:,':',50,1085)
   yacc.py: 389:Action : Reduce rule [ConstantExpression -> ConditionalExpression] with [None] and goto state 269
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression . LexToken(:,':',50,1085)
   yacc.py: 366:Action : Shift and goto state 355
   yacc.py: 337:
   yacc.py: 338:State  : 355
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression : . LexToken(CASE,'case',51,1096)
   yacc.py: 389:Action : Reduce rule [LabelStatement -> CASE ConstantExpression :] with ['case',None,':'] and goto state 129
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LabelStatement . LexToken(CASE,'case',51,1096)
   yacc.py: 389:Action : Reduce rule [Statement -> LabelStatement] with [None] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(CASE,'case',51,1096)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(CASE,'case',51,1096)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(CASE,'case',51,1096)
   yacc.py: 366:Action : Shift and goto state 155
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE . LexToken(CHAR_LITERAL,"'C'",51,1101)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CHAR_LITERAL . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> CHAR_LITERAL] with ["'C'"] and goto state 173
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimaryNoParenthesis . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimary . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE NotJustName . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PrimaryExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PostfixExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE LogicalUnaryExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE UnaryExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CastExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE MultiplicativeExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AdditiveExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ShiftExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE RelationalExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE EqualityExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AndExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ExclusiveOrExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE InclusiveOrExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalAndExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalOrExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 262
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalExpression . LexToken(:,':',51,1105)
   yacc.py: 389:Action : Reduce rule [ConstantExpression -> ConditionalExpression] with [None] and goto state 269
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression . LexToken(:,':',51,1105)
   yacc.py: 366:Action : Shift and goto state 355
   yacc.py: 337:
   yacc.py: 338:State  : 355
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression : . LexToken(IDENTIFIER,'System',52,1119)
   yacc.py: 389:Action : Reduce rule [LabelStatement -> CASE ConstantExpression :] with ['case',None,':'] and goto state 129
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LabelStatement . LexToken(IDENTIFIER,'System',52,1119)
   yacc.py: 389:Action : Reduce rule [Statement -> LabelStatement] with [None] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',52,1119)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',52,1119)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',52,1119)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',52,1125)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',52,1125)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',52,1126)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',52,1129)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',52,1129)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',52,1130)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',52,1137)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',52,1137)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',52,1137)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Well done"',52,1138)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with ['"Well done"'] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',52,1149)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',52,1149)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',52,1150)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',52,1150)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(BREAK,'break',53,1164)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(BREAK,'break',53,1164)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(BREAK,'break',53,1164)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(BREAK,'break',53,1164)
   yacc.py: 366:Action : Shift and goto state 166
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements BREAK . LexToken(;,';',53,1169)
   yacc.py: 366:Action : Shift and goto state 274
   yacc.py: 337:
   yacc.py: 338:State  : 274
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements BREAK ; . LexToken(CASE,'case',54,1180)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> BREAK ;] with ['break',';'] and goto state 148
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 149
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(CASE,'case',54,1180)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(CASE,'case',54,1180)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(CASE,'case',54,1180)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(CASE,'case',54,1180)
   yacc.py: 366:Action : Shift and goto state 155
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE . LexToken(CHAR_LITERAL,"'D'",54,1185)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CHAR_LITERAL . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> CHAR_LITERAL] with ["'D'"] and goto state 173
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimaryNoParenthesis . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimary . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE NotJustName . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PrimaryExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PostfixExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE LogicalUnaryExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE UnaryExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CastExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE MultiplicativeExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AdditiveExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ShiftExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE RelationalExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE EqualityExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AndExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ExclusiveOrExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE InclusiveOrExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalAndExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalOrExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 262
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalExpression . LexToken(:,':',54,1189)
   yacc.py: 389:Action : Reduce rule [ConstantExpression -> ConditionalExpression] with [None] and goto state 269
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression . LexToken(:,':',54,1189)
   yacc.py: 366:Action : Shift and goto state 355
   yacc.py: 337:
   yacc.py: 338:State  : 355
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression : . LexToken(IDENTIFIER,'System',55,1203)
   yacc.py: 389:Action : Reduce rule [LabelStatement -> CASE ConstantExpression :] with ['case',None,':'] and goto state 129
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LabelStatement . LexToken(IDENTIFIER,'System',55,1203)
   yacc.py: 389:Action : Reduce rule [Statement -> LabelStatement] with [None] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',55,1203)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',55,1203)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',55,1203)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',55,1209)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',55,1209)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',55,1210)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',55,1213)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',55,1213)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',55,1214)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',55,1221)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',55,1221)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',55,1221)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"You passed"',55,1222)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with ['"You passed"'] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',55,1234)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',55,1234)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',55,1235)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',55,1235)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(CASE,'case',56,1246)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(CASE,'case',56,1246)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(CASE,'case',56,1246)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(CASE,'case',56,1246)
   yacc.py: 366:Action : Shift and goto state 155
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE . LexToken(CHAR_LITERAL,"'F'",56,1251)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CHAR_LITERAL . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> CHAR_LITERAL] with ["'F'"] and goto state 173
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimaryNoParenthesis . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ComplexPrimary . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE NotJustName . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PrimaryExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE PostfixExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE LogicalUnaryExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE UnaryExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE CastExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE MultiplicativeExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AdditiveExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ShiftExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE RelationalExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE EqualityExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE AndExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ExclusiveOrExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE InclusiveOrExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalAndExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalOrExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 262
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConditionalExpression . LexToken(:,':',56,1255)
   yacc.py: 389:Action : Reduce rule [ConstantExpression -> ConditionalExpression] with [None] and goto state 269
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 263
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression . LexToken(:,':',56,1255)
   yacc.py: 366:Action : Shift and goto state 355
   yacc.py: 337:
   yacc.py: 338:State  : 355
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CASE ConstantExpression : . LexToken(IDENTIFIER,'System',57,1269)
   yacc.py: 389:Action : Reduce rule [LabelStatement -> CASE ConstantExpression :] with ['case',None,':'] and goto state 129
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LabelStatement . LexToken(IDENTIFIER,'System',57,1269)
   yacc.py: 389:Action : Reduce rule [Statement -> LabelStatement] with [None] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',57,1269)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',57,1269)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',57,1269)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',57,1275)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',57,1275)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',57,1276)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',57,1279)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',57,1279)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',57,1280)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',57,1287)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',57,1287)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',57,1287)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Better try again"',57,1288)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8adf8>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',57,1306)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',57,1306)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',57,1307)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',57,1307)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(BREAK,'break',58,1321)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(BREAK,'break',58,1321)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(BREAK,'break',58,1321)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(BREAK,'break',58,1321)
   yacc.py: 366:Action : Shift and goto state 166
   yacc.py: 337:
   yacc.py: 338:State  : 166
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements BREAK . LexToken(;,';',58,1326)
   yacc.py: 366:Action : Shift and goto state 274
   yacc.py: 337:
   yacc.py: 338:State  : 274
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements BREAK ; . LexToken(DEFAULT,'default',59,1337)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> BREAK ;] with ['break',';'] and goto state 148
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 149
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(DEFAULT,'default',59,1337)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(DEFAULT,'default',59,1337)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(DEFAULT,'default',59,1337)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(DEFAULT,'default',59,1337)
   yacc.py: 366:Action : Shift and goto state 148
   yacc.py: 337:
   yacc.py: 338:State  : 148
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements DEFAULT . LexToken(:,':',59,1345)
   yacc.py: 366:Action : Shift and goto state 257
   yacc.py: 337:
   yacc.py: 338:State  : 257
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements DEFAULT : . LexToken(IDENTIFIER,'System',60,1359)
   yacc.py: 389:Action : Reduce rule [LabelStatement -> DEFAULT :] with ['default',':'] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 118
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LabelStatement . LexToken(IDENTIFIER,'System',60,1359)
   yacc.py: 389:Action : Reduce rule [Statement -> LabelStatement] with [None] and goto state 119
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',60,1359)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',60,1359)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',60,1359)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',60,1365)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',60,1365)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',60,1366)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',60,1369)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',60,1369)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',60,1370)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',60,1377)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',60,1377)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',60,1377)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Invalid grade"',60,1378)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8adf8>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',60,1393)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',60,1393)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',60,1394)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',60,1394)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',61,1404)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',61,1404)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',61,1404)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',61,1404)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(IDENTIFIER,'System',62,1414)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 426
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SWITCH ( Expression ) Block . LexToken(IDENTIFIER,'System',62,1414)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> SWITCH ( Expression ) Block] with ['switch','(',None,')',None] and goto state 134
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement . LexToken(IDENTIFIER,'System',62,1414)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 126
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 239
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement M_instr . LexToken(IDENTIFIER,'System',62,1414)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement M_instr] with [None,None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',62,1414)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',62,1414)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',62,1414)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',62,1420)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',62,1420)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',62,1421)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',62,1424)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',62,1424)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',62,1425)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',62,1432)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',62,1432)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',62,1432)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Your grade is "',62,1433)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8adf8>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(+,'+',62,1450)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(+,'+',62,1450)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'grade',62,1452)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['grade'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',62,1457)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',62,1457)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',62,1458)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',62,1458)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(INT,'int',65,1470)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(INT,'int',65,1470)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(INT,'int',65,1470)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(INT,'int',65,1470)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements INT . LexToken(IDENTIFIER,'a',65,1474)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'a',65,1474)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'a',65,1474)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'a',65,1474)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(,,',',65,1476)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(,,',',65,1476)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(,,',',65,1476)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(,,',',65,1476)
   yacc.py: 366:Action : Shift and goto state 193
   yacc.py: 337:
   yacc.py: 338:State  : 193
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators , . LexToken(IDENTIFIER,'b',65,1478)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators , IDENTIFIER . LexToken(;,';',65,1479)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['b'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators , DeclaratorName . LexToken(;,';',65,1479)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 287
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators , VariableDeclarator . LexToken(;,';',65,1479)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarators , VariableDeclarator] with [None,',',None] and goto state 75
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',65,1479)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'a',66,1489)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'a',66,1489)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'a',66,1489)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'a',66,1489)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',66,1491)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',66,1491)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',66,1491)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',66,1491)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',66,1491)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',66,1491)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(INT_LITERAL,'10',66,1493)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'10',66,1493)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['10'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',66,1495)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',66,1495)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'b',67,1505)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'b',67,1505)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'b',67,1505)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'b',67,1505)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',67,1507)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',67,1507)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',67,1507)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',67,1507)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',67,1507)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',67,1507)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken((,'(',67,1509)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken((,'(',67,1509)
   yacc.py: 366:Action : Shift and goto state 113
   yacc.py: 337:
   yacc.py: 338:State  : 113
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( . LexToken(IDENTIFIER,'a',67,1510)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( IDENTIFIER . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 222
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( QualifiedName . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( PrimaryExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( PostfixExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( LogicalUnaryExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( UnaryExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( CastExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( MultiplicativeExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( AdditiveExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ShiftExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( RelationalExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression . LexToken(OP_EQ,'==',67,1512)
   yacc.py: 366:Action : Shift and goto state 235
   yacc.py: 337:
   yacc.py: 338:State  : 235
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ . LexToken(INT_LITERAL,'1',67,1515)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ INT_LITERAL . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['1'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ ComplexPrimaryNoParenthesis . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ ComplexPrimary . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ NotJustName . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ CastExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 316
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with [None,'==',None] and goto state 250
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( AndExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ExclusiveOrExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( InclusiveOrExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ConditionalAndExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ConditionalOrExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ConditionalExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( AssignmentExpression . LexToken(),')',67,1516)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( Expression . LexToken(),')',67,1516)
   yacc.py: 366:Action : Shift and goto state 305
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( Expression ) . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ( Expression )] with ['(',None,')'] and goto state 169
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(?,'?',67,1518)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(?,'?',67,1518)
   yacc.py: 366:Action : Shift and goto state 266
   yacc.py: 337:
   yacc.py: 338:State  : 266
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? . LexToken(INT_LITERAL,'20',67,1520)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? INT_LITERAL . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['20'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ComplexPrimaryNoParenthesis . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ComplexPrimary . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? NotJustName . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? PrimaryExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? PostfixExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? LogicalUnaryExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? UnaryExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? CastExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? MultiplicativeExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? AdditiveExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ShiftExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? RelationalExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? EqualityExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? AndExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ExclusiveOrExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? InclusiveOrExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ConditionalAndExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ConditionalOrExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ConditionalExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? AssignmentExpression . LexToken(:,':',67,1522)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 358
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression . LexToken(:,':',67,1522)
   yacc.py: 366:Action : Shift and goto state 409
   yacc.py: 337:
   yacc.py: 338:State  : 409
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : . LexToken(INT_LITERAL,'30',67,1524)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : INT_LITERAL . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['30'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ComplexPrimaryNoParenthesis . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ComplexPrimary . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : NotJustName . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : PrimaryExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : PostfixExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : LogicalUnaryExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : UnaryExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : CastExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : MultiplicativeExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : AdditiveExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ShiftExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : RelationalExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : EqualityExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : AndExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ExclusiveOrExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : InclusiveOrExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ConditionalAndExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ConditionalOrExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 427
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ConditionalExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression] with [None,'?',None,':',None] and goto state 263
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',67,1526)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',67,1526)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'System',68,1536)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',68,1536)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',68,1536)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',68,1536)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',68,1542)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',68,1542)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',68,1543)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',68,1546)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',68,1546)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',68,1547)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',68,1554)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',68,1554)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',68,1554)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Value of b is : "',68,1556)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8adf8>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(+,'+',68,1575)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(+,'+',68,1575)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'b',68,1578)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',68,1580)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',68,1580)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',68,1581)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',68,1581)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'a',69,1591)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'a',69,1591)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'a',69,1591)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'a',69,1591)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',69,1593)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',69,1593)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',69,1593)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',69,1593)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',69,1593)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',69,1593)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(INT_LITERAL,'7',69,1595)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'7',69,1595)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator INT_LITERAL . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['7'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(+,'+',69,1597)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(+,'+',69,1597)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + . LexToken(INT_LITERAL,'3',69,1599)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + INT_LITERAL . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['3'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + ComplexPrimaryNoParenthesis . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + ComplexPrimary . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + NotJustName . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + PrimaryExpression . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + PostfixExpression . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + LogicalUnaryExpression . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + UnaryExpression . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + CastExpression . LexToken(*,'*',69,1601)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression . LexToken(*,'*',69,1601)
   yacc.py: 366:Action : Shift and goto state 236
   yacc.py: 337:
   yacc.py: 338:State  : 236
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * . LexToken(INT_LITERAL,'2',69,1603)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * INT_LITERAL . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['2'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * ComplexPrimaryNoParenthesis . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * ComplexPrimary . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * NotJustName . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * PrimaryExpression . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * PostfixExpression . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * LogicalUnaryExpression . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * UnaryExpression . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 317
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression * CastExpression . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> MultiplicativeExpression * CastExpression] with [None,'*',None] and goto state 235
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression + MultiplicativeExpression . LexToken(-,'-',69,1605)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(-,'-',69,1605)
   yacc.py: 366:Action : Shift and goto state 269
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - . LexToken(INT_LITERAL,'12',69,1607)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - INT_LITERAL . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['12'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - ComplexPrimaryNoParenthesis . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - ComplexPrimary . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - NotJustName . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - PrimaryExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - PostfixExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - LogicalUnaryExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - UnaryExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - CastExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression - MultiplicativeExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression - MultiplicativeExpression] with [None,'-',None] and goto state 240
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',69,1609)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',69,1609)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'b',70,1619)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'b',70,1619)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'b',70,1619)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'b',70,1619)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',70,1621)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',70,1621)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',70,1621)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',70,1621)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',70,1621)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',70,1621)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken((,'(',70,1623)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken((,'(',70,1623)
   yacc.py: 366:Action : Shift and goto state 113
   yacc.py: 337:
   yacc.py: 338:State  : 113
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( . LexToken(IDENTIFIER,'a',70,1624)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( IDENTIFIER . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 222
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( QualifiedName . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( PrimaryExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( PostfixExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( LogicalUnaryExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( UnaryExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( CastExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( MultiplicativeExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( AdditiveExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ShiftExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( RelationalExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression . LexToken(OP_EQ,'==',70,1626)
   yacc.py: 366:Action : Shift and goto state 235
   yacc.py: 337:
   yacc.py: 338:State  : 235
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ . LexToken(INT_LITERAL,'1',70,1629)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ INT_LITERAL . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['1'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ ComplexPrimaryNoParenthesis . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ ComplexPrimary . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ NotJustName . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ CastExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 316
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with [None,'==',None] and goto state 250
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( EqualityExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( AndExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ExclusiveOrExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( InclusiveOrExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ConditionalAndExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ConditionalOrExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( ConditionalExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( AssignmentExpression . LexToken(),')',70,1630)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 220
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( Expression . LexToken(),')',70,1630)
   yacc.py: 366:Action : Shift and goto state 305
   yacc.py: 337:
   yacc.py: 338:State  : 305
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ( Expression ) . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ( Expression )] with ['(',None,')'] and goto state 169
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(?,'?',70,1632)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(?,'?',70,1632)
   yacc.py: 366:Action : Shift and goto state 266
   yacc.py: 337:
   yacc.py: 338:State  : 266
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? . LexToken(INT_LITERAL,'20',70,1634)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? INT_LITERAL . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['20'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ComplexPrimaryNoParenthesis . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ComplexPrimary . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? NotJustName . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? PrimaryExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? PostfixExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? LogicalUnaryExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? UnaryExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? CastExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? MultiplicativeExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? AdditiveExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ShiftExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? RelationalExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? EqualityExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? AndExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ExclusiveOrExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? InclusiveOrExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ConditionalAndExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ConditionalOrExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? ConditionalExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? AssignmentExpression . LexToken(:,':',70,1636)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 358
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression . LexToken(:,':',70,1636)
   yacc.py: 366:Action : Shift and goto state 409
   yacc.py: 337:
   yacc.py: 338:State  : 409
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : . LexToken(INT_LITERAL,'30',70,1638)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : INT_LITERAL . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['30'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ComplexPrimaryNoParenthesis . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ComplexPrimary . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : NotJustName . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : PrimaryExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : PostfixExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : LogicalUnaryExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : UnaryExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : CastExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : MultiplicativeExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : AdditiveExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ShiftExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : RelationalExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : EqualityExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : AndExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ExclusiveOrExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : InclusiveOrExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ConditionalAndExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ConditionalOrExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 427
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression ? Expression : ConditionalExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression] with [None,'?',None,':',None] and goto state 263
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',70,1640)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',70,1640)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'System',71,1650)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',71,1650)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',71,1650)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',71,1650)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',71,1656)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',71,1656)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',71,1657)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',71,1660)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',71,1660)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',71,1661)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',71,1668)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',71,1668)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',71,1668)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"New value of b is : "',71,1670)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbc82e170>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(+,'+',71,1693)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(+,'+',71,1693)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'b',71,1696)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',71,1698)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',71,1698)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',71,1699)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',71,1699)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'a',73,1710)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'a',73,1710)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'a',73,1710)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'a',73,1710)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',73,1711)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',73,1711)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',73,1711)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',73,1711)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',73,1711)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',73,1711)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(INT_LITERAL,'45',73,1712)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'45',73,1712)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['45'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',73,1714)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',73,1714)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'b',74,1724)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'b',74,1724)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'b',74,1724)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'b',74,1724)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',74,1725)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',74,1725)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',74,1725)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',74,1725)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',74,1725)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',74,1725)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(INT_LITERAL,'24',74,1726)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'24',74,1726)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['24'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',74,1728)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',74,1728)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(INT,'int',75,1738)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(INT,'int',75,1738)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(INT,'int',75,1738)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(INT,'int',75,1738)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements INT . LexToken(IDENTIFIER,'c',75,1742)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'c',75,1742)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'c',75,1742)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'c',75,1742)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',75,1744)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['c'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',75,1744)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken(IDENTIFIER,'a',75,1746)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = IDENTIFIER . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = QualifiedName . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PostfixExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = UnaryExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CastExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ShiftExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = RelationalExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = EqualityExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AndExpression . LexToken(^,'^',75,1747)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(^,'^',75,1747)
   yacc.py: 366:Action : Shift and goto state 246
   yacc.py: 337:
   yacc.py: 338:State  : 246
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ . LexToken(IDENTIFIER,'b',75,1748)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ IDENTIFIER . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ QualifiedName . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ PrimaryExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ PostfixExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ LogicalUnaryExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ UnaryExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ CastExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ MultiplicativeExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ AdditiveExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ ShiftExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ RelationalExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ EqualityExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 338
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression ^ AndExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression] with [None,'^',None] and goto state 255
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Expression . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',75,1749)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',75,1749)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'System',76,1759)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'System',76,1759)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',76,1759)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',76,1759)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',76,1765)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',76,1765)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',76,1766)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',76,1769)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',76,1769)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',76,1770)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',76,1777)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',76,1777)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',76,1777)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Value of c is : "',76,1779)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8adf8>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(+,'+',76,1798)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(+,'+',76,1798)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'c',76,1801)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['c'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',76,1803)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',76,1803)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',76,1804)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',76,1804)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'c',77,1814)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'c',77,1814)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'c',77,1814)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'c',77,1814)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',77,1816)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['c'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',77,1816)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',77,1816)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',77,1816)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',77,1816)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',77,1816)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(~,'~',77,1818)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(~,'~',77,1818)
   yacc.py: 366:Action : Shift and goto state 170
   yacc.py: 337:
   yacc.py: 338:State  : 170
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ~ . LexToken(IDENTIFIER,'c',77,1819)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryOperator -> ~] with ['~'] and goto state 223
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 181
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator . LexToken(IDENTIFIER,'c',77,1819)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator IDENTIFIER . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['c'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator QualifiedName . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator PrimaryExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator PostfixExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator LogicalUnaryExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator UnaryExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression] with [None,None] and goto state 222
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',77,1820)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',77,1820)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'System',78,1830)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',78,1830)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',78,1830)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',78,1830)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',78,1836)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',78,1836)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',78,1837)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',78,1840)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',78,1840)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',78,1841)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',78,1848)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',78,1848)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',78,1848)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"New value of c is : "',78,1850)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbc82e170>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(+,'+',78,1873)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(+,'+',78,1873)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'c',78,1876)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['c'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',78,1878)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',78,1878)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',78,1879)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',78,1879)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(BOOLEAN,'boolean',80,1890)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(BOOLEAN,'boolean',80,1890)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(BOOLEAN,'boolean',80,1890)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(BOOLEAN,'boolean',80,1890)
   yacc.py: 366:Action : Shift and goto state 64
   yacc.py: 337:
   yacc.py: 338:State  : 64
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements BOOLEAN . LexToken(IDENTIFIER,'m',80,1898)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> BOOLEAN] with ['boolean'] and goto state 8
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'m',80,1898)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'m',80,1898)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'m',80,1898)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',80,1900)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['m'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',80,1900)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'0',80,1902)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['0'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Expression . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',80,1903)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',80,1903)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'m',81,1913)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'m',81,1913)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'m',81,1913)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'m',81,1913)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',81,1915)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['m'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',81,1915)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',81,1915)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',81,1915)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',81,1915)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',81,1915)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(~,'~',81,1917)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(~,'~',81,1917)
   yacc.py: 366:Action : Shift and goto state 170
   yacc.py: 337:
   yacc.py: 338:State  : 170
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ~ . LexToken(IDENTIFIER,'m',81,1918)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryOperator -> ~] with ['~'] and goto state 223
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 181
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator . LexToken(IDENTIFIER,'m',81,1918)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator IDENTIFIER . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['m'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator QualifiedName . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator PrimaryExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator PostfixExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator LogicalUnaryExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryOperator UnaryExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression] with [None,None] and goto state 222
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',81,1919)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',81,1919)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'System',82,1929)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'System',82,1929)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',82,1929)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',82,1929)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',82,1935)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',82,1935)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',82,1936)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',82,1939)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',82,1939)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',82,1940)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',82,1947)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',82,1947)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',82,1947)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"New value of m is : "',82,1949)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbc82e070>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(+,'+',82,1972)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(+,'+',82,1972)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'m',82,1975)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['m'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',82,1977)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',82,1977)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',82,1978)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',82,1978)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(INT,'int',84,1989)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(INT,'int',84,1989)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(INT,'int',84,1989)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(INT,'int',84,1989)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements INT . LexToken(IDENTIFIER,'c',84,1993)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimitiveType . LexToken(IDENTIFIER,'c',84,1993)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeName . LexToken(IDENTIFIER,'c',84,1993)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier . LexToken(IDENTIFIER,'c',84,1993)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier IDENTIFIER . LexToken(=,'=',84,1995)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['c'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName . LexToken(=,'=',84,1995)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = . LexToken(IDENTIFIER,'minFunction',84,1997)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = IDENTIFIER . LexToken((,'(',84,2008)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['minFunction'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = QualifiedName . LexToken((,'(',84,2008)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess . LexToken((,'(',84,2008)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( . LexToken(IDENTIFIER,'a',84,2009)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( IDENTIFIER . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( QualifiedName . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( PrimaryExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( PostfixExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( LogicalUnaryExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( UnaryExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( CastExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( MultiplicativeExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( AdditiveExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ShiftExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( RelationalExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( EqualityExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( AndExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ExclusiveOrExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( InclusiveOrExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ConditionalAndExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ConditionalOrExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ConditionalExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( AssignmentExpression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( Expression . LexToken(,,',',84,2010)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList . LexToken(,,',',84,2010)
   yacc.py: 366:Action : Shift and goto state 399
   yacc.py: 337:
   yacc.py: 338:State  : 399
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , . LexToken(IDENTIFIER,'b',84,2012)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , IDENTIFIER . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['b'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , QualifiedName . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , PrimaryExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , PostfixExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , LogicalUnaryExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , UnaryExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , CastExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , MultiplicativeExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , AdditiveExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ShiftExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , RelationalExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , EqualityExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , AndExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ExclusiveOrExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , InclusiveOrExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ConditionalAndExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ConditionalOrExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ConditionalExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , AssignmentExpression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 422
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , Expression . LexToken(),')',84,2013)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> ArgumentList , Expression] with [None,',',None] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList . LexToken(),')',84,2013)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList ) . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MethodCall . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = Expression . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarator . LexToken(;,';',84,2014)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators . LexToken(;,';',84,2014)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'System',85,2024)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'System',85,2024)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'System',85,2024)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'System',85,2024)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',85,2030)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',85,2030)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'out',85,2031)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken(.,'.',85,2034)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',85,2034)
   yacc.py: 366:Action : Shift and goto state 277
   yacc.py: 337:
   yacc.py: 338:State  : 277
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'println',85,2035)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',85,2042)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','println'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',85,2042)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 138
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',85,2042)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(STRING_LITERAL,'"Minimum Value = "',85,2043)
   yacc.py: 366:Action : Shift and goto state 184
   yacc.py: 337:
   yacc.py: 338:State  : 184
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( STRING_LITERAL . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> STRING_LITERAL] with [<str @ 0x7f0bbce8aea0>] and goto state 174
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ComplexPrimary . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( NotJustName . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(+,'+',85,2062)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(+,'+',85,2062)
   yacc.py: 366:Action : Shift and goto state 268
   yacc.py: 337:
   yacc.py: 338:State  : 268
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + . LexToken(IDENTIFIER,'c',85,2064)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + IDENTIFIER . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['c'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + QualifiedName . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PrimaryExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + PostfixExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + LogicalUnaryExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + UnaryExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + CastExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 359
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression + MultiplicativeExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> AdditiveExpression + MultiplicativeExpression] with [None,'+',None] and goto state 239
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',85,2065)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',85,2065)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 128
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',85,2066)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',85,2066)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',87,2080)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',87,2080)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',87,2080)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',87,2080)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',89,2140)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator Block . LexToken(PUBLIC,'public',89,2140)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 298
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PUBLIC,'public',89,2140)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : ClassHeader { MethodDeclaration . LexToken(PUBLIC,'public',89,2140)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclaration . LexToken(PUBLIC,'public',89,2140)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 72
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarationOptSemi . LexToken(PUBLIC,'public',89,2140)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [None] and goto state 62
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',89,2140)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations PUBLIC . LexToken(STATIC,'static',89,2147)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifier . LexToken(STATIC,'static',89,2147)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(STATIC,'static',89,2147)
   yacc.py: 366:Action : Shift and goto state 25
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers STATIC . LexToken(INT,'int',89,2154)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 54
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 32
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers Modifier . LexToken(INT,'int',89,2154)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [None,None] and goto state 48
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(INT,'int',89,2154)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers INT . LexToken(IDENTIFIER,'minFunction',89,2158)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'minFunction',89,2158)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'minFunction',89,2158)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'minFunction',89,2158)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',89,2169)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['minFunction'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',89,2169)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(INT,'int',89,2170)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( INT . LexToken(IDENTIFIER,'n1',89,2174)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( PrimitiveType . LexToken(IDENTIFIER,'n1',89,2174)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'n1',89,2174)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'n1',89,2174)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(,,',',89,2176)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['n1'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(,,',',89,2176)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(,,',',89,2176)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 289
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(,,',',89,2176)
   yacc.py: 366:Action : Shift and goto state 297
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , . LexToken(INT,'int',89,2178)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , INT . LexToken(IDENTIFIER,'n2',89,2182)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , PrimitiveType . LexToken(IDENTIFIER,'n2',89,2182)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeName . LexToken(IDENTIFIER,'n2',89,2182)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier . LexToken(IDENTIFIER,'n2',89,2182)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier IDENTIFIER . LexToken(),')',89,2184)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['n2'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier DeclaratorName . LexToken(),')',89,2184)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 377
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , Parameter . LexToken(),')',89,2184)
   yacc.py: 389:Action : Reduce rule [ParameterList -> ParameterList , Parameter] with [None,',',None] and goto state 92
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 289
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',89,2184)
   yacc.py: 366:Action : Shift and goto state 373
   yacc.py: 337:
   yacc.py: 338:State  : 373
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',89,2186)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',89,2186)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',90,2198)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { INT . LexToken(IDENTIFIER,'min',90,2202)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken(IDENTIFIER,'min',90,2202)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'min',90,2202)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'min',90,2202)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(;,';',90,2205)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['min'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(;,';',90,2205)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',90,2205)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',90,2205)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(IF,'if',91,2217)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(IF,'if',91,2217)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(IF,'if',91,2217)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IF,'if',91,2217)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF . LexToken((,'(',91,2220)
   yacc.py: 366:Action : Shift and goto state 284
   yacc.py: 337:
   yacc.py: 338:State  : 284
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( . LexToken(IDENTIFIER,'n1',91,2221)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( IDENTIFIER . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['n1'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( QualifiedName . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PrimaryExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PostfixExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( LogicalUnaryExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( UnaryExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( CastExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( MultiplicativeExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AdditiveExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ShiftExpression . LexToken(>,'>',91,2224)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression . LexToken(>,'>',91,2224)
   yacc.py: 366:Action : Shift and goto state 251
   yacc.py: 337:
   yacc.py: 338:State  : 251
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > . LexToken(IDENTIFIER,'n2',91,2226)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > IDENTIFIER . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['n2'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > QualifiedName . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > PrimaryExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > PostfixExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > LogicalUnaryExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 232
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > UnaryExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > CastExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > MultiplicativeExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > AdditiveExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 343
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression > ShiftExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression > ShiftExpression] with [None,'>',None] and goto state 245
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AndExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ExclusiveOrExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( InclusiveOrExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalAndExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalOrExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AssignmentExpression . LexToken(),')',91,2228)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 371
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression . LexToken(),')',91,2228)
   yacc.py: 366:Action : Shift and goto state 412
   yacc.py: 337:
   yacc.py: 338:State  : 412
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) . LexToken(IDENTIFIER,'min',92,2243)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) IDENTIFIER . LexToken(=,'=',92,2247)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['min'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) QualifiedName . LexToken(=,'=',92,2247)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) PrimaryExpression . LexToken(=,'=',92,2247)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) PostfixExpression . LexToken(=,'=',92,2247)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) LogicalUnaryExpression . LexToken(=,'=',92,2247)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression . LexToken(=,'=',92,2247)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression = . LexToken(IDENTIFIER,'n2',92,2249)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'n2',92,2249)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator IDENTIFIER . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['n2'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator QualifiedName . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) AssignmentExpression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Expression . LexToken(;,';',92,2251)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) ExpressionStatement . LexToken(;,';',92,2251)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) ExpressionStatement ; . LexToken(ELSE,'else',93,2263)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 429
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement . LexToken(ELSE,'else',93,2263)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE . LexToken(IDENTIFIER,'min',94,2281)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE IDENTIFIER . LexToken(=,'=',94,2285)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['min'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE QualifiedName . LexToken(=,'=',94,2285)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE PrimaryExpression . LexToken(=,'=',94,2285)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE PostfixExpression . LexToken(=,'=',94,2285)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE LogicalUnaryExpression . LexToken(=,'=',94,2285)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression . LexToken(=,'=',94,2285)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression = . LexToken(IDENTIFIER,'n1',94,2287)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'n1',94,2287)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator IDENTIFIER . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['n1'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator QualifiedName . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE AssignmentExpression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Expression . LexToken(;,';',94,2289)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE ExpressionStatement . LexToken(;,';',94,2289)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE ExpressionStatement ; . LexToken(RETURN,'return',96,2302)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Statement . LexToken(RETURN,'return',96,2302)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ELSE Statement] with ['if','(',None,')',None,'else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement . LexToken(RETURN,'return',96,2302)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 126
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 239
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement M_instr . LexToken(RETURN,'return',96,2302)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement M_instr] with [None,None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(RETURN,'return',96,2302)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(RETURN,'return',96,2302)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(RETURN,'return',96,2302)
   yacc.py: 366:Action : Shift and goto state 119
   yacc.py: 337:
   yacc.py: 338:State  : 119
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN . LexToken(IDENTIFIER,'min',96,2309)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN IDENTIFIER . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['min'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN QualifiedName . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PrimaryExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PostfixExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN LogicalUnaryExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN UnaryExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN CastExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN MultiplicativeExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AdditiveExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ShiftExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN RelationalExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN EqualityExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AndExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ExclusiveOrExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN InclusiveOrExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalAndExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalOrExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AssignmentExpression . LexToken(;,';',96,2312)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 226
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression . LexToken(;,';',96,2312)
   yacc.py: 366:Action : Shift and goto state 310
   yacc.py: 337:
   yacc.py: 338:State  : 310
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression ; . LexToken(},'}',97,2322)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 149
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(},'}',97,2322)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',97,2322)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',97,2322)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',97,2322)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',98,2324)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(},'}',98,2324)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 298
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',98,2324)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations MethodDeclaration . LexToken(},'}',98,2324)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclaration . LexToken(},'}',98,2324)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(},'}',98,2324)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(},'}',98,2324)
   yacc.py: 366:Action : Shift and goto state 104
   yacc.py: 337:
   yacc.py: 338:State  : 104
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations } . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations }] with [None,'{',None,'}'] and goto state 37
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 5
   yacc.py: 352:Stack  : TypeDeclaration . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 29
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarationOptSemi . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarationOptSemi] with [None] and goto state 27
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 21
   yacc.py: 352:Stack  : TypeDeclarations . $end
   yacc.py: 389:Action : Reduce rule [ProgramFile -> TypeDeclarations] with [None] and goto state 25
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : ProgramFile . $end
   yacc.py: 389:Action : Reduce rule [CompilationUnit -> ProgramFile] with [None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 18
   yacc.py: 352:Stack  : CompilationUnit . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x936be0> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
