   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PUBLIC,'public',1,0)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : PUBLIC . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : Modifier . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : Modifiers . LexToken(CLASS,'class',1,7)
   yacc.py: 366:Action : Shift and goto state 11
   yacc.py: 337:
   yacc.py: 338:State  : 11
   yacc.py: 352:Stack  : Modifiers CLASS . LexToken(IDENTIFIER,'HelloWorld',1,13)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 59
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 31
   yacc.py: 352:Stack  : Modifiers ClassWord . LexToken(IDENTIFIER,'HelloWorld',1,13)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : Modifiers ClassWord IDENTIFIER . LexToken({,'{',1,24)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [None,None,'HelloWorld'] and goto state 43
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',1,24)
   yacc.py: 366:Action : Shift and goto state 40
   yacc.py: 337:
   yacc.py: 338:State  : 40
   yacc.py: 352:Stack  : ClassHeader { . LexToken(PUBLIC,'public',3,31)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : ClassHeader { PUBLIC . LexToken(STATIC,'static',3,38)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader { Modifier . LexToken(STATIC,'static',3,38)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(STATIC,'static',3,38)
   yacc.py: 366:Action : Shift and goto state 25
   yacc.py: 337:
   yacc.py: 338:State  : 25
   yacc.py: 352:Stack  : ClassHeader { Modifiers STATIC . LexToken(VOID,'void',3,45)
   yacc.py: 389:Action : Reduce rule [Modifier -> STATIC] with ['static'] and goto state 54
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 32
   yacc.py: 352:Stack  : ClassHeader { Modifiers Modifier . LexToken(VOID,'void',3,45)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifiers Modifier] with [None,None] and goto state 48
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(VOID,'void',3,45)
   yacc.py: 366:Action : Shift and goto state 69
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { Modifiers VOID . LexToken(IDENTIFIER,'main',3,50)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { Modifiers PrimitiveType . LexToken(IDENTIFIER,'main',3,50)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeName . LexToken(IDENTIFIER,'main',3,50)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier . LexToken(IDENTIFIER,'main',3,50)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',3,54)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['main'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',3,54)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'String',3,55)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken([,'[',3,61)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken([,'[',3,61)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken([,'[',3,61)
   yacc.py: 366:Action : Shift and goto state 97
   yacc.py: 337:
   yacc.py: 338:State  : 97
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName [ . LexToken(],']',3,62)
   yacc.py: 366:Action : Shift and goto state 202
   yacc.py: 337:
   yacc.py: 338:State  : 202
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName [ ] . LexToken(IDENTIFIER,'args',3,64)
   yacc.py: 389:Action : Reduce rule [OP_DIM -> [ ]] with ['[',']'] and goto state 214
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 98
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName OP_DIM . LexToken(IDENTIFIER,'args',3,64)
   yacc.py: 389:Action : Reduce rule [Dims -> OP_DIM] with [None] and goto state 212
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 99
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeName Dims . LexToken(IDENTIFIER,'args',3,64)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName Dims] with [None,None] and goto state 3
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'args',3,64)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(),')',3,68)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['args'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',3,68)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',3,68)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 289
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',3,68)
   yacc.py: 366:Action : Shift and goto state 373
   yacc.py: 337:
   yacc.py: 338:State  : 373
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',3,70)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',3,70)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { . LexToken(INT,'int',4,80)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { INT . LexToken(IDENTIFIER,'a',4,84)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 110
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { PrimitiveType . LexToken(IDENTIFIER,'a',4,84)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'a',4,84)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 153
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'a',4,84)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(;,';',4,85)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['a'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(;,';',4,85)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',4,85)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',4,85)
   yacc.py: 366:Action : Shift and goto state 354
   yacc.py: 337:
   yacc.py: 338:State  : 354
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(IF,'if',5,95)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(IF,'if',5,95)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(IF,'if',5,95)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IF,'if',5,95)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF . LexToken((,'(',5,97)
   yacc.py: 366:Action : Shift and goto state 284
   yacc.py: 337:
   yacc.py: 338:State  : 284
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( . LexToken(BOOL,'true',5,98)
   yacc.py: 366:Action : Shift and goto state 167
   yacc.py: 337:
   yacc.py: 338:State  : 167
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( BOOL . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> BOOL] with ['true'] and goto state 175
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ComplexPrimaryNoParenthesis . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ComplexPrimary . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( NotJustName . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PrimaryExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PostfixExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( LogicalUnaryExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( UnaryExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( CastExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( MultiplicativeExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AdditiveExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ShiftExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AndExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ExclusiveOrExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( InclusiveOrExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalAndExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalOrExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AssignmentExpression . LexToken(),')',5,102)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 371
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression . LexToken(),')',5,102)
   yacc.py: 366:Action : Shift and goto state 412
   yacc.py: 337:
   yacc.py: 338:State  : 412
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) . LexToken({,'{',5,103)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { . LexToken(IDENTIFIER,'a',6,114)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { IDENTIFIER . LexToken(=,'=',6,116)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { QualifiedName . LexToken(=,'=',6,116)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { PrimaryExpression . LexToken(=,'=',6,116)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { PostfixExpression . LexToken(=,'=',6,116)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LogicalUnaryExpression . LexToken(=,'=',6,116)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression . LexToken(=,'=',6,116)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression = . LexToken(INT_LITERAL,'2',6,118)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'2',6,118)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['2'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { AssignmentExpression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { Expression . LexToken(;,';',6,119)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ExpressionStatement . LexToken(;,';',6,119)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { ExpressionStatement ; . LexToken(},'}',7,129)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { Statement . LexToken(},'}',7,129)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',7,129)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',7,129)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',7,131)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Block . LexToken(ELSE,'else',7,131)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 429
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement . LexToken(ELSE,'else',7,131)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE . LexToken({,'{',7,136)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { . LexToken(IDENTIFIER,'a',8,147)
   yacc.py: 366:Action : Shift and goto state 158
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { IDENTIFIER . LexToken(=,'=',8,149)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['a'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { QualifiedName . LexToken(=,'=',8,149)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { PrimaryExpression . LexToken(=,'=',8,149)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { PostfixExpression . LexToken(=,'=',8,149)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LogicalUnaryExpression . LexToken(=,'=',8,149)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression . LexToken(=,'=',8,149)
   yacc.py: 366:Action : Shift and goto state 272
   yacc.py: 337:
   yacc.py: 338:State  : 272
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression = . LexToken(INT_LITERAL,'3',8,151)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 270
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator . LexToken(INT_LITERAL,'3',8,151)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator INT_LITERAL . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['3'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 361
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { AssignmentExpression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { Expression . LexToken(;,';',8,152)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ExpressionStatement . LexToken(;,';',8,152)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { ExpressionStatement ; . LexToken(},'}',9,162)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { Statement . LexToken(},'}',9,162)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 143
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationOrStatement . LexToken(},'}',9,162)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements . LexToken(},'}',9,162)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements } . LexToken(},'}',10,168)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 136
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Block . LexToken(},'}',10,168)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Statement . LexToken(},'}',10,168)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ELSE Statement] with ['if','(',None,')',None,'else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 130
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement . LexToken(},'}',10,168)
   yacc.py: 391:Action : Reduce rule [M_instr -> <empty>] with [] and goto state 126
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 239
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement M_instr . LexToken(},'}',10,168)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement M_instr] with [None,None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',10,168)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',10,168)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',10,168)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',12,171)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator Block . LexToken(},'}',12,171)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 298
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',12,171)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : ClassHeader { MethodDeclaration . LexToken(},'}',12,171)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclaration . LexToken(},'}',12,171)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 72
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarationOptSemi . LexToken(},'}',12,171)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [None] and goto state 62
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(},'}',12,171)
   yacc.py: 366:Action : Shift and goto state 104
   yacc.py: 337:
   yacc.py: 338:State  : 104
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations } . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations }] with [None,'{',None,'}'] and goto state 37
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 5
   yacc.py: 352:Stack  : TypeDeclaration . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 29
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarationOptSemi . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarationOptSemi] with [None] and goto state 27
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 21
   yacc.py: 352:Stack  : TypeDeclarations . $end
   yacc.py: 389:Action : Reduce rule [ProgramFile -> TypeDeclarations] with [None] and goto state 25
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : ProgramFile . $end
   yacc.py: 389:Action : Reduce rule [CompilationUnit -> ProgramFile] with [None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 18
   yacc.py: 352:Stack  : CompilationUnit . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x936be0> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
