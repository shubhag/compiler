   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PUBLIC,'public',27,525)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : PUBLIC . LexToken(CLASS,'class',27,532)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : Modifier . LexToken(CLASS,'class',27,532)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : Modifiers . LexToken(CLASS,'class',27,532)
   yacc.py: 366:Action : Shift and goto state 11
   yacc.py: 337:
   yacc.py: 338:State  : 11
   yacc.py: 352:Stack  : Modifiers CLASS . LexToken(IDENTIFIER,'employee',27,538)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 59
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 31
   yacc.py: 352:Stack  : Modifiers ClassWord . LexToken(IDENTIFIER,'employee',27,538)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : Modifiers ClassWord IDENTIFIER . LexToken({,'{',27,546)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [None,None,'employee'] and goto state 43
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',27,546)
   yacc.py: 366:Action : Shift and goto state 40
   yacc.py: 337:
   yacc.py: 338:State  : 40
   yacc.py: 352:Stack  : ClassHeader { . LexToken(INT,'int',31,586)
   yacc.py: 366:Action : Shift and goto state 74
   yacc.py: 337:
   yacc.py: 338:State  : 74
   yacc.py: 352:Stack  : ClassHeader { INT . LexToken(IDENTIFIER,'ia',31,590)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> INT] with ['int'] and goto state 12
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { PrimitiveType . LexToken(IDENTIFIER,'ia',31,590)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { TypeName . LexToken(IDENTIFIER,'ia',31,590)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 61
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier . LexToken(IDENTIFIER,'ia',31,590)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier IDENTIFIER . LexToken(=,'=',31,593)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['ia'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName . LexToken(=,'=',31,593)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = . LexToken(INT_LITERAL,'4',31,595)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = INT_LITERAL . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['4'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 124
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 116
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 157
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 292
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = Expression . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarator . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 92
   yacc.py: 352:Stack  : ClassHeader { TypeSpecifier VariableDeclarators . LexToken(;,';',31,597)
   yacc.py: 389:Action : Reduce rule [FieldVariableDeclaration -> TypeSpecifier VariableDeclarators] with [None,None] and goto state 73
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { FieldVariableDeclaration . LexToken(;,';',31,597)
   yacc.py: 366:Action : Shift and goto state 90
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldVariableDeclaration ; . LexToken(},'}',32,599)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> FieldVariableDeclaration ;] with [None,';'] and goto state 66
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclaration . LexToken(},'}',32,599)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 72
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarationOptSemi . LexToken(},'}',32,599)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [None] and goto state 62
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(},'}',32,599)
   yacc.py: 366:Action : Shift and goto state 104
   yacc.py: 337:
   yacc.py: 338:State  : 104
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations } . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations }] with [None,'{',None,'}'] and goto state 37
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 5
   yacc.py: 352:Stack  : TypeDeclaration . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 29
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarationOptSemi . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarationOptSemi] with [None] and goto state 27
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 21
   yacc.py: 352:Stack  : TypeDeclarations . $end
   yacc.py: 389:Action : Reduce rule [ProgramFile -> TypeDeclarations] with [None] and goto state 25
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : ProgramFile . $end
   yacc.py: 389:Action : Reduce rule [CompilationUnit -> ProgramFile] with [None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 18
   yacc.py: 352:Stack  : CompilationUnit . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x936be0> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
