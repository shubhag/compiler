   yacc.py: 292:PLY: PARSE DEBUG START
   yacc.py: 337:
   yacc.py: 338:State  : 0
   yacc.py: 352:Stack  : . LexToken(PUBLIC,'public',1,0)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : PUBLIC . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : Modifier . LexToken(CLASS,'class',1,7)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : Modifiers . LexToken(CLASS,'class',1,7)
   yacc.py: 366:Action : Shift and goto state 11
   yacc.py: 337:
   yacc.py: 338:State  : 11
   yacc.py: 352:Stack  : Modifiers CLASS . LexToken(IDENTIFIER,'BNode',1,13)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 59
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 31
   yacc.py: 352:Stack  : Modifiers ClassWord . LexToken(IDENTIFIER,'BNode',1,13)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : Modifiers ClassWord IDENTIFIER . LexToken({,'{',1,19)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [None,None,'BNode'] and goto state 43
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : ClassHeader . LexToken({,'{',1,19)
   yacc.py: 366:Action : Shift and goto state 40
   yacc.py: 337:
   yacc.py: 338:State  : 40
   yacc.py: 352:Stack  : ClassHeader { . LexToken(PUBLIC,'public',3,26)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : ClassHeader { PUBLIC . LexToken(IDENTIFIER,'BNode',3,33)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader { Modifier . LexToken(IDENTIFIER,'BNode',3,33)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { Modifiers . LexToken(IDENTIFIER,'BNode',3,33)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : ClassHeader { Modifiers IDENTIFIER . LexToken(IDENTIFIER,'leftBNode',3,39)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { Modifiers QualifiedName . LexToken(IDENTIFIER,'leftBNode',3,39)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeName . LexToken(IDENTIFIER,'leftBNode',3,39)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier . LexToken(IDENTIFIER,'leftBNode',3,39)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier IDENTIFIER . LexToken(,,',',3,48)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['leftBNode'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier DeclaratorName . LexToken(,,',',3,48)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier VariableDeclarator . LexToken(,,',',3,48)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 209
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier VariableDeclarators . LexToken(,,',',3,48)
   yacc.py: 366:Action : Shift and goto state 193
   yacc.py: 337:
   yacc.py: 338:State  : 193
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier VariableDeclarators , . LexToken(IDENTIFIER,'rightBNode',3,51)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier VariableDeclarators , IDENTIFIER . LexToken(;,';',3,61)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['rightBNode'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier VariableDeclarators , DeclaratorName . LexToken(;,';',3,61)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 286
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier VariableDeclarators , VariableDeclarator . LexToken(;,';',3,61)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarators , VariableDeclarator] with [None,',',None] and goto state 75
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 209
   yacc.py: 352:Stack  : ClassHeader { Modifiers TypeSpecifier VariableDeclarators . LexToken(;,';',3,61)
   yacc.py: 389:Action : Reduce rule [FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators] with [None,None,None] and goto state 72
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { FieldVariableDeclaration . LexToken(;,';',3,61)
   yacc.py: 366:Action : Shift and goto state 90
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldVariableDeclaration ; . LexToken(PUBLIC,'public',4,80)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> FieldVariableDeclaration ;] with [None,';'] and goto state 66
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclaration . LexToken(PUBLIC,'public',4,80)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 72
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarationOptSemi . LexToken(PUBLIC,'public',4,80)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [None] and goto state 62
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',4,80)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations PUBLIC . LexToken(IDENTIFIER,'AnyClass',4,87)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifier . LexToken(IDENTIFIER,'AnyClass',4,87)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(IDENTIFIER,'AnyClass',4,87)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER . LexToken(IDENTIFIER,'anyClass',4,96)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['AnyClass'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers QualifiedName . LexToken(IDENTIFIER,'anyClass',4,96)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'anyClass',4,96)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'anyClass',4,96)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken(;,';',4,104)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['anyClass'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken(;,';',4,104)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier VariableDeclarator . LexToken(;,';',4,104)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 209
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier VariableDeclarators . LexToken(;,';',4,104)
   yacc.py: 389:Action : Reduce rule [FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators] with [None,None,None] and goto state 72
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldVariableDeclaration . LexToken(;,';',4,104)
   yacc.py: 366:Action : Shift and goto state 90
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldVariableDeclaration ; . LexToken(PUBLIC,'public',6,133)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> FieldVariableDeclaration ;] with [None,';'] and goto state 66
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PUBLIC,'public',6,133)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PUBLIC,'public',6,133)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',6,133)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations PUBLIC . LexToken(IDENTIFIER,'BNode',6,140)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifier . LexToken(IDENTIFIER,'BNode',6,140)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(IDENTIFIER,'BNode',6,140)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER . LexToken((,'(',6,145)
   yacc.py: 366:Action : Shift and goto state 100
   yacc.py: 337:
   yacc.py: 338:State  : 100
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( . LexToken(IDENTIFIER,'AnyClass',6,146)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( IDENTIFIER . LexToken(IDENTIFIER,'anyClass',6,155)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['AnyClass'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( QualifiedName . LexToken(IDENTIFIER,'anyClass',6,155)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( TypeName . LexToken(IDENTIFIER,'anyClass',6,155)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( TypeSpecifier . LexToken(IDENTIFIER,'anyClass',6,155)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( TypeSpecifier IDENTIFIER . LexToken(),')',6,164)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['anyClass'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( TypeSpecifier DeclaratorName . LexToken(),')',6,164)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( Parameter . LexToken(),')',6,164)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 208
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( ParameterList . LexToken(),')',6,164)
   yacc.py: 366:Action : Shift and goto state 295
   yacc.py: 337:
   yacc.py: 338:State  : 295
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( ParameterList ) . LexToken({,'{',6,166)
   yacc.py: 389:Action : Reduce rule [ConstructorDeclarator -> IDENTIFIER ( ParameterList )] with ['BNode','(',None,')'] and goto state 104
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator . LexToken({,'{',6,166)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { . LexToken(THIS,'this',7,189)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { THIS . LexToken(.,'.',7,193)
   yacc.py: 389:Action : Reduce rule [SpecialName -> THIS] with ['this'] and goto state 191
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { SpecialName . LexToken(.,'.',7,193)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { NotJustName . LexToken(.,'.',7,193)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { NotJustName . . LexToken(IDENTIFIER,'anyClass',7,194)
   yacc.py: 366:Action : Shift and goto state 369
   yacc.py: 337:
   yacc.py: 338:State  : 369
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { NotJustName . IDENTIFIER . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [FieldAccess -> NotJustName . IDENTIFIER] with [None,'.','anyClass'] and goto state 181
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { FieldAccess . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> FieldAccess] with [None] and goto state 177
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { ComplexPrimaryNoParenthesis . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { ComplexPrimary . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { NotJustName . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { PrimaryExpression . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { PostfixExpression . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LogicalUnaryExpression . LexToken(=,'=',7,202)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression . LexToken(=,'=',7,202)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression = . LexToken(IDENTIFIER,'anyClass',7,204)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'anyClass',7,204)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator IDENTIFIER . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['anyClass'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator QualifiedName . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { AssignmentExpression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { Expression . LexToken(;,';',7,212)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { ExpressionStatement . LexToken(;,';',7,212)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { ExpressionStatement ; . LexToken(THIS,'this',8,222)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { Statement . LexToken(THIS,'this',8,222)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationOrStatement . LexToken(THIS,'this',8,222)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements . LexToken(THIS,'this',8,222)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements THIS . LexToken(.,'.',8,226)
   yacc.py: 389:Action : Reduce rule [SpecialName -> THIS] with ['this'] and goto state 191
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements SpecialName . LexToken(.,'.',8,226)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(.,'.',8,226)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . . LexToken(IDENTIFIER,'leftBNode',8,227)
   yacc.py: 366:Action : Shift and goto state 369
   yacc.py: 337:
   yacc.py: 338:State  : 369
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . IDENTIFIER . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [FieldAccess -> NotJustName . IDENTIFIER] with [None,'.','leftBNode'] and goto state 181
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements FieldAccess . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> FieldAccess] with [None] and goto state 177
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',8,237)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',8,237)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(NULL,'null',8,239)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(NULL,'null',8,239)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NULL . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator SpecialName . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',8,243)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',8,243)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(THIS,'this',9,253)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(THIS,'this',9,253)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 279
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(THIS,'this',9,253)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements . LexToken(THIS,'this',9,253)
   yacc.py: 366:Action : Shift and goto state 115
   yacc.py: 337:
   yacc.py: 338:State  : 115
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements THIS . LexToken(.,'.',9,257)
   yacc.py: 389:Action : Reduce rule [SpecialName -> THIS] with ['this'] and goto state 191
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements SpecialName . LexToken(.,'.',9,257)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(.,'.',9,257)
   yacc.py: 366:Action : Shift and goto state 281
   yacc.py: 337:
   yacc.py: 338:State  : 281
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . . LexToken(IDENTIFIER,'rightBNode',9,258)
   yacc.py: 366:Action : Shift and goto state 369
   yacc.py: 337:
   yacc.py: 338:State  : 369
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . IDENTIFIER . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [FieldAccess -> NotJustName . IDENTIFIER] with [None,'.','rightBNode'] and goto state 181
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 168
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements FieldAccess . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> FieldAccess] with [None] and goto state 177
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements NotJustName . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',9,269)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',9,269)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(NULL,'null',9,271)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(NULL,'null',9,271)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NULL . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator SpecialName . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',9,275)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',9,275)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',10,281)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',10,281)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 279
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',10,281)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',10,281)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',12,288)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 212
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator Block . LexToken(PUBLIC,'public',12,288)
   yacc.py: 389:Action : Reduce rule [ConstructorDeclaration -> Modifiers ConstructorDeclarator Block] with [None,None,None] and goto state 101
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations ConstructorDeclaration . LexToken(PUBLIC,'public',12,288)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> ConstructorDeclaration] with [None] and goto state 68
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PUBLIC,'public',12,288)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PUBLIC,'public',12,288)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',12,288)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations PUBLIC . LexToken(VOID,'void',12,295)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifier . LexToken(VOID,'void',12,295)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers . LexToken(VOID,'void',12,295)
   yacc.py: 366:Action : Shift and goto state 69
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers VOID . LexToken(IDENTIFIER,'show',12,300)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'show',12,300)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'show',12,300)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'show',12,300)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',12,304)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['show'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',12,304)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(),')',12,305)
   yacc.py: 366:Action : Shift and goto state 287
   yacc.py: 337:
   yacc.py: 338:State  : 287
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ) . LexToken({,'{',12,307)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( )] with [None,'(',')'] and goto state 89
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',12,307)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IDENTIFIER,'System',14,365)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IDENTIFIER . LexToken(.,'.',14,371)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['System'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . LexToken(.,'.',14,371)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . . LexToken(IDENTIFIER,'out',14,372)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . IDENTIFIER . LexToken(.,'.',14,375)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','out'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . LexToken(.,'.',14,375)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . . LexToken(IDENTIFIER,'print',14,376)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . IDENTIFIER . LexToken((,'(',14,381)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','print'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . LexToken((,'(',14,381)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess . LexToken((,'(',14,381)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( . LexToken(IDENTIFIER,'anyClass',14,382)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( IDENTIFIER . LexToken(.,'.',14,390)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['anyClass'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( QualifiedName . LexToken(.,'.',14,390)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'show',14,391)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( QualifiedName . IDENTIFIER . LexToken((,'(',14,395)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','show'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( QualifiedName . LexToken((,'(',14,395)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( MethodAccess . LexToken((,'(',14,395)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( MethodAccess ( . LexToken(),')',14,396)
   yacc.py: 366:Action : Shift and goto state 336
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( MethodAccess ( ) . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( )] with [None,'(',')'] and goto state 187
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( MethodCall . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ComplexPrimaryNoParenthesis . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ComplexPrimary . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( NotJustName . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( PrimaryExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( PostfixExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( LogicalUnaryExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( UnaryExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( CastExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( MultiplicativeExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( AdditiveExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ShiftExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( RelationalExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( EqualityExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( AndExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ExclusiveOrExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( InclusiveOrExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ConditionalAndExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ConditionalOrExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ConditionalExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( AssignmentExpression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( Expression . LexToken(),')',14,397)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ArgumentList . LexToken(),')',14,397)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ArgumentList ) . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodCall . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ComplexPrimaryNoParenthesis . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ComplexPrimary . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { NotJustName . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PrimaryExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PostfixExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LogicalUnaryExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { CastExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MultiplicativeExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { AdditiveExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ShiftExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RelationalExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { EqualityExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { AndExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExclusiveOrExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { InclusiveOrExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ConditionalAndExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ConditionalOrExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ConditionalExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { AssignmentExpression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Expression . LexToken(;,';',14,398)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExpressionStatement . LexToken(;,';',14,398)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExpressionStatement ; . LexToken(},'}',15,404)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Statement . LexToken(},'}',15,404)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(},'}',15,404)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',15,404)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',16,406)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(},'}',16,406)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',16,406)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations MethodDeclaration . LexToken(},'}',16,406)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclaration . LexToken(},'}',16,406)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(},'}',16,406)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations . LexToken(},'}',16,406)
   yacc.py: 366:Action : Shift and goto state 104
   yacc.py: 337:
   yacc.py: 338:State  : 104
   yacc.py: 352:Stack  : ClassHeader { FieldDeclarations } . LexToken(PUBLIC,'public',18,409)
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations }] with [None,'{',None,'}'] and goto state 37
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 5
   yacc.py: 352:Stack  : TypeDeclaration . LexToken(PUBLIC,'public',18,409)
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 29
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 12
   yacc.py: 352:Stack  : TypeDeclarationOptSemi . LexToken(PUBLIC,'public',18,409)
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarationOptSemi] with [None] and goto state 27
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 21
   yacc.py: 352:Stack  : TypeDeclarations . LexToken(PUBLIC,'public',18,409)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : TypeDeclarations PUBLIC . LexToken(CLASS,'class',18,416)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations Modifier . LexToken(CLASS,'class',18,416)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 13
   yacc.py: 352:Stack  : TypeDeclarations Modifiers . LexToken(CLASS,'class',18,416)
   yacc.py: 366:Action : Shift and goto state 11
   yacc.py: 337:
   yacc.py: 338:State  : 11
   yacc.py: 352:Stack  : TypeDeclarations Modifiers CLASS . LexToken(IDENTIFIER,'BinTree',18,422)
   yacc.py: 389:Action : Reduce rule [ClassWord -> CLASS] with ['class'] and goto state 59
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 31
   yacc.py: 352:Stack  : TypeDeclarations Modifiers ClassWord . LexToken(IDENTIFIER,'BinTree',18,422)
   yacc.py: 366:Action : Shift and goto state 44
   yacc.py: 337:
   yacc.py: 338:State  : 44
   yacc.py: 352:Stack  : TypeDeclarations Modifiers ClassWord IDENTIFIER . LexToken({,'{',18,430)
   yacc.py: 389:Action : Reduce rule [ClassHeader -> Modifiers ClassWord IDENTIFIER] with [None,None,'BinTree'] and goto state 43
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 23
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader . LexToken({,'{',18,430)
   yacc.py: 366:Action : Shift and goto state 40
   yacc.py: 337:
   yacc.py: 338:State  : 40
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { . LexToken(IDENTIFIER,'BNode',19,436)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { IDENTIFIER . LexToken(IDENTIFIER,'theBTRootNode',19,442)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { QualifiedName . LexToken(IDENTIFIER,'theBTRootNode',19,442)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeName . LexToken(IDENTIFIER,'theBTRootNode',19,442)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 61
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier . LexToken(IDENTIFIER,'theBTRootNode',19,442)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier IDENTIFIER . LexToken(;,';',19,455)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['theBTRootNode'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier DeclaratorName . LexToken(;,';',19,455)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName] with [None] and goto state 76
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier VariableDeclarator . LexToken(;,';',19,455)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 92
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { TypeSpecifier VariableDeclarators . LexToken(;,';',19,455)
   yacc.py: 389:Action : Reduce rule [FieldVariableDeclaration -> TypeSpecifier VariableDeclarators] with [None,None] and goto state 73
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 54
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldVariableDeclaration . LexToken(;,';',19,455)
   yacc.py: 366:Action : Shift and goto state 90
   yacc.py: 337:
   yacc.py: 338:State  : 90
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldVariableDeclaration ; . LexToken(PUBLIC,'public',21,462)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> FieldVariableDeclaration ;] with [None,';'] and goto state 66
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclaration . LexToken(PUBLIC,'public',21,462)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 72
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarationOptSemi . LexToken(PUBLIC,'public',21,462)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarationOptSemi] with [None] and goto state 62
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',21,462)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PUBLIC . LexToken(IDENTIFIER,'BinTree',21,469)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(IDENTIFIER,'BinTree',21,469)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(IDENTIFIER,'BinTree',21,469)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers IDENTIFIER . LexToken((,'(',21,476)
   yacc.py: 366:Action : Shift and goto state 100
   yacc.py: 337:
   yacc.py: 338:State  : 100
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( . LexToken(),')',21,477)
   yacc.py: 366:Action : Shift and goto state 206
   yacc.py: 337:
   yacc.py: 338:State  : 206
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers IDENTIFIER ( ) . LexToken({,'{',22,498)
   yacc.py: 389:Action : Reduce rule [ConstructorDeclarator -> IDENTIFIER ( )] with ['BinTree','(',')'] and goto state 105
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 102
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator . LexToken({,'{',22,498)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { . LexToken(IDENTIFIER,'theBTRootNode',23,508)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { IDENTIFIER . LexToken(=,'=',23,522)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theBTRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { QualifiedName . LexToken(=,'=',23,522)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { PrimaryExpression . LexToken(=,'=',23,522)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { PostfixExpression . LexToken(=,'=',23,522)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LogicalUnaryExpression . LexToken(=,'=',23,522)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression . LexToken(=,'=',23,522)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression = . LexToken(NULL,'null',23,524)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator . LexToken(NULL,'null',23,524)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator NULL . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator SpecialName . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { AssignmentExpression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { Expression . LexToken(;,';',23,528)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { ExpressionStatement . LexToken(;,';',23,528)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { ExpressionStatement ; . LexToken(},'}',24,534)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { Statement . LexToken(},'}',24,534)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationOrStatement . LexToken(},'}',24,534)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',24,534)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PROTECTED,'protected',27,618)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 212
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers ConstructorDeclarator Block . LexToken(PROTECTED,'protected',27,618)
   yacc.py: 389:Action : Reduce rule [ConstructorDeclaration -> Modifiers ConstructorDeclarator Block] with [None,None,None] and goto state 101
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 53
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations ConstructorDeclaration . LexToken(PROTECTED,'protected',27,618)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> ConstructorDeclaration] with [None] and goto state 68
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PROTECTED,'protected',27,618)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PROTECTED,'protected',27,618)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PROTECTED,'protected',27,618)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PROTECTED . LexToken(IDENTIFIER,'BNode',27,628)
   yacc.py: 389:Action : Reduce rule [Modifier -> PROTECTED] with ['protected'] and goto state 52
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(IDENTIFIER,'BNode',27,628)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(IDENTIFIER,'BNode',27,628)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers IDENTIFIER . LexToken(IDENTIFIER,'insertAB',27,634)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers QualifiedName . LexToken(IDENTIFIER,'insertAB',27,634)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'insertAB',27,634)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'insertAB',27,634)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',27,642)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['insertAB'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',27,642)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'BNode',27,643)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken(IDENTIFIER,'theRootNode',27,649)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken(IDENTIFIER,'theRootNode',27,649)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'theRootNode',27,649)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'theRootNode',27,649)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(,,',',27,660)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['theRootNode'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(,,',',27,660)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(,,',',27,660)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 288
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(,,',',27,660)
   yacc.py: 366:Action : Shift and goto state 296
   yacc.py: 337:
   yacc.py: 338:State  : 296
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , . LexToken(IDENTIFIER,'BNode',27,662)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , IDENTIFIER . LexToken(IDENTIFIER,'myNewNode',27,668)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , QualifiedName . LexToken(IDENTIFIER,'myNewNode',27,668)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeName . LexToken(IDENTIFIER,'myNewNode',27,668)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier . LexToken(IDENTIFIER,'myNewNode',27,668)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier IDENTIFIER . LexToken(),')',27,677)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['myNewNode'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier DeclaratorName . LexToken(),')',27,677)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 376
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , Parameter . LexToken(),')',27,677)
   yacc.py: 389:Action : Reduce rule [ParameterList -> ParameterList , Parameter] with [None,',',None] and goto state 92
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 288
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',27,677)
   yacc.py: 366:Action : Shift and goto state 372
   yacc.py: 337:
   yacc.py: 338:State  : 372
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',27,679)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',27,679)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IF,'if',28,689)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF . LexToken((,'(',28,692)
   yacc.py: 366:Action : Shift and goto state 283
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( . LexToken(IDENTIFIER,'theRootNode',28,693)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( IDENTIFIER . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( QualifiedName . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( PrimaryExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( PostfixExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( LogicalUnaryExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( UnaryExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( CastExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( MultiplicativeExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AdditiveExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ShiftExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( RelationalExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression . LexToken(OP_EQ,'==',28,705)
   yacc.py: 366:Action : Shift and goto state 236
   yacc.py: 337:
   yacc.py: 338:State  : 236
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ . LexToken(NULL,'null',28,708)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ NULL . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ SpecialName . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ NotJustName . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 233
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ CastExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 315
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with [None,'==',None] and goto state 250
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AndExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ExclusiveOrExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( InclusiveOrExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalAndExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalOrExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AssignmentExpression . LexToken(),')',28,712)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 370
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression . LexToken(),')',28,712)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) . LexToken({,'{',28,714)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { . LexToken(IDENTIFIER,'theRootNode',29,728)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { IDENTIFIER . LexToken(=,'=',29,740)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { QualifiedName . LexToken(=,'=',29,740)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { PrimaryExpression . LexToken(=,'=',29,740)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { PostfixExpression . LexToken(=,'=',29,740)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LogicalUnaryExpression . LexToken(=,'=',29,740)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression . LexToken(=,'=',29,740)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression = . LexToken(IDENTIFIER,'myNewNode',29,742)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'myNewNode',29,742)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator IDENTIFIER . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['myNewNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator QualifiedName . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { AssignmentExpression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { Expression . LexToken(;,';',29,751)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ExpressionStatement . LexToken(;,';',29,751)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ExpressionStatement ; . LexToken(},'}',32,877)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { Statement . LexToken(},'}',32,877)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',32,877)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',32,877)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',32,879)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Block . LexToken(ELSE,'else',32,879)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement . LexToken(ELSE,'else',32,879)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE . LexToken(IF,'if',32,884)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF . LexToken((,'(',32,887)
   yacc.py: 366:Action : Shift and goto state 283
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( . LexToken(IDENTIFIER,'myNewNode',32,888)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( IDENTIFIER . LexToken(.,'.',32,897)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['myNewNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . LexToken(.,'.',32,897)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . . LexToken(IDENTIFIER,'anyClass',32,898)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . IDENTIFIER . LexToken(.,'.',32,906)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','anyClass'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . LexToken(.,'.',32,906)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . . LexToken(IDENTIFIER,'surname',32,907)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . IDENTIFIER . LexToken(.,'.',32,914)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','surname'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . LexToken(.,'.',32,914)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . . LexToken(IDENTIFIER,'compareTo',32,915)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . IDENTIFIER . LexToken((,'(',32,924)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','compareTo'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( QualifiedName . LexToken((,'(',32,924)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess . LexToken((,'(',32,924)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',33,952)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( IDENTIFIER . LexToken(.,'.',33,963)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . LexToken(.,'.',33,963)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'anyClass',33,964)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . IDENTIFIER . LexToken(.,'.',33,972)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','anyClass'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . LexToken(.,'.',33,972)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'surname',33,973)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . IDENTIFIER . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','surname'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( PrimaryExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( PostfixExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( LogicalUnaryExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( UnaryExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( CastExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( MultiplicativeExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( AdditiveExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ShiftExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( RelationalExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( EqualityExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( AndExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ExclusiveOrExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( InclusiveOrExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ConditionalAndExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ConditionalOrExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ConditionalExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( AssignmentExpression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( Expression . LexToken(),')',33,980)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ArgumentList . LexToken(),')',33,980)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ArgumentList ) . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MethodCall . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( ComplexPrimaryNoParenthesis . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( ComplexPrimary . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( NotJustName . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( PrimaryExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( PostfixExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( LogicalUnaryExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( UnaryExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( CastExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( MultiplicativeExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( AdditiveExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( ShiftExpression . LexToken(<,'<',33,982)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression . LexToken(<,'<',33,982)
   yacc.py: 366:Action : Shift and goto state 248
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < . LexToken(INT_LITERAL,'0',33,984)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < INT_LITERAL . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['0'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < ComplexPrimaryNoParenthesis . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < ComplexPrimary . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < NotJustName . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < PrimaryExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < PostfixExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < LogicalUnaryExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 233
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < UnaryExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < CastExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < MultiplicativeExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < AdditiveExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 339
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression < ShiftExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with [None,'<',None] and goto state 244
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( RelationalExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( EqualityExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( AndExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( ExclusiveOrExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( InclusiveOrExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( ConditionalAndExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( ConditionalOrExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( ConditionalExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( AssignmentExpression . LexToken(),')',33,985)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 370
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression . LexToken(),')',33,985)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) . LexToken({,'{',33,987)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { . LexToken(IDENTIFIER,'theRootNode',34,1001)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { IDENTIFIER . LexToken(.,'.',34,1012)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { QualifiedName . LexToken(.,'.',34,1012)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { QualifiedName . . LexToken(IDENTIFIER,'leftBNode',34,1013)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { QualifiedName . IDENTIFIER . LexToken(=,'=',34,1023)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','leftBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { QualifiedName . LexToken(=,'=',34,1023)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { PrimaryExpression . LexToken(=,'=',34,1023)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { PostfixExpression . LexToken(=,'=',34,1023)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { LogicalUnaryExpression . LexToken(=,'=',34,1023)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression . LexToken(=,'=',34,1023)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression = . LexToken(IDENTIFIER,'insertAB',34,1025)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'insertAB',34,1025)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator IDENTIFIER . LexToken((,'(',34,1033)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['insertAB'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator QualifiedName . LexToken((,'(',34,1033)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess . LexToken((,'(',34,1033)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',34,1034)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( IDENTIFIER . LexToken(.,'.',34,1045)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . LexToken(.,'.',34,1045)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'leftBNode',34,1046)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . IDENTIFIER . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','leftBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( PrimaryExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( PostfixExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( LogicalUnaryExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( UnaryExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( CastExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( MultiplicativeExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( AdditiveExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ShiftExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( RelationalExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( EqualityExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( AndExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ExclusiveOrExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( InclusiveOrExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ConditionalAndExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ConditionalOrExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ConditionalExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( AssignmentExpression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( Expression . LexToken(,,',',34,1055)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList . LexToken(,,',',34,1055)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , . LexToken(IDENTIFIER,'myNewNode',34,1057)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , IDENTIFIER . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['myNewNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , QualifiedName . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , PrimaryExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , PostfixExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , LogicalUnaryExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , UnaryExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , CastExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , MultiplicativeExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AdditiveExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ShiftExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , RelationalExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , EqualityExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AndExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ExclusiveOrExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , InclusiveOrExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalAndExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalOrExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AssignmentExpression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , Expression . LexToken(),')',34,1066)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> ArgumentList , Expression] with [None,',',None] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList . LexToken(),')',34,1066)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList ) . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MethodCall . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { AssignmentExpression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { Expression . LexToken(;,';',34,1067)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { ExpressionStatement . LexToken(;,';',34,1067)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { ExpressionStatement ; . LexToken(},'}',35,1077)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { Statement . LexToken(},'}',35,1077)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',35,1077)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',35,1077)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',35,1079)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Block . LexToken(ELSE,'else',35,1079)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement . LexToken(ELSE,'else',35,1079)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE . LexToken({,'{',35,1084)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { . LexToken(IDENTIFIER,'theRootNode',37,1149)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { IDENTIFIER . LexToken(.,'.',37,1160)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { QualifiedName . LexToken(.,'.',37,1160)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { QualifiedName . . LexToken(IDENTIFIER,'rightBNode',37,1161)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { QualifiedName . IDENTIFIER . LexToken(=,'=',37,1172)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','rightBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { QualifiedName . LexToken(=,'=',37,1172)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { PrimaryExpression . LexToken(=,'=',37,1172)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { PostfixExpression . LexToken(=,'=',37,1172)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { LogicalUnaryExpression . LexToken(=,'=',37,1172)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression . LexToken(=,'=',37,1172)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression = . LexToken(IDENTIFIER,'insertAB',38,1190)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'insertAB',38,1190)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator IDENTIFIER . LexToken((,'(',38,1198)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['insertAB'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator QualifiedName . LexToken((,'(',38,1198)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess . LexToken((,'(',38,1198)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',38,1199)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( IDENTIFIER . LexToken(.,'.',38,1210)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . LexToken(.,'.',38,1210)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'rightBNode',38,1211)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . IDENTIFIER . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','rightBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( PrimaryExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( PostfixExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( LogicalUnaryExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( UnaryExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( CastExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( MultiplicativeExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( AdditiveExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ShiftExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( RelationalExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( EqualityExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( AndExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ExclusiveOrExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( InclusiveOrExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ConditionalAndExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ConditionalOrExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ConditionalExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( AssignmentExpression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( Expression . LexToken(,,',',38,1221)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList . LexToken(,,',',38,1221)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , . LexToken(IDENTIFIER,'myNewNode',38,1223)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , IDENTIFIER . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['myNewNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , QualifiedName . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , PrimaryExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , PostfixExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , LogicalUnaryExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , UnaryExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , CastExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , MultiplicativeExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AdditiveExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ShiftExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , RelationalExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , EqualityExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AndExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ExclusiveOrExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , InclusiveOrExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalAndExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalOrExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AssignmentExpression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , Expression . LexToken(),')',38,1232)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> ArgumentList , Expression] with [None,',',None] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList . LexToken(),')',38,1232)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodAccess ( ArgumentList ) . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MethodCall . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { AssignmentExpression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { Expression . LexToken(;,';',38,1233)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { ExpressionStatement . LexToken(;,';',38,1233)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { ExpressionStatement ; . LexToken(},'}',39,1243)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { Statement . LexToken(},'}',39,1243)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { LocalVariableDeclarationOrStatement . LexToken(},'}',39,1243)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements . LexToken(},'}',39,1243)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements } . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE Block . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE Statement . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [ElseOrNot -> ELSE Statement] with ['else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ElseOrNot . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ElseOrNot] with ['if','(',None,')',None,None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE SelectionStatement . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement] with [None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE Statement . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [ElseOrNot -> ELSE Statement] with ['else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ElseOrNot . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ElseOrNot] with ['if','(',None,')',None,None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { SelectionStatement . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement] with [None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Statement . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(RETURN,'return',40,1253)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(RETURN,'return',40,1253)
   yacc.py: 366:Action : Shift and goto state 120
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN . LexToken(IDENTIFIER,'theRootNode',40,1260)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN IDENTIFIER . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN QualifiedName . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PrimaryExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN PostfixExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN LogicalUnaryExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN UnaryExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN CastExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN MultiplicativeExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AdditiveExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ShiftExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN RelationalExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN EqualityExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AndExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ExclusiveOrExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN InclusiveOrExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalAndExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalOrExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN ConditionalExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN AssignmentExpression . LexToken(;,';',40,1271)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression . LexToken(;,';',40,1271)
   yacc.py: 366:Action : Shift and goto state 309
   yacc.py: 337:
   yacc.py: 338:State  : 309
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements RETURN Expression ; . LexToken(},'}',41,1277)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements JumpStatement . LexToken(},'}',41,1277)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',41,1277)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 279
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',41,1277)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',41,1277)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',43,1284)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(PUBLIC,'public',43,1284)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PUBLIC,'public',43,1284)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(PUBLIC,'public',43,1284)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PUBLIC,'public',43,1284)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PUBLIC,'public',43,1284)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',43,1284)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PUBLIC . LexToken(VOID,'void',43,1291)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(VOID,'void',43,1291)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(VOID,'void',43,1291)
   yacc.py: 366:Action : Shift and goto state 69
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers VOID . LexToken(IDENTIFIER,'insertBST',43,1296)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'insertBST',43,1296)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'insertBST',43,1296)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'insertBST',43,1296)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',43,1305)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['insertBST'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',43,1305)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'AnyClass',43,1306)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken(IDENTIFIER,'anyClass',43,1315)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['AnyClass'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken(IDENTIFIER,'anyClass',43,1315)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'anyClass',43,1315)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'anyClass',43,1315)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(),')',43,1323)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['anyClass'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',43,1323)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',43,1323)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 288
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',43,1323)
   yacc.py: 366:Action : Shift and goto state 372
   yacc.py: 337:
   yacc.py: 338:State  : 372
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',43,1325)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',43,1325)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IDENTIFIER,'BNode',44,1335)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IDENTIFIER . LexToken(IDENTIFIER,'anyClassBTNode',44,1341)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . LexToken(IDENTIFIER,'anyClassBTNode',44,1341)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'anyClassBTNode',44,1341)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'anyClassBTNode',44,1341)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(=,'=',44,1356)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with [<str @ 0x7fad9d132458>] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(=,'=',44,1356)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = . LexToken(NEW,'new',44,1358)
   yacc.py: 366:Action : Shift and goto state 152
   yacc.py: 337:
   yacc.py: 338:State  : 152
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW . LexToken(IDENTIFIER,'BNode',44,1362)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW IDENTIFIER . LexToken((,'(',44,1367)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW QualifiedName . LexToken((,'(',44,1367)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 259
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName . LexToken((,'(',44,1367)
   yacc.py: 366:Action : Shift and goto state 348
   yacc.py: 337:
   yacc.py: 338:State  : 348
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( . LexToken(IDENTIFIER,'anyClass',44,1368)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( IDENTIFIER . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['anyClass'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( QualifiedName . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( PrimaryExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( PostfixExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( LogicalUnaryExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( UnaryExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( CastExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( MultiplicativeExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( AdditiveExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( ShiftExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( RelationalExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( EqualityExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( AndExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( ExclusiveOrExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( InclusiveOrExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( ConditionalAndExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( ConditionalOrExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( ConditionalExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( AssignmentExpression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( Expression . LexToken(),')',44,1376)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 402
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( ArgumentList . LexToken(),')',44,1376)
   yacc.py: 366:Action : Shift and goto state 423
   yacc.py: 337:
   yacc.py: 338:State  : 423
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NEW TypeName ( ArgumentList ) . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [ClassAllocationExpression -> NEW TypeName ( ArgumentList )] with ['new',None,'(',None,')'] and goto state 204
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 148
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ClassAllocationExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [PlainNewAllocationExpression -> ClassAllocationExpression] with [None] and goto state 199
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 142
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PlainNewAllocationExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [NewAllocationExpression -> PlainNewAllocationExpression] with [None] and goto state 196
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 159
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NewAllocationExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [NotJustName -> NewAllocationExpression] with [None] and goto state 167
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = Expression . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 290
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',44,1377)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',44,1377)
   yacc.py: 366:Action : Shift and goto state 353
   yacc.py: 337:
   yacc.py: 338:State  : 353
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(IDENTIFIER,'theBTRootNode',46,1416)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(IDENTIFIER,'theBTRootNode',46,1416)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'theBTRootNode',46,1416)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'theBTRootNode',46,1416)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(=,'=',46,1430)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theBTRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(=,'=',46,1430)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(=,'=',46,1430)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(=,'=',46,1430)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(=,'=',46,1430)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(=,'=',46,1430)
   yacc.py: 366:Action : Shift and goto state 271
   yacc.py: 337:
   yacc.py: 338:State  : 271
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression = . LexToken(IDENTIFIER,'insertAB',46,1432)
   yacc.py: 389:Action : Reduce rule [AssignmentOperator -> =] with ['='] and goto state 266
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 269
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator . LexToken(IDENTIFIER,'insertAB',46,1432)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator IDENTIFIER . LexToken((,'(',46,1440)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['insertAB'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator QualifiedName . LexToken((,'(',46,1440)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess . LexToken((,'(',46,1440)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( . LexToken(IDENTIFIER,'theBTRootNode',46,1441)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( IDENTIFIER . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theBTRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( QualifiedName . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( PrimaryExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( PostfixExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( LogicalUnaryExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( UnaryExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( CastExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( MultiplicativeExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( AdditiveExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ShiftExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( RelationalExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( EqualityExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( AndExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ExclusiveOrExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( InclusiveOrExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ConditionalAndExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ConditionalOrExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ConditionalExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( AssignmentExpression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( Expression . LexToken(,,',',46,1454)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList . LexToken(,,',',46,1454)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , . LexToken(IDENTIFIER,'anyClassBTNode',46,1456)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , IDENTIFIER . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with [<str @ 0x7fad9d132458>] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , QualifiedName . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , PrimaryExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , PostfixExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , LogicalUnaryExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , UnaryExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , CastExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , MultiplicativeExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AdditiveExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ShiftExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , RelationalExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , EqualityExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AndExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ExclusiveOrExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , InclusiveOrExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalAndExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalOrExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , ConditionalExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , AssignmentExpression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList , Expression . LexToken(),')',46,1470)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> ArgumentList , Expression] with [None,',',None] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList . LexToken(),')',46,1470)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodAccess ( ArgumentList ) . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MethodCall . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimaryNoParenthesis . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ComplexPrimary . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator NotJustName . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PrimaryExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator PostfixExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator LogicalUnaryExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator UnaryExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator CastExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator MultiplicativeExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AdditiveExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ShiftExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator RelationalExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator EqualityExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AndExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ExclusiveOrExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator InclusiveOrExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalAndExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalOrExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator ConditionalExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 360
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements UnaryExpression AssignmentOperator AssignmentExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression] with [None,None,None] and goto state 265
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',46,1471)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',46,1471)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',47,1477)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',47,1477)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 279
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',47,1477)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',47,1477)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PROTECTED,'protected',50,1547)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(PROTECTED,'protected',50,1547)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PROTECTED,'protected',50,1547)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(PROTECTED,'protected',50,1547)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PROTECTED,'protected',50,1547)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PROTECTED,'protected',50,1547)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PROTECTED,'protected',50,1547)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PROTECTED . LexToken(VOID,'void',50,1557)
   yacc.py: 389:Action : Reduce rule [Modifier -> PROTECTED] with ['protected'] and goto state 52
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(VOID,'void',50,1557)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(VOID,'void',50,1557)
   yacc.py: 366:Action : Shift and goto state 69
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers VOID . LexToken(IDENTIFIER,'inorder',50,1562)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'inorder',50,1562)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'inorder',50,1562)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'inorder',50,1562)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',50,1569)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['inorder'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',50,1569)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'BNode',50,1570)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken(IDENTIFIER,'theRootNode',50,1576)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken(IDENTIFIER,'theRootNode',50,1576)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'theRootNode',50,1576)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'theRootNode',50,1576)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(),')',50,1587)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['theRootNode'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',50,1587)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',50,1587)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 288
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',50,1587)
   yacc.py: 366:Action : Shift and goto state 372
   yacc.py: 337:
   yacc.py: 338:State  : 372
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',50,1589)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',50,1589)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IF,'if',51,1599)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF . LexToken((,'(',51,1602)
   yacc.py: 366:Action : Shift and goto state 283
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( . LexToken(IDENTIFIER,'theRootNode',51,1603)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( IDENTIFIER . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( QualifiedName . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( PrimaryExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( PostfixExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( LogicalUnaryExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( UnaryExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( CastExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( MultiplicativeExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AdditiveExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ShiftExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( RelationalExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression . LexToken(OP_NE,'!=',51,1615)
   yacc.py: 366:Action : Shift and goto state 235
   yacc.py: 337:
   yacc.py: 338:State  : 235
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE . LexToken(NULL,'null',51,1618)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE NULL . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE SpecialName . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE NotJustName . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE PrimaryExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE PostfixExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE LogicalUnaryExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 233
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE UnaryExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE CastExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE MultiplicativeExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE AdditiveExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE ShiftExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 314
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_NE RelationalExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_NE RelationalExpression] with [None,'!=',None] and goto state 251
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AndExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ExclusiveOrExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( InclusiveOrExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalAndExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalOrExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AssignmentExpression . LexToken(),')',51,1622)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 370
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression . LexToken(),')',51,1622)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) . LexToken({,'{',51,1624)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { . LexToken(IDENTIFIER,'inorder',52,1638)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { IDENTIFIER . LexToken((,'(',52,1645)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['inorder'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { QualifiedName . LexToken((,'(',52,1645)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess . LexToken((,'(',52,1645)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',52,1646)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( IDENTIFIER . LexToken(.,'.',52,1657)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( QualifiedName . LexToken(.,'.',52,1657)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'leftBNode',52,1658)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( QualifiedName . IDENTIFIER . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','leftBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( QualifiedName . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( PrimaryExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( PostfixExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( LogicalUnaryExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( UnaryExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( CastExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( MultiplicativeExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( AdditiveExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( ShiftExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( RelationalExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( EqualityExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( AndExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( ExclusiveOrExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( InclusiveOrExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( ConditionalAndExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( ConditionalOrExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( ConditionalExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( AssignmentExpression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( Expression . LexToken(),')',52,1667)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( ArgumentList . LexToken(),')',52,1667)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodAccess ( ArgumentList ) . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MethodCall . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ComplexPrimaryNoParenthesis . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ComplexPrimary . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { NotJustName . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { PrimaryExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { PostfixExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LogicalUnaryExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { UnaryExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { CastExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { MultiplicativeExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { AdditiveExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ShiftExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RelationalExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { EqualityExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { AndExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ExclusiveOrExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { InclusiveOrExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ConditionalAndExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ConditionalOrExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ConditionalExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { AssignmentExpression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { Expression . LexToken(;,';',52,1668)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ExpressionStatement . LexToken(;,';',52,1668)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { ExpressionStatement ; . LexToken(IDENTIFIER,'theRootNode',53,1682)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { Statement . LexToken(IDENTIFIER,'theRootNode',53,1682)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'theRootNode',53,1682)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'theRootNode',53,1682)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken(.,'.',53,1693)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken(.,'.',53,1693)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . . LexToken(IDENTIFIER,'show',53,1694)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . IDENTIFIER . LexToken((,'(',53,1698)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','show'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',53,1698)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',53,1698)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(),')',53,1699)
   yacc.py: 366:Action : Shift and goto state 336
   yacc.py: 337:
   yacc.py: 338:State  : 336
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ) . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( )] with [None,'(',')'] and goto state 187
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',53,1700)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',53,1700)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(IDENTIFIER,'inorder',54,1714)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(IDENTIFIER,'inorder',54,1714)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 279
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(IDENTIFIER,'inorder',54,1714)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(IDENTIFIER,'inorder',54,1714)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements IDENTIFIER . LexToken((,'(',54,1721)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['inorder'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements QualifiedName . LexToken((,'(',54,1721)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess . LexToken((,'(',54,1721)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',54,1722)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( IDENTIFIER . LexToken(.,'.',54,1733)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( QualifiedName . LexToken(.,'.',54,1733)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'rightBNode',54,1734)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( QualifiedName . IDENTIFIER . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','rightBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( QualifiedName . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PrimaryExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( PostfixExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( LogicalUnaryExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( UnaryExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( CastExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( MultiplicativeExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AdditiveExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ShiftExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( RelationalExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( EqualityExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AndExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ExclusiveOrExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( InclusiveOrExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalAndExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalOrExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ConditionalExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( AssignmentExpression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( Expression . LexToken(),')',54,1744)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList . LexToken(),')',54,1744)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodAccess ( ArgumentList ) . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MethodCall . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimaryNoParenthesis . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ComplexPrimary . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements NotJustName . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements PrimaryExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements PostfixExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements LogicalUnaryExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements UnaryExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements CastExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements MultiplicativeExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements AdditiveExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ShiftExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements RelationalExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements EqualityExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements AndExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ExclusiveOrExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements InclusiveOrExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalAndExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalOrExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ConditionalExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements AssignmentExpression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements Expression . LexToken(;,';',54,1745)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement . LexToken(;,';',54,1745)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements ExpressionStatement ; . LexToken(},'}',55,1755)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',55,1755)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 279
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',55,1755)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',55,1755)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(},'}',56,1761)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Block . LexToken(},'}',56,1761)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement . LexToken(},'}',56,1761)
   yacc.py: 391:Action : Reduce rule [ElseOrNot -> <empty>] with [] and goto state 134
   yacc.py: 462:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ElseOrNot . LexToken(},'}',56,1761)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ElseOrNot] with ['if','(',None,')',None,None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { SelectionStatement . LexToken(},'}',56,1761)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement] with [None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Statement . LexToken(},'}',56,1761)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(},'}',56,1761)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',56,1761)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',59,1806)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(PUBLIC,'public',59,1806)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PUBLIC,'public',59,1806)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(PUBLIC,'public',59,1806)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PUBLIC,'public',59,1806)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PUBLIC,'public',59,1806)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',59,1806)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PUBLIC . LexToken(VOID,'void',59,1813)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(VOID,'void',59,1813)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(VOID,'void',59,1813)
   yacc.py: 366:Action : Shift and goto state 69
   yacc.py: 337:
   yacc.py: 338:State  : 69
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers VOID . LexToken(IDENTIFIER,'inorderBST',59,1818)
   yacc.py: 389:Action : Reduce rule [PrimitiveType -> VOID] with ['void'] and goto state 16
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 56
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers PrimitiveType . LexToken(IDENTIFIER,'inorderBST',59,1818)
   yacc.py: 389:Action : Reduce rule [TypeName -> PrimitiveType] with [None] and goto state 4
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'inorderBST',59,1818)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'inorderBST',59,1818)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',59,1828)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['inorderBST'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',59,1828)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(),')',59,1829)
   yacc.py: 366:Action : Shift and goto state 287
   yacc.py: 337:
   yacc.py: 338:State  : 287
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ) . LexToken({,'{',59,1831)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( )] with [None,'(',')'] and goto state 89
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',59,1831)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IDENTIFIER,'inorder',60,1841)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IDENTIFIER . LexToken((,'(',60,1848)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['inorder'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . LexToken((,'(',60,1848)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess . LexToken((,'(',60,1848)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( . LexToken(IDENTIFIER,'theBTRootNode',60,1849)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( IDENTIFIER . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theBTRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( QualifiedName . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( PrimaryExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( PostfixExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( LogicalUnaryExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( UnaryExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( CastExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( MultiplicativeExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( AdditiveExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ShiftExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( RelationalExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( EqualityExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( AndExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ExclusiveOrExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( InclusiveOrExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ConditionalAndExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ConditionalOrExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ConditionalExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( AssignmentExpression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( Expression . LexToken(),')',60,1862)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ArgumentList . LexToken(),')',60,1862)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodAccess ( ArgumentList ) . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MethodCall . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ComplexPrimaryNoParenthesis . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ComplexPrimary . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { NotJustName . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PrimaryExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { PostfixExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LogicalUnaryExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { UnaryExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { CastExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { MultiplicativeExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { AdditiveExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ShiftExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { RelationalExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { EqualityExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { AndExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExclusiveOrExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { InclusiveOrExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ConditionalAndExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ConditionalOrExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ConditionalExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { AssignmentExpression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 160
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Expression . LexToken(;,';',60,1863)
   yacc.py: 389:Action : Reduce rule [ExpressionStatement -> Expression] with [None] and goto state 130
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 109
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExpressionStatement . LexToken(;,';',60,1863)
   yacc.py: 366:Action : Shift and goto state 215
   yacc.py: 337:
   yacc.py: 338:State  : 215
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { ExpressionStatement ; . LexToken(},'}',61,1869)
   yacc.py: 389:Action : Reduce rule [Statement -> ExpressionStatement ;] with [None,';'] and goto state 120
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Statement . LexToken(},'}',61,1869)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(},'}',61,1869)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',61,1869)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PROTECTED,'protected',65,1986)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(PROTECTED,'protected',65,1986)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PROTECTED,'protected',65,1986)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(PROTECTED,'protected',65,1986)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PROTECTED,'protected',65,1986)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PROTECTED,'protected',65,1986)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PROTECTED,'protected',65,1986)
   yacc.py: 366:Action : Shift and goto state 6
   yacc.py: 337:
   yacc.py: 338:State  : 6
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PROTECTED . LexToken(IDENTIFIER,'BNode',65,1996)
   yacc.py: 389:Action : Reduce rule [Modifier -> PROTECTED] with ['protected'] and goto state 52
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(IDENTIFIER,'BNode',65,1996)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(IDENTIFIER,'BNode',65,1996)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers IDENTIFIER . LexToken(IDENTIFIER,'search',65,2002)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers QualifiedName . LexToken(IDENTIFIER,'search',65,2002)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'search',65,2002)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'search',65,2002)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',65,2008)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['search'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',65,2008)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'BNode',65,2009)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken(IDENTIFIER,'theRootNode',65,2015)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken(IDENTIFIER,'theRootNode',65,2015)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'theRootNode',65,2015)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'theRootNode',65,2015)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(,,',',65,2026)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['theRootNode'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(,,',',65,2026)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(,,',',65,2026)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 288
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(,,',',65,2026)
   yacc.py: 366:Action : Shift and goto state 296
   yacc.py: 337:
   yacc.py: 338:State  : 296
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , . LexToken(IDENTIFIER,'String',65,2028)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , IDENTIFIER . LexToken(IDENTIFIER,'keyName',65,2035)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , QualifiedName . LexToken(IDENTIFIER,'keyName',65,2035)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeName . LexToken(IDENTIFIER,'keyName',65,2035)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier . LexToken(IDENTIFIER,'keyName',65,2035)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier IDENTIFIER . LexToken(),')',65,2042)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['keyName'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , TypeSpecifier DeclaratorName . LexToken(),')',65,2042)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 376
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList , Parameter . LexToken(),')',65,2042)
   yacc.py: 389:Action : Reduce rule [ParameterList -> ParameterList , Parameter] with [None,',',None] and goto state 92
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 288
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',65,2042)
   yacc.py: 366:Action : Shift and goto state 372
   yacc.py: 337:
   yacc.py: 338:State  : 372
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',65,2044)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',65,2044)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IF,'if',67,2097)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF . LexToken((,'(',67,2100)
   yacc.py: 366:Action : Shift and goto state 283
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( . LexToken(IDENTIFIER,'theRootNode',67,2101)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( IDENTIFIER . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( QualifiedName . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( PrimaryExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( PostfixExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( LogicalUnaryExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( UnaryExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( CastExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( MultiplicativeExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AdditiveExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ShiftExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( RelationalExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression . LexToken(OP_EQ,'==',67,2113)
   yacc.py: 366:Action : Shift and goto state 236
   yacc.py: 337:
   yacc.py: 338:State  : 236
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ . LexToken(NULL,'null',67,2116)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ NULL . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ SpecialName . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ NotJustName . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 233
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ CastExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 315
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with [None,'==',None] and goto state 250
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( EqualityExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AndExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ExclusiveOrExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( InclusiveOrExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalAndExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalOrExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( ConditionalExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( AssignmentExpression . LexToken(),')',67,2120)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 370
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression . LexToken(),')',67,2120)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) . LexToken({,'{',67,2122)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { . LexToken(RETURN,'return',68,2136)
   yacc.py: 366:Action : Shift and goto state 120
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN . LexToken(NULL,'null',68,2143)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN NULL . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN SpecialName . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN NotJustName . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN PrimaryExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN PostfixExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN LogicalUnaryExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN UnaryExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN CastExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN MultiplicativeExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN AdditiveExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN ShiftExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN RelationalExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN EqualityExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN AndExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN ExclusiveOrExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN InclusiveOrExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN ConditionalAndExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN ConditionalOrExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN ConditionalExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN AssignmentExpression . LexToken(;,';',68,2147)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN Expression . LexToken(;,';',68,2147)
   yacc.py: 366:Action : Shift and goto state 309
   yacc.py: 337:
   yacc.py: 338:State  : 309
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { RETURN Expression ; . LexToken(},'}',69,2157)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { JumpStatement . LexToken(},'}',69,2157)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { Statement . LexToken(},'}',69,2157)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',69,2157)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',69,2157)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',69,2159)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Block . LexToken(ELSE,'else',69,2159)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement . LexToken(ELSE,'else',69,2159)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE . LexToken({,'{',69,2164)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { . LexToken(IF,'if',71,2217)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF . LexToken((,'(',71,2220)
   yacc.py: 366:Action : Shift and goto state 283
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( . LexToken(IDENTIFIER,'keyName',71,2221)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( IDENTIFIER . LexToken(.,'.',71,2228)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['keyName'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( QualifiedName . LexToken(.,'.',71,2228)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( QualifiedName . . LexToken(IDENTIFIER,'compareTo',71,2229)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( QualifiedName . IDENTIFIER . LexToken((,'(',71,2238)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','compareTo'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( QualifiedName . LexToken((,'(',71,2238)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess . LexToken((,'(',71,2238)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',71,2239)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( IDENTIFIER . LexToken(.,'.',71,2250)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( QualifiedName . LexToken(.,'.',71,2250)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'anyClass',71,2251)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( QualifiedName . IDENTIFIER . LexToken(.,'.',71,2259)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','anyClass'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( QualifiedName . LexToken(.,'.',71,2259)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'surname',71,2260)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( QualifiedName . IDENTIFIER . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','surname'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( QualifiedName . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( PrimaryExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( PostfixExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( LogicalUnaryExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( UnaryExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( CastExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( MultiplicativeExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( AdditiveExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( ShiftExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( RelationalExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( EqualityExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( AndExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( ExclusiveOrExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( InclusiveOrExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( ConditionalAndExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( ConditionalOrExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( ConditionalExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( AssignmentExpression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( Expression . LexToken(),')',71,2267)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( ArgumentList . LexToken(),')',71,2267)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodAccess ( ArgumentList ) . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MethodCall . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( ComplexPrimaryNoParenthesis . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( ComplexPrimary . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( NotJustName . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( PrimaryExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( PostfixExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( LogicalUnaryExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( UnaryExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( CastExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( MultiplicativeExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( AdditiveExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( ShiftExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( RelationalExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression . LexToken(OP_EQ,'==',71,2269)
   yacc.py: 366:Action : Shift and goto state 236
   yacc.py: 337:
   yacc.py: 338:State  : 236
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ . LexToken(INT_LITERAL,'0',71,2272)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ INT_LITERAL . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['0'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ ComplexPrimaryNoParenthesis . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ ComplexPrimary . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ NotJustName . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 233
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ CastExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 315
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with [None,'==',None] and goto state 250
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( EqualityExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( AndExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( ExclusiveOrExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( InclusiveOrExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( ConditionalAndExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( ConditionalOrExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( ConditionalExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( AssignmentExpression . LexToken(),')',71,2273)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 370
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression . LexToken(),')',71,2273)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) . LexToken({,'{',71,2275)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { . LexToken(RETURN,'return',72,2293)
   yacc.py: 366:Action : Shift and goto state 120
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN . LexToken(IDENTIFIER,'theRootNode',72,2300)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN IDENTIFIER . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN QualifiedName . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN PrimaryExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN PostfixExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN LogicalUnaryExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN UnaryExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN CastExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN MultiplicativeExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN AdditiveExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN ShiftExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN RelationalExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN EqualityExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN AndExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN ExclusiveOrExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN InclusiveOrExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN ConditionalAndExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN ConditionalOrExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN ConditionalExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN AssignmentExpression . LexToken(;,';',72,2311)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN Expression . LexToken(;,';',72,2311)
   yacc.py: 366:Action : Shift and goto state 309
   yacc.py: 337:
   yacc.py: 338:State  : 309
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { RETURN Expression ; . LexToken(},'}',75,2440)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { JumpStatement . LexToken(},'}',75,2440)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { Statement . LexToken(},'}',75,2440)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',75,2440)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',75,2440)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',75,2442)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Block . LexToken(ELSE,'else',75,2442)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement . LexToken(ELSE,'else',75,2442)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE . LexToken(IF,'if',75,2447)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF . LexToken((,'(',75,2450)
   yacc.py: 366:Action : Shift and goto state 283
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( . LexToken(IDENTIFIER,'keyName',75,2451)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( IDENTIFIER . LexToken(.,'.',75,2458)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['keyName'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( QualifiedName . LexToken(.,'.',75,2458)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( QualifiedName . . LexToken(IDENTIFIER,'compareTo',75,2459)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( QualifiedName . IDENTIFIER . LexToken((,'(',75,2468)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','compareTo'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( QualifiedName . LexToken((,'(',75,2468)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess . LexToken((,'(',75,2468)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',75,2469)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( IDENTIFIER . LexToken(.,'.',75,2480)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . LexToken(.,'.',75,2480)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'anyClass',75,2481)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . IDENTIFIER . LexToken(.,'.',75,2489)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','anyClass'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . LexToken(.,'.',75,2489)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'surname',75,2490)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . IDENTIFIER . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','surname'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( QualifiedName . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( PrimaryExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( PostfixExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( LogicalUnaryExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( UnaryExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( CastExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( MultiplicativeExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( AdditiveExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ShiftExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( RelationalExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( EqualityExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( AndExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ExclusiveOrExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( InclusiveOrExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ConditionalAndExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ConditionalOrExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ConditionalExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( AssignmentExpression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( Expression . LexToken(),')',75,2497)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ArgumentList . LexToken(),')',75,2497)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodAccess ( ArgumentList ) . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MethodCall . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( ComplexPrimaryNoParenthesis . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( ComplexPrimary . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( NotJustName . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( PrimaryExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( PostfixExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( LogicalUnaryExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( UnaryExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( CastExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( MultiplicativeExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( AdditiveExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( ShiftExpression . LexToken(<,'<',75,2499)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression . LexToken(<,'<',75,2499)
   yacc.py: 366:Action : Shift and goto state 248
   yacc.py: 337:
   yacc.py: 338:State  : 248
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < . LexToken(INT_LITERAL,'0',75,2501)
   yacc.py: 366:Action : Shift and goto state 169
   yacc.py: 337:
   yacc.py: 338:State  : 169
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < INT_LITERAL . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> INT_LITERAL] with ['0'] and goto state 172
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < ComplexPrimaryNoParenthesis . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < ComplexPrimary . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < NotJustName . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < PrimaryExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < PostfixExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < LogicalUnaryExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 233
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < UnaryExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < CastExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < MultiplicativeExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < AdditiveExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 339
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression < ShiftExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> RelationalExpression < ShiftExpression] with [None,'<',None] and goto state 244
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( RelationalExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( EqualityExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( AndExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( ExclusiveOrExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( InclusiveOrExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( ConditionalAndExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( ConditionalOrExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( ConditionalExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( AssignmentExpression . LexToken(),')',75,2502)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 370
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression . LexToken(),')',75,2502)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) . LexToken({,'{',75,2504)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { . LexToken(RETURN,'return',76,2522)
   yacc.py: 366:Action : Shift and goto state 120
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN . LexToken(IDENTIFIER,'search',76,2529)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN IDENTIFIER . LexToken((,'(',76,2535)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['search'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN QualifiedName . LexToken((,'(',76,2535)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess . LexToken((,'(',76,2535)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',76,2536)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( IDENTIFIER . LexToken(.,'.',76,2547)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( QualifiedName . LexToken(.,'.',76,2547)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'leftBNode',76,2548)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( QualifiedName . IDENTIFIER . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','leftBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( QualifiedName . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( PrimaryExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( PostfixExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( LogicalUnaryExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( UnaryExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( CastExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( MultiplicativeExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( AdditiveExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ShiftExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( RelationalExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( EqualityExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( AndExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ExclusiveOrExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( InclusiveOrExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ConditionalAndExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ConditionalOrExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ConditionalExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( AssignmentExpression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( Expression . LexToken(,,',',76,2557)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList . LexToken(,,',',76,2557)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , . LexToken(IDENTIFIER,'keyName',76,2559)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , IDENTIFIER . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['keyName'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , QualifiedName . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , PrimaryExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , PostfixExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , LogicalUnaryExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , UnaryExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , CastExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , MultiplicativeExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , AdditiveExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , ShiftExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , RelationalExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , EqualityExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , AndExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , ExclusiveOrExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , InclusiveOrExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , ConditionalAndExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , ConditionalOrExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , ConditionalExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , AssignmentExpression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList , Expression . LexToken(),')',76,2566)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> ArgumentList , Expression] with [None,',',None] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList . LexToken(),')',76,2566)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodAccess ( ArgumentList ) . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MethodCall . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN ComplexPrimaryNoParenthesis . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN ComplexPrimary . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN NotJustName . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN PrimaryExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN PostfixExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN LogicalUnaryExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN UnaryExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN CastExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN MultiplicativeExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN AdditiveExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN ShiftExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN RelationalExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN EqualityExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN AndExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN ExclusiveOrExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN InclusiveOrExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN ConditionalAndExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN ConditionalOrExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN ConditionalExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN AssignmentExpression . LexToken(;,';',76,2567)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN Expression . LexToken(;,';',76,2567)
   yacc.py: 366:Action : Shift and goto state 309
   yacc.py: 337:
   yacc.py: 338:State  : 309
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { RETURN Expression ; . LexToken(},'}',77,2581)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { JumpStatement . LexToken(},'}',77,2581)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { Statement . LexToken(},'}',77,2581)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',77,2581)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',77,2581)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',77,2583)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Block . LexToken(ELSE,'else',77,2583)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement . LexToken(ELSE,'else',77,2583)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE . LexToken({,'{',77,2588)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { . LexToken(RETURN,'return',79,2657)
   yacc.py: 366:Action : Shift and goto state 120
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN . LexToken(IDENTIFIER,'search',79,2664)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN IDENTIFIER . LexToken((,'(',79,2670)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['search'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN QualifiedName . LexToken((,'(',79,2670)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess . LexToken((,'(',79,2670)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( . LexToken(IDENTIFIER,'theRootNode',79,2671)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( IDENTIFIER . LexToken(.,'.',79,2682)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( QualifiedName . LexToken(.,'.',79,2682)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( QualifiedName . . LexToken(IDENTIFIER,'rightBNode',79,2683)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( QualifiedName . IDENTIFIER . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','rightBNode'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( QualifiedName . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( PrimaryExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( PostfixExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( LogicalUnaryExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( UnaryExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( CastExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( MultiplicativeExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( AdditiveExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ShiftExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( RelationalExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( EqualityExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( AndExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ExclusiveOrExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( InclusiveOrExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ConditionalAndExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ConditionalOrExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ConditionalExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( AssignmentExpression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( Expression . LexToken(,,',',79,2693)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList . LexToken(,,',',79,2693)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , . LexToken(IDENTIFIER,'keyName',79,2695)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , IDENTIFIER . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['keyName'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , QualifiedName . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , PrimaryExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , PostfixExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , LogicalUnaryExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , UnaryExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , CastExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , MultiplicativeExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , AdditiveExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , ShiftExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , RelationalExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , EqualityExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , AndExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , ExclusiveOrExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , InclusiveOrExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , ConditionalAndExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , ConditionalOrExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , ConditionalExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , AssignmentExpression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList , Expression . LexToken(),')',79,2702)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> ArgumentList , Expression] with [None,',',None] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList . LexToken(),')',79,2702)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodAccess ( ArgumentList ) . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MethodCall . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN ComplexPrimaryNoParenthesis . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN ComplexPrimary . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN NotJustName . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN PrimaryExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN PostfixExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN LogicalUnaryExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN UnaryExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN CastExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN MultiplicativeExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN AdditiveExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN ShiftExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN RelationalExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN EqualityExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN AndExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN ExclusiveOrExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN InclusiveOrExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN ConditionalAndExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN ConditionalOrExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN ConditionalExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN AssignmentExpression . LexToken(;,';',79,2703)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN Expression . LexToken(;,';',79,2703)
   yacc.py: 366:Action : Shift and goto state 309
   yacc.py: 337:
   yacc.py: 338:State  : 309
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { RETURN Expression ; . LexToken(},'}',80,2717)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { JumpStatement . LexToken(},'}',80,2717)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { Statement . LexToken(},'}',80,2717)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { LocalVariableDeclarationOrStatement . LexToken(},'}',80,2717)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements . LexToken(},'}',80,2717)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements } . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE Block . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ELSE Statement . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [ElseOrNot -> ELSE Statement] with ['else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE IF ( Expression ) Statement ElseOrNot . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ElseOrNot] with ['if','(',None,')',None,None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE SelectionStatement . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement] with [None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ELSE Statement . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [ElseOrNot -> ELSE Statement] with ['else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { IF ( Expression ) Statement ElseOrNot . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ElseOrNot] with ['if','(',None,')',None,None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { SelectionStatement . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement] with [None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { Statement . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { LocalVariableDeclarationOrStatement . LexToken(},'}',81,2727)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements . LexToken(},'}',81,2727)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements } . LexToken(},'}',82,2733)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE Block . LexToken(},'}',82,2733)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ELSE Statement . LexToken(},'}',82,2733)
   yacc.py: 389:Action : Reduce rule [ElseOrNot -> ELSE Statement] with ['else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IF ( Expression ) Statement ElseOrNot . LexToken(},'}',82,2733)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ElseOrNot] with ['if','(',None,')',None,None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { SelectionStatement . LexToken(},'}',82,2733)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement] with [None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { Statement . LexToken(},'}',82,2733)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(},'}',82,2733)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',82,2733)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(PUBLIC,'public',86,2837)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(PUBLIC,'public',86,2837)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(PUBLIC,'public',86,2837)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(PUBLIC,'public',86,2837)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(PUBLIC,'public',86,2837)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(PUBLIC,'public',86,2837)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(PUBLIC,'public',86,2837)
   yacc.py: 366:Action : Shift and goto state 26
   yacc.py: 337:
   yacc.py: 338:State  : 26
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations PUBLIC . LexToken(IDENTIFIER,'AnyClass',86,2844)
   yacc.py: 389:Action : Reduce rule [Modifier -> PUBLIC] with ['public'] and goto state 51
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 17
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifier . LexToken(IDENTIFIER,'AnyClass',86,2844)
   yacc.py: 389:Action : Reduce rule [Modifiers -> Modifier] with [None] and goto state 47
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 68
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers . LexToken(IDENTIFIER,'AnyClass',86,2844)
   yacc.py: 366:Action : Shift and goto state 65
   yacc.py: 337:
   yacc.py: 338:State  : 65
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers IDENTIFIER . LexToken(IDENTIFIER,'searchBST',86,2853)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['AnyClass'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers QualifiedName . LexToken(IDENTIFIER,'searchBST',86,2853)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeName . LexToken(IDENTIFIER,'searchBST',86,2853)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 101
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier . LexToken(IDENTIFIER,'searchBST',86,2853)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier IDENTIFIER . LexToken((,'(',86,2862)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['searchBST'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 93
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName . LexToken((,'(',86,2862)
   yacc.py: 366:Action : Shift and goto state 194
   yacc.py: 337:
   yacc.py: 338:State  : 194
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( . LexToken(IDENTIFIER,'String',86,2863)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( IDENTIFIER . LexToken(IDENTIFIER,'keyName',86,2870)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['String'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 62
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( QualifiedName . LexToken(IDENTIFIER,'keyName',86,2870)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeName . LexToken(IDENTIFIER,'keyName',86,2870)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 207
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier . LexToken(IDENTIFIER,'keyName',86,2870)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier IDENTIFIER . LexToken(),')',86,2877)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['keyName'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 294
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( TypeSpecifier DeclaratorName . LexToken(),')',86,2877)
   yacc.py: 389:Action : Reduce rule [Parameter -> TypeSpecifier DeclaratorName] with [None,None] and goto state 93
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 204
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( Parameter . LexToken(),')',86,2877)
   yacc.py: 389:Action : Reduce rule [ParameterList -> Parameter] with [None] and goto state 91
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 288
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList . LexToken(),')',86,2877)
   yacc.py: 366:Action : Shift and goto state 372
   yacc.py: 337:
   yacc.py: 338:State  : 372
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier DeclaratorName ( ParameterList ) . LexToken({,'{',86,2879)
   yacc.py: 389:Action : Reduce rule [MethodDeclarator -> DeclaratorName ( ParameterList )] with [None,'(',None,')'] and goto state 88
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 210
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator . LexToken({,'{',86,2879)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { . LexToken(IDENTIFIER,'BNode',87,2889)
   yacc.py: 366:Action : Shift and goto state 114
   yacc.py: 337:
   yacc.py: 338:State  : 114
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { IDENTIFIER . LexToken(IDENTIFIER,'temp',87,2895)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['BNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 175
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { QualifiedName . LexToken(IDENTIFIER,'temp',87,2895)
   yacc.py: 389:Action : Reduce rule [TypeName -> QualifiedName] with [None] and goto state 5
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 63
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeName . LexToken(IDENTIFIER,'temp',87,2895)
   yacc.py: 389:Action : Reduce rule [TypeSpecifier -> TypeName] with [None] and goto state 2
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 154
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier . LexToken(IDENTIFIER,'temp',87,2895)
   yacc.py: 366:Action : Shift and goto state 95
   yacc.py: 337:
   yacc.py: 338:State  : 95
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier IDENTIFIER . LexToken(=,'=',87,2900)
   yacc.py: 389:Action : Reduce rule [DeclaratorName -> IDENTIFIER] with ['temp'] and goto state 95
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 261
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName . LexToken(=,'=',87,2900)
   yacc.py: 366:Action : Shift and goto state 195
   yacc.py: 337:
   yacc.py: 338:State  : 195
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = . LexToken(IDENTIFIER,'search',87,2902)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = IDENTIFIER . LexToken((,'(',87,2908)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['search'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = QualifiedName . LexToken((,'(',87,2908)
   yacc.py: 389:Action : Reduce rule [MethodAccess -> QualifiedName] with [None] and goto state 190
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 139
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess . LexToken((,'(',87,2908)
   yacc.py: 366:Action : Shift and goto state 245
   yacc.py: 337:
   yacc.py: 338:State  : 245
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( . LexToken(IDENTIFIER,'theBTRootNode',87,2909)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( IDENTIFIER . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['theBTRootNode'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( QualifiedName . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( PrimaryExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( PostfixExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( LogicalUnaryExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( UnaryExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( CastExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( MultiplicativeExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( AdditiveExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ShiftExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( RelationalExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( EqualityExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( AndExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ExclusiveOrExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( InclusiveOrExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ConditionalAndExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ConditionalOrExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ConditionalExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( AssignmentExpression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 335
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( Expression . LexToken(,,',',87,2922)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> Expression] with [None] and goto state 194
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList . LexToken(,,',',87,2922)
   yacc.py: 366:Action : Shift and goto state 398
   yacc.py: 337:
   yacc.py: 338:State  : 398
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , . LexToken(IDENTIFIER,'keyName',87,2924)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , IDENTIFIER . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['keyName'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , QualifiedName . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , PrimaryExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , PostfixExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , LogicalUnaryExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , UnaryExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , CastExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , MultiplicativeExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , AdditiveExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ShiftExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , RelationalExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , EqualityExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , AndExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ExclusiveOrExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , InclusiveOrExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ConditionalAndExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ConditionalOrExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , ConditionalExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , AssignmentExpression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 421
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList , Expression . LexToken(),')',87,2931)
   yacc.py: 389:Action : Reduce rule [ArgumentList -> ArgumentList , Expression] with [None,',',None] and goto state 195
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 334
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList . LexToken(),')',87,2931)
   yacc.py: 366:Action : Shift and goto state 397
   yacc.py: 337:
   yacc.py: 338:State  : 397
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodAccess ( ArgumentList ) . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [MethodCall -> MethodAccess ( ArgumentList )] with [None,'(',None,')'] and goto state 186
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 129
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MethodCall . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [ComplexPrimaryNoParenthesis -> MethodCall] with [None] and goto state 178
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 126
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ComplexPrimaryNoParenthesis . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [ComplexPrimary -> ComplexPrimaryNoParenthesis] with [None] and goto state 170
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 146
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ComplexPrimary . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [NotJustName -> ComplexPrimary] with [None] and goto state 168
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = NotJustName . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PrimaryExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = PostfixExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = LogicalUnaryExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = UnaryExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = CastExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = MultiplicativeExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AdditiveExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ShiftExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = RelationalExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = EqualityExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AndExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ExclusiveOrExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = InclusiveOrExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalAndExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalOrExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = ConditionalExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = AssignmentExpression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 291
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = Expression . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [VariableInitializer -> Expression] with [None] and goto state 78
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 290
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier DeclaratorName = VariableInitializer . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [VariableDeclarator -> DeclaratorName = VariableInitializer] with [None,'=',None] and goto state 77
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 96
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarator . LexToken(;,';',87,2932)
   yacc.py: 389:Action : Reduce rule [VariableDeclarators -> VariableDeclarator] with [None] and goto state 74
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 260
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators . LexToken(;,';',87,2932)
   yacc.py: 366:Action : Shift and goto state 353
   yacc.py: 337:
   yacc.py: 338:State  : 353
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { TypeSpecifier VariableDeclarators ; . LexToken(IF,'if',88,2942)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;] with [None,None,';'] and goto state 116
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 177
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationStatement . LexToken(IF,'if',88,2942)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement] with [None] and goto state 114
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationOrStatement . LexToken(IF,'if',88,2942)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(IF,'if',88,2942)
   yacc.py: 366:Action : Shift and goto state 183
   yacc.py: 337:
   yacc.py: 338:State  : 183
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF . LexToken((,'(',88,2945)
   yacc.py: 366:Action : Shift and goto state 283
   yacc.py: 337:
   yacc.py: 338:State  : 283
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( . LexToken(IDENTIFIER,'temp',88,2946)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( IDENTIFIER . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['temp'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( QualifiedName . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PrimaryExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( PostfixExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( LogicalUnaryExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( UnaryExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( CastExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( MultiplicativeExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AdditiveExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ShiftExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( RelationalExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression . LexToken(OP_EQ,'==',88,2951)
   yacc.py: 366:Action : Shift and goto state 236
   yacc.py: 337:
   yacc.py: 338:State  : 236
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ . LexToken(NULL,'null',88,2954)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ NULL . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ SpecialName . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ NotJustName . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ PrimaryExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ PostfixExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ LogicalUnaryExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 233
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ UnaryExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ CastExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ MultiplicativeExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ AdditiveExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ ShiftExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 315
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression OP_EQ RelationalExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> EqualityExpression OP_EQ RelationalExpression] with [None,'==',None] and goto state 250
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( EqualityExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AndExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ExclusiveOrExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( InclusiveOrExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalAndExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalOrExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( ConditionalExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( AssignmentExpression . LexToken(),')',88,2958)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 370
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression . LexToken(),')',88,2958)
   yacc.py: 366:Action : Shift and goto state 411
   yacc.py: 337:
   yacc.py: 338:State  : 411
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) . LexToken({,'{',88,2960)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { . LexToken(RETURN,'return',90,2997)
   yacc.py: 366:Action : Shift and goto state 120
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN . LexToken(NULL,'null',90,3004)
   yacc.py: 366:Action : Shift and goto state 173
   yacc.py: 337:
   yacc.py: 338:State  : 173
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN NULL . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [SpecialName -> NULL] with ['null'] and goto state 193
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 145
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN SpecialName . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [NotJustName -> SpecialName] with [None] and goto state 166
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 180
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN NotJustName . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> NotJustName] with [None] and goto state 165
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN PrimaryExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN PostfixExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN LogicalUnaryExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN UnaryExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN CastExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN MultiplicativeExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN AdditiveExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN ShiftExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN RelationalExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN EqualityExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN AndExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN ExclusiveOrExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN InclusiveOrExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN ConditionalAndExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN ConditionalOrExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN ConditionalExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN AssignmentExpression . LexToken(;,';',90,3008)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN Expression . LexToken(;,';',90,3008)
   yacc.py: 366:Action : Shift and goto state 309
   yacc.py: 337:
   yacc.py: 338:State  : 309
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { RETURN Expression ; . LexToken(},'}',91,3018)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { JumpStatement . LexToken(},'}',91,3018)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { Statement . LexToken(},'}',91,3018)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationOrStatement . LexToken(},'}',91,3018)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationsAndStatements . LexToken(},'}',91,3018)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) { LocalVariableDeclarationsAndStatements } . LexToken(ELSE,'else',91,3020)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Block . LexToken(ELSE,'else',91,3020)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 428
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement . LexToken(ELSE,'else',91,3020)
   yacc.py: 366:Action : Shift and goto state 435
   yacc.py: 337:
   yacc.py: 338:State  : 435
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE . LexToken({,'{',91,3025)
   yacc.py: 366:Action : Shift and goto state 79
   yacc.py: 337:
   yacc.py: 338:State  : 79
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { . LexToken(RETURN,'return',93,3062)
   yacc.py: 366:Action : Shift and goto state 120
   yacc.py: 337:
   yacc.py: 338:State  : 120
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN . LexToken(IDENTIFIER,'temp',93,3069)
   yacc.py: 366:Action : Shift and goto state 30
   yacc.py: 337:
   yacc.py: 338:State  : 30
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN IDENTIFIER . LexToken(.,'.',93,3073)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> IDENTIFIER] with ['temp'] and goto state 35
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN QualifiedName . LexToken(.,'.',93,3073)
   yacc.py: 366:Action : Shift and goto state 276
   yacc.py: 337:
   yacc.py: 338:State  : 276
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN QualifiedName . . LexToken(IDENTIFIER,'anyClass',93,3074)
   yacc.py: 366:Action : Shift and goto state 82
   yacc.py: 337:
   yacc.py: 338:State  : 82
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN QualifiedName . IDENTIFIER . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [QualifiedName -> QualifiedName . IDENTIFIER] with [None,'.','anyClass'] and goto state 36
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 228
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN QualifiedName . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [PrimaryExpression -> QualifiedName] with [None] and goto state 164
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 155
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN PrimaryExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [PostfixExpression -> PrimaryExpression] with [None] and goto state 215
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 147
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN PostfixExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [LogicalUnaryExpression -> PostfixExpression] with [None] and goto state 221
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 182
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN LogicalUnaryExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [UnaryExpression -> LogicalUnaryExpression] with [None] and goto state 220
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 163
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN UnaryExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [CastExpression -> UnaryExpression] with [None] and goto state 227
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 172
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN CastExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [MultiplicativeExpression -> CastExpression] with [None] and goto state 234
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 127
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN MultiplicativeExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [AdditiveExpression -> MultiplicativeExpression] with [None] and goto state 238
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 161
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN AdditiveExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [ShiftExpression -> AdditiveExpression] with [None] and goto state 241
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 178
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN ShiftExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [RelationalExpression -> ShiftExpression] with [None] and goto state 243
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 141
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN RelationalExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [EqualityExpression -> RelationalExpression] with [None] and goto state 249
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 125
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN EqualityExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [AndExpression -> EqualityExpression] with [None] and goto state 252
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 112
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN AndExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [ExclusiveOrExpression -> AndExpression] with [None] and goto state 254
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 140
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN ExclusiveOrExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [InclusiveOrExpression -> ExclusiveOrExpression] with [None] and goto state 256
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 164
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN InclusiveOrExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [ConditionalAndExpression -> InclusiveOrExpression] with [None] and goto state 258
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 117
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN ConditionalAndExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [ConditionalOrExpression -> ConditionalAndExpression] with [None] and goto state 260
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 158
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN ConditionalOrExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [ConditionalExpression -> ConditionalOrExpression] with [None] and goto state 262
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 162
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN ConditionalExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [AssignmentExpression -> ConditionalExpression] with [None] and goto state 264
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 132
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN AssignmentExpression . LexToken(;,';',93,3082)
   yacc.py: 389:Action : Reduce rule [Expression -> AssignmentExpression] with [None] and goto state 268
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 227
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN Expression . LexToken(;,';',93,3082)
   yacc.py: 366:Action : Shift and goto state 309
   yacc.py: 337:
   yacc.py: 338:State  : 309
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { RETURN Expression ; . LexToken(},'}',94,3092)
   yacc.py: 389:Action : Reduce rule [JumpStatement -> RETURN Expression ;] with ['return',None,';'] and goto state 151
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 150
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { JumpStatement . LexToken(},'}',94,3092)
   yacc.py: 389:Action : Reduce rule [Statement -> JumpStatement] with [None] and goto state 123
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { Statement . LexToken(},'}',94,3092)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 144
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationOrStatement . LexToken(},'}',94,3092)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement] with [None] and goto state 112
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements . LexToken(},'}',94,3092)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE { LocalVariableDeclarationsAndStatements } . LexToken(},'}',95,3098)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 137
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Block . LexToken(},'}',95,3098)
   yacc.py: 389:Action : Reduce rule [Statement -> Block] with [None] and goto state 125
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 439
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ELSE Statement . LexToken(},'}',95,3098)
   yacc.py: 389:Action : Reduce rule [ElseOrNot -> ELSE Statement] with ['else',None] and goto state 133
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 434
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements IF ( Expression ) Statement ElseOrNot . LexToken(},'}',95,3098)
   yacc.py: 389:Action : Reduce rule [SelectionStatement -> IF ( Expression ) Statement ElseOrNot] with ['if','(',None,')',None,None] and goto state 131
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 131
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements SelectionStatement . LexToken(},'}',95,3098)
   yacc.py: 389:Action : Reduce rule [Statement -> SelectionStatement] with [None] and goto state 121
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 111
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements Statement . LexToken(},'}',95,3098)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationOrStatement -> Statement] with [None] and goto state 115
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 279
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement . LexToken(},'}',95,3098)
   yacc.py: 389:Action : Reduce rule [LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement] with [None,None] and goto state 113
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 179
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements . LexToken(},'}',95,3098)
   yacc.py: 366:Action : Shift and goto state 280
   yacc.py: 337:
   yacc.py: 338:State  : 280
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator { LocalVariableDeclarationsAndStatements } . LexToken(},'}',96,3100)
   yacc.py: 389:Action : Reduce rule [Block -> { LocalVariableDeclarationsAndStatements }] with ['{',None,'}'] and goto state 110
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 198
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator Block . LexToken(},'}',96,3100)
   yacc.py: 389:Action : Reduce rule [MethodBody -> Block] with [None] and goto state 98
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 297
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations Modifiers TypeSpecifier MethodDeclarator MethodBody . LexToken(},'}',96,3100)
   yacc.py: 389:Action : Reduce rule [MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody] with [None,None,None,None] and goto state 85
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 66
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations MethodDeclaration . LexToken(},'}',96,3100)
   yacc.py: 389:Action : Reduce rule [FieldDeclaration -> MethodDeclaration] with [None] and goto state 67
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 78
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclaration . LexToken(},'}',96,3100)
   yacc.py: 389:Action : Reduce rule [FieldDeclarationOptSemi -> FieldDeclaration] with [None] and goto state 64
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 103
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations FieldDeclarationOptSemi . LexToken(},'}',96,3100)
   yacc.py: 389:Action : Reduce rule [FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi] with [None,None] and goto state 63
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 70
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations . LexToken(},'}',96,3100)
   yacc.py: 366:Action : Shift and goto state 104
   yacc.py: 337:
   yacc.py: 338:State  : 104
   yacc.py: 352:Stack  : TypeDeclarations ClassHeader { FieldDeclarations } . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclaration -> ClassHeader { FieldDeclarations }] with [None,'{',None,'}'] and goto state 37
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 5
   yacc.py: 352:Stack  : TypeDeclarations TypeDeclaration . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarationOptSemi -> TypeDeclaration] with [None] and goto state 29
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 39
   yacc.py: 352:Stack  : TypeDeclarations TypeDeclarationOptSemi . $end
   yacc.py: 389:Action : Reduce rule [TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi] with [None,None] and goto state 28
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 21
   yacc.py: 352:Stack  : TypeDeclarations . $end
   yacc.py: 389:Action : Reduce rule [ProgramFile -> TypeDeclarations] with [None] and goto state 25
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 1
   yacc.py: 352:Stack  : ProgramFile . $end
   yacc.py: 389:Action : Reduce rule [CompilationUnit -> ProgramFile] with [None] and goto state 1
   yacc.py: 423:Result : <NoneType @ 0x936be0> (None)
   yacc.py: 337:
   yacc.py: 338:State  : 18
   yacc.py: 352:Stack  : CompilationUnit . $end
   yacc.py: 484:Done   : Returning <NoneType @ 0x936be0> (None)
   yacc.py: 485:PLY: PARSE DEBUG END
