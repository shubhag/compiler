Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    GOTO
    ENUM
    IGNORE_WHITESPACE
    STRICTFP
    CONST
    ASSERT

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     TypeSpecifier -> TypeName
Rule 3     TypeSpecifier -> TypeName Dims
Rule 4     TypeName -> PrimitiveType
Rule 5     TypeName -> QualifiedName
Rule 6     ClassNameList -> QualifiedName
Rule 7     ClassNameList -> ClassNameList , QualifiedName
Rule 8     PrimitiveType -> BOOLEAN
Rule 9     PrimitiveType -> CHAR
Rule 10    PrimitiveType -> BYTE
Rule 11    PrimitiveType -> SHORT
Rule 12    PrimitiveType -> INT
Rule 13    PrimitiveType -> LONG
Rule 14    PrimitiveType -> FLOAT
Rule 15    PrimitiveType -> DOUBLE
Rule 16    PrimitiveType -> VOID
Rule 17    SemiColons -> ;
Rule 18    SemiColons -> SemiColons ;
Rule 19    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 20    ProgramFile -> PackageStatement ImportStatements
Rule 21    ProgramFile -> PackageStatement TypeDeclarations
Rule 22    ProgramFile -> ImportStatements TypeDeclarations
Rule 23    ProgramFile -> PackageStatement
Rule 24    ProgramFile -> ImportStatements
Rule 25    ProgramFile -> TypeDeclarations
Rule 26    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 27    TypeDeclarations -> TypeDeclarationOptSemi
Rule 28    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 29    TypeDeclarationOptSemi -> TypeDeclaration
Rule 30    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 31    ImportStatements -> ImportStatement
Rule 32    ImportStatements -> ImportStatements ImportStatement
Rule 33    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 34    ImportStatement -> IMPORT QualifiedName . * SemiColons
Rule 35    QualifiedName -> IDENTIFIER
Rule 36    QualifiedName -> QualifiedName . IDENTIFIER
Rule 37    TypeDeclaration -> ClassHeader { FieldDeclarations }
Rule 38    TypeDeclaration -> ClassHeader { }
Rule 39    ClassHeader -> Modifiers ClassWord IDENTIFIER Extends Interfaces
Rule 40    ClassHeader -> Modifiers ClassWord IDENTIFIER Extends
Rule 41    ClassHeader -> Modifiers ClassWord IDENTIFIER Interfaces
Rule 42    ClassHeader -> ClassWord IDENTIFIER Extends Interfaces
Rule 43    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 44    ClassHeader -> ClassWord IDENTIFIER Extends
Rule 45    ClassHeader -> ClassWord IDENTIFIER Interfaces
Rule 46    ClassHeader -> ClassWord IDENTIFIER
Rule 47    Modifiers -> Modifier
Rule 48    Modifiers -> Modifiers Modifier
Rule 49    Modifier -> ABSTRACT
Rule 50    Modifier -> FINAL
Rule 51    Modifier -> PUBLIC
Rule 52    Modifier -> PROTECTED
Rule 53    Modifier -> PRIVATE
Rule 54    Modifier -> STATIC
Rule 55    Modifier -> TRANSIENT
Rule 56    Modifier -> VOLATILE
Rule 57    Modifier -> NATIVE
Rule 58    Modifier -> SYNCHRONIZED
Rule 59    ClassWord -> CLASS
Rule 60    ClassWord -> INTERFACE
Rule 61    Interfaces -> IMPLEMENTS ClassNameList
Rule 62    FieldDeclarations -> FieldDeclarationOptSemi
Rule 63    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 64    FieldDeclarationOptSemi -> FieldDeclaration
Rule 65    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 66    FieldDeclaration -> FieldVariableDeclaration ;
Rule 67    FieldDeclaration -> MethodDeclaration
Rule 68    FieldDeclaration -> ConstructorDeclaration
Rule 69    FieldDeclaration -> StaticInitializer
Rule 70    FieldDeclaration -> NonStaticInitializer
Rule 71    FieldDeclaration -> TypeDeclaration
Rule 72    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 73    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 74    VariableDeclarators -> VariableDeclarator
Rule 75    VariableDeclarators -> VariableDeclarators , VariableDeclarator
Rule 76    VariableDeclarator -> DeclaratorName
Rule 77    VariableDeclarator -> DeclaratorName = VariableInitializer
Rule 78    VariableInitializer -> Expression
Rule 79    VariableInitializer -> { }
Rule 80    VariableInitializer -> { ArrayInitializers }
Rule 81    ArrayInitializers -> VariableInitializer
Rule 82    ArrayInitializers -> ArrayInitializers , VariableInitializer
Rule 83    ArrayInitializers -> ArrayInitializers ,
Rule 84    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
Rule 85    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 86    MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody
Rule 87    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 88    MethodDeclarator -> DeclaratorName ( ParameterList )
Rule 89    MethodDeclarator -> DeclaratorName ( )
Rule 90    MethodDeclarator -> MethodDeclarator OP_DIM
Rule 91    ParameterList -> Parameter
Rule 92    ParameterList -> ParameterList , Parameter
Rule 93    Parameter -> TypeSpecifier DeclaratorName
Rule 94    Parameter -> FINAL TypeSpecifier DeclaratorName
Rule 95    DeclaratorName -> IDENTIFIER
Rule 96    DeclaratorName -> DeclaratorName OP_DIM
Rule 97    Throws -> THROWS ClassNameList
Rule 98    MethodBody -> Block
Rule 99    MethodBody -> ;
Rule 100   ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block
Rule 101   ConstructorDeclaration -> Modifiers ConstructorDeclarator Block
Rule 102   ConstructorDeclaration -> ConstructorDeclarator Throws Block
Rule 103   ConstructorDeclaration -> ConstructorDeclarator Block
Rule 104   ConstructorDeclarator -> IDENTIFIER ( ParameterList )
Rule 105   ConstructorDeclarator -> IDENTIFIER ( )
Rule 106   StaticInitializer -> STATIC Block
Rule 107   NonStaticInitializer -> Block
Rule 108   Extends -> EXTENDS TypeName
Rule 109   Extends -> Extends , TypeName
Rule 110   Block -> { LocalVariableDeclarationsAndStatements }
Rule 111   Block -> { }
Rule 112   LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 113   LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 114   LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 115   LocalVariableDeclarationOrStatement -> Statement
Rule 116   LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;
Rule 117   LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ;
Rule 118   Statement -> EmptyStatement
Rule 119   Statement -> LabelStatement
Rule 120   Statement -> ExpressionStatement ;
Rule 121   Statement -> SelectionStatement
Rule 122   Statement -> IterationStatement
Rule 123   Statement -> JumpStatement
Rule 124   Statement -> GuardingStatement
Rule 125   Statement -> Block
Rule 126   EmptyStatement -> ;
Rule 127   LabelStatement -> IDENTIFIER :
Rule 128   LabelStatement -> CASE ConstantExpression :
Rule 129   LabelStatement -> DEFAULT :
Rule 130   ExpressionStatement -> Expression
Rule 131   SelectionStatement -> IF ( Expression ) Statement ElseOrNot
Rule 132   SelectionStatement -> SWITCH ( Expression ) Block
Rule 133   ElseOrNot -> ELSE Statement
Rule 134   ElseOrNot -> <empty>
Rule 135   IterationStatement -> WHILE ( Expression ) Statement
Rule 136   IterationStatement -> DO Statement WHILE ( Expression ) ;
Rule 137   IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement
Rule 138   IterationStatement -> FOR ( ForInit ForExpr ) Statement
Rule 139   ForInit -> ExpressionStatements ;
Rule 140   ForInit -> LocalVariableDeclarationStatement
Rule 141   ForInit -> ;
Rule 142   ForExpr -> Expression ;
Rule 143   ForExpr -> ;
Rule 144   ForIncr -> ExpressionStatements
Rule 145   ExpressionStatements -> ExpressionStatement
Rule 146   ExpressionStatements -> ExpressionStatements , ExpressionStatement
Rule 147   JumpStatement -> BREAK IDENTIFIER ;
Rule 148   JumpStatement -> BREAK ;
Rule 149   JumpStatement -> CONTINUE IDENTIFIER ;
Rule 150   JumpStatement -> CONTINUE ;
Rule 151   JumpStatement -> RETURN Expression ;
Rule 152   JumpStatement -> RETURN ;
Rule 153   JumpStatement -> THROW Expression ;
Rule 154   GuardingStatement -> SYNCHRONIZED ( Expression ) Statement
Rule 155   GuardingStatement -> TRY Block Finally
Rule 156   GuardingStatement -> TRY Block Catches
Rule 157   GuardingStatement -> TRY Block Catches Finally
Rule 158   Catches -> Catch
Rule 159   Catches -> Catches Catch
Rule 160   Catch -> CatchHeader Block
Rule 161   CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER )
Rule 162   CatchHeader -> CATCH ( TypeSpecifier )
Rule 163   Finally -> FINALLY Block
Rule 164   PrimaryExpression -> QualifiedName
Rule 165   PrimaryExpression -> NotJustName
Rule 166   NotJustName -> SpecialName
Rule 167   NotJustName -> NewAllocationExpression
Rule 168   NotJustName -> ComplexPrimary
Rule 169   ComplexPrimary -> ( Expression )
Rule 170   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 171   ComplexPrimaryNoParenthesis -> FLOAT_LITERAL
Rule 172   ComplexPrimaryNoParenthesis -> INT_LITERAL
Rule 173   ComplexPrimaryNoParenthesis -> CHAR_LITERAL
Rule 174   ComplexPrimaryNoParenthesis -> STRING_LITERAL
Rule 175   ComplexPrimaryNoParenthesis -> BOOL
Rule 176   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 177   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 178   ComplexPrimaryNoParenthesis -> MethodCall
Rule 179   ArrayAccess -> QualifiedName [ Expression ]
Rule 180   ArrayAccess -> ComplexPrimary [ Expression ]
Rule 181   FieldAccess -> NotJustName . IDENTIFIER
Rule 182   FieldAccess -> RealPostfixExpression . IDENTIFIER
Rule 183   FieldAccess -> QualifiedName . THIS
Rule 184   FieldAccess -> QualifiedName . CLASS
Rule 185   FieldAccess -> PrimitiveType . CLASS
Rule 186   MethodCall -> MethodAccess ( ArgumentList )
Rule 187   MethodCall -> MethodAccess ( )
Rule 188   MethodAccess -> ComplexPrimaryNoParenthesis
Rule 189   MethodAccess -> SpecialName
Rule 190   MethodAccess -> QualifiedName
Rule 191   SpecialName -> THIS
Rule 192   SpecialName -> SUPER
Rule 193   SpecialName -> NULL
Rule 194   ArgumentList -> Expression
Rule 195   ArgumentList -> ArgumentList , Expression
Rule 196   NewAllocationExpression -> PlainNewAllocationExpression
Rule 197   NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression
Rule 198   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 199   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 200   PlainNewAllocationExpression -> ArrayAllocationExpression { }
Rule 201   PlainNewAllocationExpression -> ClassAllocationExpression { }
Rule 202   PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers }
Rule 203   PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations }
Rule 204   ClassAllocationExpression -> NEW TypeName ( ArgumentList )
Rule 205   ClassAllocationExpression -> NEW TypeName ( )
Rule 206   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 207   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 208   ArrayAllocationExpression -> NEW TypeName Dims
Rule 209   DimExprs -> DimExpr
Rule 210   DimExprs -> DimExprs DimExpr
Rule 211   DimExpr -> [ Expression ]
Rule 212   Dims -> OP_DIM
Rule 213   Dims -> Dims OP_DIM
Rule 214   OP_DIM -> [ ]
Rule 215   PostfixExpression -> PrimaryExpression
Rule 216   PostfixExpression -> RealPostfixExpression
Rule 217   RealPostfixExpression -> PostfixExpression OPT_INC_DEC
Rule 218   UnaryExpression -> OPT_INC_DEC UnaryExpression
Rule 219   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 220   UnaryExpression -> LogicalUnaryExpression
Rule 221   LogicalUnaryExpression -> PostfixExpression
Rule 222   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 223   LogicalUnaryOperator -> ~
Rule 224   LogicalUnaryOperator -> !
Rule 225   ArithmeticUnaryOperator -> +
Rule 226   ArithmeticUnaryOperator -> -
Rule 227   CastExpression -> UnaryExpression
Rule 228   CastExpression -> ( PrimitiveTypeExpression ) CastExpression
Rule 229   CastExpression -> ( ClassTypeExpression ) CastExpression
Rule 230   CastExpression -> ( Expression ) LogicalUnaryExpression
Rule 231   PrimitiveTypeExpression -> PrimitiveType
Rule 232   PrimitiveTypeExpression -> PrimitiveType Dims
Rule 233   ClassTypeExpression -> QualifiedName Dims
Rule 234   MultiplicativeExpression -> CastExpression
Rule 235   MultiplicativeExpression -> MultiplicativeExpression * CastExpression
Rule 236   MultiplicativeExpression -> MultiplicativeExpression / CastExpression
Rule 237   MultiplicativeExpression -> MultiplicativeExpression % CastExpression
Rule 238   AdditiveExpression -> MultiplicativeExpression
Rule 239   AdditiveExpression -> AdditiveExpression + MultiplicativeExpression
Rule 240   AdditiveExpression -> AdditiveExpression - MultiplicativeExpression
Rule 241   ShiftExpression -> AdditiveExpression
Rule 242   ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression
Rule 243   RelationalExpression -> ShiftExpression
Rule 244   RelationalExpression -> RelationalExpression < ShiftExpression
Rule 245   RelationalExpression -> RelationalExpression > ShiftExpression
Rule 246   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 247   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 248   RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier
Rule 249   EqualityExpression -> RelationalExpression
Rule 250   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 251   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 252   AndExpression -> EqualityExpression
Rule 253   AndExpression -> AndExpression & EqualityExpression
Rule 254   ExclusiveOrExpression -> AndExpression
Rule 255   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 256   InclusiveOrExpression -> ExclusiveOrExpression
Rule 257   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 258   ConditionalAndExpression -> InclusiveOrExpression
Rule 259   ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression
Rule 260   ConditionalOrExpression -> ConditionalAndExpression
Rule 261   ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression
Rule 262   ConditionalExpression -> ConditionalOrExpression
Rule 263   ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression
Rule 264   AssignmentExpression -> ConditionalExpression
Rule 265   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 266   AssignmentOperator -> =
Rule 267   AssignmentOperator -> OPT_EQ
Rule 268   Expression -> AssignmentExpression
Rule 269   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

!                    : 224
%                    : 237
&                    : 253
(                    : 88 89 104 105 131 132 135 136 137 138 154 161 162 169 186 187 204 205 228 229 230
)                    : 88 89 104 105 131 132 135 136 137 138 154 161 162 169 186 187 204 205 228 229 230
*                    : 34 235
+                    : 225 239
,                    : 7 75 82 83 92 109 146 195
-                    : 226 240
.                    : 34 36 181 182 183 184 185 197
/                    : 236
:                    : 127 128 129 263
;                    : 17 18 66 99 116 117 120 126 136 139 141 142 143 147 148 149 150 151 152 153
<                    : 244
=                    : 77 266
>                    : 245
?                    : 263
ABSTRACT             : 49
ASSERT               : 
BOOL                 : 175
BOOLEAN              : 8
BREAK                : 147 148
BYTE                 : 10
CASE                 : 128
CATCH                : 161 162
CHAR                 : 9
CHAR_LITERAL         : 173
CLASS                : 59 184 185
COMMENT              : 
CONST                : 
CONTINUE             : 149 150
DEFAULT              : 129
DO                   : 136
DOUBLE               : 15
ELSE                 : 133
ENUM                 : 
EXTENDS              : 108
FINAL                : 50 94 117
FINALLY              : 163
FLOAT                : 14
FLOAT_LITERAL        : 171
FOR                  : 137 138
GOTO                 : 
IDENTIFIER           : 35 36 39 40 41 42 43 44 45 46 95 104 105 127 147 149 161 181 182
IF                   : 131
IGNORE_WHITESPACE    : 
IMPLEMENTS           : 61
IMPORT               : 33 34
INSTANCEOF           : 248
INT                  : 12
INTERFACE            : 60
INT_LITERAL          : 172
LONG                 : 13
NATIVE               : 57
NEW                  : 204 205 206 207 208
NULL                 : 193
OPT_EQ               : 267
OPT_INC_DEC          : 217 218
OPT_SOME             : 242
OP_EQ                : 250
OP_GE                : 247
OP_LAND              : 259
OP_LE                : 246
OP_LOR               : 261
OP_NE                : 251
PACKAGE              : 26
PRIVATE              : 53
PROTECTED            : 52
PUBLIC               : 51
RETURN               : 151 152
SHORT                : 11
STATIC               : 54 106
STRICTFP             : 
STRING_LITERAL       : 174
SUPER                : 192
SWITCH               : 132
SYNCHRONIZED         : 58 154
THIS                 : 183 191
THROW                : 153
THROWS               : 97
TRANSIENT            : 55
TRY                  : 155 156 157
VOID                 : 16
VOLATILE             : 56
WHILE                : 135 136
[                    : 179 180 211 214
]                    : 179 180 211 214
^                    : 255
error                : 
{                    : 37 38 79 80 110 111 200 201 202 203
|                    : 257
}                    : 37 38 79 80 110 111 200 201 202 203
~                    : 223

Nonterminals, with rules where they appear

AdditiveExpression   : 239 240 241 242
AndExpression        : 253 254 255
ArgumentList         : 186 195 204
ArithmeticUnaryOperator : 219
ArrayAccess          : 176
ArrayAllocationExpression : 198 200 202
ArrayInitializers    : 80 82 83 202
AssignmentExpression : 265 268
AssignmentOperator   : 265
Block                : 98 100 101 102 103 106 107 125 132 155 156 157 160 163
CastExpression       : 219 228 229 234 235 236 237
Catch                : 158 159
CatchHeader          : 160
Catches              : 156 157 159
ClassAllocationExpression : 199 201 203
ClassHeader          : 37 38
ClassNameList        : 7 61 97
ClassTypeExpression  : 229
ClassWord            : 39 40 41 42 43 44 45 46
CompilationUnit      : 0
ComplexPrimary       : 168 180
ComplexPrimaryNoParenthesis : 170 188
ConditionalAndExpression : 259 260 261
ConditionalExpression : 263 264 269
ConditionalOrExpression : 261 262 263
ConstantExpression   : 128
ConstructorDeclaration : 68
ConstructorDeclarator : 100 101 102 103
DeclaratorName       : 76 77 88 89 93 94 96
DimExpr              : 209 210
DimExprs             : 206 207 210
Dims                 : 3 206 208 213 232 233
ElseOrNot            : 131
EmptyStatement       : 118
EqualityExpression   : 250 251 252 253
ExclusiveOrExpression : 255 256 257
Expression           : 78 130 131 132 135 136 142 151 153 154 169 179 180 194 195 211 230 263
ExpressionStatement  : 120 145 146
ExpressionStatements : 139 144 146
Extends              : 39 40 42 44 109
FieldAccess          : 177
FieldDeclaration     : 64 65
FieldDeclarationOptSemi : 62 63
FieldDeclarations    : 37 63 203
FieldVariableDeclaration : 66
Finally              : 155 157
ForExpr              : 137 138
ForIncr              : 137
ForInit              : 137 138
GuardingStatement    : 124
ImportStatement      : 31 32
ImportStatements     : 19 20 22 24 32
InclusiveOrExpression : 257 258 259
Interfaces           : 39 41 42 45
IterationStatement   : 122
JumpStatement        : 123
LabelStatement       : 119
LocalVariableDeclarationOrStatement : 112 113
LocalVariableDeclarationStatement : 114 140
LocalVariableDeclarationsAndStatements : 110 113
LogicalUnaryExpression : 220 230
LogicalUnaryOperator : 222
MethodAccess         : 186 187
MethodBody           : 84 85 86 87
MethodCall           : 178
MethodDeclaration    : 67
MethodDeclarator     : 84 85 86 87 90
Modifier             : 47 48
Modifiers            : 39 40 41 43 48 72 84 85 100 101
MultiplicativeExpression : 235 236 237 238 239 240
NewAllocationExpression : 167
NonStaticInitializer : 70
NotJustName          : 165 181
OP_DIM               : 90 96 212 213
PackageStatement     : 19 20 21 23
Parameter            : 91 92
ParameterList        : 88 92 104
PlainNewAllocationExpression : 196 197
PostfixExpression    : 217 221
PrimaryExpression    : 215
PrimitiveType        : 4 185 231 232
PrimitiveTypeExpression : 228
ProgramFile          : 1
QualifiedName        : 5 6 7 26 33 34 36 164 179 183 184 190 197 233
RealPostfixExpression : 182 216
RelationalExpression : 244 245 246 247 248 249 250 251
SelectionStatement   : 121
SemiColons           : 18 26 30 33 34 65
ShiftExpression      : 242 243 244 245 246 247
SpecialName          : 166 189
Statement            : 115 131 133 135 136 137 138 154
StaticInitializer    : 69
Throws               : 84 86 100 102
TypeDeclaration      : 29 30 71
TypeDeclarationOptSemi : 27 28
TypeDeclarations     : 19 21 22 25 28
TypeName             : 2 3 108 109 204 205 206 207 208
TypeSpecifier        : 72 73 84 85 86 87 93 94 116 117 161 162 248
UnaryExpression      : 218 222 227 265
VariableDeclarator   : 74 75
VariableDeclarators  : 72 73 75 116 117
VariableInitializer  : 77 81 82

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (19) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (20) ProgramFile -> . PackageStatement ImportStatements
    (21) ProgramFile -> . PackageStatement TypeDeclarations
    (22) ProgramFile -> . ImportStatements TypeDeclarations
    (23) ProgramFile -> . PackageStatement
    (24) ProgramFile -> . ImportStatements
    (25) ProgramFile -> . TypeDeclarations
    (26) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (31) ImportStatements -> . ImportStatement
    (32) ImportStatements -> . ImportStatements ImportStatement
    (27) TypeDeclarations -> . TypeDeclarationOptSemi
    (28) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (33) ImportStatement -> . IMPORT QualifiedName SemiColons
    (34) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    PACKAGE         shift and go to state 14
    IMPORT          shift and go to state 10
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ImportStatements               shift and go to state 20
    TypeDeclarations               shift and go to state 21
    ImportStatement                shift and go to state 16
    ClassHeader                    shift and go to state 23
    PackageStatement               shift and go to state 15
    CompilationUnit                shift and go to state 18
    TypeDeclarationOptSemi         shift and go to state 12

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (58) Modifier -> SYNCHRONIZED .

    CLASS           reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    PUBLIC          reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    IDENTIFIER      reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    INT             reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 58 (Modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 58 (Modifier -> SYNCHRONIZED .)


state 3

    (56) Modifier -> VOLATILE .

    CLASS           reduce using rule 56 (Modifier -> VOLATILE .)
    INTERFACE       reduce using rule 56 (Modifier -> VOLATILE .)
    ABSTRACT        reduce using rule 56 (Modifier -> VOLATILE .)
    FINAL           reduce using rule 56 (Modifier -> VOLATILE .)
    PUBLIC          reduce using rule 56 (Modifier -> VOLATILE .)
    PROTECTED       reduce using rule 56 (Modifier -> VOLATILE .)
    PRIVATE         reduce using rule 56 (Modifier -> VOLATILE .)
    STATIC          reduce using rule 56 (Modifier -> VOLATILE .)
    TRANSIENT       reduce using rule 56 (Modifier -> VOLATILE .)
    VOLATILE        reduce using rule 56 (Modifier -> VOLATILE .)
    NATIVE          reduce using rule 56 (Modifier -> VOLATILE .)
    SYNCHRONIZED    reduce using rule 56 (Modifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 56 (Modifier -> VOLATILE .)
    BOOLEAN         reduce using rule 56 (Modifier -> VOLATILE .)
    CHAR            reduce using rule 56 (Modifier -> VOLATILE .)
    BYTE            reduce using rule 56 (Modifier -> VOLATILE .)
    SHORT           reduce using rule 56 (Modifier -> VOLATILE .)
    INT             reduce using rule 56 (Modifier -> VOLATILE .)
    LONG            reduce using rule 56 (Modifier -> VOLATILE .)
    FLOAT           reduce using rule 56 (Modifier -> VOLATILE .)
    DOUBLE          reduce using rule 56 (Modifier -> VOLATILE .)
    VOID            reduce using rule 56 (Modifier -> VOLATILE .)


state 4

    (49) Modifier -> ABSTRACT .

    CLASS           reduce using rule 49 (Modifier -> ABSTRACT .)
    INTERFACE       reduce using rule 49 (Modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 49 (Modifier -> ABSTRACT .)
    FINAL           reduce using rule 49 (Modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 49 (Modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 49 (Modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 49 (Modifier -> ABSTRACT .)
    STATIC          reduce using rule 49 (Modifier -> ABSTRACT .)
    TRANSIENT       reduce using rule 49 (Modifier -> ABSTRACT .)
    VOLATILE        reduce using rule 49 (Modifier -> ABSTRACT .)
    NATIVE          reduce using rule 49 (Modifier -> ABSTRACT .)
    SYNCHRONIZED    reduce using rule 49 (Modifier -> ABSTRACT .)
    IDENTIFIER      reduce using rule 49 (Modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 49 (Modifier -> ABSTRACT .)
    CHAR            reduce using rule 49 (Modifier -> ABSTRACT .)
    BYTE            reduce using rule 49 (Modifier -> ABSTRACT .)
    SHORT           reduce using rule 49 (Modifier -> ABSTRACT .)
    INT             reduce using rule 49 (Modifier -> ABSTRACT .)
    LONG            reduce using rule 49 (Modifier -> ABSTRACT .)
    FLOAT           reduce using rule 49 (Modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 49 (Modifier -> ABSTRACT .)
    VOID            reduce using rule 49 (Modifier -> ABSTRACT .)


state 5

    (29) TypeDeclarationOptSemi -> TypeDeclaration .
    (30) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    CLASS           reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    INTERFACE       reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    ABSTRACT        reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    FINAL           reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PROTECTED       reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    TRANSIENT       reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    VOLATILE        reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    NATIVE          reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    SYNCHRONIZED    reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 29 (TypeDeclarationOptSemi -> TypeDeclaration .)
    ;               shift and go to state 27

    SemiColons                     shift and go to state 28

state 6

    (52) Modifier -> PROTECTED .

    CLASS           reduce using rule 52 (Modifier -> PROTECTED .)
    INTERFACE       reduce using rule 52 (Modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 52 (Modifier -> PROTECTED .)
    FINAL           reduce using rule 52 (Modifier -> PROTECTED .)
    PUBLIC          reduce using rule 52 (Modifier -> PROTECTED .)
    PROTECTED       reduce using rule 52 (Modifier -> PROTECTED .)
    PRIVATE         reduce using rule 52 (Modifier -> PROTECTED .)
    STATIC          reduce using rule 52 (Modifier -> PROTECTED .)
    TRANSIENT       reduce using rule 52 (Modifier -> PROTECTED .)
    VOLATILE        reduce using rule 52 (Modifier -> PROTECTED .)
    NATIVE          reduce using rule 52 (Modifier -> PROTECTED .)
    SYNCHRONIZED    reduce using rule 52 (Modifier -> PROTECTED .)
    IDENTIFIER      reduce using rule 52 (Modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 52 (Modifier -> PROTECTED .)
    CHAR            reduce using rule 52 (Modifier -> PROTECTED .)
    BYTE            reduce using rule 52 (Modifier -> PROTECTED .)
    SHORT           reduce using rule 52 (Modifier -> PROTECTED .)
    INT             reduce using rule 52 (Modifier -> PROTECTED .)
    LONG            reduce using rule 52 (Modifier -> PROTECTED .)
    FLOAT           reduce using rule 52 (Modifier -> PROTECTED .)
    DOUBLE          reduce using rule 52 (Modifier -> PROTECTED .)
    VOID            reduce using rule 52 (Modifier -> PROTECTED .)


state 7

    (50) Modifier -> FINAL .

    CLASS           reduce using rule 50 (Modifier -> FINAL .)
    INTERFACE       reduce using rule 50 (Modifier -> FINAL .)
    ABSTRACT        reduce using rule 50 (Modifier -> FINAL .)
    FINAL           reduce using rule 50 (Modifier -> FINAL .)
    PUBLIC          reduce using rule 50 (Modifier -> FINAL .)
    PROTECTED       reduce using rule 50 (Modifier -> FINAL .)
    PRIVATE         reduce using rule 50 (Modifier -> FINAL .)
    STATIC          reduce using rule 50 (Modifier -> FINAL .)
    TRANSIENT       reduce using rule 50 (Modifier -> FINAL .)
    VOLATILE        reduce using rule 50 (Modifier -> FINAL .)
    NATIVE          reduce using rule 50 (Modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 50 (Modifier -> FINAL .)
    IDENTIFIER      reduce using rule 50 (Modifier -> FINAL .)
    BOOLEAN         reduce using rule 50 (Modifier -> FINAL .)
    CHAR            reduce using rule 50 (Modifier -> FINAL .)
    BYTE            reduce using rule 50 (Modifier -> FINAL .)
    SHORT           reduce using rule 50 (Modifier -> FINAL .)
    INT             reduce using rule 50 (Modifier -> FINAL .)
    LONG            reduce using rule 50 (Modifier -> FINAL .)
    FLOAT           reduce using rule 50 (Modifier -> FINAL .)
    DOUBLE          reduce using rule 50 (Modifier -> FINAL .)
    VOID            reduce using rule 50 (Modifier -> FINAL .)


state 8

    (57) Modifier -> NATIVE .

    CLASS           reduce using rule 57 (Modifier -> NATIVE .)
    INTERFACE       reduce using rule 57 (Modifier -> NATIVE .)
    ABSTRACT        reduce using rule 57 (Modifier -> NATIVE .)
    FINAL           reduce using rule 57 (Modifier -> NATIVE .)
    PUBLIC          reduce using rule 57 (Modifier -> NATIVE .)
    PROTECTED       reduce using rule 57 (Modifier -> NATIVE .)
    PRIVATE         reduce using rule 57 (Modifier -> NATIVE .)
    STATIC          reduce using rule 57 (Modifier -> NATIVE .)
    TRANSIENT       reduce using rule 57 (Modifier -> NATIVE .)
    VOLATILE        reduce using rule 57 (Modifier -> NATIVE .)
    NATIVE          reduce using rule 57 (Modifier -> NATIVE .)
    SYNCHRONIZED    reduce using rule 57 (Modifier -> NATIVE .)
    IDENTIFIER      reduce using rule 57 (Modifier -> NATIVE .)
    BOOLEAN         reduce using rule 57 (Modifier -> NATIVE .)
    CHAR            reduce using rule 57 (Modifier -> NATIVE .)
    BYTE            reduce using rule 57 (Modifier -> NATIVE .)
    SHORT           reduce using rule 57 (Modifier -> NATIVE .)
    INT             reduce using rule 57 (Modifier -> NATIVE .)
    LONG            reduce using rule 57 (Modifier -> NATIVE .)
    FLOAT           reduce using rule 57 (Modifier -> NATIVE .)
    DOUBLE          reduce using rule 57 (Modifier -> NATIVE .)
    VOID            reduce using rule 57 (Modifier -> NATIVE .)


state 9

    (53) Modifier -> PRIVATE .

    CLASS           reduce using rule 53 (Modifier -> PRIVATE .)
    INTERFACE       reduce using rule 53 (Modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 53 (Modifier -> PRIVATE .)
    FINAL           reduce using rule 53 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 53 (Modifier -> PRIVATE .)
    PROTECTED       reduce using rule 53 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 53 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 53 (Modifier -> PRIVATE .)
    TRANSIENT       reduce using rule 53 (Modifier -> PRIVATE .)
    VOLATILE        reduce using rule 53 (Modifier -> PRIVATE .)
    NATIVE          reduce using rule 53 (Modifier -> PRIVATE .)
    SYNCHRONIZED    reduce using rule 53 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 53 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 53 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 53 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 53 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 53 (Modifier -> PRIVATE .)
    INT             reduce using rule 53 (Modifier -> PRIVATE .)
    LONG            reduce using rule 53 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 53 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 53 (Modifier -> PRIVATE .)
    VOID            reduce using rule 53 (Modifier -> PRIVATE .)


state 10

    (33) ImportStatement -> IMPORT . QualifiedName SemiColons
    (34) ImportStatement -> IMPORT . QualifiedName . * SemiColons
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 29

state 11

    (59) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 59 (ClassWord -> CLASS .)


state 12

    (27) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    ABSTRACT        reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    FINAL           reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PROTECTED       reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    TRANSIENT       reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    VOLATILE        reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    NATIVE          reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 27 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 13

    (39) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends
    (41) ClassHeader -> Modifiers . ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (48) Modifiers -> Modifiers . Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 31
    Modifier                       shift and go to state 32

state 14

    (26) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 33

state 15

    (19) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (20) ProgramFile -> PackageStatement . ImportStatements
    (21) ProgramFile -> PackageStatement . TypeDeclarations
    (23) ProgramFile -> PackageStatement .
    (31) ImportStatements -> . ImportStatement
    (32) ImportStatements -> . ImportStatements ImportStatement
    (27) TypeDeclarations -> . TypeDeclarationOptSemi
    (28) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (33) ImportStatement -> . IMPORT QualifiedName SemiColons
    (34) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 23 (ProgramFile -> PackageStatement .)
    IMPORT          shift and go to state 10
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ImportStatements               shift and go to state 34
    TypeDeclarations               shift and go to state 35
    ImportStatement                shift and go to state 16
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 12

state 16

    (31) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 31 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 31 (ImportStatements -> ImportStatement .)
    INTERFACE       reduce using rule 31 (ImportStatements -> ImportStatement .)
    ABSTRACT        reduce using rule 31 (ImportStatements -> ImportStatement .)
    FINAL           reduce using rule 31 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 31 (ImportStatements -> ImportStatement .)
    PROTECTED       reduce using rule 31 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 31 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 31 (ImportStatements -> ImportStatement .)
    TRANSIENT       reduce using rule 31 (ImportStatements -> ImportStatement .)
    VOLATILE        reduce using rule 31 (ImportStatements -> ImportStatement .)
    NATIVE          reduce using rule 31 (ImportStatements -> ImportStatement .)
    SYNCHRONIZED    reduce using rule 31 (ImportStatements -> ImportStatement .)
    $end            reduce using rule 31 (ImportStatements -> ImportStatement .)


state 17

    (47) Modifiers -> Modifier .

    CLASS           reduce using rule 47 (Modifiers -> Modifier .)
    INTERFACE       reduce using rule 47 (Modifiers -> Modifier .)
    ABSTRACT        reduce using rule 47 (Modifiers -> Modifier .)
    FINAL           reduce using rule 47 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 47 (Modifiers -> Modifier .)
    PROTECTED       reduce using rule 47 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 47 (Modifiers -> Modifier .)
    STATIC          reduce using rule 47 (Modifiers -> Modifier .)
    TRANSIENT       reduce using rule 47 (Modifiers -> Modifier .)
    VOLATILE        reduce using rule 47 (Modifiers -> Modifier .)
    NATIVE          reduce using rule 47 (Modifiers -> Modifier .)
    SYNCHRONIZED    reduce using rule 47 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 47 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 47 (Modifiers -> Modifier .)
    CHAR            reduce using rule 47 (Modifiers -> Modifier .)
    BYTE            reduce using rule 47 (Modifiers -> Modifier .)
    SHORT           reduce using rule 47 (Modifiers -> Modifier .)
    INT             reduce using rule 47 (Modifiers -> Modifier .)
    LONG            reduce using rule 47 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 47 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 47 (Modifiers -> Modifier .)
    VOID            reduce using rule 47 (Modifiers -> Modifier .)


state 18

    (0) S' -> CompilationUnit .



state 19

    (42) ClassHeader -> ClassWord . IDENTIFIER Extends Interfaces
    (44) ClassHeader -> ClassWord . IDENTIFIER Extends
    (45) ClassHeader -> ClassWord . IDENTIFIER Interfaces
    (46) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 36


state 20

    (22) ProgramFile -> ImportStatements . TypeDeclarations
    (24) ProgramFile -> ImportStatements .
    (32) ImportStatements -> ImportStatements . ImportStatement
    (27) TypeDeclarations -> . TypeDeclarationOptSemi
    (28) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (33) ImportStatement -> . IMPORT QualifiedName SemiColons
    (34) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 24 (ProgramFile -> ImportStatements .)
    IMPORT          shift and go to state 10
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    TypeDeclaration                shift and go to state 5
    TypeDeclarations               shift and go to state 38
    ImportStatement                shift and go to state 37
    ClassHeader                    shift and go to state 23
    Modifier                       shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 12

state 21

    (25) ProgramFile -> TypeDeclarations .
    (28) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 25 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    Modifier                       shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 39

state 22

    (55) Modifier -> TRANSIENT .

    CLASS           reduce using rule 55 (Modifier -> TRANSIENT .)
    INTERFACE       reduce using rule 55 (Modifier -> TRANSIENT .)
    ABSTRACT        reduce using rule 55 (Modifier -> TRANSIENT .)
    FINAL           reduce using rule 55 (Modifier -> TRANSIENT .)
    PUBLIC          reduce using rule 55 (Modifier -> TRANSIENT .)
    PROTECTED       reduce using rule 55 (Modifier -> TRANSIENT .)
    PRIVATE         reduce using rule 55 (Modifier -> TRANSIENT .)
    STATIC          reduce using rule 55 (Modifier -> TRANSIENT .)
    TRANSIENT       reduce using rule 55 (Modifier -> TRANSIENT .)
    VOLATILE        reduce using rule 55 (Modifier -> TRANSIENT .)
    NATIVE          reduce using rule 55 (Modifier -> TRANSIENT .)
    SYNCHRONIZED    reduce using rule 55 (Modifier -> TRANSIENT .)
    IDENTIFIER      reduce using rule 55 (Modifier -> TRANSIENT .)
    BOOLEAN         reduce using rule 55 (Modifier -> TRANSIENT .)
    CHAR            reduce using rule 55 (Modifier -> TRANSIENT .)
    BYTE            reduce using rule 55 (Modifier -> TRANSIENT .)
    SHORT           reduce using rule 55 (Modifier -> TRANSIENT .)
    INT             reduce using rule 55 (Modifier -> TRANSIENT .)
    LONG            reduce using rule 55 (Modifier -> TRANSIENT .)
    FLOAT           reduce using rule 55 (Modifier -> TRANSIENT .)
    DOUBLE          reduce using rule 55 (Modifier -> TRANSIENT .)
    VOID            reduce using rule 55 (Modifier -> TRANSIENT .)


state 23

    (37) TypeDeclaration -> ClassHeader . { FieldDeclarations }
    (38) TypeDeclaration -> ClassHeader . { }

    {               shift and go to state 40


state 24

    (60) ClassWord -> INTERFACE .

    IDENTIFIER      reduce using rule 60 (ClassWord -> INTERFACE .)


state 25

    (54) Modifier -> STATIC .

    CLASS           reduce using rule 54 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 54 (Modifier -> STATIC .)
    ABSTRACT        reduce using rule 54 (Modifier -> STATIC .)
    FINAL           reduce using rule 54 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 54 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 54 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 54 (Modifier -> STATIC .)
    STATIC          reduce using rule 54 (Modifier -> STATIC .)
    TRANSIENT       reduce using rule 54 (Modifier -> STATIC .)
    VOLATILE        reduce using rule 54 (Modifier -> STATIC .)
    NATIVE          reduce using rule 54 (Modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 54 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 54 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 54 (Modifier -> STATIC .)
    CHAR            reduce using rule 54 (Modifier -> STATIC .)
    BYTE            reduce using rule 54 (Modifier -> STATIC .)
    SHORT           reduce using rule 54 (Modifier -> STATIC .)
    INT             reduce using rule 54 (Modifier -> STATIC .)
    LONG            reduce using rule 54 (Modifier -> STATIC .)
    FLOAT           reduce using rule 54 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 54 (Modifier -> STATIC .)
    VOID            reduce using rule 54 (Modifier -> STATIC .)


state 26

    (51) Modifier -> PUBLIC .

    CLASS           reduce using rule 51 (Modifier -> PUBLIC .)
    INTERFACE       reduce using rule 51 (Modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 51 (Modifier -> PUBLIC .)
    FINAL           reduce using rule 51 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 51 (Modifier -> PUBLIC .)
    PROTECTED       reduce using rule 51 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 51 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 51 (Modifier -> PUBLIC .)
    TRANSIENT       reduce using rule 51 (Modifier -> PUBLIC .)
    VOLATILE        reduce using rule 51 (Modifier -> PUBLIC .)
    NATIVE          reduce using rule 51 (Modifier -> PUBLIC .)
    SYNCHRONIZED    reduce using rule 51 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 51 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 51 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 51 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 51 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 51 (Modifier -> PUBLIC .)
    INT             reduce using rule 51 (Modifier -> PUBLIC .)
    LONG            reduce using rule 51 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 51 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 51 (Modifier -> PUBLIC .)
    VOID            reduce using rule 51 (Modifier -> PUBLIC .)


state 27

    (17) SemiColons -> ; .

    ;               reduce using rule 17 (SemiColons -> ; .)
    IMPORT          reduce using rule 17 (SemiColons -> ; .)
    CLASS           reduce using rule 17 (SemiColons -> ; .)
    INTERFACE       reduce using rule 17 (SemiColons -> ; .)
    ABSTRACT        reduce using rule 17 (SemiColons -> ; .)
    FINAL           reduce using rule 17 (SemiColons -> ; .)
    PUBLIC          reduce using rule 17 (SemiColons -> ; .)
    PROTECTED       reduce using rule 17 (SemiColons -> ; .)
    PRIVATE         reduce using rule 17 (SemiColons -> ; .)
    STATIC          reduce using rule 17 (SemiColons -> ; .)
    TRANSIENT       reduce using rule 17 (SemiColons -> ; .)
    VOLATILE        reduce using rule 17 (SemiColons -> ; .)
    NATIVE          reduce using rule 17 (SemiColons -> ; .)
    SYNCHRONIZED    reduce using rule 17 (SemiColons -> ; .)
    $end            reduce using rule 17 (SemiColons -> ; .)
    }               reduce using rule 17 (SemiColons -> ; .)
    IDENTIFIER      reduce using rule 17 (SemiColons -> ; .)
    {               reduce using rule 17 (SemiColons -> ; .)
    BOOLEAN         reduce using rule 17 (SemiColons -> ; .)
    CHAR            reduce using rule 17 (SemiColons -> ; .)
    BYTE            reduce using rule 17 (SemiColons -> ; .)
    SHORT           reduce using rule 17 (SemiColons -> ; .)
    INT             reduce using rule 17 (SemiColons -> ; .)
    LONG            reduce using rule 17 (SemiColons -> ; .)
    FLOAT           reduce using rule 17 (SemiColons -> ; .)
    DOUBLE          reduce using rule 17 (SemiColons -> ; .)
    VOID            reduce using rule 17 (SemiColons -> ; .)


state 28

    (30) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    CLASS           reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    INTERFACE       reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    ABSTRACT        reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    FINAL           reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PROTECTED       reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    TRANSIENT       reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    VOLATILE        reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    NATIVE          reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    SYNCHRONIZED    reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 30 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    ;               shift and go to state 41


state 29

    (33) ImportStatement -> IMPORT QualifiedName . SemiColons
    (34) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (36) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 42
    ;               shift and go to state 27

    SemiColons                     shift and go to state 43

state 30

    (35) QualifiedName -> IDENTIFIER .

    .               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    )               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    :               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ,               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    }               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ]               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    {               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    IMPLEMENTS      reduce using rule 35 (QualifiedName -> IDENTIFIER .)


state 31

    (39) ClassHeader -> Modifiers ClassWord . IDENTIFIER Extends Interfaces
    (40) ClassHeader -> Modifiers ClassWord . IDENTIFIER Extends
    (41) ClassHeader -> Modifiers ClassWord . IDENTIFIER Interfaces
    (43) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 44


state 32

    (48) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    INTERFACE       reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    ABSTRACT        reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    FINAL           reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    PROTECTED       reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    TRANSIENT       reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    VOLATILE        reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    NATIVE          reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    SYNCHRONIZED    reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 48 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 48 (Modifiers -> Modifiers Modifier .)


state 33

    (26) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (36) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 45
    ;               shift and go to state 27

    SemiColons                     shift and go to state 46

state 34

    (19) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (20) ProgramFile -> PackageStatement ImportStatements .
    (32) ImportStatements -> ImportStatements . ImportStatement
    (27) TypeDeclarations -> . TypeDeclarationOptSemi
    (28) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (33) ImportStatement -> . IMPORT QualifiedName SemiColons
    (34) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 20 (ProgramFile -> PackageStatement ImportStatements .)
    IMPORT          shift and go to state 10
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    TypeDeclarations               shift and go to state 47
    ImportStatement                shift and go to state 37
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 12

state 35

    (21) ProgramFile -> PackageStatement TypeDeclarations .
    (28) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 21 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 39

state 36

    (42) ClassHeader -> ClassWord IDENTIFIER . Extends Interfaces
    (44) ClassHeader -> ClassWord IDENTIFIER . Extends
    (45) ClassHeader -> ClassWord IDENTIFIER . Interfaces
    (46) ClassHeader -> ClassWord IDENTIFIER .
    (108) Extends -> . EXTENDS TypeName
    (109) Extends -> . Extends , TypeName
    (61) Interfaces -> . IMPLEMENTS ClassNameList

    {               reduce using rule 46 (ClassHeader -> ClassWord IDENTIFIER .)
    EXTENDS         shift and go to state 50
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 49
    Extends                        shift and go to state 51

state 37

    (32) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    INTERFACE       reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    ABSTRACT        reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    FINAL           reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    PROTECTED       reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    TRANSIENT       reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    VOLATILE        reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    NATIVE          reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    SYNCHRONIZED    reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)
    $end            reduce using rule 32 (ImportStatements -> ImportStatements ImportStatement .)


state 38

    (22) ProgramFile -> ImportStatements TypeDeclarations .
    (28) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 22 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    Modifier                       shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 39

state 39

    (28) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    ABSTRACT        reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    FINAL           reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PROTECTED       reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    TRANSIENT       reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    VOLATILE        reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    NATIVE          reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 28 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 40

    (37) TypeDeclaration -> ClassHeader { . FieldDeclarations }
    (38) TypeDeclaration -> ClassHeader { . }
    (62) FieldDeclarations -> . FieldDeclarationOptSemi
    (63) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (64) FieldDeclarationOptSemi -> . FieldDeclaration
    (65) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (66) FieldDeclaration -> . FieldVariableDeclaration ;
    (67) FieldDeclaration -> . MethodDeclaration
    (68) FieldDeclaration -> . ConstructorDeclaration
    (69) FieldDeclaration -> . StaticInitializer
    (70) FieldDeclaration -> . NonStaticInitializer
    (71) FieldDeclaration -> . TypeDeclaration
    (72) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (73) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (84) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (86) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (100) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (102) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Block
    (106) StaticInitializer -> . STATIC Block
    (107) NonStaticInitializer -> . Block
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (105) ConstructorDeclarator -> . IDENTIFIER ( )
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 80
    STATIC          shift and go to state 58
    IDENTIFIER      shift and go to state 65
    {               shift and go to state 79
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    ConstructorDeclaration         shift and go to state 53
    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 60
    TypeSpecifier                  shift and go to state 61
    QualifiedName                  shift and go to state 62
    TypeName                       shift and go to state 63
    MethodDeclaration              shift and go to state 66
    Modifiers                      shift and go to state 68
    FieldDeclarations              shift and go to state 70
    Modifier                       shift and go to state 17
    Block                          shift and go to state 71
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 72
    ConstructorDeclarator          shift and go to state 73
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 78

state 41

    (18) SemiColons -> SemiColons ; .

    ;               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IMPORT          reduce using rule 18 (SemiColons -> SemiColons ; .)
    CLASS           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INTERFACE       reduce using rule 18 (SemiColons -> SemiColons ; .)
    ABSTRACT        reduce using rule 18 (SemiColons -> SemiColons ; .)
    FINAL           reduce using rule 18 (SemiColons -> SemiColons ; .)
    PUBLIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    PROTECTED       reduce using rule 18 (SemiColons -> SemiColons ; .)
    PRIVATE         reduce using rule 18 (SemiColons -> SemiColons ; .)
    STATIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    TRANSIENT       reduce using rule 18 (SemiColons -> SemiColons ; .)
    VOLATILE        reduce using rule 18 (SemiColons -> SemiColons ; .)
    NATIVE          reduce using rule 18 (SemiColons -> SemiColons ; .)
    SYNCHRONIZED    reduce using rule 18 (SemiColons -> SemiColons ; .)
    $end            reduce using rule 18 (SemiColons -> SemiColons ; .)
    }               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SemiColons ; .)
    {               reduce using rule 18 (SemiColons -> SemiColons ; .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SemiColons ; .)
    CHAR            reduce using rule 18 (SemiColons -> SemiColons ; .)
    BYTE            reduce using rule 18 (SemiColons -> SemiColons ; .)
    SHORT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INT             reduce using rule 18 (SemiColons -> SemiColons ; .)
    LONG            reduce using rule 18 (SemiColons -> SemiColons ; .)
    FLOAT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    DOUBLE          reduce using rule 18 (SemiColons -> SemiColons ; .)
    VOID            reduce using rule 18 (SemiColons -> SemiColons ; .)


state 42

    (34) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (36) QualifiedName -> QualifiedName . . IDENTIFIER

    *               shift and go to state 81
    IDENTIFIER      shift and go to state 82


state 43

    (33) ImportStatement -> IMPORT QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    INTERFACE       reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    ABSTRACT        reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    FINAL           reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PROTECTED       reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    TRANSIENT       reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    VOLATILE        reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    NATIVE          reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    SYNCHRONIZED    reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    $end            reduce using rule 33 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    ;               shift and go to state 41


state 44

    (39) ClassHeader -> Modifiers ClassWord IDENTIFIER . Extends Interfaces
    (40) ClassHeader -> Modifiers ClassWord IDENTIFIER . Extends
    (41) ClassHeader -> Modifiers ClassWord IDENTIFIER . Interfaces
    (43) ClassHeader -> Modifiers ClassWord IDENTIFIER .
    (108) Extends -> . EXTENDS TypeName
    (109) Extends -> . Extends , TypeName
    (61) Interfaces -> . IMPLEMENTS ClassNameList

    {               reduce using rule 43 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)
    EXTENDS         shift and go to state 50
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 83
    Extends                        shift and go to state 84

state 45

    (36) QualifiedName -> QualifiedName . . IDENTIFIER

    IDENTIFIER      shift and go to state 82


state 46

    (26) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    INTERFACE       reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    ABSTRACT        reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    FINAL           reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PROTECTED       reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    TRANSIENT       reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    VOLATILE        reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    NATIVE          reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    SYNCHRONIZED    reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    $end            reduce using rule 26 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    ;               shift and go to state 41


state 47

    (19) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (28) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (29) TypeDeclarationOptSemi -> . TypeDeclaration
    (30) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED

    $end            reduce using rule 19 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2

    ClassWord                      shift and go to state 19
    Modifiers                      shift and go to state 13
    Modifier                       shift and go to state 17
    TypeDeclaration                shift and go to state 5
    ClassHeader                    shift and go to state 23
    TypeDeclarationOptSemi         shift and go to state 39

state 48

    (61) Interfaces -> IMPLEMENTS . ClassNameList
    (6) ClassNameList -> . QualifiedName
    (7) ClassNameList -> . ClassNameList , QualifiedName
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 85
    ClassNameList                  shift and go to state 86

state 49

    (45) ClassHeader -> ClassWord IDENTIFIER Interfaces .

    {               reduce using rule 45 (ClassHeader -> ClassWord IDENTIFIER Interfaces .)


state 50

    (108) Extends -> EXTENDS . TypeName
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    TypeName                       shift and go to state 87
    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56

state 51

    (42) ClassHeader -> ClassWord IDENTIFIER Extends . Interfaces
    (44) ClassHeader -> ClassWord IDENTIFIER Extends .
    (109) Extends -> Extends . , TypeName
    (61) Interfaces -> . IMPLEMENTS ClassNameList

    {               reduce using rule 44 (ClassHeader -> ClassWord IDENTIFIER Extends .)
    ,               shift and go to state 89
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 88

state 52

    (11) PrimitiveType -> SHORT .

    .               reduce using rule 11 (PrimitiveType -> SHORT .)
    [               reduce using rule 11 (PrimitiveType -> SHORT .)
    )               reduce using rule 11 (PrimitiveType -> SHORT .)
    <               reduce using rule 11 (PrimitiveType -> SHORT .)
    >               reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_LE           reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_GE           reduce using rule 11 (PrimitiveType -> SHORT .)
    INSTANCEOF      reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_EQ           reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_NE           reduce using rule 11 (PrimitiveType -> SHORT .)
    &               reduce using rule 11 (PrimitiveType -> SHORT .)
    ^               reduce using rule 11 (PrimitiveType -> SHORT .)
    |               reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_LAND         reduce using rule 11 (PrimitiveType -> SHORT .)
    ?               reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_LOR          reduce using rule 11 (PrimitiveType -> SHORT .)
    ;               reduce using rule 11 (PrimitiveType -> SHORT .)
    :               reduce using rule 11 (PrimitiveType -> SHORT .)
    ,               reduce using rule 11 (PrimitiveType -> SHORT .)
    }               reduce using rule 11 (PrimitiveType -> SHORT .)
    ]               reduce using rule 11 (PrimitiveType -> SHORT .)
    IMPLEMENTS      reduce using rule 11 (PrimitiveType -> SHORT .)
    {               reduce using rule 11 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> SHORT .)
    (               reduce using rule 11 (PrimitiveType -> SHORT .)


state 53

    (68) FieldDeclaration -> ConstructorDeclaration .

    ;               reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    }               reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    {               reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    ABSTRACT        reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    FINAL           reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    PROTECTED       reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    TRANSIENT       reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    VOLATILE        reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    NATIVE          reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    SYNCHRONIZED    reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    INTERFACE       reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 68 (FieldDeclaration -> ConstructorDeclaration .)


state 54

    (66) FieldDeclaration -> FieldVariableDeclaration . ;

    ;               shift and go to state 90


state 55

    (71) FieldDeclaration -> TypeDeclaration .

    ;               reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    }               reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    {               reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    ABSTRACT        reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    FINAL           reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    PROTECTED       reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    TRANSIENT       reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    VOLATILE        reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    NATIVE          reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    SYNCHRONIZED    reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    INTERFACE       reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 71 (FieldDeclaration -> TypeDeclaration .)


state 56

    (4) TypeName -> PrimitiveType .

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    )               reduce using rule 4 (TypeName -> PrimitiveType .)
    ,               reduce using rule 4 (TypeName -> PrimitiveType .)
    IMPLEMENTS      reduce using rule 4 (TypeName -> PrimitiveType .)
    {               reduce using rule 4 (TypeName -> PrimitiveType .)
    (               reduce using rule 4 (TypeName -> PrimitiveType .)
    <               reduce using rule 4 (TypeName -> PrimitiveType .)
    >               reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_LE           reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_GE           reduce using rule 4 (TypeName -> PrimitiveType .)
    INSTANCEOF      reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_EQ           reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_NE           reduce using rule 4 (TypeName -> PrimitiveType .)
    &               reduce using rule 4 (TypeName -> PrimitiveType .)
    ^               reduce using rule 4 (TypeName -> PrimitiveType .)
    |               reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_LAND         reduce using rule 4 (TypeName -> PrimitiveType .)
    ?               reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_LOR          reduce using rule 4 (TypeName -> PrimitiveType .)
    ;               reduce using rule 4 (TypeName -> PrimitiveType .)
    :               reduce using rule 4 (TypeName -> PrimitiveType .)
    }               reduce using rule 4 (TypeName -> PrimitiveType .)
    ]               reduce using rule 4 (TypeName -> PrimitiveType .)


state 57

    (69) FieldDeclaration -> StaticInitializer .

    ;               reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    }               reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    {               reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    ABSTRACT        reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    FINAL           reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    PROTECTED       reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    TRANSIENT       reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    VOLATILE        reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    NATIVE          reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    SYNCHRONIZED    reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    INTERFACE       reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 69 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 69 (FieldDeclaration -> StaticInitializer .)


state 58

    (106) StaticInitializer -> STATIC . Block
    (54) Modifier -> STATIC .
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    IDENTIFIER      reduce using rule 54 (Modifier -> STATIC .)
    ABSTRACT        reduce using rule 54 (Modifier -> STATIC .)
    FINAL           reduce using rule 54 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 54 (Modifier -> STATIC .)
    PROTECTED       reduce using rule 54 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 54 (Modifier -> STATIC .)
    STATIC          reduce using rule 54 (Modifier -> STATIC .)
    TRANSIENT       reduce using rule 54 (Modifier -> STATIC .)
    VOLATILE        reduce using rule 54 (Modifier -> STATIC .)
    NATIVE          reduce using rule 54 (Modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 54 (Modifier -> STATIC .)
    CLASS           reduce using rule 54 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 54 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 54 (Modifier -> STATIC .)
    CHAR            reduce using rule 54 (Modifier -> STATIC .)
    BYTE            reduce using rule 54 (Modifier -> STATIC .)
    SHORT           reduce using rule 54 (Modifier -> STATIC .)
    INT             reduce using rule 54 (Modifier -> STATIC .)
    LONG            reduce using rule 54 (Modifier -> STATIC .)
    FLOAT           reduce using rule 54 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 54 (Modifier -> STATIC .)
    VOID            reduce using rule 54 (Modifier -> STATIC .)
    {               shift and go to state 79

    Block                          shift and go to state 91

state 59

    (13) PrimitiveType -> LONG .

    .               reduce using rule 13 (PrimitiveType -> LONG .)
    [               reduce using rule 13 (PrimitiveType -> LONG .)
    )               reduce using rule 13 (PrimitiveType -> LONG .)
    <               reduce using rule 13 (PrimitiveType -> LONG .)
    >               reduce using rule 13 (PrimitiveType -> LONG .)
    OP_LE           reduce using rule 13 (PrimitiveType -> LONG .)
    OP_GE           reduce using rule 13 (PrimitiveType -> LONG .)
    INSTANCEOF      reduce using rule 13 (PrimitiveType -> LONG .)
    OP_EQ           reduce using rule 13 (PrimitiveType -> LONG .)
    OP_NE           reduce using rule 13 (PrimitiveType -> LONG .)
    &               reduce using rule 13 (PrimitiveType -> LONG .)
    ^               reduce using rule 13 (PrimitiveType -> LONG .)
    |               reduce using rule 13 (PrimitiveType -> LONG .)
    OP_LAND         reduce using rule 13 (PrimitiveType -> LONG .)
    ?               reduce using rule 13 (PrimitiveType -> LONG .)
    OP_LOR          reduce using rule 13 (PrimitiveType -> LONG .)
    ;               reduce using rule 13 (PrimitiveType -> LONG .)
    :               reduce using rule 13 (PrimitiveType -> LONG .)
    ,               reduce using rule 13 (PrimitiveType -> LONG .)
    }               reduce using rule 13 (PrimitiveType -> LONG .)
    ]               reduce using rule 13 (PrimitiveType -> LONG .)
    IMPLEMENTS      reduce using rule 13 (PrimitiveType -> LONG .)
    {               reduce using rule 13 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> LONG .)
    (               reduce using rule 13 (PrimitiveType -> LONG .)


state 60

    (70) FieldDeclaration -> NonStaticInitializer .

    ;               reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    }               reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    {               reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    ABSTRACT        reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    FINAL           reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    PROTECTED       reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    TRANSIENT       reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    VOLATILE        reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    NATIVE          reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    SYNCHRONIZED    reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    INTERFACE       reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 70 (FieldDeclaration -> NonStaticInitializer .)


state 61

    (73) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (86) MethodDeclaration -> TypeSpecifier . MethodDeclarator Throws MethodBody
    (87) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (74) VariableDeclarators -> . VariableDeclarator
    (75) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (88) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (89) MethodDeclarator -> . DeclaratorName ( )
    (90) MethodDeclarator -> . MethodDeclarator OP_DIM
    (76) VariableDeclarator -> . DeclaratorName
    (77) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (95) DeclaratorName -> . IDENTIFIER
    (96) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 95

    VariableDeclarators            shift and go to state 92
    DeclaratorName                 shift and go to state 93
    MethodDeclarator               shift and go to state 94
    VariableDeclarator             shift and go to state 96

state 62

    (5) TypeName -> QualifiedName .
    (36) QualifiedName -> QualifiedName . . IDENTIFIER

    [               reduce using rule 5 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    )               reduce using rule 5 (TypeName -> QualifiedName .)
    ,               reduce using rule 5 (TypeName -> QualifiedName .)
    IMPLEMENTS      reduce using rule 5 (TypeName -> QualifiedName .)
    {               reduce using rule 5 (TypeName -> QualifiedName .)
    (               reduce using rule 5 (TypeName -> QualifiedName .)
    <               reduce using rule 5 (TypeName -> QualifiedName .)
    >               reduce using rule 5 (TypeName -> QualifiedName .)
    OP_LE           reduce using rule 5 (TypeName -> QualifiedName .)
    OP_GE           reduce using rule 5 (TypeName -> QualifiedName .)
    INSTANCEOF      reduce using rule 5 (TypeName -> QualifiedName .)
    OP_EQ           reduce using rule 5 (TypeName -> QualifiedName .)
    OP_NE           reduce using rule 5 (TypeName -> QualifiedName .)
    &               reduce using rule 5 (TypeName -> QualifiedName .)
    ^               reduce using rule 5 (TypeName -> QualifiedName .)
    |               reduce using rule 5 (TypeName -> QualifiedName .)
    OP_LAND         reduce using rule 5 (TypeName -> QualifiedName .)
    ?               reduce using rule 5 (TypeName -> QualifiedName .)
    OP_LOR          reduce using rule 5 (TypeName -> QualifiedName .)
    ;               reduce using rule 5 (TypeName -> QualifiedName .)
    :               reduce using rule 5 (TypeName -> QualifiedName .)
    }               reduce using rule 5 (TypeName -> QualifiedName .)
    ]               reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 45


state 63

    (2) TypeSpecifier -> TypeName .
    (3) TypeSpecifier -> TypeName . Dims
    (212) Dims -> . OP_DIM
    (213) Dims -> . Dims OP_DIM
    (214) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 2 (TypeSpecifier -> TypeName .)
    <               reduce using rule 2 (TypeSpecifier -> TypeName .)
    >               reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_LE           reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_GE           reduce using rule 2 (TypeSpecifier -> TypeName .)
    INSTANCEOF      reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_EQ           reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_NE           reduce using rule 2 (TypeSpecifier -> TypeName .)
    &               reduce using rule 2 (TypeSpecifier -> TypeName .)
    ^               reduce using rule 2 (TypeSpecifier -> TypeName .)
    |               reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_LAND         reduce using rule 2 (TypeSpecifier -> TypeName .)
    ?               reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_LOR          reduce using rule 2 (TypeSpecifier -> TypeName .)
    ;               reduce using rule 2 (TypeSpecifier -> TypeName .)
    )               reduce using rule 2 (TypeSpecifier -> TypeName .)
    :               reduce using rule 2 (TypeSpecifier -> TypeName .)
    ,               reduce using rule 2 (TypeSpecifier -> TypeName .)
    }               reduce using rule 2 (TypeSpecifier -> TypeName .)
    ]               reduce using rule 2 (TypeSpecifier -> TypeName .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 98
    Dims                           shift and go to state 99

state 64

    (8) PrimitiveType -> BOOLEAN .

    .               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    [               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    )               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    <               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    >               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_LE           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_GE           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    INSTANCEOF      reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_EQ           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_NE           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    &               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ^               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    |               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_LAND         reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ?               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_LOR          reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ;               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    :               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ,               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    }               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ]               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    IMPLEMENTS      reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    {               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    (               reduce using rule 8 (PrimitiveType -> BOOLEAN .)


state 65

    (104) ConstructorDeclarator -> IDENTIFIER . ( ParameterList )
    (105) ConstructorDeclarator -> IDENTIFIER . ( )
    (35) QualifiedName -> IDENTIFIER .

    (               shift and go to state 100
    .               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 35 (QualifiedName -> IDENTIFIER .)


state 66

    (67) FieldDeclaration -> MethodDeclaration .

    ;               reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    }               reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    {               reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    ABSTRACT        reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    FINAL           reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    PROTECTED       reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    TRANSIENT       reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    VOLATILE        reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    NATIVE          reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    SYNCHRONIZED    reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    INTERFACE       reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 67 (FieldDeclaration -> MethodDeclaration .)


state 67

    (9) PrimitiveType -> CHAR .

    .               reduce using rule 9 (PrimitiveType -> CHAR .)
    [               reduce using rule 9 (PrimitiveType -> CHAR .)
    )               reduce using rule 9 (PrimitiveType -> CHAR .)
    <               reduce using rule 9 (PrimitiveType -> CHAR .)
    >               reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_LE           reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_GE           reduce using rule 9 (PrimitiveType -> CHAR .)
    INSTANCEOF      reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_EQ           reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_NE           reduce using rule 9 (PrimitiveType -> CHAR .)
    &               reduce using rule 9 (PrimitiveType -> CHAR .)
    ^               reduce using rule 9 (PrimitiveType -> CHAR .)
    |               reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_LAND         reduce using rule 9 (PrimitiveType -> CHAR .)
    ?               reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_LOR          reduce using rule 9 (PrimitiveType -> CHAR .)
    ;               reduce using rule 9 (PrimitiveType -> CHAR .)
    :               reduce using rule 9 (PrimitiveType -> CHAR .)
    ,               reduce using rule 9 (PrimitiveType -> CHAR .)
    }               reduce using rule 9 (PrimitiveType -> CHAR .)
    ]               reduce using rule 9 (PrimitiveType -> CHAR .)
    IMPLEMENTS      reduce using rule 9 (PrimitiveType -> CHAR .)
    {               reduce using rule 9 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> CHAR .)
    (               reduce using rule 9 (PrimitiveType -> CHAR .)


state 68

    (72) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (84) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator Throws MethodBody
    (85) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (100) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Throws Block
    (101) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Block
    (48) Modifiers -> Modifiers . Modifier
    (39) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> Modifiers . ClassWord IDENTIFIER Extends
    (41) ClassHeader -> Modifiers . ClassWord IDENTIFIER Interfaces
    (43) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (105) ConstructorDeclarator -> . IDENTIFIER ( )
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 65
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    STATIC          shift and go to state 25
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    QualifiedName                  shift and go to state 62
    ConstructorDeclarator          shift and go to state 102
    ClassWord                      shift and go to state 31
    PrimitiveType                  shift and go to state 56
    TypeSpecifier                  shift and go to state 101
    TypeName                       shift and go to state 63
    Modifier                       shift and go to state 32

state 69

    (16) PrimitiveType -> VOID .

    .               reduce using rule 16 (PrimitiveType -> VOID .)
    [               reduce using rule 16 (PrimitiveType -> VOID .)
    )               reduce using rule 16 (PrimitiveType -> VOID .)
    <               reduce using rule 16 (PrimitiveType -> VOID .)
    >               reduce using rule 16 (PrimitiveType -> VOID .)
    OP_LE           reduce using rule 16 (PrimitiveType -> VOID .)
    OP_GE           reduce using rule 16 (PrimitiveType -> VOID .)
    INSTANCEOF      reduce using rule 16 (PrimitiveType -> VOID .)
    OP_EQ           reduce using rule 16 (PrimitiveType -> VOID .)
    OP_NE           reduce using rule 16 (PrimitiveType -> VOID .)
    &               reduce using rule 16 (PrimitiveType -> VOID .)
    ^               reduce using rule 16 (PrimitiveType -> VOID .)
    |               reduce using rule 16 (PrimitiveType -> VOID .)
    OP_LAND         reduce using rule 16 (PrimitiveType -> VOID .)
    ?               reduce using rule 16 (PrimitiveType -> VOID .)
    OP_LOR          reduce using rule 16 (PrimitiveType -> VOID .)
    ;               reduce using rule 16 (PrimitiveType -> VOID .)
    :               reduce using rule 16 (PrimitiveType -> VOID .)
    ,               reduce using rule 16 (PrimitiveType -> VOID .)
    }               reduce using rule 16 (PrimitiveType -> VOID .)
    ]               reduce using rule 16 (PrimitiveType -> VOID .)
    IMPLEMENTS      reduce using rule 16 (PrimitiveType -> VOID .)
    {               reduce using rule 16 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> VOID .)
    (               reduce using rule 16 (PrimitiveType -> VOID .)


state 70

    (37) TypeDeclaration -> ClassHeader { FieldDeclarations . }
    (63) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (64) FieldDeclarationOptSemi -> . FieldDeclaration
    (65) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (66) FieldDeclaration -> . FieldVariableDeclaration ;
    (67) FieldDeclaration -> . MethodDeclaration
    (68) FieldDeclaration -> . ConstructorDeclaration
    (69) FieldDeclaration -> . StaticInitializer
    (70) FieldDeclaration -> . NonStaticInitializer
    (71) FieldDeclaration -> . TypeDeclaration
    (72) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (73) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (84) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (86) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (100) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (102) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Block
    (106) StaticInitializer -> . STATIC Block
    (107) NonStaticInitializer -> . Block
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (105) ConstructorDeclarator -> . IDENTIFIER ( )
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 104
    STATIC          shift and go to state 58
    IDENTIFIER      shift and go to state 65
    {               shift and go to state 79
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    ConstructorDeclaration         shift and go to state 53
    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 60
    TypeSpecifier                  shift and go to state 61
    QualifiedName                  shift and go to state 62
    TypeName                       shift and go to state 63
    MethodDeclaration              shift and go to state 66
    Modifiers                      shift and go to state 68
    Modifier                       shift and go to state 17
    Block                          shift and go to state 71
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 103
    ConstructorDeclarator          shift and go to state 73
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 78

state 71

    (107) NonStaticInitializer -> Block .

    ;               reduce using rule 107 (NonStaticInitializer -> Block .)
    }               reduce using rule 107 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 107 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 107 (NonStaticInitializer -> Block .)
    {               reduce using rule 107 (NonStaticInitializer -> Block .)
    ABSTRACT        reduce using rule 107 (NonStaticInitializer -> Block .)
    FINAL           reduce using rule 107 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 107 (NonStaticInitializer -> Block .)
    PROTECTED       reduce using rule 107 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 107 (NonStaticInitializer -> Block .)
    TRANSIENT       reduce using rule 107 (NonStaticInitializer -> Block .)
    VOLATILE        reduce using rule 107 (NonStaticInitializer -> Block .)
    NATIVE          reduce using rule 107 (NonStaticInitializer -> Block .)
    SYNCHRONIZED    reduce using rule 107 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 107 (NonStaticInitializer -> Block .)
    INTERFACE       reduce using rule 107 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 107 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 107 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 107 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 107 (NonStaticInitializer -> Block .)
    INT             reduce using rule 107 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 107 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 107 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 107 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 107 (NonStaticInitializer -> Block .)


state 72

    (62) FieldDeclarations -> FieldDeclarationOptSemi .

    }               reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    {               reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    ABSTRACT        reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FINAL           reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PROTECTED       reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    TRANSIENT       reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOLATILE        reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    NATIVE          reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 62 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 73

    (102) ConstructorDeclaration -> ConstructorDeclarator . Throws Block
    (103) ConstructorDeclaration -> ConstructorDeclarator . Block
    (97) Throws -> . THROWS ClassNameList
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    THROWS          shift and go to state 105
    {               shift and go to state 79

    Throws                         shift and go to state 106
    Block                          shift and go to state 107

state 74

    (12) PrimitiveType -> INT .

    .               reduce using rule 12 (PrimitiveType -> INT .)
    [               reduce using rule 12 (PrimitiveType -> INT .)
    )               reduce using rule 12 (PrimitiveType -> INT .)
    <               reduce using rule 12 (PrimitiveType -> INT .)
    >               reduce using rule 12 (PrimitiveType -> INT .)
    OP_LE           reduce using rule 12 (PrimitiveType -> INT .)
    OP_GE           reduce using rule 12 (PrimitiveType -> INT .)
    INSTANCEOF      reduce using rule 12 (PrimitiveType -> INT .)
    OP_EQ           reduce using rule 12 (PrimitiveType -> INT .)
    OP_NE           reduce using rule 12 (PrimitiveType -> INT .)
    &               reduce using rule 12 (PrimitiveType -> INT .)
    ^               reduce using rule 12 (PrimitiveType -> INT .)
    |               reduce using rule 12 (PrimitiveType -> INT .)
    OP_LAND         reduce using rule 12 (PrimitiveType -> INT .)
    ?               reduce using rule 12 (PrimitiveType -> INT .)
    OP_LOR          reduce using rule 12 (PrimitiveType -> INT .)
    ;               reduce using rule 12 (PrimitiveType -> INT .)
    :               reduce using rule 12 (PrimitiveType -> INT .)
    ,               reduce using rule 12 (PrimitiveType -> INT .)
    }               reduce using rule 12 (PrimitiveType -> INT .)
    ]               reduce using rule 12 (PrimitiveType -> INT .)
    IMPLEMENTS      reduce using rule 12 (PrimitiveType -> INT .)
    {               reduce using rule 12 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> INT .)
    (               reduce using rule 12 (PrimitiveType -> INT .)


state 75

    (15) PrimitiveType -> DOUBLE .

    .               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    [               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    )               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    <               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    >               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_LE           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_GE           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    INSTANCEOF      reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_EQ           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_NE           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    &               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ^               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    |               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_LAND         reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ?               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_LOR          reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ;               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    :               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ,               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    }               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ]               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    IMPLEMENTS      reduce using rule 15 (PrimitiveType -> DOUBLE .)
    {               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> DOUBLE .)
    (               reduce using rule 15 (PrimitiveType -> DOUBLE .)


state 76

    (14) PrimitiveType -> FLOAT .

    .               reduce using rule 14 (PrimitiveType -> FLOAT .)
    [               reduce using rule 14 (PrimitiveType -> FLOAT .)
    )               reduce using rule 14 (PrimitiveType -> FLOAT .)
    <               reduce using rule 14 (PrimitiveType -> FLOAT .)
    >               reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_LE           reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_GE           reduce using rule 14 (PrimitiveType -> FLOAT .)
    INSTANCEOF      reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_EQ           reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_NE           reduce using rule 14 (PrimitiveType -> FLOAT .)
    &               reduce using rule 14 (PrimitiveType -> FLOAT .)
    ^               reduce using rule 14 (PrimitiveType -> FLOAT .)
    |               reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_LAND         reduce using rule 14 (PrimitiveType -> FLOAT .)
    ?               reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_LOR          reduce using rule 14 (PrimitiveType -> FLOAT .)
    ;               reduce using rule 14 (PrimitiveType -> FLOAT .)
    :               reduce using rule 14 (PrimitiveType -> FLOAT .)
    ,               reduce using rule 14 (PrimitiveType -> FLOAT .)
    }               reduce using rule 14 (PrimitiveType -> FLOAT .)
    ]               reduce using rule 14 (PrimitiveType -> FLOAT .)
    IMPLEMENTS      reduce using rule 14 (PrimitiveType -> FLOAT .)
    {               reduce using rule 14 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> FLOAT .)
    (               reduce using rule 14 (PrimitiveType -> FLOAT .)


state 77

    (10) PrimitiveType -> BYTE .

    .               reduce using rule 10 (PrimitiveType -> BYTE .)
    [               reduce using rule 10 (PrimitiveType -> BYTE .)
    )               reduce using rule 10 (PrimitiveType -> BYTE .)
    <               reduce using rule 10 (PrimitiveType -> BYTE .)
    >               reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_LE           reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_GE           reduce using rule 10 (PrimitiveType -> BYTE .)
    INSTANCEOF      reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_EQ           reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_NE           reduce using rule 10 (PrimitiveType -> BYTE .)
    &               reduce using rule 10 (PrimitiveType -> BYTE .)
    ^               reduce using rule 10 (PrimitiveType -> BYTE .)
    |               reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_LAND         reduce using rule 10 (PrimitiveType -> BYTE .)
    ?               reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_LOR          reduce using rule 10 (PrimitiveType -> BYTE .)
    ;               reduce using rule 10 (PrimitiveType -> BYTE .)
    :               reduce using rule 10 (PrimitiveType -> BYTE .)
    ,               reduce using rule 10 (PrimitiveType -> BYTE .)
    }               reduce using rule 10 (PrimitiveType -> BYTE .)
    ]               reduce using rule 10 (PrimitiveType -> BYTE .)
    IMPLEMENTS      reduce using rule 10 (PrimitiveType -> BYTE .)
    {               reduce using rule 10 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> BYTE .)
    (               reduce using rule 10 (PrimitiveType -> BYTE .)


state 78

    (64) FieldDeclarationOptSemi -> FieldDeclaration .
    (65) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    }               reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    {               reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    ABSTRACT        reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FINAL           reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PROTECTED       reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    TRANSIENT       reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOLATILE        reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    NATIVE          reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SYNCHRONIZED    reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INTERFACE       reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 64 (FieldDeclarationOptSemi -> FieldDeclaration .)
    ;               shift and go to state 27

    SemiColons                     shift and go to state 108

state 79

    (110) Block -> { . LocalVariableDeclarationsAndStatements }
    (111) Block -> { . }
    (112) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (113) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (114) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (115) LocalVariableDeclarationOrStatement -> . Statement
    (116) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ;
    (117) LocalVariableDeclarationStatement -> . FINAL TypeSpecifier VariableDeclarators ;
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (268) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 186
    FINAL           shift and go to state 124
    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 111
    AndExpression                  shift and go to state 112
    MultiplicativeExpression       shift and go to state 127
    TypeSpecifier                  shift and go to state 154
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    QualifiedName                  shift and go to state 175
    ComplexPrimaryNoParenthesis    shift and go to state 126
    GuardingStatement              shift and go to state 165
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    TypeName                       shift and go to state 63
    ConditionalOrExpression        shift and go to state 158
    LocalVariableDeclarationStatement shift and go to state 177
    ExpressionStatement            shift and go to state 109
    SelectionStatement             shift and go to state 131
    LocalVariableDeclarationsAndStatements shift and go to state 179
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 110
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    LocalVariableDeclarationOrStatement shift and go to state 144
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 80

    (38) TypeDeclaration -> ClassHeader { } .

    ;               reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    CLASS           reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    INTERFACE       reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    ABSTRACT        reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    FINAL           reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    PUBLIC          reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    PROTECTED       reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    PRIVATE         reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    STATIC          reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    TRANSIENT       reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    VOLATILE        reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    NATIVE          reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    SYNCHRONIZED    reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    $end            reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    }               reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    IDENTIFIER      reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    {               reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    BOOLEAN         reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    CHAR            reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    BYTE            reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    SHORT           reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    INT             reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    LONG            reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    FLOAT           reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    DOUBLE          reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)
    VOID            reduce using rule 38 (TypeDeclaration -> ClassHeader { } .)


state 81

    (34) ImportStatement -> IMPORT QualifiedName . * . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    ;               shift and go to state 27

    SemiColons                     shift and go to state 189

state 82

    (36) QualifiedName -> QualifiedName . IDENTIFIER .

    .               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    [               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    =               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_EQ          reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    *               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    /               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    %               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    +               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    -               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_SOME        reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    <               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    >               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LE           reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_GE           reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    INSTANCEOF      reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_EQ           reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_NE           reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    &               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ^               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    |               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LAND         reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ?               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LOR          reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ;               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    )               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    :               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ,               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    }               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ]               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    (               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    IDENTIFIER      reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    {               reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)
    IMPLEMENTS      reduce using rule 36 (QualifiedName -> QualifiedName . IDENTIFIER .)


state 83

    (41) ClassHeader -> Modifiers ClassWord IDENTIFIER Interfaces .

    {               reduce using rule 41 (ClassHeader -> Modifiers ClassWord IDENTIFIER Interfaces .)


state 84

    (39) ClassHeader -> Modifiers ClassWord IDENTIFIER Extends . Interfaces
    (40) ClassHeader -> Modifiers ClassWord IDENTIFIER Extends .
    (109) Extends -> Extends . , TypeName
    (61) Interfaces -> . IMPLEMENTS ClassNameList

    {               reduce using rule 40 (ClassHeader -> Modifiers ClassWord IDENTIFIER Extends .)
    ,               shift and go to state 89
    IMPLEMENTS      shift and go to state 48

    Interfaces                     shift and go to state 190

state 85

    (6) ClassNameList -> QualifiedName .
    (36) QualifiedName -> QualifiedName . . IDENTIFIER

    ,               reduce using rule 6 (ClassNameList -> QualifiedName .)
    {               reduce using rule 6 (ClassNameList -> QualifiedName .)
    ;               reduce using rule 6 (ClassNameList -> QualifiedName .)
    .               shift and go to state 45


state 86

    (61) Interfaces -> IMPLEMENTS ClassNameList .
    (7) ClassNameList -> ClassNameList . , QualifiedName

    {               reduce using rule 61 (Interfaces -> IMPLEMENTS ClassNameList .)
    ,               shift and go to state 191


state 87

    (108) Extends -> EXTENDS TypeName .

    ,               reduce using rule 108 (Extends -> EXTENDS TypeName .)
    IMPLEMENTS      reduce using rule 108 (Extends -> EXTENDS TypeName .)
    {               reduce using rule 108 (Extends -> EXTENDS TypeName .)


state 88

    (42) ClassHeader -> ClassWord IDENTIFIER Extends Interfaces .

    {               reduce using rule 42 (ClassHeader -> ClassWord IDENTIFIER Extends Interfaces .)


state 89

    (109) Extends -> Extends , . TypeName
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    TypeName                       shift and go to state 192
    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56

state 90

    (66) FieldDeclaration -> FieldVariableDeclaration ; .

    ;               reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    }               reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    STATIC          reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    IDENTIFIER      reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    {               reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    ABSTRACT        reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    FINAL           reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PUBLIC          reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PROTECTED       reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PRIVATE         reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    TRANSIENT       reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    VOLATILE        reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    NATIVE          reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    SYNCHRONIZED    reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CLASS           reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INTERFACE       reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BOOLEAN         reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CHAR            reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BYTE            reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    SHORT           reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INT             reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    LONG            reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    FLOAT           reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    DOUBLE          reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)
    VOID            reduce using rule 66 (FieldDeclaration -> FieldVariableDeclaration ; .)


state 91

    (106) StaticInitializer -> STATIC Block .

    ;               reduce using rule 106 (StaticInitializer -> STATIC Block .)
    }               reduce using rule 106 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 106 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 106 (StaticInitializer -> STATIC Block .)
    {               reduce using rule 106 (StaticInitializer -> STATIC Block .)
    ABSTRACT        reduce using rule 106 (StaticInitializer -> STATIC Block .)
    FINAL           reduce using rule 106 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 106 (StaticInitializer -> STATIC Block .)
    PROTECTED       reduce using rule 106 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 106 (StaticInitializer -> STATIC Block .)
    TRANSIENT       reduce using rule 106 (StaticInitializer -> STATIC Block .)
    VOLATILE        reduce using rule 106 (StaticInitializer -> STATIC Block .)
    NATIVE          reduce using rule 106 (StaticInitializer -> STATIC Block .)
    SYNCHRONIZED    reduce using rule 106 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 106 (StaticInitializer -> STATIC Block .)
    INTERFACE       reduce using rule 106 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 106 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 106 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 106 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 106 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 106 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 106 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 106 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 106 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 106 (StaticInitializer -> STATIC Block .)


state 92

    (73) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (75) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 73 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 193


state 93

    (88) MethodDeclarator -> DeclaratorName . ( ParameterList )
    (89) MethodDeclarator -> DeclaratorName . ( )
    (76) VariableDeclarator -> DeclaratorName .
    (77) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (96) DeclaratorName -> DeclaratorName . OP_DIM
    (214) OP_DIM -> . [ ]

    (               shift and go to state 194
    ,               reduce using rule 76 (VariableDeclarator -> DeclaratorName .)
    ;               reduce using rule 76 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 195
    [               shift and go to state 97

    OP_DIM                         shift and go to state 196

state 94

    (86) MethodDeclaration -> TypeSpecifier MethodDeclarator . Throws MethodBody
    (87) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (90) MethodDeclarator -> MethodDeclarator . OP_DIM
    (97) Throws -> . THROWS ClassNameList
    (98) MethodBody -> . Block
    (99) MethodBody -> . ;
    (214) OP_DIM -> . [ ]
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    THROWS          shift and go to state 105
    ;               shift and go to state 199
    [               shift and go to state 97
    {               shift and go to state 79

    MethodBody                     shift and go to state 197
    Throws                         shift and go to state 201
    OP_DIM                         shift and go to state 200
    Block                          shift and go to state 198

state 95

    (95) DeclaratorName -> IDENTIFIER .

    =               reduce using rule 95 (DeclaratorName -> IDENTIFIER .)
    [               reduce using rule 95 (DeclaratorName -> IDENTIFIER .)
    ,               reduce using rule 95 (DeclaratorName -> IDENTIFIER .)
    ;               reduce using rule 95 (DeclaratorName -> IDENTIFIER .)
    )               reduce using rule 95 (DeclaratorName -> IDENTIFIER .)
    (               reduce using rule 95 (DeclaratorName -> IDENTIFIER .)


state 96

    (74) VariableDeclarators -> VariableDeclarator .

    ;               reduce using rule 74 (VariableDeclarators -> VariableDeclarator .)
    ,               reduce using rule 74 (VariableDeclarators -> VariableDeclarator .)


state 97

    (214) OP_DIM -> [ . ]

    ]               shift and go to state 202


state 98

    (212) Dims -> OP_DIM .

    [               reduce using rule 212 (Dims -> OP_DIM .)
    {               reduce using rule 212 (Dims -> OP_DIM .)
    .               reduce using rule 212 (Dims -> OP_DIM .)
    OPT_INC_DEC     reduce using rule 212 (Dims -> OP_DIM .)
    =               reduce using rule 212 (Dims -> OP_DIM .)
    OPT_EQ          reduce using rule 212 (Dims -> OP_DIM .)
    *               reduce using rule 212 (Dims -> OP_DIM .)
    /               reduce using rule 212 (Dims -> OP_DIM .)
    %               reduce using rule 212 (Dims -> OP_DIM .)
    +               reduce using rule 212 (Dims -> OP_DIM .)
    -               reduce using rule 212 (Dims -> OP_DIM .)
    OPT_SOME        reduce using rule 212 (Dims -> OP_DIM .)
    <               reduce using rule 212 (Dims -> OP_DIM .)
    >               reduce using rule 212 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 212 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 212 (Dims -> OP_DIM .)
    INSTANCEOF      reduce using rule 212 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 212 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 212 (Dims -> OP_DIM .)
    &               reduce using rule 212 (Dims -> OP_DIM .)
    ^               reduce using rule 212 (Dims -> OP_DIM .)
    |               reduce using rule 212 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 212 (Dims -> OP_DIM .)
    ?               reduce using rule 212 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 212 (Dims -> OP_DIM .)
    ;               reduce using rule 212 (Dims -> OP_DIM .)
    )               reduce using rule 212 (Dims -> OP_DIM .)
    :               reduce using rule 212 (Dims -> OP_DIM .)
    ,               reduce using rule 212 (Dims -> OP_DIM .)
    }               reduce using rule 212 (Dims -> OP_DIM .)
    ]               reduce using rule 212 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 212 (Dims -> OP_DIM .)


state 99

    (3) TypeSpecifier -> TypeName Dims .
    (213) Dims -> Dims . OP_DIM
    (214) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    <               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    >               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_LE           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_GE           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    INSTANCEOF      reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_EQ           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_NE           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    &               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ^               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    |               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_LAND         reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ?               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_LOR          reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ;               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    )               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    :               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ,               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    }               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ]               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 203

state 100

    (104) ConstructorDeclarator -> IDENTIFIER ( . ParameterList )
    (105) ConstructorDeclarator -> IDENTIFIER ( . )
    (91) ParameterList -> . Parameter
    (92) ParameterList -> . ParameterList , Parameter
    (93) Parameter -> . TypeSpecifier DeclaratorName
    (94) Parameter -> . FINAL TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 206
    FINAL           shift and go to state 205
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56
    ParameterList                  shift and go to state 208
    TypeName                       shift and go to state 63
    Parameter                      shift and go to state 204
    TypeSpecifier                  shift and go to state 207

state 101

    (72) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (84) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator Throws MethodBody
    (85) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (74) VariableDeclarators -> . VariableDeclarator
    (75) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (88) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (89) MethodDeclarator -> . DeclaratorName ( )
    (90) MethodDeclarator -> . MethodDeclarator OP_DIM
    (76) VariableDeclarator -> . DeclaratorName
    (77) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (95) DeclaratorName -> . IDENTIFIER
    (96) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 95

    VariableDeclarators            shift and go to state 209
    DeclaratorName                 shift and go to state 93
    MethodDeclarator               shift and go to state 210
    VariableDeclarator             shift and go to state 96

state 102

    (100) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Throws Block
    (101) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Block
    (97) Throws -> . THROWS ClassNameList
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    THROWS          shift and go to state 105
    {               shift and go to state 79

    Throws                         shift and go to state 211
    Block                          shift and go to state 212

state 103

    (63) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    }               reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    {               reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    ABSTRACT        reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FINAL           reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PROTECTED       reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    TRANSIENT       reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOLATILE        reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    NATIVE          reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SYNCHRONIZED    reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 63 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 104

    (37) TypeDeclaration -> ClassHeader { FieldDeclarations } .

    ;               reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CLASS           reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INTERFACE       reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    ABSTRACT        reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    FINAL           reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PUBLIC          reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PROTECTED       reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PRIVATE         reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    STATIC          reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    TRANSIENT       reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    VOLATILE        reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    NATIVE          reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    SYNCHRONIZED    reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    $end            reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    }               reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    IDENTIFIER      reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    {               reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BOOLEAN         reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CHAR            reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BYTE            reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    SHORT           reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INT             reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    LONG            reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    FLOAT           reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    DOUBLE          reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    VOID            reduce using rule 37 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)


state 105

    (97) Throws -> THROWS . ClassNameList
    (6) ClassNameList -> . QualifiedName
    (7) ClassNameList -> . ClassNameList , QualifiedName
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 85
    ClassNameList                  shift and go to state 213

state 106

    (102) ConstructorDeclaration -> ConstructorDeclarator Throws . Block
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    {               shift and go to state 79

    Block                          shift and go to state 214

state 107

    (103) ConstructorDeclaration -> ConstructorDeclarator Block .

    ;               reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    }               reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    STATIC          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    {               reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    ABSTRACT        reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FINAL           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PROTECTED       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    TRANSIENT       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOLATILE        reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    NATIVE          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SYNCHRONIZED    reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CLASS           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CHAR            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BYTE            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SHORT           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INT             reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LONG            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FLOAT           reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOID            reduce using rule 103 (ConstructorDeclaration -> ConstructorDeclarator Block .)


state 108

    (65) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    }               reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    {               reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    ABSTRACT        reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FINAL           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PROTECTED       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    TRANSIENT       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOLATILE        reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    NATIVE          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SYNCHRONIZED    reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INTERFACE       reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 65 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    ;               shift and go to state 41


state 109

    (120) Statement -> ExpressionStatement . ;

    ;               shift and go to state 215


state 110

    (4) TypeName -> PrimitiveType .
    (185) FieldAccess -> PrimitiveType . . CLASS

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    .               shift and go to state 216


state 111

    (115) LocalVariableDeclarationOrStatement -> Statement .

    }               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    FINAL           reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    ;               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    SWITCH          reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    CONTINUE        reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    THROW           reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    SYNCHRONIZED    reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    TRY             reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    {               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    OPT_INC_DEC     reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    +               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    -               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    !               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    (               reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT_LITERAL   reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    INT_LITERAL     reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR_LITERAL    reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    STRING_LITERAL  reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOL            reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 115 (LocalVariableDeclarationOrStatement -> Statement .)


state 112

    (254) ExclusiveOrExpression -> AndExpression .
    (253) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    ?               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    )               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    ,               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    }               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    ;               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    :               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    ]               reduce using rule 254 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 217


state 113

    (169) ComplexPrimary -> ( . Expression )
    (228) CastExpression -> ( . PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> ( . ClassTypeExpression ) CastExpression
    (230) CastExpression -> ( . Expression ) LogicalUnaryExpression
    (268) Expression -> . AssignmentExpression
    (231) PrimitiveTypeExpression -> . PrimitiveType
    (232) PrimitiveTypeExpression -> . PrimitiveType Dims
    (233) ClassTypeExpression -> . QualifiedName Dims
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 218
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 222
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 220
    AdditiveExpression             shift and go to state 161
    PrimitiveTypeExpression        shift and go to state 221
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    ClassTypeExpression            shift and go to state 219
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 114

    (127) LabelStatement -> IDENTIFIER . :
    (35) QualifiedName -> IDENTIFIER .

    :               shift and go to state 223
    .               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 35 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 35 (QualifiedName -> IDENTIFIER .)


state 115

    (191) SpecialName -> THIS .

    .               reduce using rule 191 (SpecialName -> THIS .)
    OPT_INC_DEC     reduce using rule 191 (SpecialName -> THIS .)
    =               reduce using rule 191 (SpecialName -> THIS .)
    OPT_EQ          reduce using rule 191 (SpecialName -> THIS .)
    *               reduce using rule 191 (SpecialName -> THIS .)
    /               reduce using rule 191 (SpecialName -> THIS .)
    %               reduce using rule 191 (SpecialName -> THIS .)
    +               reduce using rule 191 (SpecialName -> THIS .)
    -               reduce using rule 191 (SpecialName -> THIS .)
    OPT_SOME        reduce using rule 191 (SpecialName -> THIS .)
    <               reduce using rule 191 (SpecialName -> THIS .)
    >               reduce using rule 191 (SpecialName -> THIS .)
    OP_LE           reduce using rule 191 (SpecialName -> THIS .)
    OP_GE           reduce using rule 191 (SpecialName -> THIS .)
    INSTANCEOF      reduce using rule 191 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 191 (SpecialName -> THIS .)
    OP_NE           reduce using rule 191 (SpecialName -> THIS .)
    &               reduce using rule 191 (SpecialName -> THIS .)
    ^               reduce using rule 191 (SpecialName -> THIS .)
    |               reduce using rule 191 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 191 (SpecialName -> THIS .)
    ?               reduce using rule 191 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 191 (SpecialName -> THIS .)
    ]               reduce using rule 191 (SpecialName -> THIS .)
    (               reduce using rule 191 (SpecialName -> THIS .)
    )               reduce using rule 191 (SpecialName -> THIS .)
    ;               reduce using rule 191 (SpecialName -> THIS .)
    :               reduce using rule 191 (SpecialName -> THIS .)
    ,               reduce using rule 191 (SpecialName -> THIS .)
    }               reduce using rule 191 (SpecialName -> THIS .)


state 116

    (173) ComplexPrimaryNoParenthesis -> CHAR_LITERAL .

    [               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    .               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OPT_INC_DEC     reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    =               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OPT_EQ          reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    *               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    /               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    %               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    +               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    -               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OPT_SOME        reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    <               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    >               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_LE           reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_GE           reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    INSTANCEOF      reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_EQ           reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_NE           reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    &               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ^               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    |               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_LAND         reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ?               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_LOR          reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    )               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ,               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    (               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ;               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    :               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    }               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ]               reduce using rule 173 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)


state 117

    (260) ConditionalOrExpression -> ConditionalAndExpression .
    (259) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LOR          reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    ;               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    ,               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    )               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    }               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    ]               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    :               reduce using rule 260 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 224


state 118

    (118) Statement -> EmptyStatement .

    WHILE           reduce using rule 118 (Statement -> EmptyStatement .)
    }               reduce using rule 118 (Statement -> EmptyStatement .)
    FINAL           reduce using rule 118 (Statement -> EmptyStatement .)
    ;               reduce using rule 118 (Statement -> EmptyStatement .)
    IDENTIFIER      reduce using rule 118 (Statement -> EmptyStatement .)
    CASE            reduce using rule 118 (Statement -> EmptyStatement .)
    DEFAULT         reduce using rule 118 (Statement -> EmptyStatement .)
    IF              reduce using rule 118 (Statement -> EmptyStatement .)
    SWITCH          reduce using rule 118 (Statement -> EmptyStatement .)
    DO              reduce using rule 118 (Statement -> EmptyStatement .)
    FOR             reduce using rule 118 (Statement -> EmptyStatement .)
    BREAK           reduce using rule 118 (Statement -> EmptyStatement .)
    CONTINUE        reduce using rule 118 (Statement -> EmptyStatement .)
    RETURN          reduce using rule 118 (Statement -> EmptyStatement .)
    THROW           reduce using rule 118 (Statement -> EmptyStatement .)
    SYNCHRONIZED    reduce using rule 118 (Statement -> EmptyStatement .)
    TRY             reduce using rule 118 (Statement -> EmptyStatement .)
    {               reduce using rule 118 (Statement -> EmptyStatement .)
    BOOLEAN         reduce using rule 118 (Statement -> EmptyStatement .)
    CHAR            reduce using rule 118 (Statement -> EmptyStatement .)
    BYTE            reduce using rule 118 (Statement -> EmptyStatement .)
    SHORT           reduce using rule 118 (Statement -> EmptyStatement .)
    INT             reduce using rule 118 (Statement -> EmptyStatement .)
    LONG            reduce using rule 118 (Statement -> EmptyStatement .)
    FLOAT           reduce using rule 118 (Statement -> EmptyStatement .)
    DOUBLE          reduce using rule 118 (Statement -> EmptyStatement .)
    VOID            reduce using rule 118 (Statement -> EmptyStatement .)
    OPT_INC_DEC     reduce using rule 118 (Statement -> EmptyStatement .)
    +               reduce using rule 118 (Statement -> EmptyStatement .)
    -               reduce using rule 118 (Statement -> EmptyStatement .)
    ~               reduce using rule 118 (Statement -> EmptyStatement .)
    !               reduce using rule 118 (Statement -> EmptyStatement .)
    THIS            reduce using rule 118 (Statement -> EmptyStatement .)
    SUPER           reduce using rule 118 (Statement -> EmptyStatement .)
    NULL            reduce using rule 118 (Statement -> EmptyStatement .)
    (               reduce using rule 118 (Statement -> EmptyStatement .)
    FLOAT_LITERAL   reduce using rule 118 (Statement -> EmptyStatement .)
    INT_LITERAL     reduce using rule 118 (Statement -> EmptyStatement .)
    CHAR_LITERAL    reduce using rule 118 (Statement -> EmptyStatement .)
    STRING_LITERAL  reduce using rule 118 (Statement -> EmptyStatement .)
    BOOL            reduce using rule 118 (Statement -> EmptyStatement .)
    NEW             reduce using rule 118 (Statement -> EmptyStatement .)
    ELSE            reduce using rule 118 (Statement -> EmptyStatement .)


state 119

    (119) Statement -> LabelStatement .

    WHILE           reduce using rule 119 (Statement -> LabelStatement .)
    }               reduce using rule 119 (Statement -> LabelStatement .)
    FINAL           reduce using rule 119 (Statement -> LabelStatement .)
    ;               reduce using rule 119 (Statement -> LabelStatement .)
    IDENTIFIER      reduce using rule 119 (Statement -> LabelStatement .)
    CASE            reduce using rule 119 (Statement -> LabelStatement .)
    DEFAULT         reduce using rule 119 (Statement -> LabelStatement .)
    IF              reduce using rule 119 (Statement -> LabelStatement .)
    SWITCH          reduce using rule 119 (Statement -> LabelStatement .)
    DO              reduce using rule 119 (Statement -> LabelStatement .)
    FOR             reduce using rule 119 (Statement -> LabelStatement .)
    BREAK           reduce using rule 119 (Statement -> LabelStatement .)
    CONTINUE        reduce using rule 119 (Statement -> LabelStatement .)
    RETURN          reduce using rule 119 (Statement -> LabelStatement .)
    THROW           reduce using rule 119 (Statement -> LabelStatement .)
    SYNCHRONIZED    reduce using rule 119 (Statement -> LabelStatement .)
    TRY             reduce using rule 119 (Statement -> LabelStatement .)
    {               reduce using rule 119 (Statement -> LabelStatement .)
    BOOLEAN         reduce using rule 119 (Statement -> LabelStatement .)
    CHAR            reduce using rule 119 (Statement -> LabelStatement .)
    BYTE            reduce using rule 119 (Statement -> LabelStatement .)
    SHORT           reduce using rule 119 (Statement -> LabelStatement .)
    INT             reduce using rule 119 (Statement -> LabelStatement .)
    LONG            reduce using rule 119 (Statement -> LabelStatement .)
    FLOAT           reduce using rule 119 (Statement -> LabelStatement .)
    DOUBLE          reduce using rule 119 (Statement -> LabelStatement .)
    VOID            reduce using rule 119 (Statement -> LabelStatement .)
    OPT_INC_DEC     reduce using rule 119 (Statement -> LabelStatement .)
    +               reduce using rule 119 (Statement -> LabelStatement .)
    -               reduce using rule 119 (Statement -> LabelStatement .)
    ~               reduce using rule 119 (Statement -> LabelStatement .)
    !               reduce using rule 119 (Statement -> LabelStatement .)
    THIS            reduce using rule 119 (Statement -> LabelStatement .)
    SUPER           reduce using rule 119 (Statement -> LabelStatement .)
    NULL            reduce using rule 119 (Statement -> LabelStatement .)
    (               reduce using rule 119 (Statement -> LabelStatement .)
    FLOAT_LITERAL   reduce using rule 119 (Statement -> LabelStatement .)
    INT_LITERAL     reduce using rule 119 (Statement -> LabelStatement .)
    CHAR_LITERAL    reduce using rule 119 (Statement -> LabelStatement .)
    STRING_LITERAL  reduce using rule 119 (Statement -> LabelStatement .)
    BOOL            reduce using rule 119 (Statement -> LabelStatement .)
    NEW             reduce using rule 119 (Statement -> LabelStatement .)
    ELSE            reduce using rule 119 (Statement -> LabelStatement .)


state 120

    (151) JumpStatement -> RETURN . Expression ;
    (152) JumpStatement -> RETURN . ;
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 226
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 227
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 121

    (154) GuardingStatement -> SYNCHRONIZED . ( Expression ) Statement

    (               shift and go to state 229


state 122

    (216) PostfixExpression -> RealPostfixExpression .
    (182) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    =               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OPT_EQ          reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    *               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    /               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    %               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    +               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    -               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OPT_SOME        reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    <               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    >               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    INSTANCEOF      reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    ?               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    ;               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    )               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    :               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    ,               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    }               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    ]               reduce using rule 216 (PostfixExpression -> RealPostfixExpression .)
    .               shift and go to state 230


state 123

    (219) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 231
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    ClassAllocationExpression      shift and go to state 148
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 124

    (117) LocalVariableDeclarationStatement -> FINAL . TypeSpecifier VariableDeclarators ;
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 63
    TypeSpecifier                  shift and go to state 234

state 125

    (252) AndExpression -> EqualityExpression .
    (250) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (251) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 252 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 252 (AndExpression -> EqualityExpression .)
    |               reduce using rule 252 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 252 (AndExpression -> EqualityExpression .)
    ?               reduce using rule 252 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 252 (AndExpression -> EqualityExpression .)
    ;               reduce using rule 252 (AndExpression -> EqualityExpression .)
    )               reduce using rule 252 (AndExpression -> EqualityExpression .)
    :               reduce using rule 252 (AndExpression -> EqualityExpression .)
    ,               reduce using rule 252 (AndExpression -> EqualityExpression .)
    }               reduce using rule 252 (AndExpression -> EqualityExpression .)
    ]               reduce using rule 252 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 236
    OP_NE           shift and go to state 235


state 126

    (170) ComplexPrimary -> ComplexPrimaryNoParenthesis .
    (188) MethodAccess -> ComplexPrimaryNoParenthesis .

    [               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    .               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_INC_DEC     reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    *               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    /               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    %               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    +               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    -               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_SOME        reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    <               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    >               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    INSTANCEOF      reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ?               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ;               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    )               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    :               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ,               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    }               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ]               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    =               reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_EQ          reduce using rule 170 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    (               reduce using rule 188 (MethodAccess -> ComplexPrimaryNoParenthesis .)


state 127

    (238) AdditiveExpression -> MultiplicativeExpression .
    (235) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (236) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (237) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    -               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    OPT_SOME        reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    <               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    >               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    ?               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    )               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    ;               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    :               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    ,               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    }               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    ]               reduce using rule 238 (AdditiveExpression -> MultiplicativeExpression .)
    *               shift and go to state 237
    /               shift and go to state 239
    %               shift and go to state 238


state 128

    (225) ArithmeticUnaryOperator -> + .

    (               reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    OPT_INC_DEC     reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    +               reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    -               reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    ~               reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    !               reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    IDENTIFIER      reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    THIS            reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    SUPER           reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    NULL            reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    FLOAT_LITERAL   reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    INT_LITERAL     reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    CHAR_LITERAL    reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    STRING_LITERAL  reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    BOOL            reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    NEW             reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    BOOLEAN         reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    CHAR            reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    BYTE            reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    SHORT           reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    INT             reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    LONG            reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    FLOAT           reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    DOUBLE          reduce using rule 225 (ArithmeticUnaryOperator -> + .)
    VOID            reduce using rule 225 (ArithmeticUnaryOperator -> + .)


state 129

    (178) ComplexPrimaryNoParenthesis -> MethodCall .

    [               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    .               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_INC_DEC     reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    =               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_EQ          reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    *               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    /               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    %               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    +               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    -               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_SOME        reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    <               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    >               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    INSTANCEOF      reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ?               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    )               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ,               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    (               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ;               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    :               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    }               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ]               reduce using rule 178 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 130

    (126) EmptyStatement -> ; .

    WHILE           reduce using rule 126 (EmptyStatement -> ; .)
    }               reduce using rule 126 (EmptyStatement -> ; .)
    FINAL           reduce using rule 126 (EmptyStatement -> ; .)
    ;               reduce using rule 126 (EmptyStatement -> ; .)
    IDENTIFIER      reduce using rule 126 (EmptyStatement -> ; .)
    CASE            reduce using rule 126 (EmptyStatement -> ; .)
    DEFAULT         reduce using rule 126 (EmptyStatement -> ; .)
    IF              reduce using rule 126 (EmptyStatement -> ; .)
    SWITCH          reduce using rule 126 (EmptyStatement -> ; .)
    DO              reduce using rule 126 (EmptyStatement -> ; .)
    FOR             reduce using rule 126 (EmptyStatement -> ; .)
    BREAK           reduce using rule 126 (EmptyStatement -> ; .)
    CONTINUE        reduce using rule 126 (EmptyStatement -> ; .)
    RETURN          reduce using rule 126 (EmptyStatement -> ; .)
    THROW           reduce using rule 126 (EmptyStatement -> ; .)
    SYNCHRONIZED    reduce using rule 126 (EmptyStatement -> ; .)
    TRY             reduce using rule 126 (EmptyStatement -> ; .)
    {               reduce using rule 126 (EmptyStatement -> ; .)
    BOOLEAN         reduce using rule 126 (EmptyStatement -> ; .)
    CHAR            reduce using rule 126 (EmptyStatement -> ; .)
    BYTE            reduce using rule 126 (EmptyStatement -> ; .)
    SHORT           reduce using rule 126 (EmptyStatement -> ; .)
    INT             reduce using rule 126 (EmptyStatement -> ; .)
    LONG            reduce using rule 126 (EmptyStatement -> ; .)
    FLOAT           reduce using rule 126 (EmptyStatement -> ; .)
    DOUBLE          reduce using rule 126 (EmptyStatement -> ; .)
    VOID            reduce using rule 126 (EmptyStatement -> ; .)
    OPT_INC_DEC     reduce using rule 126 (EmptyStatement -> ; .)
    +               reduce using rule 126 (EmptyStatement -> ; .)
    -               reduce using rule 126 (EmptyStatement -> ; .)
    ~               reduce using rule 126 (EmptyStatement -> ; .)
    !               reduce using rule 126 (EmptyStatement -> ; .)
    THIS            reduce using rule 126 (EmptyStatement -> ; .)
    SUPER           reduce using rule 126 (EmptyStatement -> ; .)
    NULL            reduce using rule 126 (EmptyStatement -> ; .)
    (               reduce using rule 126 (EmptyStatement -> ; .)
    FLOAT_LITERAL   reduce using rule 126 (EmptyStatement -> ; .)
    INT_LITERAL     reduce using rule 126 (EmptyStatement -> ; .)
    CHAR_LITERAL    reduce using rule 126 (EmptyStatement -> ; .)
    STRING_LITERAL  reduce using rule 126 (EmptyStatement -> ; .)
    BOOL            reduce using rule 126 (EmptyStatement -> ; .)
    NEW             reduce using rule 126 (EmptyStatement -> ; .)
    ELSE            reduce using rule 126 (EmptyStatement -> ; .)


state 131

    (121) Statement -> SelectionStatement .

    WHILE           reduce using rule 121 (Statement -> SelectionStatement .)
    }               reduce using rule 121 (Statement -> SelectionStatement .)
    FINAL           reduce using rule 121 (Statement -> SelectionStatement .)
    ;               reduce using rule 121 (Statement -> SelectionStatement .)
    IDENTIFIER      reduce using rule 121 (Statement -> SelectionStatement .)
    CASE            reduce using rule 121 (Statement -> SelectionStatement .)
    DEFAULT         reduce using rule 121 (Statement -> SelectionStatement .)
    IF              reduce using rule 121 (Statement -> SelectionStatement .)
    SWITCH          reduce using rule 121 (Statement -> SelectionStatement .)
    DO              reduce using rule 121 (Statement -> SelectionStatement .)
    FOR             reduce using rule 121 (Statement -> SelectionStatement .)
    BREAK           reduce using rule 121 (Statement -> SelectionStatement .)
    CONTINUE        reduce using rule 121 (Statement -> SelectionStatement .)
    RETURN          reduce using rule 121 (Statement -> SelectionStatement .)
    THROW           reduce using rule 121 (Statement -> SelectionStatement .)
    SYNCHRONIZED    reduce using rule 121 (Statement -> SelectionStatement .)
    TRY             reduce using rule 121 (Statement -> SelectionStatement .)
    {               reduce using rule 121 (Statement -> SelectionStatement .)
    BOOLEAN         reduce using rule 121 (Statement -> SelectionStatement .)
    CHAR            reduce using rule 121 (Statement -> SelectionStatement .)
    BYTE            reduce using rule 121 (Statement -> SelectionStatement .)
    SHORT           reduce using rule 121 (Statement -> SelectionStatement .)
    INT             reduce using rule 121 (Statement -> SelectionStatement .)
    LONG            reduce using rule 121 (Statement -> SelectionStatement .)
    FLOAT           reduce using rule 121 (Statement -> SelectionStatement .)
    DOUBLE          reduce using rule 121 (Statement -> SelectionStatement .)
    VOID            reduce using rule 121 (Statement -> SelectionStatement .)
    OPT_INC_DEC     reduce using rule 121 (Statement -> SelectionStatement .)
    +               reduce using rule 121 (Statement -> SelectionStatement .)
    -               reduce using rule 121 (Statement -> SelectionStatement .)
    ~               reduce using rule 121 (Statement -> SelectionStatement .)
    !               reduce using rule 121 (Statement -> SelectionStatement .)
    THIS            reduce using rule 121 (Statement -> SelectionStatement .)
    SUPER           reduce using rule 121 (Statement -> SelectionStatement .)
    NULL            reduce using rule 121 (Statement -> SelectionStatement .)
    (               reduce using rule 121 (Statement -> SelectionStatement .)
    FLOAT_LITERAL   reduce using rule 121 (Statement -> SelectionStatement .)
    INT_LITERAL     reduce using rule 121 (Statement -> SelectionStatement .)
    CHAR_LITERAL    reduce using rule 121 (Statement -> SelectionStatement .)
    STRING_LITERAL  reduce using rule 121 (Statement -> SelectionStatement .)
    BOOL            reduce using rule 121 (Statement -> SelectionStatement .)
    NEW             reduce using rule 121 (Statement -> SelectionStatement .)
    ELSE            reduce using rule 121 (Statement -> SelectionStatement .)


state 132

    (268) Expression -> AssignmentExpression .

    )               reduce using rule 268 (Expression -> AssignmentExpression .)
    ,               reduce using rule 268 (Expression -> AssignmentExpression .)
    }               reduce using rule 268 (Expression -> AssignmentExpression .)
    ;               reduce using rule 268 (Expression -> AssignmentExpression .)
    ]               reduce using rule 268 (Expression -> AssignmentExpression .)
    :               reduce using rule 268 (Expression -> AssignmentExpression .)


state 133

    (137) IterationStatement -> FOR . ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> FOR . ( ForInit ForExpr ) Statement

    (               shift and go to state 240


state 134

    (155) GuardingStatement -> TRY . Block Finally
    (156) GuardingStatement -> TRY . Block Catches
    (157) GuardingStatement -> TRY . Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    {               shift and go to state 79

    Block                          shift and go to state 241

state 135

    (218) UnaryExpression -> OPT_INC_DEC . UnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 242
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MethodCall                     shift and go to state 129
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    ArrayAllocationExpression      shift and go to state 138
    UnaryExpression                shift and go to state 243
    PrimaryExpression              shift and go to state 155
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 136

    (176) ComplexPrimaryNoParenthesis -> ArrayAccess .

    [               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    .               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_INC_DEC     reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    =               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_EQ          reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    *               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    /               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    %               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    +               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    -               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_SOME        reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    <               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    >               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    INSTANCEOF      reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ?               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    )               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ,               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    (               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ;               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    :               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    }               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ]               reduce using rule 176 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 137

    (125) Statement -> Block .

    WHILE           reduce using rule 125 (Statement -> Block .)
    }               reduce using rule 125 (Statement -> Block .)
    FINAL           reduce using rule 125 (Statement -> Block .)
    ;               reduce using rule 125 (Statement -> Block .)
    IDENTIFIER      reduce using rule 125 (Statement -> Block .)
    CASE            reduce using rule 125 (Statement -> Block .)
    DEFAULT         reduce using rule 125 (Statement -> Block .)
    IF              reduce using rule 125 (Statement -> Block .)
    SWITCH          reduce using rule 125 (Statement -> Block .)
    DO              reduce using rule 125 (Statement -> Block .)
    FOR             reduce using rule 125 (Statement -> Block .)
    BREAK           reduce using rule 125 (Statement -> Block .)
    CONTINUE        reduce using rule 125 (Statement -> Block .)
    RETURN          reduce using rule 125 (Statement -> Block .)
    THROW           reduce using rule 125 (Statement -> Block .)
    SYNCHRONIZED    reduce using rule 125 (Statement -> Block .)
    TRY             reduce using rule 125 (Statement -> Block .)
    {               reduce using rule 125 (Statement -> Block .)
    BOOLEAN         reduce using rule 125 (Statement -> Block .)
    CHAR            reduce using rule 125 (Statement -> Block .)
    BYTE            reduce using rule 125 (Statement -> Block .)
    SHORT           reduce using rule 125 (Statement -> Block .)
    INT             reduce using rule 125 (Statement -> Block .)
    LONG            reduce using rule 125 (Statement -> Block .)
    FLOAT           reduce using rule 125 (Statement -> Block .)
    DOUBLE          reduce using rule 125 (Statement -> Block .)
    VOID            reduce using rule 125 (Statement -> Block .)
    OPT_INC_DEC     reduce using rule 125 (Statement -> Block .)
    +               reduce using rule 125 (Statement -> Block .)
    -               reduce using rule 125 (Statement -> Block .)
    ~               reduce using rule 125 (Statement -> Block .)
    !               reduce using rule 125 (Statement -> Block .)
    THIS            reduce using rule 125 (Statement -> Block .)
    SUPER           reduce using rule 125 (Statement -> Block .)
    NULL            reduce using rule 125 (Statement -> Block .)
    (               reduce using rule 125 (Statement -> Block .)
    FLOAT_LITERAL   reduce using rule 125 (Statement -> Block .)
    INT_LITERAL     reduce using rule 125 (Statement -> Block .)
    CHAR_LITERAL    reduce using rule 125 (Statement -> Block .)
    STRING_LITERAL  reduce using rule 125 (Statement -> Block .)
    BOOL            reduce using rule 125 (Statement -> Block .)
    NEW             reduce using rule 125 (Statement -> Block .)
    ELSE            reduce using rule 125 (Statement -> Block .)


state 138

    (198) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (200) PlainNewAllocationExpression -> ArrayAllocationExpression . { }
    (202) PlainNewAllocationExpression -> ArrayAllocationExpression . { ArrayInitializers }

    .               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_INC_DEC     reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    =               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_EQ          reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    *               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    /               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    %               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    +               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    -               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_SOME        reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    <               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    >               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    INSTANCEOF      reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ?               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ;               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    )               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    :               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ,               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    }               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ]               reduce using rule 198 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    {               shift and go to state 244


state 139

    (186) MethodCall -> MethodAccess . ( ArgumentList )
    (187) MethodCall -> MethodAccess . ( )

    (               shift and go to state 245


state 140

    (256) InclusiveOrExpression -> ExclusiveOrExpression .
    (255) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ?               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ,               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    )               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ;               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    :               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    }               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ]               reduce using rule 256 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 246


state 141

    (249) EqualityExpression -> RelationalExpression .
    (244) RelationalExpression -> RelationalExpression . < ShiftExpression
    (245) RelationalExpression -> RelationalExpression . > ShiftExpression
    (246) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (247) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (248) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    ?               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    )               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    ,               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    ;               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    :               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    }               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    ]               reduce using rule 249 (EqualityExpression -> RelationalExpression .)
    <               shift and go to state 248
    >               shift and go to state 251
    OP_LE           shift and go to state 249
    OP_GE           shift and go to state 250
    INSTANCEOF      shift and go to state 247


state 142

    (196) NewAllocationExpression -> PlainNewAllocationExpression .

    .               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    =               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    *               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    /               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    %               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    +               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    -               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    <               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    >               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    INSTANCEOF      reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ?               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    )               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    }               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ,               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ;               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    :               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ]               reduce using rule 196 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 143

    (149) JumpStatement -> CONTINUE . IDENTIFIER ;
    (150) JumpStatement -> CONTINUE . ;

    IDENTIFIER      shift and go to state 252
    ;               shift and go to state 253


state 144

    (112) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    }               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FINAL           reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SYNCHRONIZED    reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    TRY             reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    {               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    +               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    -               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    !               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    (               reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 112 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 145

    (166) NotJustName -> SpecialName .
    (189) MethodAccess -> SpecialName .

    .               reduce using rule 166 (NotJustName -> SpecialName .)
    OPT_INC_DEC     reduce using rule 166 (NotJustName -> SpecialName .)
    =               reduce using rule 166 (NotJustName -> SpecialName .)
    OPT_EQ          reduce using rule 166 (NotJustName -> SpecialName .)
    *               reduce using rule 166 (NotJustName -> SpecialName .)
    /               reduce using rule 166 (NotJustName -> SpecialName .)
    %               reduce using rule 166 (NotJustName -> SpecialName .)
    +               reduce using rule 166 (NotJustName -> SpecialName .)
    -               reduce using rule 166 (NotJustName -> SpecialName .)
    OPT_SOME        reduce using rule 166 (NotJustName -> SpecialName .)
    <               reduce using rule 166 (NotJustName -> SpecialName .)
    >               reduce using rule 166 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 166 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 166 (NotJustName -> SpecialName .)
    INSTANCEOF      reduce using rule 166 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 166 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 166 (NotJustName -> SpecialName .)
    &               reduce using rule 166 (NotJustName -> SpecialName .)
    ^               reduce using rule 166 (NotJustName -> SpecialName .)
    |               reduce using rule 166 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 166 (NotJustName -> SpecialName .)
    ?               reduce using rule 166 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 166 (NotJustName -> SpecialName .)
    }               reduce using rule 166 (NotJustName -> SpecialName .)
    ,               reduce using rule 166 (NotJustName -> SpecialName .)
    ;               reduce using rule 166 (NotJustName -> SpecialName .)
    )               reduce using rule 166 (NotJustName -> SpecialName .)
    :               reduce using rule 166 (NotJustName -> SpecialName .)
    ]               reduce using rule 166 (NotJustName -> SpecialName .)
    (               reduce using rule 189 (MethodAccess -> SpecialName .)


state 146

    (168) NotJustName -> ComplexPrimary .
    (180) ArrayAccess -> ComplexPrimary . [ Expression ]

    .               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OPT_INC_DEC     reduce using rule 168 (NotJustName -> ComplexPrimary .)
    =               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OPT_EQ          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    *               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    /               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    %               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    +               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    -               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OPT_SOME        reduce using rule 168 (NotJustName -> ComplexPrimary .)
    <               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    >               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    INSTANCEOF      reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 168 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ?               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 168 (NotJustName -> ComplexPrimary .)
    }               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ,               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ;               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    )               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    :               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    ]               reduce using rule 168 (NotJustName -> ComplexPrimary .)
    [               shift and go to state 254


state 147

    (221) LogicalUnaryExpression -> PostfixExpression .
    (217) RealPostfixExpression -> PostfixExpression . OPT_INC_DEC

    *               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    /               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    %               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    +               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    -               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_SOME        reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    <               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    >               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    INSTANCEOF      reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    ?               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    ;               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    )               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    :               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    ,               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    }               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    ]               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    =               reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_EQ          reduce using rule 221 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_INC_DEC     shift and go to state 255


state 148

    (199) PlainNewAllocationExpression -> ClassAllocationExpression .
    (201) PlainNewAllocationExpression -> ClassAllocationExpression . { }
    (203) PlainNewAllocationExpression -> ClassAllocationExpression . { FieldDeclarations }

    .               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_INC_DEC     reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    =               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_EQ          reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    *               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    /               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    %               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    +               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    -               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_SOME        reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    <               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    >               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    INSTANCEOF      reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ?               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ;               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    )               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    :               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ,               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    }               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ]               reduce using rule 199 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    {               shift and go to state 256


state 149

    (129) LabelStatement -> DEFAULT . :

    :               shift and go to state 257


state 150

    (123) Statement -> JumpStatement .

    WHILE           reduce using rule 123 (Statement -> JumpStatement .)
    }               reduce using rule 123 (Statement -> JumpStatement .)
    FINAL           reduce using rule 123 (Statement -> JumpStatement .)
    ;               reduce using rule 123 (Statement -> JumpStatement .)
    IDENTIFIER      reduce using rule 123 (Statement -> JumpStatement .)
    CASE            reduce using rule 123 (Statement -> JumpStatement .)
    DEFAULT         reduce using rule 123 (Statement -> JumpStatement .)
    IF              reduce using rule 123 (Statement -> JumpStatement .)
    SWITCH          reduce using rule 123 (Statement -> JumpStatement .)
    DO              reduce using rule 123 (Statement -> JumpStatement .)
    FOR             reduce using rule 123 (Statement -> JumpStatement .)
    BREAK           reduce using rule 123 (Statement -> JumpStatement .)
    CONTINUE        reduce using rule 123 (Statement -> JumpStatement .)
    RETURN          reduce using rule 123 (Statement -> JumpStatement .)
    THROW           reduce using rule 123 (Statement -> JumpStatement .)
    SYNCHRONIZED    reduce using rule 123 (Statement -> JumpStatement .)
    TRY             reduce using rule 123 (Statement -> JumpStatement .)
    {               reduce using rule 123 (Statement -> JumpStatement .)
    BOOLEAN         reduce using rule 123 (Statement -> JumpStatement .)
    CHAR            reduce using rule 123 (Statement -> JumpStatement .)
    BYTE            reduce using rule 123 (Statement -> JumpStatement .)
    SHORT           reduce using rule 123 (Statement -> JumpStatement .)
    INT             reduce using rule 123 (Statement -> JumpStatement .)
    LONG            reduce using rule 123 (Statement -> JumpStatement .)
    FLOAT           reduce using rule 123 (Statement -> JumpStatement .)
    DOUBLE          reduce using rule 123 (Statement -> JumpStatement .)
    VOID            reduce using rule 123 (Statement -> JumpStatement .)
    OPT_INC_DEC     reduce using rule 123 (Statement -> JumpStatement .)
    +               reduce using rule 123 (Statement -> JumpStatement .)
    -               reduce using rule 123 (Statement -> JumpStatement .)
    ~               reduce using rule 123 (Statement -> JumpStatement .)
    !               reduce using rule 123 (Statement -> JumpStatement .)
    THIS            reduce using rule 123 (Statement -> JumpStatement .)
    SUPER           reduce using rule 123 (Statement -> JumpStatement .)
    NULL            reduce using rule 123 (Statement -> JumpStatement .)
    (               reduce using rule 123 (Statement -> JumpStatement .)
    FLOAT_LITERAL   reduce using rule 123 (Statement -> JumpStatement .)
    INT_LITERAL     reduce using rule 123 (Statement -> JumpStatement .)
    CHAR_LITERAL    reduce using rule 123 (Statement -> JumpStatement .)
    STRING_LITERAL  reduce using rule 123 (Statement -> JumpStatement .)
    BOOL            reduce using rule 123 (Statement -> JumpStatement .)
    NEW             reduce using rule 123 (Statement -> JumpStatement .)
    ELSE            reduce using rule 123 (Statement -> JumpStatement .)


state 151

    (135) IterationStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 258


state 152

    (206) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (208) ArrayAllocationExpression -> NEW . TypeName Dims
    (204) ClassAllocationExpression -> NEW . TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> NEW . TypeName ( )
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 259

state 153

    (171) ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .

    [               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    .               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OPT_INC_DEC     reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    =               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OPT_EQ          reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    *               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    /               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    %               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    +               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    -               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OPT_SOME        reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    <               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    >               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_LE           reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_GE           reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    INSTANCEOF      reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_EQ           reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_NE           reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    &               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ^               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    |               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_LAND         reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ?               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_LOR          reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    )               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ,               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    (               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ;               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    :               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    }               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ]               reduce using rule 171 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)


state 154

    (116) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators ;
    (74) VariableDeclarators -> . VariableDeclarator
    (75) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (76) VariableDeclarator -> . DeclaratorName
    (77) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (95) DeclaratorName -> . IDENTIFIER
    (96) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 95

    VariableDeclarators            shift and go to state 260
    DeclaratorName                 shift and go to state 261
    VariableDeclarator             shift and go to state 96

state 155

    (215) PostfixExpression -> PrimaryExpression .

    OPT_INC_DEC     reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    =               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OPT_EQ          reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    *               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    /               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    %               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    +               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    -               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OPT_SOME        reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    <               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    >               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    INSTANCEOF      reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    ?               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    ;               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    )               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    :               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    ,               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    }               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)
    ]               reduce using rule 215 (PostfixExpression -> PrimaryExpression .)


state 156

    (128) LabelStatement -> CASE . ConstantExpression :
    (269) ConstantExpression -> . ConditionalExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    ConstantExpression             shift and go to state 263
    PostfixExpression              shift and go to state 147
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    ConditionalExpression          shift and go to state 262
    UnaryExpression                shift and go to state 233
    InclusiveOrExpression          shift and go to state 164
    FieldAccess                    shift and go to state 168
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 157

    (132) SelectionStatement -> SWITCH . ( Expression ) Block

    (               shift and go to state 264


state 158

    (262) ConditionalExpression -> ConditionalOrExpression .
    (263) ConditionalExpression -> ConditionalOrExpression . ? Expression : ConditionalExpression
    (261) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR ConditionalAndExpression

    ;               reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    )               reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    }               reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    ,               reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    :               reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    ]               reduce using rule 262 (ConditionalExpression -> ConditionalOrExpression .)
    ?               shift and go to state 266
    OP_LOR          shift and go to state 265


state 159

    (167) NotJustName -> NewAllocationExpression .

    .               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    =               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OPT_EQ          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    *               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    /               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    %               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    +               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    -               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OPT_SOME        reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    <               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    >               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    INSTANCEOF      reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ?               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    }               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ,               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ;               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    )               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    :               reduce using rule 167 (NotJustName -> NewAllocationExpression .)
    ]               reduce using rule 167 (NotJustName -> NewAllocationExpression .)


state 160

    (130) ExpressionStatement -> Expression .

    ;               reduce using rule 130 (ExpressionStatement -> Expression .)
    ,               reduce using rule 130 (ExpressionStatement -> Expression .)
    )               reduce using rule 130 (ExpressionStatement -> Expression .)


state 161

    (241) ShiftExpression -> AdditiveExpression .
    (239) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (240) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    <               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    >               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    INSTANCEOF      reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    ?               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    ;               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    ]               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    )               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    ,               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    }               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    :               reduce using rule 241 (ShiftExpression -> AdditiveExpression .)
    +               shift and go to state 267
    -               shift and go to state 268


state 162

    (264) AssignmentExpression -> ConditionalExpression .

    ;               reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    ,               reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    )               reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    }               reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    ]               reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)
    :               reduce using rule 264 (AssignmentExpression -> ConditionalExpression .)


state 163

    (265) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (227) CastExpression -> UnaryExpression .
    (266) AssignmentOperator -> . =
    (267) AssignmentOperator -> . OPT_EQ

    *               reduce using rule 227 (CastExpression -> UnaryExpression .)
    /               reduce using rule 227 (CastExpression -> UnaryExpression .)
    %               reduce using rule 227 (CastExpression -> UnaryExpression .)
    +               reduce using rule 227 (CastExpression -> UnaryExpression .)
    -               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 227 (CastExpression -> UnaryExpression .)
    <               reduce using rule 227 (CastExpression -> UnaryExpression .)
    >               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 227 (CastExpression -> UnaryExpression .)
    INSTANCEOF      reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 227 (CastExpression -> UnaryExpression .)
    &               reduce using rule 227 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 227 (CastExpression -> UnaryExpression .)
    |               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 227 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 227 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 227 (CastExpression -> UnaryExpression .)
    )               reduce using rule 227 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 227 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 227 (CastExpression -> UnaryExpression .)
    }               reduce using rule 227 (CastExpression -> UnaryExpression .)
    :               reduce using rule 227 (CastExpression -> UnaryExpression .)
    =               shift and go to state 271
    OPT_EQ          shift and go to state 270

    AssignmentOperator             shift and go to state 269

state 164

    (258) ConditionalAndExpression -> InclusiveOrExpression .
    (257) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    ?               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    ;               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    )               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    ,               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    ]               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    :               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    }               reduce using rule 258 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 272


state 165

    (124) Statement -> GuardingStatement .

    WHILE           reduce using rule 124 (Statement -> GuardingStatement .)
    }               reduce using rule 124 (Statement -> GuardingStatement .)
    FINAL           reduce using rule 124 (Statement -> GuardingStatement .)
    ;               reduce using rule 124 (Statement -> GuardingStatement .)
    IDENTIFIER      reduce using rule 124 (Statement -> GuardingStatement .)
    CASE            reduce using rule 124 (Statement -> GuardingStatement .)
    DEFAULT         reduce using rule 124 (Statement -> GuardingStatement .)
    IF              reduce using rule 124 (Statement -> GuardingStatement .)
    SWITCH          reduce using rule 124 (Statement -> GuardingStatement .)
    DO              reduce using rule 124 (Statement -> GuardingStatement .)
    FOR             reduce using rule 124 (Statement -> GuardingStatement .)
    BREAK           reduce using rule 124 (Statement -> GuardingStatement .)
    CONTINUE        reduce using rule 124 (Statement -> GuardingStatement .)
    RETURN          reduce using rule 124 (Statement -> GuardingStatement .)
    THROW           reduce using rule 124 (Statement -> GuardingStatement .)
    SYNCHRONIZED    reduce using rule 124 (Statement -> GuardingStatement .)
    TRY             reduce using rule 124 (Statement -> GuardingStatement .)
    {               reduce using rule 124 (Statement -> GuardingStatement .)
    BOOLEAN         reduce using rule 124 (Statement -> GuardingStatement .)
    CHAR            reduce using rule 124 (Statement -> GuardingStatement .)
    BYTE            reduce using rule 124 (Statement -> GuardingStatement .)
    SHORT           reduce using rule 124 (Statement -> GuardingStatement .)
    INT             reduce using rule 124 (Statement -> GuardingStatement .)
    LONG            reduce using rule 124 (Statement -> GuardingStatement .)
    FLOAT           reduce using rule 124 (Statement -> GuardingStatement .)
    DOUBLE          reduce using rule 124 (Statement -> GuardingStatement .)
    VOID            reduce using rule 124 (Statement -> GuardingStatement .)
    OPT_INC_DEC     reduce using rule 124 (Statement -> GuardingStatement .)
    +               reduce using rule 124 (Statement -> GuardingStatement .)
    -               reduce using rule 124 (Statement -> GuardingStatement .)
    ~               reduce using rule 124 (Statement -> GuardingStatement .)
    !               reduce using rule 124 (Statement -> GuardingStatement .)
    THIS            reduce using rule 124 (Statement -> GuardingStatement .)
    SUPER           reduce using rule 124 (Statement -> GuardingStatement .)
    NULL            reduce using rule 124 (Statement -> GuardingStatement .)
    (               reduce using rule 124 (Statement -> GuardingStatement .)
    FLOAT_LITERAL   reduce using rule 124 (Statement -> GuardingStatement .)
    INT_LITERAL     reduce using rule 124 (Statement -> GuardingStatement .)
    CHAR_LITERAL    reduce using rule 124 (Statement -> GuardingStatement .)
    STRING_LITERAL  reduce using rule 124 (Statement -> GuardingStatement .)
    BOOL            reduce using rule 124 (Statement -> GuardingStatement .)
    NEW             reduce using rule 124 (Statement -> GuardingStatement .)
    ELSE            reduce using rule 124 (Statement -> GuardingStatement .)


state 166

    (147) JumpStatement -> BREAK . IDENTIFIER ;
    (148) JumpStatement -> BREAK . ;

    IDENTIFIER      shift and go to state 274
    ;               shift and go to state 273


state 167

    (175) ComplexPrimaryNoParenthesis -> BOOL .

    [               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    .               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OPT_INC_DEC     reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    =               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OPT_EQ          reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    *               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    /               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    %               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    +               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    -               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OPT_SOME        reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    <               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    >               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_LE           reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_GE           reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    INSTANCEOF      reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_EQ           reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_NE           reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    &               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    ^               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    |               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_LAND         reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    ?               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_LOR          reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    )               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    ,               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    (               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    ;               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    :               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    }               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)
    ]               reduce using rule 175 (ComplexPrimaryNoParenthesis -> BOOL .)


state 168

    (177) ComplexPrimaryNoParenthesis -> FieldAccess .

    [               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    .               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_INC_DEC     reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    =               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_EQ          reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    *               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    /               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    %               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    +               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    -               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_SOME        reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    <               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    >               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    INSTANCEOF      reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ?               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    )               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ,               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    (               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ;               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    :               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    }               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ]               reduce using rule 177 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 169

    (172) ComplexPrimaryNoParenthesis -> INT_LITERAL .

    [               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    .               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OPT_INC_DEC     reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    =               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OPT_EQ          reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    *               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    /               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    %               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    +               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    -               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OPT_SOME        reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    <               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    >               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_LE           reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_GE           reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    INSTANCEOF      reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_EQ           reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_NE           reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    &               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ^               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    |               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_LAND         reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ?               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_LOR          reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    )               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ,               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    (               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ;               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    :               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    }               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ]               reduce using rule 172 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)


state 170

    (223) LogicalUnaryOperator -> ~ .

    OPT_INC_DEC     reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    +               reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    -               reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    !               reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    (               reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    FLOAT_LITERAL   reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    INT_LITERAL     reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    CHAR_LITERAL    reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    STRING_LITERAL  reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    BOOL            reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 223 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 223 (LogicalUnaryOperator -> ~ .)


state 171

    (136) IterationStatement -> DO . Statement WHILE ( Expression ) ;
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    ExpressionStatement            shift and go to state 109
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 275
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    GuardingStatement              shift and go to state 165
    ConditionalOrExpression        shift and go to state 158
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 172

    (234) MultiplicativeExpression -> CastExpression .

    *               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    /               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    %               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    +               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    -               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    OPT_SOME        reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    <               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    >               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    INSTANCEOF      reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    ?               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    ]               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    ;               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    )               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    :               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    ,               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)
    }               reduce using rule 234 (MultiplicativeExpression -> CastExpression .)


state 173

    (193) SpecialName -> NULL .

    .               reduce using rule 193 (SpecialName -> NULL .)
    OPT_INC_DEC     reduce using rule 193 (SpecialName -> NULL .)
    =               reduce using rule 193 (SpecialName -> NULL .)
    OPT_EQ          reduce using rule 193 (SpecialName -> NULL .)
    *               reduce using rule 193 (SpecialName -> NULL .)
    /               reduce using rule 193 (SpecialName -> NULL .)
    %               reduce using rule 193 (SpecialName -> NULL .)
    +               reduce using rule 193 (SpecialName -> NULL .)
    -               reduce using rule 193 (SpecialName -> NULL .)
    OPT_SOME        reduce using rule 193 (SpecialName -> NULL .)
    <               reduce using rule 193 (SpecialName -> NULL .)
    >               reduce using rule 193 (SpecialName -> NULL .)
    OP_LE           reduce using rule 193 (SpecialName -> NULL .)
    OP_GE           reduce using rule 193 (SpecialName -> NULL .)
    INSTANCEOF      reduce using rule 193 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 193 (SpecialName -> NULL .)
    OP_NE           reduce using rule 193 (SpecialName -> NULL .)
    &               reduce using rule 193 (SpecialName -> NULL .)
    ^               reduce using rule 193 (SpecialName -> NULL .)
    |               reduce using rule 193 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 193 (SpecialName -> NULL .)
    ?               reduce using rule 193 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 193 (SpecialName -> NULL .)
    ]               reduce using rule 193 (SpecialName -> NULL .)
    (               reduce using rule 193 (SpecialName -> NULL .)
    )               reduce using rule 193 (SpecialName -> NULL .)
    ;               reduce using rule 193 (SpecialName -> NULL .)
    :               reduce using rule 193 (SpecialName -> NULL .)
    ,               reduce using rule 193 (SpecialName -> NULL .)
    }               reduce using rule 193 (SpecialName -> NULL .)


state 174

    (224) LogicalUnaryOperator -> ! .

    OPT_INC_DEC     reduce using rule 224 (LogicalUnaryOperator -> ! .)
    +               reduce using rule 224 (LogicalUnaryOperator -> ! .)
    -               reduce using rule 224 (LogicalUnaryOperator -> ! .)
    ~               reduce using rule 224 (LogicalUnaryOperator -> ! .)
    !               reduce using rule 224 (LogicalUnaryOperator -> ! .)
    IDENTIFIER      reduce using rule 224 (LogicalUnaryOperator -> ! .)
    THIS            reduce using rule 224 (LogicalUnaryOperator -> ! .)
    SUPER           reduce using rule 224 (LogicalUnaryOperator -> ! .)
    NULL            reduce using rule 224 (LogicalUnaryOperator -> ! .)
    (               reduce using rule 224 (LogicalUnaryOperator -> ! .)
    FLOAT_LITERAL   reduce using rule 224 (LogicalUnaryOperator -> ! .)
    INT_LITERAL     reduce using rule 224 (LogicalUnaryOperator -> ! .)
    CHAR_LITERAL    reduce using rule 224 (LogicalUnaryOperator -> ! .)
    STRING_LITERAL  reduce using rule 224 (LogicalUnaryOperator -> ! .)
    BOOL            reduce using rule 224 (LogicalUnaryOperator -> ! .)
    NEW             reduce using rule 224 (LogicalUnaryOperator -> ! .)
    BOOLEAN         reduce using rule 224 (LogicalUnaryOperator -> ! .)
    CHAR            reduce using rule 224 (LogicalUnaryOperator -> ! .)
    BYTE            reduce using rule 224 (LogicalUnaryOperator -> ! .)
    SHORT           reduce using rule 224 (LogicalUnaryOperator -> ! .)
    INT             reduce using rule 224 (LogicalUnaryOperator -> ! .)
    LONG            reduce using rule 224 (LogicalUnaryOperator -> ! .)
    FLOAT           reduce using rule 224 (LogicalUnaryOperator -> ! .)
    DOUBLE          reduce using rule 224 (LogicalUnaryOperator -> ! .)
    VOID            reduce using rule 224 (LogicalUnaryOperator -> ! .)


state 175

    (5) TypeName -> QualifiedName .
    (36) QualifiedName -> QualifiedName . . IDENTIFIER
    (164) PrimaryExpression -> QualifiedName .
    (197) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (179) ArrayAccess -> QualifiedName . [ Expression ]
    (183) FieldAccess -> QualifiedName . . THIS
    (184) FieldAccess -> QualifiedName . . CLASS
    (190) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for [ resolved as shift
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 276
    OPT_INC_DEC     reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    [               shift and go to state 277
    (               reduce using rule 190 (MethodAccess -> QualifiedName .)

  ! [               [ reduce using rule 5 (TypeName -> QualifiedName .) ]


state 176

    (226) ArithmeticUnaryOperator -> - .

    (               reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    OPT_INC_DEC     reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    +               reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    -               reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    ~               reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    !               reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    IDENTIFIER      reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    THIS            reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    SUPER           reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    NULL            reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    FLOAT_LITERAL   reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    INT_LITERAL     reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    CHAR_LITERAL    reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    STRING_LITERAL  reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    BOOL            reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    NEW             reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    BOOLEAN         reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    CHAR            reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    BYTE            reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    SHORT           reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    INT             reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    LONG            reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    FLOAT           reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    DOUBLE          reduce using rule 226 (ArithmeticUnaryOperator -> - .)
    VOID            reduce using rule 226 (ArithmeticUnaryOperator -> - .)


state 177

    (114) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    }               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FINAL           reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ;               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THROW           reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SYNCHRONIZED    reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    TRY             reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    {               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    +               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    -               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    !               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    (               reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 114 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 178

    (243) RelationalExpression -> ShiftExpression .
    (242) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    >               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    INSTANCEOF      reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    ?               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    ;               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    )               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    :               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    ,               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    }               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    ]               reduce using rule 243 (RelationalExpression -> ShiftExpression .)
    OPT_SOME        shift and go to state 278


state 179

    (110) Block -> { LocalVariableDeclarationsAndStatements . }
    (113) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (114) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (115) LocalVariableDeclarationOrStatement -> . Statement
    (116) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ;
    (117) LocalVariableDeclarationStatement -> . FINAL TypeSpecifier VariableDeclarators ;
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (268) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 280
    FINAL           shift and go to state 124
    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 111
    AndExpression                  shift and go to state 112
    MultiplicativeExpression       shift and go to state 127
    TypeSpecifier                  shift and go to state 154
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    QualifiedName                  shift and go to state 175
    ComplexPrimaryNoParenthesis    shift and go to state 126
    GuardingStatement              shift and go to state 165
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    TypeName                       shift and go to state 63
    ConditionalOrExpression        shift and go to state 158
    LocalVariableDeclarationStatement shift and go to state 177
    ExpressionStatement            shift and go to state 109
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 110
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    LocalVariableDeclarationOrStatement shift and go to state 279
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 180

    (165) PrimaryExpression -> NotJustName .
    (181) FieldAccess -> NotJustName . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 165 (PrimaryExpression -> NotJustName .)
    *               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    /               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    %               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    +               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    -               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OPT_SOME        reduce using rule 165 (PrimaryExpression -> NotJustName .)
    <               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    >               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    INSTANCEOF      reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 165 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ?               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ;               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    )               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ,               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    }               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    ]               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    :               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    =               reduce using rule 165 (PrimaryExpression -> NotJustName .)
    OPT_EQ          reduce using rule 165 (PrimaryExpression -> NotJustName .)
    .               shift and go to state 281


state 181

    (222) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 242
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MethodCall                     shift and go to state 129
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    ArrayAllocationExpression      shift and go to state 138
    UnaryExpression                shift and go to state 282
    PrimaryExpression              shift and go to state 155
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 182

    (220) UnaryExpression -> LogicalUnaryExpression .

    =               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_EQ          reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    *               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    /               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    %               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    +               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    -               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_SOME        reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    <               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    >               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    INSTANCEOF      reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    ?               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    )               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    ,               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    }               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    ;               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    :               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)
    ]               reduce using rule 220 (UnaryExpression -> LogicalUnaryExpression .)


state 183

    (131) SelectionStatement -> IF . ( Expression ) Statement ElseOrNot

    (               shift and go to state 283


state 184

    (174) ComplexPrimaryNoParenthesis -> STRING_LITERAL .

    [               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    .               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OPT_INC_DEC     reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    =               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OPT_EQ          reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    *               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    /               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    %               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    +               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    -               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OPT_SOME        reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    <               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    >               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_LE           reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_GE           reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    INSTANCEOF      reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_EQ           reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_NE           reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    &               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ^               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    |               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_LAND         reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ?               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_LOR          reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    )               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ,               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    (               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ;               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    :               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    }               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ]               reduce using rule 174 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)


state 185

    (192) SpecialName -> SUPER .

    .               reduce using rule 192 (SpecialName -> SUPER .)
    OPT_INC_DEC     reduce using rule 192 (SpecialName -> SUPER .)
    =               reduce using rule 192 (SpecialName -> SUPER .)
    OPT_EQ          reduce using rule 192 (SpecialName -> SUPER .)
    *               reduce using rule 192 (SpecialName -> SUPER .)
    /               reduce using rule 192 (SpecialName -> SUPER .)
    %               reduce using rule 192 (SpecialName -> SUPER .)
    +               reduce using rule 192 (SpecialName -> SUPER .)
    -               reduce using rule 192 (SpecialName -> SUPER .)
    OPT_SOME        reduce using rule 192 (SpecialName -> SUPER .)
    <               reduce using rule 192 (SpecialName -> SUPER .)
    >               reduce using rule 192 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 192 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 192 (SpecialName -> SUPER .)
    INSTANCEOF      reduce using rule 192 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 192 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 192 (SpecialName -> SUPER .)
    &               reduce using rule 192 (SpecialName -> SUPER .)
    ^               reduce using rule 192 (SpecialName -> SUPER .)
    |               reduce using rule 192 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 192 (SpecialName -> SUPER .)
    ?               reduce using rule 192 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 192 (SpecialName -> SUPER .)
    ]               reduce using rule 192 (SpecialName -> SUPER .)
    (               reduce using rule 192 (SpecialName -> SUPER .)
    )               reduce using rule 192 (SpecialName -> SUPER .)
    ;               reduce using rule 192 (SpecialName -> SUPER .)
    :               reduce using rule 192 (SpecialName -> SUPER .)
    ,               reduce using rule 192 (SpecialName -> SUPER .)
    }               reduce using rule 192 (SpecialName -> SUPER .)


state 186

    (111) Block -> { } .

    ;               reduce using rule 111 (Block -> { } .)
    }               reduce using rule 111 (Block -> { } .)
    STATIC          reduce using rule 111 (Block -> { } .)
    IDENTIFIER      reduce using rule 111 (Block -> { } .)
    {               reduce using rule 111 (Block -> { } .)
    ABSTRACT        reduce using rule 111 (Block -> { } .)
    FINAL           reduce using rule 111 (Block -> { } .)
    PUBLIC          reduce using rule 111 (Block -> { } .)
    PROTECTED       reduce using rule 111 (Block -> { } .)
    PRIVATE         reduce using rule 111 (Block -> { } .)
    TRANSIENT       reduce using rule 111 (Block -> { } .)
    VOLATILE        reduce using rule 111 (Block -> { } .)
    NATIVE          reduce using rule 111 (Block -> { } .)
    SYNCHRONIZED    reduce using rule 111 (Block -> { } .)
    CLASS           reduce using rule 111 (Block -> { } .)
    INTERFACE       reduce using rule 111 (Block -> { } .)
    BOOLEAN         reduce using rule 111 (Block -> { } .)
    CHAR            reduce using rule 111 (Block -> { } .)
    BYTE            reduce using rule 111 (Block -> { } .)
    SHORT           reduce using rule 111 (Block -> { } .)
    INT             reduce using rule 111 (Block -> { } .)
    LONG            reduce using rule 111 (Block -> { } .)
    FLOAT           reduce using rule 111 (Block -> { } .)
    DOUBLE          reduce using rule 111 (Block -> { } .)
    VOID            reduce using rule 111 (Block -> { } .)
    CASE            reduce using rule 111 (Block -> { } .)
    DEFAULT         reduce using rule 111 (Block -> { } .)
    IF              reduce using rule 111 (Block -> { } .)
    SWITCH          reduce using rule 111 (Block -> { } .)
    WHILE           reduce using rule 111 (Block -> { } .)
    DO              reduce using rule 111 (Block -> { } .)
    FOR             reduce using rule 111 (Block -> { } .)
    BREAK           reduce using rule 111 (Block -> { } .)
    CONTINUE        reduce using rule 111 (Block -> { } .)
    RETURN          reduce using rule 111 (Block -> { } .)
    THROW           reduce using rule 111 (Block -> { } .)
    TRY             reduce using rule 111 (Block -> { } .)
    OPT_INC_DEC     reduce using rule 111 (Block -> { } .)
    +               reduce using rule 111 (Block -> { } .)
    -               reduce using rule 111 (Block -> { } .)
    ~               reduce using rule 111 (Block -> { } .)
    !               reduce using rule 111 (Block -> { } .)
    THIS            reduce using rule 111 (Block -> { } .)
    SUPER           reduce using rule 111 (Block -> { } .)
    NULL            reduce using rule 111 (Block -> { } .)
    (               reduce using rule 111 (Block -> { } .)
    FLOAT_LITERAL   reduce using rule 111 (Block -> { } .)
    INT_LITERAL     reduce using rule 111 (Block -> { } .)
    CHAR_LITERAL    reduce using rule 111 (Block -> { } .)
    STRING_LITERAL  reduce using rule 111 (Block -> { } .)
    BOOL            reduce using rule 111 (Block -> { } .)
    NEW             reduce using rule 111 (Block -> { } .)
    ELSE            reduce using rule 111 (Block -> { } .)
    FINALLY         reduce using rule 111 (Block -> { } .)
    CATCH           reduce using rule 111 (Block -> { } .)


state 187

    (153) JumpStatement -> THROW . Expression ;
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 284
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 188

    (122) Statement -> IterationStatement .

    WHILE           reduce using rule 122 (Statement -> IterationStatement .)
    }               reduce using rule 122 (Statement -> IterationStatement .)
    FINAL           reduce using rule 122 (Statement -> IterationStatement .)
    ;               reduce using rule 122 (Statement -> IterationStatement .)
    IDENTIFIER      reduce using rule 122 (Statement -> IterationStatement .)
    CASE            reduce using rule 122 (Statement -> IterationStatement .)
    DEFAULT         reduce using rule 122 (Statement -> IterationStatement .)
    IF              reduce using rule 122 (Statement -> IterationStatement .)
    SWITCH          reduce using rule 122 (Statement -> IterationStatement .)
    DO              reduce using rule 122 (Statement -> IterationStatement .)
    FOR             reduce using rule 122 (Statement -> IterationStatement .)
    BREAK           reduce using rule 122 (Statement -> IterationStatement .)
    CONTINUE        reduce using rule 122 (Statement -> IterationStatement .)
    RETURN          reduce using rule 122 (Statement -> IterationStatement .)
    THROW           reduce using rule 122 (Statement -> IterationStatement .)
    SYNCHRONIZED    reduce using rule 122 (Statement -> IterationStatement .)
    TRY             reduce using rule 122 (Statement -> IterationStatement .)
    {               reduce using rule 122 (Statement -> IterationStatement .)
    BOOLEAN         reduce using rule 122 (Statement -> IterationStatement .)
    CHAR            reduce using rule 122 (Statement -> IterationStatement .)
    BYTE            reduce using rule 122 (Statement -> IterationStatement .)
    SHORT           reduce using rule 122 (Statement -> IterationStatement .)
    INT             reduce using rule 122 (Statement -> IterationStatement .)
    LONG            reduce using rule 122 (Statement -> IterationStatement .)
    FLOAT           reduce using rule 122 (Statement -> IterationStatement .)
    DOUBLE          reduce using rule 122 (Statement -> IterationStatement .)
    VOID            reduce using rule 122 (Statement -> IterationStatement .)
    OPT_INC_DEC     reduce using rule 122 (Statement -> IterationStatement .)
    +               reduce using rule 122 (Statement -> IterationStatement .)
    -               reduce using rule 122 (Statement -> IterationStatement .)
    ~               reduce using rule 122 (Statement -> IterationStatement .)
    !               reduce using rule 122 (Statement -> IterationStatement .)
    THIS            reduce using rule 122 (Statement -> IterationStatement .)
    SUPER           reduce using rule 122 (Statement -> IterationStatement .)
    NULL            reduce using rule 122 (Statement -> IterationStatement .)
    (               reduce using rule 122 (Statement -> IterationStatement .)
    FLOAT_LITERAL   reduce using rule 122 (Statement -> IterationStatement .)
    INT_LITERAL     reduce using rule 122 (Statement -> IterationStatement .)
    CHAR_LITERAL    reduce using rule 122 (Statement -> IterationStatement .)
    STRING_LITERAL  reduce using rule 122 (Statement -> IterationStatement .)
    BOOL            reduce using rule 122 (Statement -> IterationStatement .)
    NEW             reduce using rule 122 (Statement -> IterationStatement .)
    ELSE            reduce using rule 122 (Statement -> IterationStatement .)


state 189

    (34) ImportStatement -> IMPORT QualifiedName . * SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    CLASS           reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    INTERFACE       reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    ABSTRACT        reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    FINAL           reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PUBLIC          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PROTECTED       reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PRIVATE         reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    STATIC          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    TRANSIENT       reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    VOLATILE        reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    NATIVE          reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    SYNCHRONIZED    reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    $end            reduce using rule 34 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    ;               shift and go to state 41


state 190

    (39) ClassHeader -> Modifiers ClassWord IDENTIFIER Extends Interfaces .

    {               reduce using rule 39 (ClassHeader -> Modifiers ClassWord IDENTIFIER Extends Interfaces .)


state 191

    (7) ClassNameList -> ClassNameList , . QualifiedName
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 285

state 192

    (109) Extends -> Extends , TypeName .

    ,               reduce using rule 109 (Extends -> Extends , TypeName .)
    IMPLEMENTS      reduce using rule 109 (Extends -> Extends , TypeName .)
    {               reduce using rule 109 (Extends -> Extends , TypeName .)


state 193

    (75) VariableDeclarators -> VariableDeclarators , . VariableDeclarator
    (76) VariableDeclarator -> . DeclaratorName
    (77) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (95) DeclaratorName -> . IDENTIFIER
    (96) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 95

    DeclaratorName                 shift and go to state 261
    VariableDeclarator             shift and go to state 286

state 194

    (88) MethodDeclarator -> DeclaratorName ( . ParameterList )
    (89) MethodDeclarator -> DeclaratorName ( . )
    (91) ParameterList -> . Parameter
    (92) ParameterList -> . ParameterList , Parameter
    (93) Parameter -> . TypeSpecifier DeclaratorName
    (94) Parameter -> . FINAL TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 287
    FINAL           shift and go to state 205
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56
    ParameterList                  shift and go to state 288
    TypeName                       shift and go to state 63
    Parameter                      shift and go to state 204
    TypeSpecifier                  shift and go to state 207

state 195

    (77) VariableDeclarator -> DeclaratorName = . VariableInitializer
    (78) VariableInitializer -> . Expression
    (79) VariableInitializer -> . { }
    (80) VariableInitializer -> . { ArrayInitializers }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    {               shift and go to state 289
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    VariableInitializer            shift and go to state 290
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 291
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 196

    (96) DeclaratorName -> DeclaratorName OP_DIM .

    =               reduce using rule 96 (DeclaratorName -> DeclaratorName OP_DIM .)
    [               reduce using rule 96 (DeclaratorName -> DeclaratorName OP_DIM .)
    ,               reduce using rule 96 (DeclaratorName -> DeclaratorName OP_DIM .)
    ;               reduce using rule 96 (DeclaratorName -> DeclaratorName OP_DIM .)
    )               reduce using rule 96 (DeclaratorName -> DeclaratorName OP_DIM .)
    (               reduce using rule 96 (DeclaratorName -> DeclaratorName OP_DIM .)


state 197

    (87) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    ABSTRACT        reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FINAL           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PROTECTED       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    TRANSIENT       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOLATILE        reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    NATIVE          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SYNCHRONIZED    reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 87 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 198

    (98) MethodBody -> Block .

    ;               reduce using rule 98 (MethodBody -> Block .)
    }               reduce using rule 98 (MethodBody -> Block .)
    STATIC          reduce using rule 98 (MethodBody -> Block .)
    IDENTIFIER      reduce using rule 98 (MethodBody -> Block .)
    {               reduce using rule 98 (MethodBody -> Block .)
    ABSTRACT        reduce using rule 98 (MethodBody -> Block .)
    FINAL           reduce using rule 98 (MethodBody -> Block .)
    PUBLIC          reduce using rule 98 (MethodBody -> Block .)
    PROTECTED       reduce using rule 98 (MethodBody -> Block .)
    PRIVATE         reduce using rule 98 (MethodBody -> Block .)
    TRANSIENT       reduce using rule 98 (MethodBody -> Block .)
    VOLATILE        reduce using rule 98 (MethodBody -> Block .)
    NATIVE          reduce using rule 98 (MethodBody -> Block .)
    SYNCHRONIZED    reduce using rule 98 (MethodBody -> Block .)
    CLASS           reduce using rule 98 (MethodBody -> Block .)
    INTERFACE       reduce using rule 98 (MethodBody -> Block .)
    BOOLEAN         reduce using rule 98 (MethodBody -> Block .)
    CHAR            reduce using rule 98 (MethodBody -> Block .)
    BYTE            reduce using rule 98 (MethodBody -> Block .)
    SHORT           reduce using rule 98 (MethodBody -> Block .)
    INT             reduce using rule 98 (MethodBody -> Block .)
    LONG            reduce using rule 98 (MethodBody -> Block .)
    FLOAT           reduce using rule 98 (MethodBody -> Block .)
    DOUBLE          reduce using rule 98 (MethodBody -> Block .)
    VOID            reduce using rule 98 (MethodBody -> Block .)


state 199

    (99) MethodBody -> ; .

    ;               reduce using rule 99 (MethodBody -> ; .)
    }               reduce using rule 99 (MethodBody -> ; .)
    STATIC          reduce using rule 99 (MethodBody -> ; .)
    IDENTIFIER      reduce using rule 99 (MethodBody -> ; .)
    {               reduce using rule 99 (MethodBody -> ; .)
    ABSTRACT        reduce using rule 99 (MethodBody -> ; .)
    FINAL           reduce using rule 99 (MethodBody -> ; .)
    PUBLIC          reduce using rule 99 (MethodBody -> ; .)
    PROTECTED       reduce using rule 99 (MethodBody -> ; .)
    PRIVATE         reduce using rule 99 (MethodBody -> ; .)
    TRANSIENT       reduce using rule 99 (MethodBody -> ; .)
    VOLATILE        reduce using rule 99 (MethodBody -> ; .)
    NATIVE          reduce using rule 99 (MethodBody -> ; .)
    SYNCHRONIZED    reduce using rule 99 (MethodBody -> ; .)
    CLASS           reduce using rule 99 (MethodBody -> ; .)
    INTERFACE       reduce using rule 99 (MethodBody -> ; .)
    BOOLEAN         reduce using rule 99 (MethodBody -> ; .)
    CHAR            reduce using rule 99 (MethodBody -> ; .)
    BYTE            reduce using rule 99 (MethodBody -> ; .)
    SHORT           reduce using rule 99 (MethodBody -> ; .)
    INT             reduce using rule 99 (MethodBody -> ; .)
    LONG            reduce using rule 99 (MethodBody -> ; .)
    FLOAT           reduce using rule 99 (MethodBody -> ; .)
    DOUBLE          reduce using rule 99 (MethodBody -> ; .)
    VOID            reduce using rule 99 (MethodBody -> ; .)


state 200

    (90) MethodDeclarator -> MethodDeclarator OP_DIM .

    THROWS          reduce using rule 90 (MethodDeclarator -> MethodDeclarator OP_DIM .)
    ;               reduce using rule 90 (MethodDeclarator -> MethodDeclarator OP_DIM .)
    [               reduce using rule 90 (MethodDeclarator -> MethodDeclarator OP_DIM .)
    {               reduce using rule 90 (MethodDeclarator -> MethodDeclarator OP_DIM .)


state 201

    (86) MethodDeclaration -> TypeSpecifier MethodDeclarator Throws . MethodBody
    (98) MethodBody -> . Block
    (99) MethodBody -> . ;
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    ;               shift and go to state 199
    {               shift and go to state 79

    MethodBody                     shift and go to state 292
    Block                          shift and go to state 198

state 202

    (214) OP_DIM -> [ ] .

    =               reduce using rule 214 (OP_DIM -> [ ] .)
    [               reduce using rule 214 (OP_DIM -> [ ] .)
    ;               reduce using rule 214 (OP_DIM -> [ ] .)
    ,               reduce using rule 214 (OP_DIM -> [ ] .)
    )               reduce using rule 214 (OP_DIM -> [ ] .)
    {               reduce using rule 214 (OP_DIM -> [ ] .)
    .               reduce using rule 214 (OP_DIM -> [ ] .)
    OPT_INC_DEC     reduce using rule 214 (OP_DIM -> [ ] .)
    OPT_EQ          reduce using rule 214 (OP_DIM -> [ ] .)
    *               reduce using rule 214 (OP_DIM -> [ ] .)
    /               reduce using rule 214 (OP_DIM -> [ ] .)
    %               reduce using rule 214 (OP_DIM -> [ ] .)
    +               reduce using rule 214 (OP_DIM -> [ ] .)
    -               reduce using rule 214 (OP_DIM -> [ ] .)
    OPT_SOME        reduce using rule 214 (OP_DIM -> [ ] .)
    <               reduce using rule 214 (OP_DIM -> [ ] .)
    >               reduce using rule 214 (OP_DIM -> [ ] .)
    OP_LE           reduce using rule 214 (OP_DIM -> [ ] .)
    OP_GE           reduce using rule 214 (OP_DIM -> [ ] .)
    INSTANCEOF      reduce using rule 214 (OP_DIM -> [ ] .)
    OP_EQ           reduce using rule 214 (OP_DIM -> [ ] .)
    OP_NE           reduce using rule 214 (OP_DIM -> [ ] .)
    &               reduce using rule 214 (OP_DIM -> [ ] .)
    ^               reduce using rule 214 (OP_DIM -> [ ] .)
    |               reduce using rule 214 (OP_DIM -> [ ] .)
    OP_LAND         reduce using rule 214 (OP_DIM -> [ ] .)
    ?               reduce using rule 214 (OP_DIM -> [ ] .)
    OP_LOR          reduce using rule 214 (OP_DIM -> [ ] .)
    :               reduce using rule 214 (OP_DIM -> [ ] .)
    }               reduce using rule 214 (OP_DIM -> [ ] .)
    ]               reduce using rule 214 (OP_DIM -> [ ] .)
    IDENTIFIER      reduce using rule 214 (OP_DIM -> [ ] .)
    THROWS          reduce using rule 214 (OP_DIM -> [ ] .)
    (               reduce using rule 214 (OP_DIM -> [ ] .)


state 203

    (213) Dims -> Dims OP_DIM .

    [               reduce using rule 213 (Dims -> Dims OP_DIM .)
    {               reduce using rule 213 (Dims -> Dims OP_DIM .)
    .               reduce using rule 213 (Dims -> Dims OP_DIM .)
    OPT_INC_DEC     reduce using rule 213 (Dims -> Dims OP_DIM .)
    =               reduce using rule 213 (Dims -> Dims OP_DIM .)
    OPT_EQ          reduce using rule 213 (Dims -> Dims OP_DIM .)
    *               reduce using rule 213 (Dims -> Dims OP_DIM .)
    /               reduce using rule 213 (Dims -> Dims OP_DIM .)
    %               reduce using rule 213 (Dims -> Dims OP_DIM .)
    +               reduce using rule 213 (Dims -> Dims OP_DIM .)
    -               reduce using rule 213 (Dims -> Dims OP_DIM .)
    OPT_SOME        reduce using rule 213 (Dims -> Dims OP_DIM .)
    <               reduce using rule 213 (Dims -> Dims OP_DIM .)
    >               reduce using rule 213 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 213 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 213 (Dims -> Dims OP_DIM .)
    INSTANCEOF      reduce using rule 213 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 213 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 213 (Dims -> Dims OP_DIM .)
    &               reduce using rule 213 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 213 (Dims -> Dims OP_DIM .)
    |               reduce using rule 213 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 213 (Dims -> Dims OP_DIM .)
    ?               reduce using rule 213 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 213 (Dims -> Dims OP_DIM .)
    ;               reduce using rule 213 (Dims -> Dims OP_DIM .)
    )               reduce using rule 213 (Dims -> Dims OP_DIM .)
    :               reduce using rule 213 (Dims -> Dims OP_DIM .)
    ,               reduce using rule 213 (Dims -> Dims OP_DIM .)
    }               reduce using rule 213 (Dims -> Dims OP_DIM .)
    ]               reduce using rule 213 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 213 (Dims -> Dims OP_DIM .)


state 204

    (91) ParameterList -> Parameter .

    )               reduce using rule 91 (ParameterList -> Parameter .)
    ,               reduce using rule 91 (ParameterList -> Parameter .)


state 205

    (94) Parameter -> FINAL . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 63
    TypeSpecifier                  shift and go to state 293

state 206

    (105) ConstructorDeclarator -> IDENTIFIER ( ) .

    THROWS          reduce using rule 105 (ConstructorDeclarator -> IDENTIFIER ( ) .)
    {               reduce using rule 105 (ConstructorDeclarator -> IDENTIFIER ( ) .)


state 207

    (93) Parameter -> TypeSpecifier . DeclaratorName
    (95) DeclaratorName -> . IDENTIFIER
    (96) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 95

    DeclaratorName                 shift and go to state 294

state 208

    (104) ConstructorDeclarator -> IDENTIFIER ( ParameterList . )
    (92) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 295
    ,               shift and go to state 296


state 209

    (72) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (75) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 72 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 193


state 210

    (84) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . Throws MethodBody
    (85) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (90) MethodDeclarator -> MethodDeclarator . OP_DIM
    (97) Throws -> . THROWS ClassNameList
    (98) MethodBody -> . Block
    (99) MethodBody -> . ;
    (214) OP_DIM -> . [ ]
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    THROWS          shift and go to state 105
    ;               shift and go to state 199
    [               shift and go to state 97
    {               shift and go to state 79

    MethodBody                     shift and go to state 297
    Throws                         shift and go to state 298
    OP_DIM                         shift and go to state 200
    Block                          shift and go to state 198

state 211

    (100) ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws . Block
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    {               shift and go to state 79

    Block                          shift and go to state 299

state 212

    (101) ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .

    ;               reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    }               reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    STATIC          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    {               reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    ABSTRACT        reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FINAL           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PROTECTED       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    TRANSIENT       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOLATILE        reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    NATIVE          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SYNCHRONIZED    reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CLASS           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CHAR            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BYTE            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SHORT           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INT             reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LONG            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FLOAT           reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOID            reduce using rule 101 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)


state 213

    (97) Throws -> THROWS ClassNameList .
    (7) ClassNameList -> ClassNameList . , QualifiedName

    {               reduce using rule 97 (Throws -> THROWS ClassNameList .)
    ;               reduce using rule 97 (Throws -> THROWS ClassNameList .)
    ,               shift and go to state 191


state 214

    (102) ConstructorDeclaration -> ConstructorDeclarator Throws Block .

    ;               reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    }               reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    STATIC          reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    IDENTIFIER      reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    {               reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    ABSTRACT        reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    FINAL           reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    PUBLIC          reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    PROTECTED       reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    PRIVATE         reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    TRANSIENT       reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    VOLATILE        reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    NATIVE          reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    SYNCHRONIZED    reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    CLASS           reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    INTERFACE       reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    BOOLEAN         reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    CHAR            reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    BYTE            reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    SHORT           reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    INT             reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    LONG            reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    FLOAT           reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    DOUBLE          reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)
    VOID            reduce using rule 102 (ConstructorDeclaration -> ConstructorDeclarator Throws Block .)


state 215

    (120) Statement -> ExpressionStatement ; .

    WHILE           reduce using rule 120 (Statement -> ExpressionStatement ; .)
    }               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    FINAL           reduce using rule 120 (Statement -> ExpressionStatement ; .)
    ;               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    IDENTIFIER      reduce using rule 120 (Statement -> ExpressionStatement ; .)
    CASE            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    DEFAULT         reduce using rule 120 (Statement -> ExpressionStatement ; .)
    IF              reduce using rule 120 (Statement -> ExpressionStatement ; .)
    SWITCH          reduce using rule 120 (Statement -> ExpressionStatement ; .)
    DO              reduce using rule 120 (Statement -> ExpressionStatement ; .)
    FOR             reduce using rule 120 (Statement -> ExpressionStatement ; .)
    BREAK           reduce using rule 120 (Statement -> ExpressionStatement ; .)
    CONTINUE        reduce using rule 120 (Statement -> ExpressionStatement ; .)
    RETURN          reduce using rule 120 (Statement -> ExpressionStatement ; .)
    THROW           reduce using rule 120 (Statement -> ExpressionStatement ; .)
    SYNCHRONIZED    reduce using rule 120 (Statement -> ExpressionStatement ; .)
    TRY             reduce using rule 120 (Statement -> ExpressionStatement ; .)
    {               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    BOOLEAN         reduce using rule 120 (Statement -> ExpressionStatement ; .)
    CHAR            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    BYTE            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    SHORT           reduce using rule 120 (Statement -> ExpressionStatement ; .)
    INT             reduce using rule 120 (Statement -> ExpressionStatement ; .)
    LONG            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    FLOAT           reduce using rule 120 (Statement -> ExpressionStatement ; .)
    DOUBLE          reduce using rule 120 (Statement -> ExpressionStatement ; .)
    VOID            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    OPT_INC_DEC     reduce using rule 120 (Statement -> ExpressionStatement ; .)
    +               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    -               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    ~               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    !               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    THIS            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    SUPER           reduce using rule 120 (Statement -> ExpressionStatement ; .)
    NULL            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    (               reduce using rule 120 (Statement -> ExpressionStatement ; .)
    FLOAT_LITERAL   reduce using rule 120 (Statement -> ExpressionStatement ; .)
    INT_LITERAL     reduce using rule 120 (Statement -> ExpressionStatement ; .)
    CHAR_LITERAL    reduce using rule 120 (Statement -> ExpressionStatement ; .)
    STRING_LITERAL  reduce using rule 120 (Statement -> ExpressionStatement ; .)
    BOOL            reduce using rule 120 (Statement -> ExpressionStatement ; .)
    NEW             reduce using rule 120 (Statement -> ExpressionStatement ; .)
    ELSE            reduce using rule 120 (Statement -> ExpressionStatement ; .)


state 216

    (185) FieldAccess -> PrimitiveType . . CLASS

    CLASS           shift and go to state 300


state 217

    (253) AndExpression -> AndExpression & . EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 301
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 218

    (231) PrimitiveTypeExpression -> PrimitiveType .
    (232) PrimitiveTypeExpression -> PrimitiveType . Dims
    (185) FieldAccess -> PrimitiveType . . CLASS
    (212) Dims -> . OP_DIM
    (213) Dims -> . Dims OP_DIM
    (214) OP_DIM -> . [ ]

    )               reduce using rule 231 (PrimitiveTypeExpression -> PrimitiveType .)
    .               shift and go to state 216
    [               shift and go to state 97

    Dims                           shift and go to state 302
    OP_DIM                         shift and go to state 98

state 219

    (229) CastExpression -> ( ClassTypeExpression . ) CastExpression

    )               shift and go to state 303


state 220

    (169) ComplexPrimary -> ( Expression . )
    (230) CastExpression -> ( Expression . ) LogicalUnaryExpression

    )               shift and go to state 304


state 221

    (228) CastExpression -> ( PrimitiveTypeExpression . ) CastExpression

    )               shift and go to state 305


state 222

    (233) ClassTypeExpression -> QualifiedName . Dims
    (36) QualifiedName -> QualifiedName . . IDENTIFIER
    (164) PrimaryExpression -> QualifiedName .
    (197) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (179) ArrayAccess -> QualifiedName . [ Expression ]
    (183) FieldAccess -> QualifiedName . . THIS
    (184) FieldAccess -> QualifiedName . . CLASS
    (190) MethodAccess -> QualifiedName .
    (212) Dims -> . OP_DIM
    (213) Dims -> . Dims OP_DIM
    (214) OP_DIM -> . [ ]

    .               shift and go to state 276
    OPT_INC_DEC     reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    )               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    [               shift and go to state 307
    (               reduce using rule 190 (MethodAccess -> QualifiedName .)

    Dims                           shift and go to state 306
    OP_DIM                         shift and go to state 98

state 223

    (127) LabelStatement -> IDENTIFIER : .

    }               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    FINAL           reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    ;               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    IDENTIFIER      reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    CASE            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    DEFAULT         reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    IF              reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    SWITCH          reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    WHILE           reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    DO              reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    FOR             reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    BREAK           reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    CONTINUE        reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    RETURN          reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    THROW           reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    SYNCHRONIZED    reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    TRY             reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    {               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    BOOLEAN         reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    CHAR            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    BYTE            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    SHORT           reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    INT             reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    LONG            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    FLOAT           reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    DOUBLE          reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    VOID            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    OPT_INC_DEC     reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    +               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    -               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    ~               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    !               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    THIS            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    SUPER           reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    NULL            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    (               reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    FLOAT_LITERAL   reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    INT_LITERAL     reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    CHAR_LITERAL    reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    STRING_LITERAL  reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    BOOL            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    NEW             reduce using rule 127 (LabelStatement -> IDENTIFIER : .)
    ELSE            reduce using rule 127 (LabelStatement -> IDENTIFIER : .)


state 224

    (259) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    InclusiveOrExpression          shift and go to state 308
    FieldAccess                    shift and go to state 168
    ExclusiveOrExpression          shift and go to state 140
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 225

    (185) FieldAccess -> PrimitiveType . . CLASS

    .               shift and go to state 216


state 226

    (152) JumpStatement -> RETURN ; .

    }               reduce using rule 152 (JumpStatement -> RETURN ; .)
    FINAL           reduce using rule 152 (JumpStatement -> RETURN ; .)
    ;               reduce using rule 152 (JumpStatement -> RETURN ; .)
    IDENTIFIER      reduce using rule 152 (JumpStatement -> RETURN ; .)
    CASE            reduce using rule 152 (JumpStatement -> RETURN ; .)
    DEFAULT         reduce using rule 152 (JumpStatement -> RETURN ; .)
    IF              reduce using rule 152 (JumpStatement -> RETURN ; .)
    SWITCH          reduce using rule 152 (JumpStatement -> RETURN ; .)
    WHILE           reduce using rule 152 (JumpStatement -> RETURN ; .)
    DO              reduce using rule 152 (JumpStatement -> RETURN ; .)
    FOR             reduce using rule 152 (JumpStatement -> RETURN ; .)
    BREAK           reduce using rule 152 (JumpStatement -> RETURN ; .)
    CONTINUE        reduce using rule 152 (JumpStatement -> RETURN ; .)
    RETURN          reduce using rule 152 (JumpStatement -> RETURN ; .)
    THROW           reduce using rule 152 (JumpStatement -> RETURN ; .)
    SYNCHRONIZED    reduce using rule 152 (JumpStatement -> RETURN ; .)
    TRY             reduce using rule 152 (JumpStatement -> RETURN ; .)
    {               reduce using rule 152 (JumpStatement -> RETURN ; .)
    BOOLEAN         reduce using rule 152 (JumpStatement -> RETURN ; .)
    CHAR            reduce using rule 152 (JumpStatement -> RETURN ; .)
    BYTE            reduce using rule 152 (JumpStatement -> RETURN ; .)
    SHORT           reduce using rule 152 (JumpStatement -> RETURN ; .)
    INT             reduce using rule 152 (JumpStatement -> RETURN ; .)
    LONG            reduce using rule 152 (JumpStatement -> RETURN ; .)
    FLOAT           reduce using rule 152 (JumpStatement -> RETURN ; .)
    DOUBLE          reduce using rule 152 (JumpStatement -> RETURN ; .)
    VOID            reduce using rule 152 (JumpStatement -> RETURN ; .)
    OPT_INC_DEC     reduce using rule 152 (JumpStatement -> RETURN ; .)
    +               reduce using rule 152 (JumpStatement -> RETURN ; .)
    -               reduce using rule 152 (JumpStatement -> RETURN ; .)
    ~               reduce using rule 152 (JumpStatement -> RETURN ; .)
    !               reduce using rule 152 (JumpStatement -> RETURN ; .)
    THIS            reduce using rule 152 (JumpStatement -> RETURN ; .)
    SUPER           reduce using rule 152 (JumpStatement -> RETURN ; .)
    NULL            reduce using rule 152 (JumpStatement -> RETURN ; .)
    (               reduce using rule 152 (JumpStatement -> RETURN ; .)
    FLOAT_LITERAL   reduce using rule 152 (JumpStatement -> RETURN ; .)
    INT_LITERAL     reduce using rule 152 (JumpStatement -> RETURN ; .)
    CHAR_LITERAL    reduce using rule 152 (JumpStatement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 152 (JumpStatement -> RETURN ; .)
    BOOL            reduce using rule 152 (JumpStatement -> RETURN ; .)
    NEW             reduce using rule 152 (JumpStatement -> RETURN ; .)
    ELSE            reduce using rule 152 (JumpStatement -> RETURN ; .)


state 227

    (151) JumpStatement -> RETURN Expression . ;

    ;               shift and go to state 309


state 228

    (164) PrimaryExpression -> QualifiedName .
    (36) QualifiedName -> QualifiedName . . IDENTIFIER
    (197) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (179) ArrayAccess -> QualifiedName . [ Expression ]
    (183) FieldAccess -> QualifiedName . . THIS
    (184) FieldAccess -> QualifiedName . . CLASS
    (190) MethodAccess -> QualifiedName .

    OPT_INC_DEC     reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    )               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    }               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    ]               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    :               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 164 (PrimaryExpression -> QualifiedName .)
    .               shift and go to state 276
    [               shift and go to state 277
    (               reduce using rule 190 (MethodAccess -> QualifiedName .)


state 229

    (154) GuardingStatement -> SYNCHRONIZED ( . Expression ) Statement
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 310
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 230

    (182) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    IDENTIFIER      shift and go to state 311


state 231

    (219) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    =               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_EQ          reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    *               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    /               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    %               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    +               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    -               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_SOME        reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    <               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    >               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    INSTANCEOF      reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ?               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    )               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ,               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    }               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ;               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    :               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ]               reduce using rule 219 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 232

    (228) CastExpression -> ( . PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> ( . ClassTypeExpression ) CastExpression
    (230) CastExpression -> ( . Expression ) LogicalUnaryExpression
    (169) ComplexPrimary -> ( . Expression )
    (231) PrimitiveTypeExpression -> . PrimitiveType
    (232) PrimitiveTypeExpression -> . PrimitiveType Dims
    (233) ClassTypeExpression -> . QualifiedName Dims
    (268) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 218
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 222
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 312
    AdditiveExpression             shift and go to state 161
    PrimitiveTypeExpression        shift and go to state 221
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    ClassTypeExpression            shift and go to state 219
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 233

    (227) CastExpression -> UnaryExpression .

    *               reduce using rule 227 (CastExpression -> UnaryExpression .)
    /               reduce using rule 227 (CastExpression -> UnaryExpression .)
    %               reduce using rule 227 (CastExpression -> UnaryExpression .)
    +               reduce using rule 227 (CastExpression -> UnaryExpression .)
    -               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 227 (CastExpression -> UnaryExpression .)
    <               reduce using rule 227 (CastExpression -> UnaryExpression .)
    >               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 227 (CastExpression -> UnaryExpression .)
    INSTANCEOF      reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 227 (CastExpression -> UnaryExpression .)
    &               reduce using rule 227 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 227 (CastExpression -> UnaryExpression .)
    |               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 227 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 227 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 227 (CastExpression -> UnaryExpression .)
    )               reduce using rule 227 (CastExpression -> UnaryExpression .)
    :               reduce using rule 227 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 227 (CastExpression -> UnaryExpression .)
    }               reduce using rule 227 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 227 (CastExpression -> UnaryExpression .)
    =               reduce using rule 227 (CastExpression -> UnaryExpression .)
    OPT_EQ          reduce using rule 227 (CastExpression -> UnaryExpression .)


state 234

    (117) LocalVariableDeclarationStatement -> FINAL TypeSpecifier . VariableDeclarators ;
    (74) VariableDeclarators -> . VariableDeclarator
    (75) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (76) VariableDeclarator -> . DeclaratorName
    (77) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (95) DeclaratorName -> . IDENTIFIER
    (96) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 95

    VariableDeclarators            shift and go to state 313
    DeclaratorName                 shift and go to state 261
    VariableDeclarator             shift and go to state 96

state 235

    (251) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    RelationalExpression           shift and go to state 314
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 236

    (250) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    RelationalExpression           shift and go to state 315
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 237

    (235) MultiplicativeExpression -> MultiplicativeExpression * . CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 316
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    PrimaryExpression              shift and go to state 155
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 238

    (237) MultiplicativeExpression -> MultiplicativeExpression % . CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 317
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    PrimaryExpression              shift and go to state 155
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 239

    (236) MultiplicativeExpression -> MultiplicativeExpression / . CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 318
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    PrimaryExpression              shift and go to state 155
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 240

    (137) IterationStatement -> FOR ( . ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> FOR ( . ForInit ForExpr ) Statement
    (139) ForInit -> . ExpressionStatements ;
    (140) ForInit -> . LocalVariableDeclarationStatement
    (141) ForInit -> . ;
    (145) ExpressionStatements -> . ExpressionStatement
    (146) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (116) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ;
    (117) LocalVariableDeclarationStatement -> . FINAL TypeSpecifier VariableDeclarators ;
    (130) ExpressionStatement -> . Expression
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (268) Expression -> . AssignmentExpression
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 320
    FINAL           shift and go to state 124
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    ArithmeticUnaryOperator        shift and go to state 123
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ExpressionStatement            shift and go to state 319
    PrimitiveType                  shift and go to state 110
    RealPostfixExpression          shift and go to state 122
    AndExpression                  shift and go to state 112
    MultiplicativeExpression       shift and go to state 127
    TypeSpecifier                  shift and go to state 154
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    QualifiedName                  shift and go to state 175
    ComplexPrimaryNoParenthesis    shift and go to state 126
    TypeName                       shift and go to state 63
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    LocalVariableDeclarationStatement shift and go to state 323
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    LogicalUnaryOperator           shift and go to state 181
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    ForInit                        shift and go to state 321
    InclusiveOrExpression          shift and go to state 164
    PrimaryExpression              shift and go to state 155
    ExpressionStatements           shift and go to state 322
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 241

    (155) GuardingStatement -> TRY Block . Finally
    (156) GuardingStatement -> TRY Block . Catches
    (157) GuardingStatement -> TRY Block . Catches Finally
    (163) Finally -> . FINALLY Block
    (158) Catches -> . Catch
    (159) Catches -> . Catches Catch
    (160) Catch -> . CatchHeader Block
    (161) CatchHeader -> . CATCH ( TypeSpecifier IDENTIFIER )
    (162) CatchHeader -> . CATCH ( TypeSpecifier )

    FINALLY         shift and go to state 325
    CATCH           shift and go to state 326

    Catches                        shift and go to state 324
    CatchHeader                    shift and go to state 327
    Finally                        shift and go to state 328
    Catch                          shift and go to state 329

state 242

    (169) ComplexPrimary -> ( . Expression )
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 330
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 243

    (218) UnaryExpression -> OPT_INC_DEC UnaryExpression .

    =               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_EQ          reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    *               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    /               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    %               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    +               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    -               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_SOME        reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    <               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    >               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LE           reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_GE           reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    INSTANCEOF      reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_EQ           reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_NE           reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    &               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ^               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    |               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LAND         reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ?               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LOR          reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    )               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ,               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    }               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ;               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    :               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ]               reduce using rule 218 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)


state 244

    (200) PlainNewAllocationExpression -> ArrayAllocationExpression { . }
    (202) PlainNewAllocationExpression -> ArrayAllocationExpression { . ArrayInitializers }
    (81) ArrayInitializers -> . VariableInitializer
    (82) ArrayInitializers -> . ArrayInitializers , VariableInitializer
    (83) ArrayInitializers -> . ArrayInitializers ,
    (78) VariableInitializer -> . Expression
    (79) VariableInitializer -> . { }
    (80) VariableInitializer -> . { ArrayInitializers }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 331
    {               shift and go to state 289
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    VariableInitializer            shift and go to state 333
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ArrayInitializers              shift and go to state 332
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 291
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 245

    (186) MethodCall -> MethodAccess ( . ArgumentList )
    (187) MethodCall -> MethodAccess ( . )
    (194) ArgumentList -> . Expression
    (195) ArgumentList -> . ArgumentList , Expression
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    )               shift and go to state 336
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    FieldAccess                    shift and go to state 168
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    ArgumentList                   shift and go to state 334
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 335
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    SpecialName                    shift and go to state 145

state 246

    (255) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 337
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 247

    (248) RelationalExpression -> RelationalExpression INSTANCEOF . TypeSpecifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 62
    TypeName                       shift and go to state 63
    PrimitiveType                  shift and go to state 56
    TypeSpecifier                  shift and go to state 338

state 248

    (244) RelationalExpression -> RelationalExpression < . ShiftExpression
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 339
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 249

    (246) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 340
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 250

    (247) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 341
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 251

    (245) RelationalExpression -> RelationalExpression > . ShiftExpression
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 342
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 252

    (149) JumpStatement -> CONTINUE IDENTIFIER . ;

    ;               shift and go to state 343


state 253

    (150) JumpStatement -> CONTINUE ; .

    }               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    FINAL           reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    ;               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    CASE            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    DEFAULT         reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    IF              reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    SWITCH          reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    WHILE           reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    DO              reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    FOR             reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    BREAK           reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    CONTINUE        reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    RETURN          reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    THROW           reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    SYNCHRONIZED    reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    TRY             reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    {               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    BOOLEAN         reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    CHAR            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    BYTE            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    SHORT           reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    INT             reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    LONG            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    FLOAT           reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    DOUBLE          reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    VOID            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    OPT_INC_DEC     reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    +               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    -               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    ~               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    !               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    THIS            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    SUPER           reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    NULL            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    (               reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    FLOAT_LITERAL   reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    INT_LITERAL     reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    CHAR_LITERAL    reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    BOOL            reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    NEW             reduce using rule 150 (JumpStatement -> CONTINUE ; .)
    ELSE            reduce using rule 150 (JumpStatement -> CONTINUE ; .)


state 254

    (180) ArrayAccess -> ComplexPrimary [ . Expression ]
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    ComplexPrimary                 shift and go to state 146
    PostfixExpression              shift and go to state 147
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 344
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 255

    (217) RealPostfixExpression -> PostfixExpression OPT_INC_DEC .

    .               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_INC_DEC     reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    =               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_EQ          reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    *               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    /               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    %               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    +               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    -               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_SOME        reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    <               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    >               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LE           reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_GE           reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    INSTANCEOF      reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_EQ           reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_NE           reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    &               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ^               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    |               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LAND         reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ?               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LOR          reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    )               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ;               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ,               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    }               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ]               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    :               reduce using rule 217 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)


state 256

    (201) PlainNewAllocationExpression -> ClassAllocationExpression { . }
    (203) PlainNewAllocationExpression -> ClassAllocationExpression { . FieldDeclarations }
    (62) FieldDeclarations -> . FieldDeclarationOptSemi
    (63) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (64) FieldDeclarationOptSemi -> . FieldDeclaration
    (65) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (66) FieldDeclaration -> . FieldVariableDeclaration ;
    (67) FieldDeclaration -> . MethodDeclaration
    (68) FieldDeclaration -> . ConstructorDeclaration
    (69) FieldDeclaration -> . StaticInitializer
    (70) FieldDeclaration -> . NonStaticInitializer
    (71) FieldDeclaration -> . TypeDeclaration
    (72) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (73) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (84) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (86) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (100) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (102) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Block
    (106) StaticInitializer -> . STATIC Block
    (107) NonStaticInitializer -> . Block
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (105) ConstructorDeclarator -> . IDENTIFIER ( )
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 346
    STATIC          shift and go to state 58
    IDENTIFIER      shift and go to state 65
    {               shift and go to state 79
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 60
    TypeSpecifier                  shift and go to state 61
    QualifiedName                  shift and go to state 62
    TypeName                       shift and go to state 63
    MethodDeclaration              shift and go to state 66
    Modifiers                      shift and go to state 68
    ConstructorDeclaration         shift and go to state 53
    FieldDeclarations              shift and go to state 345
    Modifier                       shift and go to state 17
    Block                          shift and go to state 71
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 72
    ConstructorDeclarator          shift and go to state 73
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 78

state 257

    (129) LabelStatement -> DEFAULT : .

    }               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    FINAL           reduce using rule 129 (LabelStatement -> DEFAULT : .)
    ;               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    IDENTIFIER      reduce using rule 129 (LabelStatement -> DEFAULT : .)
    CASE            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    DEFAULT         reduce using rule 129 (LabelStatement -> DEFAULT : .)
    IF              reduce using rule 129 (LabelStatement -> DEFAULT : .)
    SWITCH          reduce using rule 129 (LabelStatement -> DEFAULT : .)
    WHILE           reduce using rule 129 (LabelStatement -> DEFAULT : .)
    DO              reduce using rule 129 (LabelStatement -> DEFAULT : .)
    FOR             reduce using rule 129 (LabelStatement -> DEFAULT : .)
    BREAK           reduce using rule 129 (LabelStatement -> DEFAULT : .)
    CONTINUE        reduce using rule 129 (LabelStatement -> DEFAULT : .)
    RETURN          reduce using rule 129 (LabelStatement -> DEFAULT : .)
    THROW           reduce using rule 129 (LabelStatement -> DEFAULT : .)
    SYNCHRONIZED    reduce using rule 129 (LabelStatement -> DEFAULT : .)
    TRY             reduce using rule 129 (LabelStatement -> DEFAULT : .)
    {               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    BOOLEAN         reduce using rule 129 (LabelStatement -> DEFAULT : .)
    CHAR            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    BYTE            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    SHORT           reduce using rule 129 (LabelStatement -> DEFAULT : .)
    INT             reduce using rule 129 (LabelStatement -> DEFAULT : .)
    LONG            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    FLOAT           reduce using rule 129 (LabelStatement -> DEFAULT : .)
    DOUBLE          reduce using rule 129 (LabelStatement -> DEFAULT : .)
    VOID            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    OPT_INC_DEC     reduce using rule 129 (LabelStatement -> DEFAULT : .)
    +               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    -               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    ~               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    !               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    THIS            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    SUPER           reduce using rule 129 (LabelStatement -> DEFAULT : .)
    NULL            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    (               reduce using rule 129 (LabelStatement -> DEFAULT : .)
    FLOAT_LITERAL   reduce using rule 129 (LabelStatement -> DEFAULT : .)
    INT_LITERAL     reduce using rule 129 (LabelStatement -> DEFAULT : .)
    CHAR_LITERAL    reduce using rule 129 (LabelStatement -> DEFAULT : .)
    STRING_LITERAL  reduce using rule 129 (LabelStatement -> DEFAULT : .)
    BOOL            reduce using rule 129 (LabelStatement -> DEFAULT : .)
    NEW             reduce using rule 129 (LabelStatement -> DEFAULT : .)
    ELSE            reduce using rule 129 (LabelStatement -> DEFAULT : .)


state 258

    (135) IterationStatement -> WHILE ( . Expression ) Statement
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 347
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 259

    (206) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (207) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (208) ArrayAllocationExpression -> NEW TypeName . Dims
    (204) ClassAllocationExpression -> NEW TypeName . ( ArgumentList )
    (205) ClassAllocationExpression -> NEW TypeName . ( )
    (209) DimExprs -> . DimExpr
    (210) DimExprs -> . DimExprs DimExpr
    (212) Dims -> . OP_DIM
    (213) Dims -> . Dims OP_DIM
    (211) DimExpr -> . [ Expression ]
    (214) OP_DIM -> . [ ]

    (               shift and go to state 348
    [               shift and go to state 351

    Dims                           shift and go to state 350
    DimExpr                        shift and go to state 352
    DimExprs                       shift and go to state 349
    OP_DIM                         shift and go to state 98

state 260

    (116) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . ;
    (75) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               shift and go to state 353
    ,               shift and go to state 193


state 261

    (76) VariableDeclarator -> DeclaratorName .
    (77) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (96) DeclaratorName -> DeclaratorName . OP_DIM
    (214) OP_DIM -> . [ ]

    ;               reduce using rule 76 (VariableDeclarator -> DeclaratorName .)
    ,               reduce using rule 76 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 195
    [               shift and go to state 97

    OP_DIM                         shift and go to state 196

state 262

    (269) ConstantExpression -> ConditionalExpression .

    :               reduce using rule 269 (ConstantExpression -> ConditionalExpression .)


state 263

    (128) LabelStatement -> CASE ConstantExpression . :

    :               shift and go to state 354


state 264

    (132) SelectionStatement -> SWITCH ( . Expression ) Block
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 355
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 265

    (261) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . ConditionalAndExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    InclusiveOrExpression          shift and go to state 164
    FieldAccess                    shift and go to state 168
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 356
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 266

    (263) ConditionalExpression -> ConditionalOrExpression ? . Expression : ConditionalExpression
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 357
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 267

    (239) AdditiveExpression -> AdditiveExpression + . MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 358
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    PrimaryExpression              shift and go to state 155
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 268

    (240) AdditiveExpression -> AdditiveExpression - . MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 359
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    PrimaryExpression              shift and go to state 155
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 269

    (265) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 360
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 270

    (267) AssignmentOperator -> OPT_EQ .

    OPT_INC_DEC     reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    +               reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    -               reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    ~               reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    !               reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    IDENTIFIER      reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    THIS            reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    SUPER           reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    NULL            reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    (               reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    FLOAT_LITERAL   reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    INT_LITERAL     reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    CHAR_LITERAL    reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    STRING_LITERAL  reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    BOOL            reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    NEW             reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    BOOLEAN         reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    CHAR            reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    BYTE            reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    SHORT           reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    INT             reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    LONG            reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    FLOAT           reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    DOUBLE          reduce using rule 267 (AssignmentOperator -> OPT_EQ .)
    VOID            reduce using rule 267 (AssignmentOperator -> OPT_EQ .)


state 271

    (266) AssignmentOperator -> = .

    OPT_INC_DEC     reduce using rule 266 (AssignmentOperator -> = .)
    +               reduce using rule 266 (AssignmentOperator -> = .)
    -               reduce using rule 266 (AssignmentOperator -> = .)
    ~               reduce using rule 266 (AssignmentOperator -> = .)
    !               reduce using rule 266 (AssignmentOperator -> = .)
    IDENTIFIER      reduce using rule 266 (AssignmentOperator -> = .)
    THIS            reduce using rule 266 (AssignmentOperator -> = .)
    SUPER           reduce using rule 266 (AssignmentOperator -> = .)
    NULL            reduce using rule 266 (AssignmentOperator -> = .)
    (               reduce using rule 266 (AssignmentOperator -> = .)
    FLOAT_LITERAL   reduce using rule 266 (AssignmentOperator -> = .)
    INT_LITERAL     reduce using rule 266 (AssignmentOperator -> = .)
    CHAR_LITERAL    reduce using rule 266 (AssignmentOperator -> = .)
    STRING_LITERAL  reduce using rule 266 (AssignmentOperator -> = .)
    BOOL            reduce using rule 266 (AssignmentOperator -> = .)
    NEW             reduce using rule 266 (AssignmentOperator -> = .)
    BOOLEAN         reduce using rule 266 (AssignmentOperator -> = .)
    CHAR            reduce using rule 266 (AssignmentOperator -> = .)
    BYTE            reduce using rule 266 (AssignmentOperator -> = .)
    SHORT           reduce using rule 266 (AssignmentOperator -> = .)
    INT             reduce using rule 266 (AssignmentOperator -> = .)
    LONG            reduce using rule 266 (AssignmentOperator -> = .)
    FLOAT           reduce using rule 266 (AssignmentOperator -> = .)
    DOUBLE          reduce using rule 266 (AssignmentOperator -> = .)
    VOID            reduce using rule 266 (AssignmentOperator -> = .)


state 272

    (257) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    ExclusiveOrExpression          shift and go to state 361
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 273

    (148) JumpStatement -> BREAK ; .

    }               reduce using rule 148 (JumpStatement -> BREAK ; .)
    FINAL           reduce using rule 148 (JumpStatement -> BREAK ; .)
    ;               reduce using rule 148 (JumpStatement -> BREAK ; .)
    IDENTIFIER      reduce using rule 148 (JumpStatement -> BREAK ; .)
    CASE            reduce using rule 148 (JumpStatement -> BREAK ; .)
    DEFAULT         reduce using rule 148 (JumpStatement -> BREAK ; .)
    IF              reduce using rule 148 (JumpStatement -> BREAK ; .)
    SWITCH          reduce using rule 148 (JumpStatement -> BREAK ; .)
    WHILE           reduce using rule 148 (JumpStatement -> BREAK ; .)
    DO              reduce using rule 148 (JumpStatement -> BREAK ; .)
    FOR             reduce using rule 148 (JumpStatement -> BREAK ; .)
    BREAK           reduce using rule 148 (JumpStatement -> BREAK ; .)
    CONTINUE        reduce using rule 148 (JumpStatement -> BREAK ; .)
    RETURN          reduce using rule 148 (JumpStatement -> BREAK ; .)
    THROW           reduce using rule 148 (JumpStatement -> BREAK ; .)
    SYNCHRONIZED    reduce using rule 148 (JumpStatement -> BREAK ; .)
    TRY             reduce using rule 148 (JumpStatement -> BREAK ; .)
    {               reduce using rule 148 (JumpStatement -> BREAK ; .)
    BOOLEAN         reduce using rule 148 (JumpStatement -> BREAK ; .)
    CHAR            reduce using rule 148 (JumpStatement -> BREAK ; .)
    BYTE            reduce using rule 148 (JumpStatement -> BREAK ; .)
    SHORT           reduce using rule 148 (JumpStatement -> BREAK ; .)
    INT             reduce using rule 148 (JumpStatement -> BREAK ; .)
    LONG            reduce using rule 148 (JumpStatement -> BREAK ; .)
    FLOAT           reduce using rule 148 (JumpStatement -> BREAK ; .)
    DOUBLE          reduce using rule 148 (JumpStatement -> BREAK ; .)
    VOID            reduce using rule 148 (JumpStatement -> BREAK ; .)
    OPT_INC_DEC     reduce using rule 148 (JumpStatement -> BREAK ; .)
    +               reduce using rule 148 (JumpStatement -> BREAK ; .)
    -               reduce using rule 148 (JumpStatement -> BREAK ; .)
    ~               reduce using rule 148 (JumpStatement -> BREAK ; .)
    !               reduce using rule 148 (JumpStatement -> BREAK ; .)
    THIS            reduce using rule 148 (JumpStatement -> BREAK ; .)
    SUPER           reduce using rule 148 (JumpStatement -> BREAK ; .)
    NULL            reduce using rule 148 (JumpStatement -> BREAK ; .)
    (               reduce using rule 148 (JumpStatement -> BREAK ; .)
    FLOAT_LITERAL   reduce using rule 148 (JumpStatement -> BREAK ; .)
    INT_LITERAL     reduce using rule 148 (JumpStatement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 148 (JumpStatement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 148 (JumpStatement -> BREAK ; .)
    BOOL            reduce using rule 148 (JumpStatement -> BREAK ; .)
    NEW             reduce using rule 148 (JumpStatement -> BREAK ; .)
    ELSE            reduce using rule 148 (JumpStatement -> BREAK ; .)


state 274

    (147) JumpStatement -> BREAK IDENTIFIER . ;

    ;               shift and go to state 362


state 275

    (136) IterationStatement -> DO Statement . WHILE ( Expression ) ;

    WHILE           shift and go to state 363


state 276

    (36) QualifiedName -> QualifiedName . . IDENTIFIER
    (197) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (183) FieldAccess -> QualifiedName . . THIS
    (184) FieldAccess -> QualifiedName . . CLASS
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )

    IDENTIFIER      shift and go to state 82
    THIS            shift and go to state 364
    CLASS           shift and go to state 366
    NEW             shift and go to state 152

    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    PlainNewAllocationExpression   shift and go to state 365

state 277

    (179) ArrayAccess -> QualifiedName [ . Expression ]
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    QualifiedName                  shift and go to state 228
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    LogicalUnaryOperator           shift and go to state 181
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 367
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 278

    (242) ShiftExpression -> ShiftExpression OPT_SOME . AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 368
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 279

    (113) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    }               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FINAL           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SYNCHRONIZED    reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    TRY             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    {               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    +               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    -               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    !               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    (               reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 113 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 280

    (110) Block -> { LocalVariableDeclarationsAndStatements } .

    ;               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    }               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    STATIC          reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    IDENTIFIER      reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    {               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    ABSTRACT        reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FINAL           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    PUBLIC          reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    PROTECTED       reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    PRIVATE         reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    TRANSIENT       reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    VOLATILE        reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    NATIVE          reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SYNCHRONIZED    reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CLASS           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INTERFACE       reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BOOLEAN         reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CHAR            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BYTE            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SHORT           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INT             reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    LONG            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DOUBLE          reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    VOID            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CASE            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DEFAULT         reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    IF              reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SWITCH          reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    WHILE           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DO              reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FOR             reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BREAK           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CONTINUE        reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    RETURN          reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    THROW           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    TRY             reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    OPT_INC_DEC     reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    +               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    -               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    ~               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    !               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    THIS            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SUPER           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    NULL            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    (               reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT_LITERAL   reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INT_LITERAL     reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CHAR_LITERAL    reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    STRING_LITERAL  reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BOOL            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    NEW             reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    ELSE            reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FINALLY         reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CATCH           reduce using rule 110 (Block -> { LocalVariableDeclarationsAndStatements } .)


state 281

    (181) FieldAccess -> NotJustName . . IDENTIFIER

    IDENTIFIER      shift and go to state 369


state 282

    (222) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    *               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    /               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    %               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    +               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    -               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_SOME        reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    <               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    >               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    INSTANCEOF      reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ?               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ;               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    )               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    :               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ,               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    }               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ]               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    =               reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_EQ          reduce using rule 222 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 283

    (131) SelectionStatement -> IF ( . Expression ) Statement ElseOrNot
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 370
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 284

    (153) JumpStatement -> THROW Expression . ;

    ;               shift and go to state 371


state 285

    (7) ClassNameList -> ClassNameList , QualifiedName .
    (36) QualifiedName -> QualifiedName . . IDENTIFIER

    ,               reduce using rule 7 (ClassNameList -> ClassNameList , QualifiedName .)
    {               reduce using rule 7 (ClassNameList -> ClassNameList , QualifiedName .)
    ;               reduce using rule 7 (ClassNameList -> ClassNameList , QualifiedName .)
    .               shift and go to state 45


state 286

    (75) VariableDeclarators -> VariableDeclarators , VariableDeclarator .

    ;               reduce using rule 75 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)
    ,               reduce using rule 75 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)


state 287

    (89) MethodDeclarator -> DeclaratorName ( ) .

    THROWS          reduce using rule 89 (MethodDeclarator -> DeclaratorName ( ) .)
    ;               reduce using rule 89 (MethodDeclarator -> DeclaratorName ( ) .)
    [               reduce using rule 89 (MethodDeclarator -> DeclaratorName ( ) .)
    {               reduce using rule 89 (MethodDeclarator -> DeclaratorName ( ) .)


state 288

    (88) MethodDeclarator -> DeclaratorName ( ParameterList . )
    (92) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 372
    ,               shift and go to state 296


state 289

    (79) VariableInitializer -> { . }
    (80) VariableInitializer -> { . ArrayInitializers }
    (81) ArrayInitializers -> . VariableInitializer
    (82) ArrayInitializers -> . ArrayInitializers , VariableInitializer
    (83) ArrayInitializers -> . ArrayInitializers ,
    (78) VariableInitializer -> . Expression
    (79) VariableInitializer -> . { }
    (80) VariableInitializer -> . { ArrayInitializers }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 373
    {               shift and go to state 289
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    VariableInitializer            shift and go to state 333
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ArrayInitializers              shift and go to state 374
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 291
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 290

    (77) VariableDeclarator -> DeclaratorName = VariableInitializer .

    ,               reduce using rule 77 (VariableDeclarator -> DeclaratorName = VariableInitializer .)
    ;               reduce using rule 77 (VariableDeclarator -> DeclaratorName = VariableInitializer .)


state 291

    (78) VariableInitializer -> Expression .

    }               reduce using rule 78 (VariableInitializer -> Expression .)
    ,               reduce using rule 78 (VariableInitializer -> Expression .)
    ;               reduce using rule 78 (VariableInitializer -> Expression .)


state 292

    (86) MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .

    ;               reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    }               reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    STATIC          reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    IDENTIFIER      reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    {               reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    ABSTRACT        reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    FINAL           reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    PUBLIC          reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    PROTECTED       reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    PRIVATE         reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    TRANSIENT       reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOLATILE        reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    NATIVE          reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    SYNCHRONIZED    reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    CLASS           reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    INTERFACE       reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    BOOLEAN         reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    CHAR            reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    BYTE            reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    SHORT           reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    INT             reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    LONG            reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    FLOAT           reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    DOUBLE          reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOID            reduce using rule 86 (MethodDeclaration -> TypeSpecifier MethodDeclarator Throws MethodBody .)


state 293

    (94) Parameter -> FINAL TypeSpecifier . DeclaratorName
    (95) DeclaratorName -> . IDENTIFIER
    (96) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 95

    DeclaratorName                 shift and go to state 375

state 294

    (93) Parameter -> TypeSpecifier DeclaratorName .
    (96) DeclaratorName -> DeclaratorName . OP_DIM
    (214) OP_DIM -> . [ ]

    )               reduce using rule 93 (Parameter -> TypeSpecifier DeclaratorName .)
    ,               reduce using rule 93 (Parameter -> TypeSpecifier DeclaratorName .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 196

state 295

    (104) ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .

    THROWS          reduce using rule 104 (ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .)
    {               reduce using rule 104 (ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .)


state 296

    (92) ParameterList -> ParameterList , . Parameter
    (93) Parameter -> . TypeSpecifier DeclaratorName
    (94) Parameter -> . FINAL TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    FINAL           shift and go to state 205
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    QualifiedName                  shift and go to state 62
    PrimitiveType                  shift and go to state 56
    TypeName                       shift and go to state 63
    Parameter                      shift and go to state 376
    TypeSpecifier                  shift and go to state 207

state 297

    (85) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    ABSTRACT        reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FINAL           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PROTECTED       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    TRANSIENT       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOLATILE        reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    NATIVE          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SYNCHRONIZED    reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 85 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 298

    (84) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws . MethodBody
    (98) MethodBody -> . Block
    (99) MethodBody -> . ;
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    ;               shift and go to state 199
    {               shift and go to state 79

    MethodBody                     shift and go to state 377
    Block                          shift and go to state 198

state 299

    (100) ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .

    ;               reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    }               reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    STATIC          reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    IDENTIFIER      reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    {               reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    ABSTRACT        reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    FINAL           reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    PUBLIC          reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    PROTECTED       reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    PRIVATE         reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    TRANSIENT       reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    VOLATILE        reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    NATIVE          reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    SYNCHRONIZED    reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    CLASS           reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    INTERFACE       reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    BOOLEAN         reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    CHAR            reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    BYTE            reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    SHORT           reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    INT             reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    LONG            reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    FLOAT           reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    DOUBLE          reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)
    VOID            reduce using rule 100 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Throws Block .)


state 300

    (185) FieldAccess -> PrimitiveType . CLASS .

    [               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    .               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_INC_DEC     reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    =               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_EQ          reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    *               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    /               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    %               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    +               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    -               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_SOME        reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    <               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    >               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LE           reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OP_GE           reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    INSTANCEOF      reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OP_EQ           reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OP_NE           reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    &               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    ^               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    |               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LAND         reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    ?               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LOR          reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    )               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    (               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    ,               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    ;               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    :               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    }               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)
    ]               reduce using rule 185 (FieldAccess -> PrimitiveType . CLASS .)


state 301

    (253) AndExpression -> AndExpression & EqualityExpression .
    (250) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (251) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    ?               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    ;               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    )               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    :               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    ,               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    }               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    ]               reduce using rule 253 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 236
    OP_NE           shift and go to state 235


state 302

    (232) PrimitiveTypeExpression -> PrimitiveType Dims .
    (213) Dims -> Dims . OP_DIM
    (214) OP_DIM -> . [ ]

    )               reduce using rule 232 (PrimitiveTypeExpression -> PrimitiveType Dims .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 203

state 303

    (229) CastExpression -> ( ClassTypeExpression ) . CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    CastExpression                 shift and go to state 378
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 304

    (169) ComplexPrimary -> ( Expression ) .
    (230) CastExpression -> ( Expression ) . LogicalUnaryExpression
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    [               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    INSTANCEOF      reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 242
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    MethodCall                     shift and go to state 129
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    ArrayAccess                    shift and go to state 136
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 379
    ArrayAllocationExpression      shift and go to state 138
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 305

    (228) CastExpression -> ( PrimitiveTypeExpression ) . CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 380
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    ClassAllocationExpression      shift and go to state 148
    QualifiedName                  shift and go to state 228
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    ArrayAllocationExpression      shift and go to state 138
    MethodCall                     shift and go to state 129
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 233
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 306

    (233) ClassTypeExpression -> QualifiedName Dims .
    (213) Dims -> Dims . OP_DIM
    (214) OP_DIM -> . [ ]

    )               reduce using rule 233 (ClassTypeExpression -> QualifiedName Dims .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 203

state 307

    (179) ArrayAccess -> QualifiedName [ . Expression ]
    (214) OP_DIM -> [ . ]
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ]               shift and go to state 202
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    QualifiedName                  shift and go to state 228
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    LogicalUnaryOperator           shift and go to state 181
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 367
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 308

    (259) ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .
    (257) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ?               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    OP_LOR          reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ;               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    )               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ,               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ]               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    :               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    }               reduce using rule 259 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    |               shift and go to state 272


state 309

    (151) JumpStatement -> RETURN Expression ; .

    }               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    FINAL           reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    ;               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    IDENTIFIER      reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    CASE            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    DEFAULT         reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    IF              reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    SWITCH          reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    DO              reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    FOR             reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    CONTINUE        reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    THROW           reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    SYNCHRONIZED    reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    TRY             reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    {               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    BOOLEAN         reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    CHAR            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    BYTE            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    SHORT           reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    INT             reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    LONG            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    FLOAT           reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    DOUBLE          reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    VOID            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    OPT_INC_DEC     reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    +               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    -               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    ~               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    !               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    THIS            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    SUPER           reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    NULL            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    (               reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    FLOAT_LITERAL   reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    INT_LITERAL     reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    CHAR_LITERAL    reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    STRING_LITERAL  reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    BOOL            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    NEW             reduce using rule 151 (JumpStatement -> RETURN Expression ; .)
    ELSE            reduce using rule 151 (JumpStatement -> RETURN Expression ; .)


state 310

    (154) GuardingStatement -> SYNCHRONIZED ( Expression . ) Statement

    )               shift and go to state 381


state 311

    (182) FieldAccess -> RealPostfixExpression . IDENTIFIER .

    [               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    .               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    =               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_EQ          reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    *               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    /               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    %               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    +               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    -               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_SOME        reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    <               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    >               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LE           reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_GE           reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    INSTANCEOF      reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_EQ           reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_NE           reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    &               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ^               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    |               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LAND         reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ?               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LOR          reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    )               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    (               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ,               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ;               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    :               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    }               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ]               reduce using rule 182 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)


state 312

    (230) CastExpression -> ( Expression . ) LogicalUnaryExpression
    (169) ComplexPrimary -> ( Expression . )

    )               shift and go to state 382


state 313

    (117) LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators . ;
    (75) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               shift and go to state 383
    ,               shift and go to state 193


state 314

    (251) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (244) RelationalExpression -> RelationalExpression . < ShiftExpression
    (245) RelationalExpression -> RelationalExpression . > ShiftExpression
    (246) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (247) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (248) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ?               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    )               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ,               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ;               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    :               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    }               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ]               reduce using rule 251 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    <               shift and go to state 248
    >               shift and go to state 251
    OP_LE           shift and go to state 249
    OP_GE           shift and go to state 250
    INSTANCEOF      shift and go to state 247


state 315

    (250) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (244) RelationalExpression -> RelationalExpression . < ShiftExpression
    (245) RelationalExpression -> RelationalExpression . > ShiftExpression
    (246) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (247) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (248) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ?               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    )               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ,               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ;               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    :               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    }               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ]               reduce using rule 250 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    <               shift and go to state 248
    >               shift and go to state 251
    OP_LE           shift and go to state 249
    OP_GE           shift and go to state 250
    INSTANCEOF      shift and go to state 247


state 316

    (235) MultiplicativeExpression -> MultiplicativeExpression * CastExpression .

    *               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    /               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    %               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    +               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    -               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OPT_SOME        reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    <               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    >               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LE           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_GE           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    INSTANCEOF      reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_EQ           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_NE           reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    &               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ^               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    |               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LAND         reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ?               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LOR          reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ]               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ;               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    )               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    :               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ,               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    }               reduce using rule 235 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)


state 317

    (237) MultiplicativeExpression -> MultiplicativeExpression % CastExpression .

    *               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    /               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    %               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    +               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    -               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OPT_SOME        reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    <               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    >               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LE           reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_GE           reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    INSTANCEOF      reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_EQ           reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_NE           reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    &               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ^               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    |               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LAND         reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ?               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LOR          reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ]               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ;               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    )               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    :               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ,               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    }               reduce using rule 237 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)


state 318

    (236) MultiplicativeExpression -> MultiplicativeExpression / CastExpression .

    *               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    /               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    %               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    +               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    -               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OPT_SOME        reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    <               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    >               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LE           reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_GE           reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    INSTANCEOF      reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_EQ           reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_NE           reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    &               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ^               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    |               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LAND         reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ?               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LOR          reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ]               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ;               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    )               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    :               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ,               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    }               reduce using rule 236 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)


state 319

    (145) ExpressionStatements -> ExpressionStatement .

    ,               reduce using rule 145 (ExpressionStatements -> ExpressionStatement .)
    )               reduce using rule 145 (ExpressionStatements -> ExpressionStatement .)
    ;               reduce using rule 145 (ExpressionStatements -> ExpressionStatement .)


state 320

    (141) ForInit -> ; .

    ;               reduce using rule 141 (ForInit -> ; .)
    OPT_INC_DEC     reduce using rule 141 (ForInit -> ; .)
    +               reduce using rule 141 (ForInit -> ; .)
    -               reduce using rule 141 (ForInit -> ; .)
    ~               reduce using rule 141 (ForInit -> ; .)
    !               reduce using rule 141 (ForInit -> ; .)
    IDENTIFIER      reduce using rule 141 (ForInit -> ; .)
    THIS            reduce using rule 141 (ForInit -> ; .)
    SUPER           reduce using rule 141 (ForInit -> ; .)
    NULL            reduce using rule 141 (ForInit -> ; .)
    (               reduce using rule 141 (ForInit -> ; .)
    FLOAT_LITERAL   reduce using rule 141 (ForInit -> ; .)
    INT_LITERAL     reduce using rule 141 (ForInit -> ; .)
    CHAR_LITERAL    reduce using rule 141 (ForInit -> ; .)
    STRING_LITERAL  reduce using rule 141 (ForInit -> ; .)
    BOOL            reduce using rule 141 (ForInit -> ; .)
    NEW             reduce using rule 141 (ForInit -> ; .)
    BOOLEAN         reduce using rule 141 (ForInit -> ; .)
    CHAR            reduce using rule 141 (ForInit -> ; .)
    BYTE            reduce using rule 141 (ForInit -> ; .)
    SHORT           reduce using rule 141 (ForInit -> ; .)
    INT             reduce using rule 141 (ForInit -> ; .)
    LONG            reduce using rule 141 (ForInit -> ; .)
    FLOAT           reduce using rule 141 (ForInit -> ; .)
    DOUBLE          reduce using rule 141 (ForInit -> ; .)
    VOID            reduce using rule 141 (ForInit -> ; .)


state 321

    (137) IterationStatement -> FOR ( ForInit . ForExpr ForIncr ) Statement
    (138) IterationStatement -> FOR ( ForInit . ForExpr ) Statement
    (142) ForExpr -> . Expression ;
    (143) ForExpr -> . ;
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 385
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ForExpr                        shift and go to state 384
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 386
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 322

    (139) ForInit -> ExpressionStatements . ;
    (146) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    ;               shift and go to state 387
    ,               shift and go to state 388


state 323

    (140) ForInit -> LocalVariableDeclarationStatement .

    ;               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    +               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    -               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    !               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    (               reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 140 (ForInit -> LocalVariableDeclarationStatement .)


state 324

    (156) GuardingStatement -> TRY Block Catches .
    (157) GuardingStatement -> TRY Block Catches . Finally
    (159) Catches -> Catches . Catch
    (163) Finally -> . FINALLY Block
    (160) Catch -> . CatchHeader Block
    (161) CatchHeader -> . CATCH ( TypeSpecifier IDENTIFIER )
    (162) CatchHeader -> . CATCH ( TypeSpecifier )

    WHILE           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    }               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FINAL           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    ;               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    IDENTIFIER      reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    CASE            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    DEFAULT         reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    IF              reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SWITCH          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    DO              reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FOR             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BREAK           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    CONTINUE        reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    RETURN          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    THROW           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SYNCHRONIZED    reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    TRY             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    {               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BOOLEAN         reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    CHAR            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BYTE            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SHORT           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    INT             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    LONG            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FLOAT           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    DOUBLE          reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    VOID            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    OPT_INC_DEC     reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    +               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    -               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    ~               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    !               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    THIS            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    SUPER           reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    NULL            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    (               reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FLOAT_LITERAL   reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    INT_LITERAL     reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    CHAR_LITERAL    reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    STRING_LITERAL  reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    BOOL            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    NEW             reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    ELSE            reduce using rule 156 (GuardingStatement -> TRY Block Catches .)
    FINALLY         shift and go to state 325
    CATCH           shift and go to state 326

    CatchHeader                    shift and go to state 327
    Finally                        shift and go to state 389
    Catch                          shift and go to state 390

state 325

    (163) Finally -> FINALLY . Block
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    {               shift and go to state 79

    Block                          shift and go to state 391

state 326

    (161) CatchHeader -> CATCH . ( TypeSpecifier IDENTIFIER )
    (162) CatchHeader -> CATCH . ( TypeSpecifier )

    (               shift and go to state 392


state 327

    (160) Catch -> CatchHeader . Block
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    {               shift and go to state 79

    Block                          shift and go to state 393

state 328

    (155) GuardingStatement -> TRY Block Finally .

    WHILE           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    }               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    FINAL           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    ;               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    IDENTIFIER      reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    CASE            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    DEFAULT         reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    IF              reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SWITCH          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    DO              reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    FOR             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BREAK           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    CONTINUE        reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    RETURN          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    THROW           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SYNCHRONIZED    reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    TRY             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    {               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BOOLEAN         reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    CHAR            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BYTE            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SHORT           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    INT             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    LONG            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    FLOAT           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    DOUBLE          reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    VOID            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    OPT_INC_DEC     reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    +               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    -               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    ~               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    !               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    THIS            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    SUPER           reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    NULL            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    (               reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    FLOAT_LITERAL   reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    INT_LITERAL     reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    CHAR_LITERAL    reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    STRING_LITERAL  reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    BOOL            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    NEW             reduce using rule 155 (GuardingStatement -> TRY Block Finally .)
    ELSE            reduce using rule 155 (GuardingStatement -> TRY Block Finally .)


state 329

    (158) Catches -> Catch .

    FINALLY         reduce using rule 158 (Catches -> Catch .)
    CATCH           reduce using rule 158 (Catches -> Catch .)
    }               reduce using rule 158 (Catches -> Catch .)
    FINAL           reduce using rule 158 (Catches -> Catch .)
    ;               reduce using rule 158 (Catches -> Catch .)
    IDENTIFIER      reduce using rule 158 (Catches -> Catch .)
    CASE            reduce using rule 158 (Catches -> Catch .)
    DEFAULT         reduce using rule 158 (Catches -> Catch .)
    IF              reduce using rule 158 (Catches -> Catch .)
    SWITCH          reduce using rule 158 (Catches -> Catch .)
    WHILE           reduce using rule 158 (Catches -> Catch .)
    DO              reduce using rule 158 (Catches -> Catch .)
    FOR             reduce using rule 158 (Catches -> Catch .)
    BREAK           reduce using rule 158 (Catches -> Catch .)
    CONTINUE        reduce using rule 158 (Catches -> Catch .)
    RETURN          reduce using rule 158 (Catches -> Catch .)
    THROW           reduce using rule 158 (Catches -> Catch .)
    SYNCHRONIZED    reduce using rule 158 (Catches -> Catch .)
    TRY             reduce using rule 158 (Catches -> Catch .)
    {               reduce using rule 158 (Catches -> Catch .)
    BOOLEAN         reduce using rule 158 (Catches -> Catch .)
    CHAR            reduce using rule 158 (Catches -> Catch .)
    BYTE            reduce using rule 158 (Catches -> Catch .)
    SHORT           reduce using rule 158 (Catches -> Catch .)
    INT             reduce using rule 158 (Catches -> Catch .)
    LONG            reduce using rule 158 (Catches -> Catch .)
    FLOAT           reduce using rule 158 (Catches -> Catch .)
    DOUBLE          reduce using rule 158 (Catches -> Catch .)
    VOID            reduce using rule 158 (Catches -> Catch .)
    OPT_INC_DEC     reduce using rule 158 (Catches -> Catch .)
    +               reduce using rule 158 (Catches -> Catch .)
    -               reduce using rule 158 (Catches -> Catch .)
    ~               reduce using rule 158 (Catches -> Catch .)
    !               reduce using rule 158 (Catches -> Catch .)
    THIS            reduce using rule 158 (Catches -> Catch .)
    SUPER           reduce using rule 158 (Catches -> Catch .)
    NULL            reduce using rule 158 (Catches -> Catch .)
    (               reduce using rule 158 (Catches -> Catch .)
    FLOAT_LITERAL   reduce using rule 158 (Catches -> Catch .)
    INT_LITERAL     reduce using rule 158 (Catches -> Catch .)
    CHAR_LITERAL    reduce using rule 158 (Catches -> Catch .)
    STRING_LITERAL  reduce using rule 158 (Catches -> Catch .)
    BOOL            reduce using rule 158 (Catches -> Catch .)
    NEW             reduce using rule 158 (Catches -> Catch .)
    ELSE            reduce using rule 158 (Catches -> Catch .)


state 330

    (169) ComplexPrimary -> ( Expression . )

    )               shift and go to state 394


state 331

    (200) PlainNewAllocationExpression -> ArrayAllocationExpression { } .

    .               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    =               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_EQ          reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    *               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    /               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    %               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    +               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    -               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_SOME        reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    <               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    >               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LE           reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_GE           reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    INSTANCEOF      reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_EQ           reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_NE           reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    &               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ^               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    |               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LAND         reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ?               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LOR          reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ;               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    )               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    :               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ,               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    }               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ]               reduce using rule 200 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)


state 332

    (202) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers . }
    (82) ArrayInitializers -> ArrayInitializers . , VariableInitializer
    (83) ArrayInitializers -> ArrayInitializers . ,

    }               shift and go to state 396
    ,               shift and go to state 395


state 333

    (81) ArrayInitializers -> VariableInitializer .

    }               reduce using rule 81 (ArrayInitializers -> VariableInitializer .)
    ,               reduce using rule 81 (ArrayInitializers -> VariableInitializer .)


state 334

    (186) MethodCall -> MethodAccess ( ArgumentList . )
    (195) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 397
    ,               shift and go to state 398


state 335

    (194) ArgumentList -> Expression .

    )               reduce using rule 194 (ArgumentList -> Expression .)
    ,               reduce using rule 194 (ArgumentList -> Expression .)


state 336

    (187) MethodCall -> MethodAccess ( ) .

    [               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    .               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OPT_INC_DEC     reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    =               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OPT_EQ          reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    *               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    /               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    %               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    +               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    -               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OPT_SOME        reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    <               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    >               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OP_LE           reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OP_GE           reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    INSTANCEOF      reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OP_EQ           reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OP_NE           reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    &               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    ^               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    |               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OP_LAND         reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    ?               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    OP_LOR          reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    )               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    (               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    ]               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    ;               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    :               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    ,               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)
    }               reduce using rule 187 (MethodCall -> MethodAccess ( ) .)


state 337

    (255) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (253) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ?               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    )               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ,               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    }               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ;               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    :               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ]               reduce using rule 255 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 217


state 338

    (248) RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .

    <               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    >               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LE           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_GE           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    INSTANCEOF      reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_EQ           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_NE           reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    &               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ^               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    |               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LAND         reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ?               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LOR          reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ;               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    )               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    :               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ,               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    }               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ]               reduce using rule 248 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)


state 339

    (244) RelationalExpression -> RelationalExpression < ShiftExpression .
    (242) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    >               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LE           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_GE           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    INSTANCEOF      reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_EQ           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_NE           reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    &               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ^               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    |               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LAND         reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ?               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LOR          reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ;               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    )               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    :               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ,               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    }               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ]               reduce using rule 244 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OPT_SOME        shift and go to state 278


state 340

    (246) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (242) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    >               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    INSTANCEOF      reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ?               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ;               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    )               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    :               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ,               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    }               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ]               reduce using rule 246 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OPT_SOME        shift and go to state 278


state 341

    (247) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (242) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    >               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    INSTANCEOF      reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ?               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ;               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    )               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    :               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ,               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    }               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ]               reduce using rule 247 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OPT_SOME        shift and go to state 278


state 342

    (245) RelationalExpression -> RelationalExpression > ShiftExpression .
    (242) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    >               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LE           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_GE           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    INSTANCEOF      reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_EQ           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_NE           reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    &               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ^               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    |               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LAND         reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ?               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LOR          reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ;               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    )               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    :               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ,               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    }               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ]               reduce using rule 245 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OPT_SOME        shift and go to state 278


state 343

    (149) JumpStatement -> CONTINUE IDENTIFIER ; .

    }               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FINAL           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ;               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CASE            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DEFAULT         reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IF              reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SWITCH          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    WHILE           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DO              reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FOR             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BREAK           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CONTINUE        reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    RETURN          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THROW           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SYNCHRONIZED    reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    TRY             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    {               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOLEAN         reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BYTE            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SHORT           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    LONG            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DOUBLE          reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    VOID            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    +               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    -               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ~               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    !               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THIS            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SUPER           reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NULL            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    (               reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOL            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NEW             reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ELSE            reduce using rule 149 (JumpStatement -> CONTINUE IDENTIFIER ; .)


state 344

    (180) ArrayAccess -> ComplexPrimary [ Expression . ]

    ]               shift and go to state 399


state 345

    (203) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations . }
    (63) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (64) FieldDeclarationOptSemi -> . FieldDeclaration
    (65) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (66) FieldDeclaration -> . FieldVariableDeclaration ;
    (67) FieldDeclaration -> . MethodDeclaration
    (68) FieldDeclaration -> . ConstructorDeclaration
    (69) FieldDeclaration -> . StaticInitializer
    (70) FieldDeclaration -> . NonStaticInitializer
    (71) FieldDeclaration -> . TypeDeclaration
    (72) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (73) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (84) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator Throws MethodBody
    (85) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (86) MethodDeclaration -> . TypeSpecifier MethodDeclarator Throws MethodBody
    (87) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (100) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Throws Block
    (101) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (102) ConstructorDeclaration -> . ConstructorDeclarator Throws Block
    (103) ConstructorDeclaration -> . ConstructorDeclarator Block
    (106) StaticInitializer -> . STATIC Block
    (107) NonStaticInitializer -> . Block
    (37) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (38) TypeDeclaration -> . ClassHeader { }
    (47) Modifiers -> . Modifier
    (48) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (104) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (105) ConstructorDeclarator -> . IDENTIFIER ( )
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (39) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends Interfaces
    (40) ClassHeader -> . Modifiers ClassWord IDENTIFIER Extends
    (41) ClassHeader -> . Modifiers ClassWord IDENTIFIER Interfaces
    (42) ClassHeader -> . ClassWord IDENTIFIER Extends Interfaces
    (43) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (44) ClassHeader -> . ClassWord IDENTIFIER Extends
    (45) ClassHeader -> . ClassWord IDENTIFIER Interfaces
    (46) ClassHeader -> . ClassWord IDENTIFIER
    (49) Modifier -> . ABSTRACT
    (50) Modifier -> . FINAL
    (51) Modifier -> . PUBLIC
    (52) Modifier -> . PROTECTED
    (53) Modifier -> . PRIVATE
    (54) Modifier -> . STATIC
    (55) Modifier -> . TRANSIENT
    (56) Modifier -> . VOLATILE
    (57) Modifier -> . NATIVE
    (58) Modifier -> . SYNCHRONIZED
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (59) ClassWord -> . CLASS
    (60) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 400
    STATIC          shift and go to state 58
    IDENTIFIER      shift and go to state 65
    {               shift and go to state 79
    ABSTRACT        shift and go to state 4
    FINAL           shift and go to state 7
    PUBLIC          shift and go to state 26
    PROTECTED       shift and go to state 6
    PRIVATE         shift and go to state 9
    TRANSIENT       shift and go to state 22
    VOLATILE        shift and go to state 3
    NATIVE          shift and go to state 8
    SYNCHRONIZED    shift and go to state 2
    CLASS           shift and go to state 11
    INTERFACE       shift and go to state 24
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    FieldVariableDeclaration       shift and go to state 54
    TypeDeclaration                shift and go to state 55
    PrimitiveType                  shift and go to state 56
    StaticInitializer              shift and go to state 57
    NonStaticInitializer           shift and go to state 60
    TypeSpecifier                  shift and go to state 61
    QualifiedName                  shift and go to state 62
    TypeName                       shift and go to state 63
    MethodDeclaration              shift and go to state 66
    Modifiers                      shift and go to state 68
    ConstructorDeclaration         shift and go to state 53
    Modifier                       shift and go to state 17
    Block                          shift and go to state 71
    ClassWord                      shift and go to state 19
    FieldDeclarationOptSemi        shift and go to state 103
    ConstructorDeclarator          shift and go to state 73
    ClassHeader                    shift and go to state 23
    FieldDeclaration               shift and go to state 78

state 346

    (201) PlainNewAllocationExpression -> ClassAllocationExpression { } .

    .               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    =               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_EQ          reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    *               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    /               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    %               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    +               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    -               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_SOME        reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    <               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    >               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LE           reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_GE           reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    INSTANCEOF      reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_EQ           reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_NE           reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    &               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ^               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    |               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LAND         reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ?               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LOR          reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ;               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    )               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    :               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ,               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    }               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ]               reduce using rule 201 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)


state 347

    (135) IterationStatement -> WHILE ( Expression . ) Statement

    )               shift and go to state 401


state 348

    (204) ClassAllocationExpression -> NEW TypeName ( . ArgumentList )
    (205) ClassAllocationExpression -> NEW TypeName ( . )
    (194) ArgumentList -> . Expression
    (195) ArgumentList -> . ArgumentList , Expression
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    )               shift and go to state 403
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    ArgumentList                   shift and go to state 402
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 335
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 349

    (206) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (207) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (210) DimExprs -> DimExprs . DimExpr
    (212) Dims -> . OP_DIM
    (213) Dims -> . Dims OP_DIM
    (211) DimExpr -> . [ Expression ]
    (214) OP_DIM -> . [ ]

    {               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    .               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_INC_DEC     reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    =               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_EQ          reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    *               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    /               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    %               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    +               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    -               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_SOME        reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    <               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    >               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    INSTANCEOF      reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ?               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ,               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ;               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ]               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    }               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    )               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    :               reduce using rule 207 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    [               shift and go to state 351

    DimExpr                        shift and go to state 404
    Dims                           shift and go to state 405
    OP_DIM                         shift and go to state 98

state 350

    (208) ArrayAllocationExpression -> NEW TypeName Dims .
    (213) Dims -> Dims . OP_DIM
    (214) OP_DIM -> . [ ]

    {               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    .               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_INC_DEC     reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    =               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_EQ          reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    *               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    /               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    %               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    +               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    -               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_SOME        reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    <               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    >               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    INSTANCEOF      reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ?               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ,               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ;               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ]               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    }               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    )               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    :               reduce using rule 208 (ArrayAllocationExpression -> NEW TypeName Dims .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 203

state 351

    (211) DimExpr -> [ . Expression ]
    (214) OP_DIM -> [ . ]
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ]               shift and go to state 202
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 406
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 352

    (209) DimExprs -> DimExpr .

    [               reduce using rule 209 (DimExprs -> DimExpr .)
    {               reduce using rule 209 (DimExprs -> DimExpr .)
    .               reduce using rule 209 (DimExprs -> DimExpr .)
    OPT_INC_DEC     reduce using rule 209 (DimExprs -> DimExpr .)
    =               reduce using rule 209 (DimExprs -> DimExpr .)
    OPT_EQ          reduce using rule 209 (DimExprs -> DimExpr .)
    *               reduce using rule 209 (DimExprs -> DimExpr .)
    /               reduce using rule 209 (DimExprs -> DimExpr .)
    %               reduce using rule 209 (DimExprs -> DimExpr .)
    +               reduce using rule 209 (DimExprs -> DimExpr .)
    -               reduce using rule 209 (DimExprs -> DimExpr .)
    OPT_SOME        reduce using rule 209 (DimExprs -> DimExpr .)
    <               reduce using rule 209 (DimExprs -> DimExpr .)
    >               reduce using rule 209 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 209 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 209 (DimExprs -> DimExpr .)
    INSTANCEOF      reduce using rule 209 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 209 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 209 (DimExprs -> DimExpr .)
    &               reduce using rule 209 (DimExprs -> DimExpr .)
    ^               reduce using rule 209 (DimExprs -> DimExpr .)
    |               reduce using rule 209 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 209 (DimExprs -> DimExpr .)
    ?               reduce using rule 209 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 209 (DimExprs -> DimExpr .)
    ;               reduce using rule 209 (DimExprs -> DimExpr .)
    )               reduce using rule 209 (DimExprs -> DimExpr .)
    :               reduce using rule 209 (DimExprs -> DimExpr .)
    ,               reduce using rule 209 (DimExprs -> DimExpr .)
    }               reduce using rule 209 (DimExprs -> DimExpr .)
    ]               reduce using rule 209 (DimExprs -> DimExpr .)


state 353

    (116) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .

    }               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    FINAL           reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    ;               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    IDENTIFIER      reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CASE            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    DEFAULT         reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    IF              reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SWITCH          reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    WHILE           reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    DO              reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    FOR             reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BREAK           reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CONTINUE        reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    RETURN          reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    THROW           reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SYNCHRONIZED    reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    TRY             reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    {               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BOOLEAN         reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CHAR            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BYTE            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SHORT           reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    INT             reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    LONG            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    FLOAT           reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    DOUBLE          reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    VOID            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    OPT_INC_DEC     reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    +               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    -               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    ~               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    !               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    THIS            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SUPER           reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    NULL            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    (               reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    FLOAT_LITERAL   reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    INT_LITERAL     reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CHAR_LITERAL    reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    STRING_LITERAL  reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BOOL            reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    NEW             reduce using rule 116 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)


state 354

    (128) LabelStatement -> CASE ConstantExpression : .

    }               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    FINAL           reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    ;               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    IDENTIFIER      reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    CASE            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    DEFAULT         reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    IF              reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    SWITCH          reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    WHILE           reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    DO              reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    FOR             reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    BREAK           reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    CONTINUE        reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    RETURN          reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    THROW           reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    SYNCHRONIZED    reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    TRY             reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    {               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    BOOLEAN         reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    CHAR            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    BYTE            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    SHORT           reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    INT             reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    LONG            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    FLOAT           reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    DOUBLE          reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    VOID            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    OPT_INC_DEC     reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    +               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    -               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    ~               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    !               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    THIS            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    SUPER           reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    NULL            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    (               reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    FLOAT_LITERAL   reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    INT_LITERAL     reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    CHAR_LITERAL    reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    STRING_LITERAL  reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    BOOL            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    NEW             reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)
    ELSE            reduce using rule 128 (LabelStatement -> CASE ConstantExpression : .)


state 355

    (132) SelectionStatement -> SWITCH ( Expression . ) Block

    )               shift and go to state 407


state 356

    (261) ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .
    (259) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LOR          reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    ;               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    ,               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    )               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    }               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    ]               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    :               reduce using rule 261 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LAND         shift and go to state 224


state 357

    (263) ConditionalExpression -> ConditionalOrExpression ? Expression . : ConditionalExpression

    :               shift and go to state 408


state 358

    (239) AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .
    (235) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (236) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (237) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    -               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OPT_SOME        reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    <               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    >               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LE           reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_GE           reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_EQ           reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_NE           reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    &               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ^               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    |               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LAND         reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ?               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LOR          reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    )               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ;               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    :               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ,               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    }               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ]               reduce using rule 239 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    *               shift and go to state 237
    /               shift and go to state 239
    %               shift and go to state 238


state 359

    (240) AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .
    (235) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (236) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (237) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    -               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OPT_SOME        reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    <               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    >               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LE           reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_GE           reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_EQ           reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_NE           reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    &               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ^               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    |               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LAND         reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ?               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LOR          reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    )               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ;               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    :               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ,               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    }               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ]               reduce using rule 240 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    *               shift and go to state 237
    /               shift and go to state 239
    %               shift and go to state 238


state 360

    (265) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    ;               reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ,               reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    )               reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    }               reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ]               reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    :               reduce using rule 265 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 361

    (257) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (255) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ?               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ,               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    )               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ;               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    :               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    }               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ]               reduce using rule 257 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 246


state 362

    (147) JumpStatement -> BREAK IDENTIFIER ; .

    }               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    FINAL           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    ;               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    CASE            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    DEFAULT         reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    IF              reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    SWITCH          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    WHILE           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    DO              reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    FOR             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    BREAK           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    CONTINUE        reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    RETURN          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    THROW           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    SYNCHRONIZED    reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    TRY             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    {               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOLEAN         reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    BYTE            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    SHORT           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    LONG            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    DOUBLE          reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    VOID            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    +               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    -               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    ~               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    !               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    THIS            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    SUPER           reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    NULL            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    (               reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOL            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    NEW             reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)
    ELSE            reduce using rule 147 (JumpStatement -> BREAK IDENTIFIER ; .)


state 363

    (136) IterationStatement -> DO Statement WHILE . ( Expression ) ;

    (               shift and go to state 409


state 364

    (183) FieldAccess -> QualifiedName . THIS .

    [               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    .               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OPT_INC_DEC     reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    =               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OPT_EQ          reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    *               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    /               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    %               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    +               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    -               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OPT_SOME        reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    <               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    >               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OP_LE           reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OP_GE           reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    INSTANCEOF      reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OP_EQ           reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OP_NE           reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    &               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    ^               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    |               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OP_LAND         reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    ?               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    OP_LOR          reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    )               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    (               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    ,               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    ;               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    :               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    }               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)
    ]               reduce using rule 183 (FieldAccess -> QualifiedName . THIS .)


state 365

    (197) NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .

    .               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    =               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    *               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    /               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    %               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    +               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    -               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    <               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    >               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LE           reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_GE           reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    INSTANCEOF      reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_NE           reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    &               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ^               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    |               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ?               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    )               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    }               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ,               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ;               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    :               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ]               reduce using rule 197 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)


state 366

    (184) FieldAccess -> QualifiedName . CLASS .

    [               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    .               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OPT_INC_DEC     reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    =               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OPT_EQ          reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    *               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    /               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    %               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    +               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    -               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OPT_SOME        reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    <               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    >               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OP_LE           reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OP_GE           reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    INSTANCEOF      reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OP_EQ           reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OP_NE           reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    &               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    ^               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    |               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OP_LAND         reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    ?               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    OP_LOR          reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    )               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    (               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    ,               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    ;               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    :               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    }               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)
    ]               reduce using rule 184 (FieldAccess -> QualifiedName . CLASS .)


state 367

    (179) ArrayAccess -> QualifiedName [ Expression . ]

    ]               shift and go to state 410


state 368

    (242) ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .
    (239) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (240) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    <               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    >               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LE           reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_GE           reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    INSTANCEOF      reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_EQ           reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_NE           reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    &               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ^               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    |               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LAND         reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ?               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LOR          reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ;               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ]               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    )               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ,               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    }               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    :               reduce using rule 242 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    +               shift and go to state 267
    -               shift and go to state 268


state 369

    (181) FieldAccess -> NotJustName . IDENTIFIER .

    [               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    .               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    =               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_EQ          reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    *               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    /               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    %               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    +               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    -               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_SOME        reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    <               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    >               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LE           reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_GE           reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    INSTANCEOF      reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_EQ           reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_NE           reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    &               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    ^               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    |               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LAND         reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    ?               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LOR          reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    )               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    (               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    ,               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    ;               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    :               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    }               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)
    ]               reduce using rule 181 (FieldAccess -> NotJustName . IDENTIFIER .)


state 370

    (131) SelectionStatement -> IF ( Expression . ) Statement ElseOrNot

    )               shift and go to state 411


state 371

    (153) JumpStatement -> THROW Expression ; .

    }               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    FINAL           reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    ;               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    IDENTIFIER      reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    CASE            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    DEFAULT         reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    IF              reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    SWITCH          reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    WHILE           reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    DO              reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    FOR             reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    BREAK           reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    CONTINUE        reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    RETURN          reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    THROW           reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    SYNCHRONIZED    reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    TRY             reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    {               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    BOOLEAN         reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    CHAR            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    BYTE            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    SHORT           reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    INT             reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    LONG            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    FLOAT           reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    DOUBLE          reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    VOID            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    OPT_INC_DEC     reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    +               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    -               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    ~               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    !               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    THIS            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    SUPER           reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    NULL            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    (               reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    FLOAT_LITERAL   reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    INT_LITERAL     reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    CHAR_LITERAL    reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    STRING_LITERAL  reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    BOOL            reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    NEW             reduce using rule 153 (JumpStatement -> THROW Expression ; .)
    ELSE            reduce using rule 153 (JumpStatement -> THROW Expression ; .)


state 372

    (88) MethodDeclarator -> DeclaratorName ( ParameterList ) .

    THROWS          reduce using rule 88 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)
    ;               reduce using rule 88 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)
    [               reduce using rule 88 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)
    {               reduce using rule 88 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)


state 373

    (79) VariableInitializer -> { } .

    }               reduce using rule 79 (VariableInitializer -> { } .)
    ,               reduce using rule 79 (VariableInitializer -> { } .)
    ;               reduce using rule 79 (VariableInitializer -> { } .)


state 374

    (80) VariableInitializer -> { ArrayInitializers . }
    (82) ArrayInitializers -> ArrayInitializers . , VariableInitializer
    (83) ArrayInitializers -> ArrayInitializers . ,

    }               shift and go to state 412
    ,               shift and go to state 395


state 375

    (94) Parameter -> FINAL TypeSpecifier DeclaratorName .
    (96) DeclaratorName -> DeclaratorName . OP_DIM
    (214) OP_DIM -> . [ ]

    )               reduce using rule 94 (Parameter -> FINAL TypeSpecifier DeclaratorName .)
    ,               reduce using rule 94 (Parameter -> FINAL TypeSpecifier DeclaratorName .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 196

state 376

    (92) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 92 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 92 (ParameterList -> ParameterList , Parameter .)


state 377

    (84) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .

    ;               reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    }               reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    STATIC          reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    IDENTIFIER      reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    {               reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    ABSTRACT        reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    FINAL           reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    PUBLIC          reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    PROTECTED       reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    PRIVATE         reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    TRANSIENT       reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOLATILE        reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    NATIVE          reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    SYNCHRONIZED    reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    CLASS           reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    INTERFACE       reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    BOOLEAN         reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    CHAR            reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    BYTE            reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    SHORT           reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    INT             reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    LONG            reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    FLOAT           reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    DOUBLE          reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)
    VOID            reduce using rule 84 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator Throws MethodBody .)


state 378

    (229) CastExpression -> ( ClassTypeExpression ) CastExpression .

    *               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    /               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    %               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    +               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    -               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OPT_SOME        reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    <               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    >               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_LE           reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_GE           reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    INSTANCEOF      reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_EQ           reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_NE           reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    &               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ^               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    |               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_LAND         reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ?               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_LOR          reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ;               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    )               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    :               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ,               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    }               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ]               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    =               reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OPT_EQ          reduce using rule 229 (CastExpression -> ( ClassTypeExpression ) CastExpression .)


state 379

    (230) CastExpression -> ( Expression ) LogicalUnaryExpression .

    *               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    /               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    %               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    +               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    -               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OPT_SOME        reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    <               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    >               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_LE           reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_GE           reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    INSTANCEOF      reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_EQ           reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_NE           reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    &               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ^               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    |               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_LAND         reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ?               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_LOR          reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ;               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    )               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    :               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ,               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    }               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ]               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    =               reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OPT_EQ          reduce using rule 230 (CastExpression -> ( Expression ) LogicalUnaryExpression .)


state 380

    (228) CastExpression -> ( PrimitiveTypeExpression ) CastExpression .

    *               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    /               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    %               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    +               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    -               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OPT_SOME        reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    <               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    >               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_LE           reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_GE           reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    INSTANCEOF      reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_EQ           reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_NE           reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    &               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ^               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    |               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_LAND         reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ?               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_LOR          reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ;               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    )               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    :               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ,               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    }               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ]               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    =               reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OPT_EQ          reduce using rule 228 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)


state 381

    (154) GuardingStatement -> SYNCHRONIZED ( Expression ) . Statement
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    ExpressionStatement            shift and go to state 109
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 413
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    GuardingStatement              shift and go to state 165
    ConditionalOrExpression        shift and go to state 158
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 382

    (230) CastExpression -> ( Expression ) . LogicalUnaryExpression
    (169) ComplexPrimary -> ( Expression ) .
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    [               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    INSTANCEOF      reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 242
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    MethodCall                     shift and go to state 129
    ClassAllocationExpression      shift and go to state 148
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    ArrayAccess                    shift and go to state 136
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 379
    ArrayAllocationExpression      shift and go to state 138
    FieldAccess                    shift and go to state 168
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 383

    (117) LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .

    }               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    FINAL           reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    ;               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    IDENTIFIER      reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    CASE            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    DEFAULT         reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    IF              reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    SWITCH          reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    WHILE           reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    DO              reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    FOR             reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    BREAK           reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    CONTINUE        reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    RETURN          reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    THROW           reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    SYNCHRONIZED    reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    TRY             reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    {               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    BOOLEAN         reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    CHAR            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    BYTE            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    SHORT           reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    INT             reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    LONG            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    FLOAT           reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    DOUBLE          reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    VOID            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    OPT_INC_DEC     reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    +               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    -               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    ~               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    !               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    THIS            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    SUPER           reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    NULL            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    (               reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    FLOAT_LITERAL   reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    INT_LITERAL     reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    CHAR_LITERAL    reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    STRING_LITERAL  reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    BOOL            reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)
    NEW             reduce using rule 117 (LocalVariableDeclarationStatement -> FINAL TypeSpecifier VariableDeclarators ; .)


state 384

    (137) IterationStatement -> FOR ( ForInit ForExpr . ForIncr ) Statement
    (138) IterationStatement -> FOR ( ForInit ForExpr . ) Statement
    (144) ForIncr -> . ExpressionStatements
    (145) ExpressionStatements -> . ExpressionStatement
    (146) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (130) ExpressionStatement -> . Expression
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    )               shift and go to state 416
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ExpressionStatement            shift and go to state 319
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExpressionStatements           shift and go to state 415
    ConditionalAndExpression       shift and go to state 117
    ForIncr                        shift and go to state 414
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 385

    (143) ForExpr -> ; .

    )               reduce using rule 143 (ForExpr -> ; .)
    OPT_INC_DEC     reduce using rule 143 (ForExpr -> ; .)
    +               reduce using rule 143 (ForExpr -> ; .)
    -               reduce using rule 143 (ForExpr -> ; .)
    ~               reduce using rule 143 (ForExpr -> ; .)
    !               reduce using rule 143 (ForExpr -> ; .)
    IDENTIFIER      reduce using rule 143 (ForExpr -> ; .)
    THIS            reduce using rule 143 (ForExpr -> ; .)
    SUPER           reduce using rule 143 (ForExpr -> ; .)
    NULL            reduce using rule 143 (ForExpr -> ; .)
    (               reduce using rule 143 (ForExpr -> ; .)
    FLOAT_LITERAL   reduce using rule 143 (ForExpr -> ; .)
    INT_LITERAL     reduce using rule 143 (ForExpr -> ; .)
    CHAR_LITERAL    reduce using rule 143 (ForExpr -> ; .)
    STRING_LITERAL  reduce using rule 143 (ForExpr -> ; .)
    BOOL            reduce using rule 143 (ForExpr -> ; .)
    NEW             reduce using rule 143 (ForExpr -> ; .)
    BOOLEAN         reduce using rule 143 (ForExpr -> ; .)
    CHAR            reduce using rule 143 (ForExpr -> ; .)
    BYTE            reduce using rule 143 (ForExpr -> ; .)
    SHORT           reduce using rule 143 (ForExpr -> ; .)
    INT             reduce using rule 143 (ForExpr -> ; .)
    LONG            reduce using rule 143 (ForExpr -> ; .)
    FLOAT           reduce using rule 143 (ForExpr -> ; .)
    DOUBLE          reduce using rule 143 (ForExpr -> ; .)
    VOID            reduce using rule 143 (ForExpr -> ; .)


state 386

    (142) ForExpr -> Expression . ;

    ;               shift and go to state 417


state 387

    (139) ForInit -> ExpressionStatements ; .

    ;               reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    OPT_INC_DEC     reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    +               reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    -               reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    ~               reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    !               reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    IDENTIFIER      reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    THIS            reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    SUPER           reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    NULL            reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    (               reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    FLOAT_LITERAL   reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    INT_LITERAL     reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    CHAR_LITERAL    reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    STRING_LITERAL  reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    BOOL            reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    NEW             reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    BOOLEAN         reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    CHAR            reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    BYTE            reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    SHORT           reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    INT             reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    LONG            reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    FLOAT           reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    DOUBLE          reduce using rule 139 (ForInit -> ExpressionStatements ; .)
    VOID            reduce using rule 139 (ForInit -> ExpressionStatements ; .)


state 388

    (146) ExpressionStatements -> ExpressionStatements , . ExpressionStatement
    (130) ExpressionStatement -> . Expression
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ExpressionStatement            shift and go to state 418
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 160
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 389

    (157) GuardingStatement -> TRY Block Catches Finally .

    WHILE           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    }               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    FINAL           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    ;               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    IDENTIFIER      reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    CASE            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    DEFAULT         reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    IF              reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SWITCH          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    DO              reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    FOR             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BREAK           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    CONTINUE        reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    RETURN          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    THROW           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SYNCHRONIZED    reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    TRY             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    {               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BOOLEAN         reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    CHAR            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BYTE            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SHORT           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    INT             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    LONG            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    FLOAT           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    DOUBLE          reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    VOID            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    OPT_INC_DEC     reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    +               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    -               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    ~               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    !               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    THIS            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    SUPER           reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    NULL            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    (               reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    FLOAT_LITERAL   reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    INT_LITERAL     reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    CHAR_LITERAL    reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    STRING_LITERAL  reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    BOOL            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    NEW             reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)
    ELSE            reduce using rule 157 (GuardingStatement -> TRY Block Catches Finally .)


state 390

    (159) Catches -> Catches Catch .

    FINALLY         reduce using rule 159 (Catches -> Catches Catch .)
    CATCH           reduce using rule 159 (Catches -> Catches Catch .)
    }               reduce using rule 159 (Catches -> Catches Catch .)
    FINAL           reduce using rule 159 (Catches -> Catches Catch .)
    ;               reduce using rule 159 (Catches -> Catches Catch .)
    IDENTIFIER      reduce using rule 159 (Catches -> Catches Catch .)
    CASE            reduce using rule 159 (Catches -> Catches Catch .)
    DEFAULT         reduce using rule 159 (Catches -> Catches Catch .)
    IF              reduce using rule 159 (Catches -> Catches Catch .)
    SWITCH          reduce using rule 159 (Catches -> Catches Catch .)
    WHILE           reduce using rule 159 (Catches -> Catches Catch .)
    DO              reduce using rule 159 (Catches -> Catches Catch .)
    FOR             reduce using rule 159 (Catches -> Catches Catch .)
    BREAK           reduce using rule 159 (Catches -> Catches Catch .)
    CONTINUE        reduce using rule 159 (Catches -> Catches Catch .)
    RETURN          reduce using rule 159 (Catches -> Catches Catch .)
    THROW           reduce using rule 159 (Catches -> Catches Catch .)
    SYNCHRONIZED    reduce using rule 159 (Catches -> Catches Catch .)
    TRY             reduce using rule 159 (Catches -> Catches Catch .)
    {               reduce using rule 159 (Catches -> Catches Catch .)
    BOOLEAN         reduce using rule 159 (Catches -> Catches Catch .)
    CHAR            reduce using rule 159 (Catches -> Catches Catch .)
    BYTE            reduce using rule 159 (Catches -> Catches Catch .)
    SHORT           reduce using rule 159 (Catches -> Catches Catch .)
    INT             reduce using rule 159 (Catches -> Catches Catch .)
    LONG            reduce using rule 159 (Catches -> Catches Catch .)
    FLOAT           reduce using rule 159 (Catches -> Catches Catch .)
    DOUBLE          reduce using rule 159 (Catches -> Catches Catch .)
    VOID            reduce using rule 159 (Catches -> Catches Catch .)
    OPT_INC_DEC     reduce using rule 159 (Catches -> Catches Catch .)
    +               reduce using rule 159 (Catches -> Catches Catch .)
    -               reduce using rule 159 (Catches -> Catches Catch .)
    ~               reduce using rule 159 (Catches -> Catches Catch .)
    !               reduce using rule 159 (Catches -> Catches Catch .)
    THIS            reduce using rule 159 (Catches -> Catches Catch .)
    SUPER           reduce using rule 159 (Catches -> Catches Catch .)
    NULL            reduce using rule 159 (Catches -> Catches Catch .)
    (               reduce using rule 159 (Catches -> Catches Catch .)
    FLOAT_LITERAL   reduce using rule 159 (Catches -> Catches Catch .)
    INT_LITERAL     reduce using rule 159 (Catches -> Catches Catch .)
    CHAR_LITERAL    reduce using rule 159 (Catches -> Catches Catch .)
    STRING_LITERAL  reduce using rule 159 (Catches -> Catches Catch .)
    BOOL            reduce using rule 159 (Catches -> Catches Catch .)
    NEW             reduce using rule 159 (Catches -> Catches Catch .)
    ELSE            reduce using rule 159 (Catches -> Catches Catch .)


state 391

    (163) Finally -> FINALLY Block .

    }               reduce using rule 163 (Finally -> FINALLY Block .)
    FINAL           reduce using rule 163 (Finally -> FINALLY Block .)
    ;               reduce using rule 163 (Finally -> FINALLY Block .)
    IDENTIFIER      reduce using rule 163 (Finally -> FINALLY Block .)
    CASE            reduce using rule 163 (Finally -> FINALLY Block .)
    DEFAULT         reduce using rule 163 (Finally -> FINALLY Block .)
    IF              reduce using rule 163 (Finally -> FINALLY Block .)
    SWITCH          reduce using rule 163 (Finally -> FINALLY Block .)
    WHILE           reduce using rule 163 (Finally -> FINALLY Block .)
    DO              reduce using rule 163 (Finally -> FINALLY Block .)
    FOR             reduce using rule 163 (Finally -> FINALLY Block .)
    BREAK           reduce using rule 163 (Finally -> FINALLY Block .)
    CONTINUE        reduce using rule 163 (Finally -> FINALLY Block .)
    RETURN          reduce using rule 163 (Finally -> FINALLY Block .)
    THROW           reduce using rule 163 (Finally -> FINALLY Block .)
    SYNCHRONIZED    reduce using rule 163 (Finally -> FINALLY Block .)
    TRY             reduce using rule 163 (Finally -> FINALLY Block .)
    {               reduce using rule 163 (Finally -> FINALLY Block .)
    BOOLEAN         reduce using rule 163 (Finally -> FINALLY Block .)
    CHAR            reduce using rule 163 (Finally -> FINALLY Block .)
    BYTE            reduce using rule 163 (Finally -> FINALLY Block .)
    SHORT           reduce using rule 163 (Finally -> FINALLY Block .)
    INT             reduce using rule 163 (Finally -> FINALLY Block .)
    LONG            reduce using rule 163 (Finally -> FINALLY Block .)
    FLOAT           reduce using rule 163 (Finally -> FINALLY Block .)
    DOUBLE          reduce using rule 163 (Finally -> FINALLY Block .)
    VOID            reduce using rule 163 (Finally -> FINALLY Block .)
    OPT_INC_DEC     reduce using rule 163 (Finally -> FINALLY Block .)
    +               reduce using rule 163 (Finally -> FINALLY Block .)
    -               reduce using rule 163 (Finally -> FINALLY Block .)
    ~               reduce using rule 163 (Finally -> FINALLY Block .)
    !               reduce using rule 163 (Finally -> FINALLY Block .)
    THIS            reduce using rule 163 (Finally -> FINALLY Block .)
    SUPER           reduce using rule 163 (Finally -> FINALLY Block .)
    NULL            reduce using rule 163 (Finally -> FINALLY Block .)
    (               reduce using rule 163 (Finally -> FINALLY Block .)
    FLOAT_LITERAL   reduce using rule 163 (Finally -> FINALLY Block .)
    INT_LITERAL     reduce using rule 163 (Finally -> FINALLY Block .)
    CHAR_LITERAL    reduce using rule 163 (Finally -> FINALLY Block .)
    STRING_LITERAL  reduce using rule 163 (Finally -> FINALLY Block .)
    BOOL            reduce using rule 163 (Finally -> FINALLY Block .)
    NEW             reduce using rule 163 (Finally -> FINALLY Block .)
    ELSE            reduce using rule 163 (Finally -> FINALLY Block .)


state 392

    (161) CatchHeader -> CATCH ( . TypeSpecifier IDENTIFIER )
    (162) CatchHeader -> CATCH ( . TypeSpecifier )
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69
    IDENTIFIER      shift and go to state 30

    TypeName                       shift and go to state 63
    QualifiedName                  shift and go to state 62
    TypeSpecifier                  shift and go to state 419
    PrimitiveType                  shift and go to state 56

state 393

    (160) Catch -> CatchHeader Block .

    FINALLY         reduce using rule 160 (Catch -> CatchHeader Block .)
    CATCH           reduce using rule 160 (Catch -> CatchHeader Block .)
    }               reduce using rule 160 (Catch -> CatchHeader Block .)
    FINAL           reduce using rule 160 (Catch -> CatchHeader Block .)
    ;               reduce using rule 160 (Catch -> CatchHeader Block .)
    IDENTIFIER      reduce using rule 160 (Catch -> CatchHeader Block .)
    CASE            reduce using rule 160 (Catch -> CatchHeader Block .)
    DEFAULT         reduce using rule 160 (Catch -> CatchHeader Block .)
    IF              reduce using rule 160 (Catch -> CatchHeader Block .)
    SWITCH          reduce using rule 160 (Catch -> CatchHeader Block .)
    WHILE           reduce using rule 160 (Catch -> CatchHeader Block .)
    DO              reduce using rule 160 (Catch -> CatchHeader Block .)
    FOR             reduce using rule 160 (Catch -> CatchHeader Block .)
    BREAK           reduce using rule 160 (Catch -> CatchHeader Block .)
    CONTINUE        reduce using rule 160 (Catch -> CatchHeader Block .)
    RETURN          reduce using rule 160 (Catch -> CatchHeader Block .)
    THROW           reduce using rule 160 (Catch -> CatchHeader Block .)
    SYNCHRONIZED    reduce using rule 160 (Catch -> CatchHeader Block .)
    TRY             reduce using rule 160 (Catch -> CatchHeader Block .)
    {               reduce using rule 160 (Catch -> CatchHeader Block .)
    BOOLEAN         reduce using rule 160 (Catch -> CatchHeader Block .)
    CHAR            reduce using rule 160 (Catch -> CatchHeader Block .)
    BYTE            reduce using rule 160 (Catch -> CatchHeader Block .)
    SHORT           reduce using rule 160 (Catch -> CatchHeader Block .)
    INT             reduce using rule 160 (Catch -> CatchHeader Block .)
    LONG            reduce using rule 160 (Catch -> CatchHeader Block .)
    FLOAT           reduce using rule 160 (Catch -> CatchHeader Block .)
    DOUBLE          reduce using rule 160 (Catch -> CatchHeader Block .)
    VOID            reduce using rule 160 (Catch -> CatchHeader Block .)
    OPT_INC_DEC     reduce using rule 160 (Catch -> CatchHeader Block .)
    +               reduce using rule 160 (Catch -> CatchHeader Block .)
    -               reduce using rule 160 (Catch -> CatchHeader Block .)
    ~               reduce using rule 160 (Catch -> CatchHeader Block .)
    !               reduce using rule 160 (Catch -> CatchHeader Block .)
    THIS            reduce using rule 160 (Catch -> CatchHeader Block .)
    SUPER           reduce using rule 160 (Catch -> CatchHeader Block .)
    NULL            reduce using rule 160 (Catch -> CatchHeader Block .)
    (               reduce using rule 160 (Catch -> CatchHeader Block .)
    FLOAT_LITERAL   reduce using rule 160 (Catch -> CatchHeader Block .)
    INT_LITERAL     reduce using rule 160 (Catch -> CatchHeader Block .)
    CHAR_LITERAL    reduce using rule 160 (Catch -> CatchHeader Block .)
    STRING_LITERAL  reduce using rule 160 (Catch -> CatchHeader Block .)
    BOOL            reduce using rule 160 (Catch -> CatchHeader Block .)
    NEW             reduce using rule 160 (Catch -> CatchHeader Block .)
    ELSE            reduce using rule 160 (Catch -> CatchHeader Block .)


state 394

    (169) ComplexPrimary -> ( Expression ) .

    [               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    INSTANCEOF      reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 169 (ComplexPrimary -> ( Expression ) .)


state 395

    (82) ArrayInitializers -> ArrayInitializers , . VariableInitializer
    (83) ArrayInitializers -> ArrayInitializers , .
    (78) VariableInitializer -> . Expression
    (79) VariableInitializer -> . { }
    (80) VariableInitializer -> . { ArrayInitializers }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               reduce using rule 83 (ArrayInitializers -> ArrayInitializers , .)
    ,               reduce using rule 83 (ArrayInitializers -> ArrayInitializers , .)
    {               shift and go to state 289
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    VariableInitializer            shift and go to state 420
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 291
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 396

    (202) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .

    .               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_INC_DEC     reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    =               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_EQ          reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    *               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    /               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    %               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    +               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    -               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_SOME        reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    <               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    >               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LE           reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_GE           reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    INSTANCEOF      reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_EQ           reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_NE           reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    &               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ^               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    |               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LAND         reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ?               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LOR          reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ;               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    )               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    :               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ,               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    }               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ]               reduce using rule 202 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)


state 397

    (186) MethodCall -> MethodAccess ( ArgumentList ) .

    [               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    .               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    =               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_EQ          reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    *               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    /               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    %               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    +               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    -               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_SOME        reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    <               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    >               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LE           reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_GE           reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    INSTANCEOF      reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_EQ           reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_NE           reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    &               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ^               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    |               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LAND         reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ?               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LOR          reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    )               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    (               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ]               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ;               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    :               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ,               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)
    }               reduce using rule 186 (MethodCall -> MethodAccess ( ArgumentList ) .)


state 398

    (195) ArgumentList -> ArgumentList , . Expression
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 421
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 399

    (180) ArrayAccess -> ComplexPrimary [ Expression ] .

    [               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    .               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_INC_DEC     reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    =               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_EQ          reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    *               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    /               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    %               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    +               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    -               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_SOME        reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    <               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    >               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LE           reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_GE           reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    INSTANCEOF      reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_EQ           reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_NE           reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    &               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ^               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    |               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LAND         reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ?               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LOR          reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    }               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ,               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    (               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ;               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    )               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    :               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ]               reduce using rule 180 (ArrayAccess -> ComplexPrimary [ Expression ] .)


state 400

    (203) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .

    .               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_INC_DEC     reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    =               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_EQ          reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    *               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    /               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    %               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    +               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    -               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_SOME        reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    <               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    >               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LE           reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_GE           reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    INSTANCEOF      reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_EQ           reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_NE           reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    &               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ^               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    |               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LAND         reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ?               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LOR          reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ;               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    )               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    :               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ,               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    }               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ]               reduce using rule 203 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)


state 401

    (135) IterationStatement -> WHILE ( Expression ) . Statement
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    ExpressionStatement            shift and go to state 109
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 422
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    GuardingStatement              shift and go to state 165
    ConditionalOrExpression        shift and go to state 158
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 402

    (204) ClassAllocationExpression -> NEW TypeName ( ArgumentList . )
    (195) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 423
    ,               shift and go to state 398


state 403

    (205) ClassAllocationExpression -> NEW TypeName ( ) .

    {               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    .               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_INC_DEC     reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    =               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_EQ          reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    *               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    /               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    %               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    +               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    -               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_SOME        reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    <               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    >               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LE           reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_GE           reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    INSTANCEOF      reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_EQ           reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_NE           reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    &               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ^               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    |               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LAND         reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ?               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LOR          reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    )               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ,               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ;               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    :               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    }               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ]               reduce using rule 205 (ClassAllocationExpression -> NEW TypeName ( ) .)


state 404

    (210) DimExprs -> DimExprs DimExpr .

    [               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    {               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    .               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OPT_INC_DEC     reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    =               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OPT_EQ          reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    *               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    /               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    %               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    +               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    -               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OPT_SOME        reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    <               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    >               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    INSTANCEOF      reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    ?               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    ;               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    )               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    :               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    ,               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    }               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)
    ]               reduce using rule 210 (DimExprs -> DimExprs DimExpr .)


state 405

    (206) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (213) Dims -> Dims . OP_DIM
    (214) OP_DIM -> . [ ]

    {               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    .               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_INC_DEC     reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    =               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_EQ          reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    *               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    /               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    %               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    +               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    -               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_SOME        reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    <               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    >               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    INSTANCEOF      reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ?               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ,               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ;               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ]               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    }               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    )               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    :               reduce using rule 206 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    [               shift and go to state 97

    OP_DIM                         shift and go to state 203

state 406

    (211) DimExpr -> [ Expression . ]

    ]               shift and go to state 424


state 407

    (132) SelectionStatement -> SWITCH ( Expression ) . Block
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }

    {               shift and go to state 79

    Block                          shift and go to state 425

state 408

    (263) ConditionalExpression -> ConditionalOrExpression ? Expression : . ConditionalExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName

    (               shift and go to state 232
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    CastExpression                 shift and go to state 172
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    ArithmeticUnaryOperator        shift and go to state 123
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    PrimaryExpression              shift and go to state 155
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ArrayAllocationExpression      shift and go to state 138
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    AdditiveExpression             shift and go to state 161
    ConditionalExpression          shift and go to state 426
    UnaryExpression                shift and go to state 233
    InclusiveOrExpression          shift and go to state 164
    FieldAccess                    shift and go to state 168
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    MethodAccess                   shift and go to state 139
    SpecialName                    shift and go to state 145

state 409

    (136) IterationStatement -> DO Statement WHILE ( . Expression ) ;
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    IDENTIFIER      shift and go to state 30
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    ComplexPrimary                 shift and go to state 146
    PrimaryExpression              shift and go to state 155
    PrimitiveType                  shift and go to state 225
    RealPostfixExpression          shift and go to state 122
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    ConditionalOrExpression        shift and go to state 158
    ShiftExpression                shift and go to state 178
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    LogicalUnaryExpression         shift and go to state 182
    Expression                     shift and go to state 427
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    UnaryExpression                shift and go to state 163
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    SpecialName                    shift and go to state 145

state 410

    (179) ArrayAccess -> QualifiedName [ Expression ] .

    [               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    .               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_INC_DEC     reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    =               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_EQ          reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    *               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    /               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    %               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    +               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    -               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_SOME        reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    <               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    >               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LE           reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_GE           reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    INSTANCEOF      reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_EQ           reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_NE           reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    &               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    ^               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    |               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LAND         reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    ?               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LOR          reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    }               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    ,               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    (               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    ;               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    )               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    :               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)
    ]               reduce using rule 179 (ArrayAccess -> QualifiedName [ Expression ] .)


state 411

    (131) SelectionStatement -> IF ( Expression ) . Statement ElseOrNot
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 428
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    GuardingStatement              shift and go to state 165
    ConditionalOrExpression        shift and go to state 158
    ExpressionStatement            shift and go to state 109
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 412

    (80) VariableInitializer -> { ArrayInitializers } .

    }               reduce using rule 80 (VariableInitializer -> { ArrayInitializers } .)
    ,               reduce using rule 80 (VariableInitializer -> { ArrayInitializers } .)
    ;               reduce using rule 80 (VariableInitializer -> { ArrayInitializers } .)


state 413

    (154) GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .

    WHILE           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    }               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    FINAL           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    ;               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    IDENTIFIER      reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CASE            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    DEFAULT         reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    IF              reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SWITCH          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    DO              reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    FOR             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BREAK           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CONTINUE        reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    RETURN          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    THROW           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SYNCHRONIZED    reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    TRY             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    {               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BOOLEAN         reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CHAR            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BYTE            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SHORT           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    INT             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    LONG            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    FLOAT           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    DOUBLE          reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    VOID            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    OPT_INC_DEC     reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    +               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    -               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    ~               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    !               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    THIS            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SUPER           reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    NULL            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    (               reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    FLOAT_LITERAL   reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    INT_LITERAL     reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CHAR_LITERAL    reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    STRING_LITERAL  reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BOOL            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    NEW             reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    ELSE            reduce using rule 154 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)


state 414

    (137) IterationStatement -> FOR ( ForInit ForExpr ForIncr . ) Statement

    )               shift and go to state 429


state 415

    (144) ForIncr -> ExpressionStatements .
    (146) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    )               reduce using rule 144 (ForIncr -> ExpressionStatements .)
    ,               shift and go to state 388


state 416

    (138) IterationStatement -> FOR ( ForInit ForExpr ) . Statement
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    ExpressionStatement            shift and go to state 109
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 430
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    GuardingStatement              shift and go to state 165
    ConditionalOrExpression        shift and go to state 158
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 417

    (142) ForExpr -> Expression ; .

    )               reduce using rule 142 (ForExpr -> Expression ; .)
    OPT_INC_DEC     reduce using rule 142 (ForExpr -> Expression ; .)
    +               reduce using rule 142 (ForExpr -> Expression ; .)
    -               reduce using rule 142 (ForExpr -> Expression ; .)
    ~               reduce using rule 142 (ForExpr -> Expression ; .)
    !               reduce using rule 142 (ForExpr -> Expression ; .)
    IDENTIFIER      reduce using rule 142 (ForExpr -> Expression ; .)
    THIS            reduce using rule 142 (ForExpr -> Expression ; .)
    SUPER           reduce using rule 142 (ForExpr -> Expression ; .)
    NULL            reduce using rule 142 (ForExpr -> Expression ; .)
    (               reduce using rule 142 (ForExpr -> Expression ; .)
    FLOAT_LITERAL   reduce using rule 142 (ForExpr -> Expression ; .)
    INT_LITERAL     reduce using rule 142 (ForExpr -> Expression ; .)
    CHAR_LITERAL    reduce using rule 142 (ForExpr -> Expression ; .)
    STRING_LITERAL  reduce using rule 142 (ForExpr -> Expression ; .)
    BOOL            reduce using rule 142 (ForExpr -> Expression ; .)
    NEW             reduce using rule 142 (ForExpr -> Expression ; .)
    BOOLEAN         reduce using rule 142 (ForExpr -> Expression ; .)
    CHAR            reduce using rule 142 (ForExpr -> Expression ; .)
    BYTE            reduce using rule 142 (ForExpr -> Expression ; .)
    SHORT           reduce using rule 142 (ForExpr -> Expression ; .)
    INT             reduce using rule 142 (ForExpr -> Expression ; .)
    LONG            reduce using rule 142 (ForExpr -> Expression ; .)
    FLOAT           reduce using rule 142 (ForExpr -> Expression ; .)
    DOUBLE          reduce using rule 142 (ForExpr -> Expression ; .)
    VOID            reduce using rule 142 (ForExpr -> Expression ; .)


state 418

    (146) ExpressionStatements -> ExpressionStatements , ExpressionStatement .

    ,               reduce using rule 146 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    )               reduce using rule 146 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    ;               reduce using rule 146 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)


state 419

    (161) CatchHeader -> CATCH ( TypeSpecifier . IDENTIFIER )
    (162) CatchHeader -> CATCH ( TypeSpecifier . )

    IDENTIFIER      shift and go to state 431
    )               shift and go to state 432


state 420

    (82) ArrayInitializers -> ArrayInitializers , VariableInitializer .

    }               reduce using rule 82 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)
    ,               reduce using rule 82 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)


state 421

    (195) ArgumentList -> ArgumentList , Expression .

    )               reduce using rule 195 (ArgumentList -> ArgumentList , Expression .)
    ,               reduce using rule 195 (ArgumentList -> ArgumentList , Expression .)


state 422

    (135) IterationStatement -> WHILE ( Expression ) Statement .

    }               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    FINAL           reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    ;               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    IDENTIFIER      reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    CASE            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    DEFAULT         reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    SWITCH          reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    DO              reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    FOR             reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    BREAK           reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    CONTINUE        reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    THROW           reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    SYNCHRONIZED    reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    TRY             reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    BOOLEAN         reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    CHAR            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    BYTE            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    SHORT           reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    INT             reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    LONG            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    FLOAT           reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    DOUBLE          reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    VOID            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    OPT_INC_DEC     reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    +               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    -               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    ~               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    !               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    THIS            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    SUPER           reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    NULL            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    (               reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    FLOAT_LITERAL   reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    INT_LITERAL     reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    CHAR_LITERAL    reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    STRING_LITERAL  reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    BOOL            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    NEW             reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 135 (IterationStatement -> WHILE ( Expression ) Statement .)


state 423

    (204) ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .

    {               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    .               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    =               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_EQ          reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    *               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    /               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    %               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    +               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    -               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_SOME        reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    <               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    >               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LE           reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_GE           reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    INSTANCEOF      reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_EQ           reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_NE           reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    &               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ^               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    |               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LAND         reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ?               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LOR          reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    )               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ,               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ;               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    :               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    }               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ]               reduce using rule 204 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)


state 424

    (211) DimExpr -> [ Expression ] .

    [               reduce using rule 211 (DimExpr -> [ Expression ] .)
    {               reduce using rule 211 (DimExpr -> [ Expression ] .)
    .               reduce using rule 211 (DimExpr -> [ Expression ] .)
    OPT_INC_DEC     reduce using rule 211 (DimExpr -> [ Expression ] .)
    =               reduce using rule 211 (DimExpr -> [ Expression ] .)
    OPT_EQ          reduce using rule 211 (DimExpr -> [ Expression ] .)
    *               reduce using rule 211 (DimExpr -> [ Expression ] .)
    /               reduce using rule 211 (DimExpr -> [ Expression ] .)
    %               reduce using rule 211 (DimExpr -> [ Expression ] .)
    +               reduce using rule 211 (DimExpr -> [ Expression ] .)
    -               reduce using rule 211 (DimExpr -> [ Expression ] .)
    OPT_SOME        reduce using rule 211 (DimExpr -> [ Expression ] .)
    <               reduce using rule 211 (DimExpr -> [ Expression ] .)
    >               reduce using rule 211 (DimExpr -> [ Expression ] .)
    OP_LE           reduce using rule 211 (DimExpr -> [ Expression ] .)
    OP_GE           reduce using rule 211 (DimExpr -> [ Expression ] .)
    INSTANCEOF      reduce using rule 211 (DimExpr -> [ Expression ] .)
    OP_EQ           reduce using rule 211 (DimExpr -> [ Expression ] .)
    OP_NE           reduce using rule 211 (DimExpr -> [ Expression ] .)
    &               reduce using rule 211 (DimExpr -> [ Expression ] .)
    ^               reduce using rule 211 (DimExpr -> [ Expression ] .)
    |               reduce using rule 211 (DimExpr -> [ Expression ] .)
    OP_LAND         reduce using rule 211 (DimExpr -> [ Expression ] .)
    ?               reduce using rule 211 (DimExpr -> [ Expression ] .)
    OP_LOR          reduce using rule 211 (DimExpr -> [ Expression ] .)
    ;               reduce using rule 211 (DimExpr -> [ Expression ] .)
    )               reduce using rule 211 (DimExpr -> [ Expression ] .)
    :               reduce using rule 211 (DimExpr -> [ Expression ] .)
    ,               reduce using rule 211 (DimExpr -> [ Expression ] .)
    }               reduce using rule 211 (DimExpr -> [ Expression ] .)
    ]               reduce using rule 211 (DimExpr -> [ Expression ] .)


state 425

    (132) SelectionStatement -> SWITCH ( Expression ) Block .

    }               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    FINAL           reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    ;               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    IDENTIFIER      reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CASE            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    DEFAULT         reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    IF              reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SWITCH          reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    WHILE           reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    DO              reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    FOR             reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BREAK           reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CONTINUE        reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    RETURN          reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    THROW           reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SYNCHRONIZED    reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    TRY             reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    {               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BOOLEAN         reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CHAR            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BYTE            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SHORT           reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    INT             reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    LONG            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    FLOAT           reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    DOUBLE          reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    VOID            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    OPT_INC_DEC     reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    +               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    -               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    ~               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    !               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    THIS            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SUPER           reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    NULL            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    (               reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    FLOAT_LITERAL   reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    INT_LITERAL     reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CHAR_LITERAL    reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    STRING_LITERAL  reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BOOL            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    NEW             reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)
    ELSE            reduce using rule 132 (SelectionStatement -> SWITCH ( Expression ) Block .)


state 426

    (263) ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .

    ;               reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    )               reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    }               reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    ,               reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    :               reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    ]               reduce using rule 263 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)


state 427

    (136) IterationStatement -> DO Statement WHILE ( Expression . ) ;

    )               shift and go to state 433


state 428

    (131) SelectionStatement -> IF ( Expression ) Statement . ElseOrNot
    (133) ElseOrNot -> . ELSE Statement
    (134) ElseOrNot -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 435
    }               reduce using rule 134 (ElseOrNot -> .)
    FINAL           reduce using rule 134 (ElseOrNot -> .)
    ;               reduce using rule 134 (ElseOrNot -> .)
    IDENTIFIER      reduce using rule 134 (ElseOrNot -> .)
    CASE            reduce using rule 134 (ElseOrNot -> .)
    DEFAULT         reduce using rule 134 (ElseOrNot -> .)
    IF              reduce using rule 134 (ElseOrNot -> .)
    SWITCH          reduce using rule 134 (ElseOrNot -> .)
    WHILE           reduce using rule 134 (ElseOrNot -> .)
    DO              reduce using rule 134 (ElseOrNot -> .)
    FOR             reduce using rule 134 (ElseOrNot -> .)
    BREAK           reduce using rule 134 (ElseOrNot -> .)
    CONTINUE        reduce using rule 134 (ElseOrNot -> .)
    RETURN          reduce using rule 134 (ElseOrNot -> .)
    THROW           reduce using rule 134 (ElseOrNot -> .)
    SYNCHRONIZED    reduce using rule 134 (ElseOrNot -> .)
    TRY             reduce using rule 134 (ElseOrNot -> .)
    {               reduce using rule 134 (ElseOrNot -> .)
    BOOLEAN         reduce using rule 134 (ElseOrNot -> .)
    CHAR            reduce using rule 134 (ElseOrNot -> .)
    BYTE            reduce using rule 134 (ElseOrNot -> .)
    SHORT           reduce using rule 134 (ElseOrNot -> .)
    INT             reduce using rule 134 (ElseOrNot -> .)
    LONG            reduce using rule 134 (ElseOrNot -> .)
    FLOAT           reduce using rule 134 (ElseOrNot -> .)
    DOUBLE          reduce using rule 134 (ElseOrNot -> .)
    VOID            reduce using rule 134 (ElseOrNot -> .)
    OPT_INC_DEC     reduce using rule 134 (ElseOrNot -> .)
    +               reduce using rule 134 (ElseOrNot -> .)
    -               reduce using rule 134 (ElseOrNot -> .)
    ~               reduce using rule 134 (ElseOrNot -> .)
    !               reduce using rule 134 (ElseOrNot -> .)
    THIS            reduce using rule 134 (ElseOrNot -> .)
    SUPER           reduce using rule 134 (ElseOrNot -> .)
    NULL            reduce using rule 134 (ElseOrNot -> .)
    (               reduce using rule 134 (ElseOrNot -> .)
    FLOAT_LITERAL   reduce using rule 134 (ElseOrNot -> .)
    INT_LITERAL     reduce using rule 134 (ElseOrNot -> .)
    CHAR_LITERAL    reduce using rule 134 (ElseOrNot -> .)
    STRING_LITERAL  reduce using rule 134 (ElseOrNot -> .)
    BOOL            reduce using rule 134 (ElseOrNot -> .)
    NEW             reduce using rule 134 (ElseOrNot -> .)

  ! ELSE            [ reduce using rule 134 (ElseOrNot -> .) ]

    ElseOrNot                      shift and go to state 434

state 429

    (137) IterationStatement -> FOR ( ForInit ForExpr ForIncr ) . Statement
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    ExpressionStatement            shift and go to state 109
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 436
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    GuardingStatement              shift and go to state 165
    ConditionalOrExpression        shift and go to state 158
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 430

    (138) IterationStatement -> FOR ( ForInit ForExpr ) Statement .

    }               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    FINAL           reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    ;               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    IDENTIFIER      reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CASE            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    DEFAULT         reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    IF              reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SWITCH          reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    WHILE           reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    DO              reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    FOR             reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BREAK           reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CONTINUE        reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    RETURN          reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    THROW           reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SYNCHRONIZED    reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    TRY             reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    {               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BOOLEAN         reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CHAR            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BYTE            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SHORT           reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    INT             reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    LONG            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    FLOAT           reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    DOUBLE          reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    VOID            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    OPT_INC_DEC     reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    +               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    -               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    ~               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    !               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    THIS            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SUPER           reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    NULL            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    (               reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    FLOAT_LITERAL   reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    INT_LITERAL     reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CHAR_LITERAL    reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    STRING_LITERAL  reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BOOL            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    NEW             reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    ELSE            reduce using rule 138 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)


state 431

    (161) CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER . )

    )               shift and go to state 437


state 432

    (162) CatchHeader -> CATCH ( TypeSpecifier ) .

    {               reduce using rule 162 (CatchHeader -> CATCH ( TypeSpecifier ) .)


state 433

    (136) IterationStatement -> DO Statement WHILE ( Expression ) . ;

    ;               shift and go to state 438


state 434

    (131) SelectionStatement -> IF ( Expression ) Statement ElseOrNot .

    }               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    FINAL           reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    ;               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    IDENTIFIER      reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CASE            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    DEFAULT         reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    IF              reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SWITCH          reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    WHILE           reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    DO              reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    FOR             reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BREAK           reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CONTINUE        reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    RETURN          reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    THROW           reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SYNCHRONIZED    reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    TRY             reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    {               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BOOLEAN         reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CHAR            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BYTE            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SHORT           reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    INT             reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    LONG            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    FLOAT           reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    DOUBLE          reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    VOID            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    OPT_INC_DEC     reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    +               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    -               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    ~               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    !               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    THIS            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SUPER           reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    NULL            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    (               reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    FLOAT_LITERAL   reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    INT_LITERAL     reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CHAR_LITERAL    reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    STRING_LITERAL  reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BOOL            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    NEW             reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    ELSE            reduce using rule 131 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)


state 435

    (133) ElseOrNot -> ELSE . Statement
    (118) Statement -> . EmptyStatement
    (119) Statement -> . LabelStatement
    (120) Statement -> . ExpressionStatement ;
    (121) Statement -> . SelectionStatement
    (122) Statement -> . IterationStatement
    (123) Statement -> . JumpStatement
    (124) Statement -> . GuardingStatement
    (125) Statement -> . Block
    (126) EmptyStatement -> . ;
    (127) LabelStatement -> . IDENTIFIER :
    (128) LabelStatement -> . CASE ConstantExpression :
    (129) LabelStatement -> . DEFAULT :
    (130) ExpressionStatement -> . Expression
    (131) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (132) SelectionStatement -> . SWITCH ( Expression ) Block
    (135) IterationStatement -> . WHILE ( Expression ) Statement
    (136) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (137) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (138) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (147) JumpStatement -> . BREAK IDENTIFIER ;
    (148) JumpStatement -> . BREAK ;
    (149) JumpStatement -> . CONTINUE IDENTIFIER ;
    (150) JumpStatement -> . CONTINUE ;
    (151) JumpStatement -> . RETURN Expression ;
    (152) JumpStatement -> . RETURN ;
    (153) JumpStatement -> . THROW Expression ;
    (154) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (155) GuardingStatement -> . TRY Block Finally
    (156) GuardingStatement -> . TRY Block Catches
    (157) GuardingStatement -> . TRY Block Catches Finally
    (110) Block -> . { LocalVariableDeclarationsAndStatements }
    (111) Block -> . { }
    (268) Expression -> . AssignmentExpression
    (264) AssignmentExpression -> . ConditionalExpression
    (265) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (262) ConditionalExpression -> . ConditionalOrExpression
    (263) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (218) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (219) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (220) UnaryExpression -> . LogicalUnaryExpression
    (260) ConditionalOrExpression -> . ConditionalAndExpression
    (261) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (225) ArithmeticUnaryOperator -> . +
    (226) ArithmeticUnaryOperator -> . -
    (221) LogicalUnaryExpression -> . PostfixExpression
    (222) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (258) ConditionalAndExpression -> . InclusiveOrExpression
    (259) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (215) PostfixExpression -> . PrimaryExpression
    (216) PostfixExpression -> . RealPostfixExpression
    (223) LogicalUnaryOperator -> . ~
    (224) LogicalUnaryOperator -> . !
    (256) InclusiveOrExpression -> . ExclusiveOrExpression
    (257) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (164) PrimaryExpression -> . QualifiedName
    (165) PrimaryExpression -> . NotJustName
    (217) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (254) ExclusiveOrExpression -> . AndExpression
    (255) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (35) QualifiedName -> . IDENTIFIER
    (36) QualifiedName -> . QualifiedName . IDENTIFIER
    (166) NotJustName -> . SpecialName
    (167) NotJustName -> . NewAllocationExpression
    (168) NotJustName -> . ComplexPrimary
    (252) AndExpression -> . EqualityExpression
    (253) AndExpression -> . AndExpression & EqualityExpression
    (191) SpecialName -> . THIS
    (192) SpecialName -> . SUPER
    (193) SpecialName -> . NULL
    (196) NewAllocationExpression -> . PlainNewAllocationExpression
    (197) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (169) ComplexPrimary -> . ( Expression )
    (170) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (249) EqualityExpression -> . RelationalExpression
    (250) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (251) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (199) PlainNewAllocationExpression -> . ClassAllocationExpression
    (200) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (201) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (202) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (203) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (171) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (172) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (173) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (174) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (175) ComplexPrimaryNoParenthesis -> . BOOL
    (176) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (177) ComplexPrimaryNoParenthesis -> . FieldAccess
    (178) ComplexPrimaryNoParenthesis -> . MethodCall
    (243) RelationalExpression -> . ShiftExpression
    (244) RelationalExpression -> . RelationalExpression < ShiftExpression
    (245) RelationalExpression -> . RelationalExpression > ShiftExpression
    (246) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (247) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (248) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (206) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (207) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (208) ArrayAllocationExpression -> . NEW TypeName Dims
    (204) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (205) ClassAllocationExpression -> . NEW TypeName ( )
    (179) ArrayAccess -> . QualifiedName [ Expression ]
    (180) ArrayAccess -> . ComplexPrimary [ Expression ]
    (181) FieldAccess -> . NotJustName . IDENTIFIER
    (182) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (183) FieldAccess -> . QualifiedName . THIS
    (184) FieldAccess -> . QualifiedName . CLASS
    (185) FieldAccess -> . PrimitiveType . CLASS
    (186) MethodCall -> . MethodAccess ( ArgumentList )
    (187) MethodCall -> . MethodAccess ( )
    (241) ShiftExpression -> . AdditiveExpression
    (242) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (188) MethodAccess -> . ComplexPrimaryNoParenthesis
    (189) MethodAccess -> . SpecialName
    (190) MethodAccess -> . QualifiedName
    (238) AdditiveExpression -> . MultiplicativeExpression
    (239) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (240) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (234) MultiplicativeExpression -> . CastExpression
    (235) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (236) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (237) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (227) CastExpression -> . UnaryExpression
    (228) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (229) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (230) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 130
    IDENTIFIER      shift and go to state 114
    CASE            shift and go to state 156
    DEFAULT         shift and go to state 149
    IF              shift and go to state 183
    SWITCH          shift and go to state 157
    WHILE           shift and go to state 151
    DO              shift and go to state 171
    FOR             shift and go to state 133
    BREAK           shift and go to state 166
    CONTINUE        shift and go to state 143
    RETURN          shift and go to state 120
    THROW           shift and go to state 187
    SYNCHRONIZED    shift and go to state 121
    TRY             shift and go to state 134
    {               shift and go to state 79
    OPT_INC_DEC     shift and go to state 135
    +               shift and go to state 128
    -               shift and go to state 176
    ~               shift and go to state 170
    !               shift and go to state 174
    THIS            shift and go to state 115
    SUPER           shift and go to state 185
    NULL            shift and go to state 173
    (               shift and go to state 113
    FLOAT_LITERAL   shift and go to state 153
    INT_LITERAL     shift and go to state 169
    CHAR_LITERAL    shift and go to state 116
    STRING_LITERAL  shift and go to state 184
    BOOL            shift and go to state 167
    NEW             shift and go to state 152
    BOOLEAN         shift and go to state 64
    CHAR            shift and go to state 67
    BYTE            shift and go to state 77
    SHORT           shift and go to state 52
    INT             shift and go to state 74
    LONG            shift and go to state 59
    FLOAT           shift and go to state 76
    DOUBLE          shift and go to state 75
    VOID            shift and go to state 69

    PostfixExpression              shift and go to state 147
    LabelStatement                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 123
    AssignmentExpression           shift and go to state 132
    ExpressionStatement            shift and go to state 109
    JumpStatement                  shift and go to state 150
    RealPostfixExpression          shift and go to state 122
    Statement                      shift and go to state 439
    AndExpression                  shift and go to state 112
    ArrayAccess                    shift and go to state 136
    CastExpression                 shift and go to state 172
    EqualityExpression             shift and go to state 125
    LogicalUnaryOperator           shift and go to state 181
    ComplexPrimaryNoParenthesis    shift and go to state 126
    MultiplicativeExpression       shift and go to state 127
    ClassAllocationExpression      shift and go to state 148
    MethodCall                     shift and go to state 129
    GuardingStatement              shift and go to state 165
    ConditionalOrExpression        shift and go to state 158
    SelectionStatement             shift and go to state 131
    NewAllocationExpression        shift and go to state 159
    NotJustName                    shift and go to state 180
    QualifiedName                  shift and go to state 228
    ComplexPrimary                 shift and go to state 146
    PrimitiveType                  shift and go to state 225
    LogicalUnaryExpression         shift and go to state 182
    UnaryExpression                shift and go to state 163
    Expression                     shift and go to state 160
    Block                          shift and go to state 137
    AdditiveExpression             shift and go to state 161
    ArrayAllocationExpression      shift and go to state 138
    ConditionalExpression          shift and go to state 162
    InclusiveOrExpression          shift and go to state 164
    MethodAccess                   shift and go to state 139
    PrimaryExpression              shift and go to state 155
    ExclusiveOrExpression          shift and go to state 140
    ConditionalAndExpression       shift and go to state 117
    ShiftExpression                shift and go to state 178
    RelationalExpression           shift and go to state 141
    PlainNewAllocationExpression   shift and go to state 142
    FieldAccess                    shift and go to state 168
    EmptyStatement                 shift and go to state 118
    SpecialName                    shift and go to state 145
    IterationStatement             shift and go to state 188

state 436

    (137) IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .

    }               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    FINAL           reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    ;               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    IDENTIFIER      reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CASE            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    DEFAULT         reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    IF              reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SWITCH          reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    WHILE           reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    DO              reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    FOR             reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BREAK           reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CONTINUE        reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    RETURN          reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    THROW           reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SYNCHRONIZED    reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    TRY             reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    {               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BOOLEAN         reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CHAR            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BYTE            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SHORT           reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    INT             reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    LONG            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    FLOAT           reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    DOUBLE          reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    VOID            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    OPT_INC_DEC     reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    +               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    -               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    ~               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    !               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    THIS            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SUPER           reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    NULL            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    (               reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    FLOAT_LITERAL   reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    INT_LITERAL     reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CHAR_LITERAL    reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    STRING_LITERAL  reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BOOL            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    NEW             reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    ELSE            reduce using rule 137 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)


state 437

    (161) CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER ) .

    {               reduce using rule 161 (CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER ) .)


state 438

    (136) IterationStatement -> DO Statement WHILE ( Expression ) ; .

    }               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    FINAL           reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    ;               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    IDENTIFIER      reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CASE            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    DEFAULT         reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    IF              reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SWITCH          reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    WHILE           reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    DO              reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    FOR             reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BREAK           reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CONTINUE        reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    RETURN          reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    THROW           reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SYNCHRONIZED    reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    TRY             reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    {               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BOOLEAN         reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CHAR            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BYTE            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SHORT           reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    INT             reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    LONG            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    FLOAT           reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    DOUBLE          reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    VOID            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    OPT_INC_DEC     reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    +               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    -               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    ~               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    !               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    THIS            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SUPER           reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    NULL            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    (               reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    FLOAT_LITERAL   reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    INT_LITERAL     reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CHAR_LITERAL    reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    STRING_LITERAL  reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BOOL            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    NEW             reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    ELSE            reduce using rule 136 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)


state 439

    (133) ElseOrNot -> ELSE Statement .

    }               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    FINAL           reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    ;               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    IDENTIFIER      reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    CASE            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    DEFAULT         reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    IF              reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    SWITCH          reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    WHILE           reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    DO              reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    FOR             reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    BREAK           reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    CONTINUE        reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    RETURN          reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    THROW           reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    SYNCHRONIZED    reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    TRY             reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    {               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    BOOLEAN         reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    CHAR            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    BYTE            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    SHORT           reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    INT             reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    LONG            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    FLOAT           reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    DOUBLE          reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    VOID            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    OPT_INC_DEC     reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    +               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    -               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    ~               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    !               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    THIS            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    SUPER           reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    NULL            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    (               reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    FLOAT_LITERAL   reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    INT_LITERAL     reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    CHAR_LITERAL    reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    STRING_LITERAL  reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    BOOL            reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    NEW             reduce using rule 133 (ElseOrNot -> ELSE Statement .)
    ELSE            reduce using rule 133 (ElseOrNot -> ELSE Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 175 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 428 resolved as shift
