Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PROTECTED
    COMMENT
    GOTO
    ENUM
    THROWS
    TRANSIENT
    FINAL
    NATIVE
    IGNORE_WHITESPACE
    STRICTFP
    VOLATILE
    CONST
    ABSTRACT
    ASSERT

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     TypeSpecifier -> TypeName
Rule 3     TypeSpecifier -> TypeName Dims
Rule 4     TypeName -> PrimitiveType
Rule 5     TypeName -> QualifiedName
Rule 6     ClassNameList -> QualifiedName
Rule 7     ClassNameList -> ClassNameList , QualifiedName
Rule 8     PrimitiveType -> BOOLEAN
Rule 9     PrimitiveType -> CHAR
Rule 10    PrimitiveType -> BYTE
Rule 11    PrimitiveType -> SHORT
Rule 12    PrimitiveType -> INT
Rule 13    PrimitiveType -> LONG
Rule 14    PrimitiveType -> FLOAT
Rule 15    PrimitiveType -> DOUBLE
Rule 16    PrimitiveType -> VOID
Rule 17    SemiColons -> ;
Rule 18    SemiColons -> SemiColons ;
Rule 19    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 20    ProgramFile -> PackageStatement TypeDeclarations
Rule 21    ProgramFile -> ImportStatements TypeDeclarations
Rule 22    ProgramFile -> TypeDeclarations
Rule 23    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 24    TypeDeclarations -> TypeDeclarationOptSemi
Rule 25    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 26    TypeDeclarationOptSemi -> TypeDeclaration
Rule 27    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 28    ImportStatements -> ImportStatement
Rule 29    ImportStatements -> ImportStatements ImportStatement
Rule 30    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 31    ImportStatement -> IMPORT QualifiedName . * SemiColons
Rule 32    QualifiedName -> IDENTIFIER
Rule 33    QualifiedName -> QualifiedName . IDENTIFIER
Rule 34    TypeDeclaration -> ClassHeader { FieldDeclarations }
Rule 35    TypeDeclaration -> ClassHeader { }
Rule 36    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 37    ClassHeader -> ClassWord IDENTIFIER
Rule 38    Modifiers -> Modifier
Rule 39    Modifiers -> Modifiers Modifier
Rule 40    Modifier -> PUBLIC
Rule 41    Modifier -> PRIVATE
Rule 42    Modifier -> STATIC
Rule 43    ClassWord -> CLASS
Rule 44    ClassWord -> INTERFACE
Rule 45    Interfaces -> IMPLEMENTS ClassNameList
Rule 46    FieldDeclarations -> FieldDeclarationOptSemi
Rule 47    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 48    FieldDeclarationOptSemi -> FieldDeclaration
Rule 49    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 50    FieldDeclaration -> FieldVariableDeclaration ;
Rule 51    FieldDeclaration -> MethodDeclaration
Rule 52    FieldDeclaration -> ConstructorDeclaration
Rule 53    FieldDeclaration -> StaticInitializer
Rule 54    FieldDeclaration -> NonStaticInitializer
Rule 55    FieldDeclaration -> TypeDeclaration
Rule 56    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 57    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 58    VariableDeclarators -> VariableDeclarator
Rule 59    VariableDeclarators -> VariableDeclarators , VariableDeclarator
Rule 60    VariableDeclarator -> DeclaratorName
Rule 61    VariableDeclarator -> DeclaratorName = VariableInitializer
Rule 62    VariableInitializer -> Expression
Rule 63    VariableInitializer -> { }
Rule 64    VariableInitializer -> { ArrayInitializers }
Rule 65    ArrayInitializers -> VariableInitializer
Rule 66    ArrayInitializers -> ArrayInitializers , VariableInitializer
Rule 67    ArrayInitializers -> ArrayInitializers ,
Rule 68    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 69    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 70    MethodDeclarator -> DeclaratorName ( ParameterList )
Rule 71    MethodDeclarator -> DeclaratorName ( )
Rule 72    ParameterList -> Parameter
Rule 73    ParameterList -> ParameterList , Parameter
Rule 74    Parameter -> TypeSpecifier DeclaratorName
Rule 75    DeclaratorName -> IDENTIFIER
Rule 76    DeclaratorName -> DeclaratorName OP_DIM
Rule 77    MethodBody -> Block
Rule 78    MethodBody -> ;
Rule 79    ConstructorDeclaration -> Modifiers ConstructorDeclarator Block
Rule 80    ConstructorDeclaration -> ConstructorDeclarator Block
Rule 81    ConstructorDeclarator -> IDENTIFIER ( ParameterList )
Rule 82    ConstructorDeclarator -> IDENTIFIER ( )
Rule 83    StaticInitializer -> STATIC Block
Rule 84    NonStaticInitializer -> Block
Rule 85    Extends -> EXTENDS TypeName
Rule 86    Extends -> Extends , TypeName
Rule 87    Block -> { LocalVariableDeclarationsAndStatements }
Rule 88    Block -> { }
Rule 89    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 90    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 91    LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 92    LocalVariableDeclarationOrStatement -> Statement
Rule 93    LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ;
Rule 94    Statement -> EmptyStatement
Rule 95    Statement -> LabelStatement
Rule 96    Statement -> ExpressionStatement ;
Rule 97    Statement -> SelectionStatement
Rule 98    Statement -> IterationStatement
Rule 99    Statement -> JumpStatement
Rule 100   Statement -> GuardingStatement
Rule 101   Statement -> Block
Rule 102   EmptyStatement -> ;
Rule 103   LabelStatement -> IDENTIFIER :
Rule 104   LabelStatement -> CASE ConstantExpression :
Rule 105   LabelStatement -> DEFAULT :
Rule 106   ExpressionStatement -> Expression
Rule 107   SelectionStatement -> IF ( Expression ) Statement ElseOrNot
Rule 108   SelectionStatement -> SWITCH ( Expression ) Block
Rule 109   ElseOrNot -> ELSE Statement
Rule 110   ElseOrNot -> <empty>
Rule 111   IterationStatement -> WHILE ( Expression ) Statement
Rule 112   IterationStatement -> DO Statement WHILE ( Expression ) ;
Rule 113   IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement
Rule 114   IterationStatement -> FOR ( ForInit ForExpr ) Statement
Rule 115   ForInit -> ExpressionStatements ;
Rule 116   ForInit -> LocalVariableDeclarationStatement
Rule 117   ForInit -> ;
Rule 118   ForExpr -> Expression ;
Rule 119   ForExpr -> ;
Rule 120   ForIncr -> ExpressionStatements
Rule 121   ExpressionStatements -> ExpressionStatement
Rule 122   ExpressionStatements -> ExpressionStatements , ExpressionStatement
Rule 123   JumpStatement -> BREAK IDENTIFIER ;
Rule 124   JumpStatement -> BREAK ;
Rule 125   JumpStatement -> CONTINUE IDENTIFIER ;
Rule 126   JumpStatement -> CONTINUE ;
Rule 127   JumpStatement -> RETURN Expression ;
Rule 128   JumpStatement -> RETURN ;
Rule 129   JumpStatement -> THROW Expression ;
Rule 130   GuardingStatement -> SYNCHRONIZED ( Expression ) Statement
Rule 131   GuardingStatement -> TRY Block Finally
Rule 132   GuardingStatement -> TRY Block Catches
Rule 133   GuardingStatement -> TRY Block Catches Finally
Rule 134   Catches -> Catch
Rule 135   Catches -> Catches Catch
Rule 136   Catch -> CatchHeader Block
Rule 137   CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER )
Rule 138   CatchHeader -> CATCH ( TypeSpecifier )
Rule 139   Finally -> FINALLY Block
Rule 140   PrimaryExpression -> QualifiedName
Rule 141   PrimaryExpression -> NotJustName
Rule 142   NotJustName -> SpecialName
Rule 143   NotJustName -> NewAllocationExpression
Rule 144   NotJustName -> ComplexPrimary
Rule 145   ComplexPrimary -> ( Expression )
Rule 146   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 147   ComplexPrimaryNoParenthesis -> FLOAT_LITERAL
Rule 148   ComplexPrimaryNoParenthesis -> INT_LITERAL
Rule 149   ComplexPrimaryNoParenthesis -> CHAR_LITERAL
Rule 150   ComplexPrimaryNoParenthesis -> STRING_LITERAL
Rule 151   ComplexPrimaryNoParenthesis -> BOOL
Rule 152   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 153   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 154   ComplexPrimaryNoParenthesis -> MethodCall
Rule 155   ArrayAccess -> QualifiedName [ Expression ]
Rule 156   ArrayAccess -> ComplexPrimary [ Expression ]
Rule 157   FieldAccess -> NotJustName . IDENTIFIER
Rule 158   FieldAccess -> RealPostfixExpression . IDENTIFIER
Rule 159   FieldAccess -> QualifiedName . THIS
Rule 160   FieldAccess -> QualifiedName . CLASS
Rule 161   FieldAccess -> PrimitiveType . CLASS
Rule 162   MethodCall -> MethodAccess ( ArgumentList )
Rule 163   MethodCall -> MethodAccess ( )
Rule 164   MethodAccess -> ComplexPrimaryNoParenthesis
Rule 165   MethodAccess -> SpecialName
Rule 166   MethodAccess -> QualifiedName
Rule 167   SpecialName -> THIS
Rule 168   SpecialName -> SUPER
Rule 169   SpecialName -> NULL
Rule 170   ArgumentList -> Expression
Rule 171   ArgumentList -> ArgumentList , Expression
Rule 172   NewAllocationExpression -> PlainNewAllocationExpression
Rule 173   NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression
Rule 174   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 175   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 176   PlainNewAllocationExpression -> ArrayAllocationExpression { }
Rule 177   PlainNewAllocationExpression -> ClassAllocationExpression { }
Rule 178   PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers }
Rule 179   PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations }
Rule 180   ClassAllocationExpression -> NEW TypeName ( ArgumentList )
Rule 181   ClassAllocationExpression -> NEW TypeName ( )
Rule 182   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 183   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 184   ArrayAllocationExpression -> NEW TypeName Dims
Rule 185   DimExprs -> DimExpr
Rule 186   DimExprs -> DimExprs DimExpr
Rule 187   DimExpr -> [ Expression ]
Rule 188   Dims -> OP_DIM
Rule 189   Dims -> Dims OP_DIM
Rule 190   OP_DIM -> [ ]
Rule 191   PostfixExpression -> PrimaryExpression
Rule 192   PostfixExpression -> RealPostfixExpression
Rule 193   RealPostfixExpression -> PostfixExpression OPT_INC_DEC
Rule 194   UnaryExpression -> OPT_INC_DEC UnaryExpression
Rule 195   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 196   UnaryExpression -> LogicalUnaryExpression
Rule 197   LogicalUnaryExpression -> PostfixExpression
Rule 198   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 199   LogicalUnaryOperator -> ~
Rule 200   LogicalUnaryOperator -> !
Rule 201   ArithmeticUnaryOperator -> +
Rule 202   ArithmeticUnaryOperator -> -
Rule 203   CastExpression -> UnaryExpression
Rule 204   CastExpression -> ( PrimitiveTypeExpression ) CastExpression
Rule 205   CastExpression -> ( ClassTypeExpression ) CastExpression
Rule 206   CastExpression -> ( Expression ) LogicalUnaryExpression
Rule 207   PrimitiveTypeExpression -> PrimitiveType
Rule 208   PrimitiveTypeExpression -> PrimitiveType Dims
Rule 209   ClassTypeExpression -> QualifiedName Dims
Rule 210   MultiplicativeExpression -> CastExpression
Rule 211   MultiplicativeExpression -> MultiplicativeExpression * CastExpression
Rule 212   MultiplicativeExpression -> MultiplicativeExpression / CastExpression
Rule 213   MultiplicativeExpression -> MultiplicativeExpression % CastExpression
Rule 214   AdditiveExpression -> MultiplicativeExpression
Rule 215   AdditiveExpression -> AdditiveExpression + MultiplicativeExpression
Rule 216   AdditiveExpression -> AdditiveExpression - MultiplicativeExpression
Rule 217   ShiftExpression -> AdditiveExpression
Rule 218   ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression
Rule 219   RelationalExpression -> ShiftExpression
Rule 220   RelationalExpression -> RelationalExpression < ShiftExpression
Rule 221   RelationalExpression -> RelationalExpression > ShiftExpression
Rule 222   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 223   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 224   RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier
Rule 225   EqualityExpression -> RelationalExpression
Rule 226   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 227   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 228   AndExpression -> EqualityExpression
Rule 229   AndExpression -> AndExpression & EqualityExpression
Rule 230   ExclusiveOrExpression -> AndExpression
Rule 231   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 232   InclusiveOrExpression -> ExclusiveOrExpression
Rule 233   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 234   ConditionalAndExpression -> InclusiveOrExpression
Rule 235   ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression
Rule 236   ConditionalOrExpression -> ConditionalAndExpression
Rule 237   ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression
Rule 238   ConditionalExpression -> ConditionalOrExpression
Rule 239   ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression
Rule 240   AssignmentExpression -> ConditionalExpression
Rule 241   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 242   AssignmentOperator -> =
Rule 243   AssignmentOperator -> OPT_EQ
Rule 244   Expression -> AssignmentExpression
Rule 245   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

!                    : 200
%                    : 213
&                    : 229
(                    : 70 71 81 82 107 108 111 112 113 114 130 137 138 145 162 163 180 181 204 205 206
)                    : 70 71 81 82 107 108 111 112 113 114 130 137 138 145 162 163 180 181 204 205 206
*                    : 31 211
+                    : 201 215
,                    : 7 59 66 67 73 86 122 171
-                    : 202 216
.                    : 31 33 157 158 159 160 161 173
/                    : 212
:                    : 103 104 105 239
;                    : 17 18 50 78 93 96 102 112 115 117 118 119 123 124 125 126 127 128 129
<                    : 220
=                    : 61 242
>                    : 221
?                    : 239
ABSTRACT             : 
ASSERT               : 
BOOL                 : 151
BOOLEAN              : 8
BREAK                : 123 124
BYTE                 : 10
CASE                 : 104
CATCH                : 137 138
CHAR                 : 9
CHAR_LITERAL         : 149
CLASS                : 43 160 161
COMMENT              : 
CONST                : 
CONTINUE             : 125 126
DEFAULT              : 105
DO                   : 112
DOUBLE               : 15
ELSE                 : 109
ENUM                 : 
EXTENDS              : 85
FINAL                : 
FINALLY              : 139
FLOAT                : 14
FLOAT_LITERAL        : 147
FOR                  : 113 114
GOTO                 : 
IDENTIFIER           : 32 33 36 37 75 81 82 103 123 125 137 157 158
IF                   : 107
IGNORE_WHITESPACE    : 
IMPLEMENTS           : 45
IMPORT               : 30 31
INSTANCEOF           : 224
INT                  : 12
INTERFACE            : 44
INT_LITERAL          : 148
LONG                 : 13
NATIVE               : 
NEW                  : 180 181 182 183 184
NULL                 : 169
OPT_EQ               : 243
OPT_INC_DEC          : 193 194
OPT_SOME             : 218
OP_EQ                : 226
OP_GE                : 223
OP_LAND              : 235
OP_LE                : 222
OP_LOR               : 237
OP_NE                : 227
PACKAGE              : 23
PRIVATE              : 41
PROTECTED            : 
PUBLIC               : 40
RETURN               : 127 128
SHORT                : 11
STATIC               : 42 83
STRICTFP             : 
STRING_LITERAL       : 150
SUPER                : 168
SWITCH               : 108
SYNCHRONIZED         : 130
THIS                 : 159 167
THROW                : 129
THROWS               : 
TRANSIENT            : 
TRY                  : 131 132 133
VOID                 : 16
VOLATILE             : 
WHILE                : 111 112
[                    : 155 156 187 190
]                    : 155 156 187 190
^                    : 231
error                : 
{                    : 34 35 63 64 87 88 176 177 178 179
|                    : 233
}                    : 34 35 63 64 87 88 176 177 178 179
~                    : 199

Nonterminals, with rules where they appear

AdditiveExpression   : 215 216 217 218
AndExpression        : 229 230 231
ArgumentList         : 162 171 180
ArithmeticUnaryOperator : 195
ArrayAccess          : 152
ArrayAllocationExpression : 174 176 178
ArrayInitializers    : 64 66 67 178
AssignmentExpression : 241 244
AssignmentOperator   : 241
Block                : 77 79 80 83 84 101 108 131 132 133 136 139
CastExpression       : 195 204 205 210 211 212 213
Catch                : 134 135
CatchHeader          : 136
Catches              : 132 133 135
ClassAllocationExpression : 175 177 179
ClassHeader          : 34 35
ClassNameList        : 7 45
ClassTypeExpression  : 205
ClassWord            : 36 37
CompilationUnit      : 0
ComplexPrimary       : 144 156
ComplexPrimaryNoParenthesis : 146 164
ConditionalAndExpression : 235 236 237
ConditionalExpression : 239 240 245
ConditionalOrExpression : 237 238 239
ConstantExpression   : 104
ConstructorDeclaration : 52
ConstructorDeclarator : 79 80
DeclaratorName       : 60 61 70 71 74 76
DimExpr              : 185 186
DimExprs             : 182 183 186
Dims                 : 3 182 184 189 208 209
ElseOrNot            : 107
EmptyStatement       : 94
EqualityExpression   : 226 227 228 229
ExclusiveOrExpression : 231 232 233
Expression           : 62 106 107 108 111 112 118 127 129 130 145 155 156 170 171 187 206 239
ExpressionStatement  : 96 121 122
ExpressionStatements : 115 120 122
Extends              : 86
FieldAccess          : 153
FieldDeclaration     : 48 49
FieldDeclarationOptSemi : 46 47
FieldDeclarations    : 34 47 179
FieldVariableDeclaration : 50
Finally              : 131 133
ForExpr              : 113 114
ForIncr              : 113
ForInit              : 113 114
GuardingStatement    : 100
ImportStatement      : 28 29
ImportStatements     : 19 21 29
InclusiveOrExpression : 233 234 235
Interfaces           : 
IterationStatement   : 98
JumpStatement        : 99
LabelStatement       : 95
LocalVariableDeclarationOrStatement : 89 90
LocalVariableDeclarationStatement : 91 116
LocalVariableDeclarationsAndStatements : 87 90
LogicalUnaryExpression : 196 206
LogicalUnaryOperator : 198
MethodAccess         : 162 163
MethodBody           : 68 69
MethodCall           : 154
MethodDeclaration    : 51
MethodDeclarator     : 68 69
Modifier             : 38 39
Modifiers            : 36 39 56 68 79
MultiplicativeExpression : 211 212 213 214 215 216
NewAllocationExpression : 143
NonStaticInitializer : 54
NotJustName          : 141 157
OP_DIM               : 76 188 189
PackageStatement     : 19 20
Parameter            : 72 73
ParameterList        : 70 73 81
PlainNewAllocationExpression : 172 173
PostfixExpression    : 193 197
PrimaryExpression    : 191
PrimitiveType        : 4 161 207 208
PrimitiveTypeExpression : 204
ProgramFile          : 1
QualifiedName        : 5 6 7 23 30 31 33 140 155 159 160 166 173 209
RealPostfixExpression : 158 192
RelationalExpression : 220 221 222 223 224 225 226 227
SelectionStatement   : 97
SemiColons           : 18 23 27 30 31 49
ShiftExpression      : 218 219 220 221 222 223
SpecialName          : 142 165
Statement            : 92 107 109 111 112 113 114 130
StaticInitializer    : 53
TypeDeclaration      : 26 27 55
TypeDeclarationOptSemi : 24 25
TypeDeclarations     : 19 20 21 22 25
TypeName             : 2 3 85 86 180 181 182 183 184
TypeSpecifier        : 56 57 68 69 74 93 137 138 224
UnaryExpression      : 194 198 203 241
VariableDeclarator   : 58 59
VariableDeclarators  : 56 57 59 93
VariableInitializer  : 61 65 66

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (19) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (20) ProgramFile -> . PackageStatement TypeDeclarations
    (21) ProgramFile -> . ImportStatements TypeDeclarations
    (22) ProgramFile -> . TypeDeclarations
    (23) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    PACKAGE         shift and go to state 9
    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 15
    TypeDeclarations               shift and go to state 16
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    PackageStatement               shift and go to state 10
    CompilationUnit                shift and go to state 13
    TypeDeclarationOptSemi         shift and go to state 7

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (26) TypeDeclarationOptSemi -> TypeDeclaration .
    (27) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    CLASS           reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    INTERFACE       reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 26 (TypeDeclarationOptSemi -> TypeDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 21

state 3

    (42) Modifier -> STATIC .

    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)


state 4

    (41) Modifier -> PRIVATE .

    CLASS           reduce using rule 41 (Modifier -> PRIVATE .)
    INTERFACE       reduce using rule 41 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 41 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 41 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 41 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 41 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 41 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 41 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 41 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 41 (Modifier -> PRIVATE .)
    INT             reduce using rule 41 (Modifier -> PRIVATE .)
    LONG            reduce using rule 41 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 41 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 41 (Modifier -> PRIVATE .)
    VOID            reduce using rule 41 (Modifier -> PRIVATE .)


state 5

    (30) ImportStatement -> IMPORT . QualifiedName SemiColons
    (31) ImportStatement -> IMPORT . QualifiedName . * SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 22

state 6

    (43) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 43 (ClassWord -> CLASS .)


state 7

    (24) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 24 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 8

    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (39) Modifiers -> Modifiers . Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 24
    Modifier                       shift and go to state 25

state 9

    (23) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 26

state 10

    (19) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (20) ProgramFile -> PackageStatement . TypeDeclarations
    (28) ImportStatements -> . ImportStatement
    (29) ImportStatements -> . ImportStatements ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ImportStatements               shift and go to state 27
    TypeDeclarations               shift and go to state 28
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 11

    (28) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 28 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 28 (ImportStatements -> ImportStatement .)
    INTERFACE       reduce using rule 28 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 28 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 28 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 28 (ImportStatements -> ImportStatement .)


state 12

    (38) Modifiers -> Modifier .

    CLASS           reduce using rule 38 (Modifiers -> Modifier .)
    INTERFACE       reduce using rule 38 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 38 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 38 (Modifiers -> Modifier .)
    STATIC          reduce using rule 38 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 38 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 38 (Modifiers -> Modifier .)
    CHAR            reduce using rule 38 (Modifiers -> Modifier .)
    BYTE            reduce using rule 38 (Modifiers -> Modifier .)
    SHORT           reduce using rule 38 (Modifiers -> Modifier .)
    INT             reduce using rule 38 (Modifiers -> Modifier .)
    LONG            reduce using rule 38 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 38 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 38 (Modifiers -> Modifier .)
    VOID            reduce using rule 38 (Modifiers -> Modifier .)


state 13

    (0) S' -> CompilationUnit .



state 14

    (37) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 29


state 15

    (21) ProgramFile -> ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 31
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 7

state 16

    (22) ProgramFile -> TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 22 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 17

    (34) TypeDeclaration -> ClassHeader . { FieldDeclarations }
    (35) TypeDeclaration -> ClassHeader . { }

    {               shift and go to state 33


state 18

    (44) ClassWord -> INTERFACE .

    IDENTIFIER      reduce using rule 44 (ClassWord -> INTERFACE .)


state 19

    (40) Modifier -> PUBLIC .

    CLASS           reduce using rule 40 (Modifier -> PUBLIC .)
    INTERFACE       reduce using rule 40 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 40 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 40 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 40 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 40 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 40 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 40 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 40 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 40 (Modifier -> PUBLIC .)
    INT             reduce using rule 40 (Modifier -> PUBLIC .)
    LONG            reduce using rule 40 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 40 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 40 (Modifier -> PUBLIC .)
    VOID            reduce using rule 40 (Modifier -> PUBLIC .)


state 20

    (17) SemiColons -> ; .

    ;               reduce using rule 17 (SemiColons -> ; .)
    IMPORT          reduce using rule 17 (SemiColons -> ; .)
    CLASS           reduce using rule 17 (SemiColons -> ; .)
    INTERFACE       reduce using rule 17 (SemiColons -> ; .)
    PUBLIC          reduce using rule 17 (SemiColons -> ; .)
    PRIVATE         reduce using rule 17 (SemiColons -> ; .)
    STATIC          reduce using rule 17 (SemiColons -> ; .)
    }               reduce using rule 17 (SemiColons -> ; .)
    IDENTIFIER      reduce using rule 17 (SemiColons -> ; .)
    {               reduce using rule 17 (SemiColons -> ; .)
    BOOLEAN         reduce using rule 17 (SemiColons -> ; .)
    CHAR            reduce using rule 17 (SemiColons -> ; .)
    BYTE            reduce using rule 17 (SemiColons -> ; .)
    SHORT           reduce using rule 17 (SemiColons -> ; .)
    INT             reduce using rule 17 (SemiColons -> ; .)
    LONG            reduce using rule 17 (SemiColons -> ; .)
    FLOAT           reduce using rule 17 (SemiColons -> ; .)
    DOUBLE          reduce using rule 17 (SemiColons -> ; .)
    VOID            reduce using rule 17 (SemiColons -> ; .)
    $end            reduce using rule 17 (SemiColons -> ; .)


state 21

    (27) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    CLASS           reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    INTERFACE       reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    ;               shift and go to state 34


state 22

    (30) ImportStatement -> IMPORT QualifiedName . SemiColons
    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 35
    ;               shift and go to state 20

    SemiColons                     shift and go to state 36

state 23

    (32) QualifiedName -> IDENTIFIER .

    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    )               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    :               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ,               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    }               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ]               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 24

    (36) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 37


state 25

    (39) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INTERFACE       reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 39 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 39 (Modifiers -> Modifiers Modifier .)


state 26

    (23) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    .               shift and go to state 38
    ;               shift and go to state 20

    SemiColons                     shift and go to state 39

state 27

    (19) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (29) ImportStatements -> ImportStatements . ImportStatement
    (24) TypeDeclarations -> . TypeDeclarationOptSemi
    (25) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (30) ImportStatement -> . IMPORT QualifiedName SemiColons
    (31) ImportStatement -> . IMPORT QualifiedName . * SemiColons
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    TypeDeclarations               shift and go to state 40
    ImportStatement                shift and go to state 30
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 28

    (20) ProgramFile -> PackageStatement TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 20 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 29

    (37) ClassHeader -> ClassWord IDENTIFIER .

    {               reduce using rule 37 (ClassHeader -> ClassWord IDENTIFIER .)


state 30

    (29) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    INTERFACE       reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 29 (ImportStatements -> ImportStatements ImportStatement .)


state 31

    (21) ProgramFile -> ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 21 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 32

state 32

    (25) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    INTERFACE       reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 25 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 33

    (34) TypeDeclaration -> ClassHeader { . FieldDeclarations }
    (35) TypeDeclaration -> ClassHeader { . }
    (46) FieldDeclarations -> . FieldDeclarationOptSemi
    (47) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (48) FieldDeclarationOptSemi -> . FieldDeclaration
    (49) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (50) FieldDeclaration -> . FieldVariableDeclaration ;
    (51) FieldDeclaration -> . MethodDeclaration
    (52) FieldDeclaration -> . ConstructorDeclaration
    (53) FieldDeclaration -> . StaticInitializer
    (54) FieldDeclaration -> . NonStaticInitializer
    (55) FieldDeclaration -> . TypeDeclaration
    (56) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (57) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (68) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (69) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (79) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (80) ConstructorDeclaration -> . ConstructorDeclarator Block
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 69
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    FieldDeclarations              shift and go to state 58
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 60
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 34

    (18) SemiColons -> SemiColons ; .

    ;               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IMPORT          reduce using rule 18 (SemiColons -> SemiColons ; .)
    CLASS           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INTERFACE       reduce using rule 18 (SemiColons -> SemiColons ; .)
    PUBLIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    PRIVATE         reduce using rule 18 (SemiColons -> SemiColons ; .)
    STATIC          reduce using rule 18 (SemiColons -> SemiColons ; .)
    }               reduce using rule 18 (SemiColons -> SemiColons ; .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SemiColons ; .)
    {               reduce using rule 18 (SemiColons -> SemiColons ; .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SemiColons ; .)
    CHAR            reduce using rule 18 (SemiColons -> SemiColons ; .)
    BYTE            reduce using rule 18 (SemiColons -> SemiColons ; .)
    SHORT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    INT             reduce using rule 18 (SemiColons -> SemiColons ; .)
    LONG            reduce using rule 18 (SemiColons -> SemiColons ; .)
    FLOAT           reduce using rule 18 (SemiColons -> SemiColons ; .)
    DOUBLE          reduce using rule 18 (SemiColons -> SemiColons ; .)
    VOID            reduce using rule 18 (SemiColons -> SemiColons ; .)
    $end            reduce using rule 18 (SemiColons -> SemiColons ; .)


state 35

    (31) ImportStatement -> IMPORT QualifiedName . . * SemiColons
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    *               shift and go to state 70
    IDENTIFIER      shift and go to state 71


state 36

    (30) ImportStatement -> IMPORT QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    INTERFACE       reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 30 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    ;               shift and go to state 34


state 37

    (36) ClassHeader -> Modifiers ClassWord IDENTIFIER .

    {               reduce using rule 36 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)


state 38

    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    IDENTIFIER      shift and go to state 71


state 39

    (23) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    INTERFACE       reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 23 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    ;               shift and go to state 34


state 40

    (19) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (25) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (26) TypeDeclarationOptSemi -> . TypeDeclaration
    (27) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC

    $end            reduce using rule 19 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 8
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 2
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 32

state 41

    (11) PrimitiveType -> SHORT .

    .               reduce using rule 11 (PrimitiveType -> SHORT .)
    [               reduce using rule 11 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> SHORT .)
    )               reduce using rule 11 (PrimitiveType -> SHORT .)
    (               reduce using rule 11 (PrimitiveType -> SHORT .)
    <               reduce using rule 11 (PrimitiveType -> SHORT .)
    >               reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_LE           reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_GE           reduce using rule 11 (PrimitiveType -> SHORT .)
    INSTANCEOF      reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_EQ           reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_NE           reduce using rule 11 (PrimitiveType -> SHORT .)
    &               reduce using rule 11 (PrimitiveType -> SHORT .)
    ^               reduce using rule 11 (PrimitiveType -> SHORT .)
    |               reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_LAND         reduce using rule 11 (PrimitiveType -> SHORT .)
    ?               reduce using rule 11 (PrimitiveType -> SHORT .)
    OP_LOR          reduce using rule 11 (PrimitiveType -> SHORT .)
    ;               reduce using rule 11 (PrimitiveType -> SHORT .)
    :               reduce using rule 11 (PrimitiveType -> SHORT .)
    ,               reduce using rule 11 (PrimitiveType -> SHORT .)
    }               reduce using rule 11 (PrimitiveType -> SHORT .)
    ]               reduce using rule 11 (PrimitiveType -> SHORT .)


state 42

    (52) FieldDeclaration -> ConstructorDeclaration .

    ;               reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    }               reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    {               reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    INTERFACE       reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 52 (FieldDeclaration -> ConstructorDeclaration .)


state 43

    (50) FieldDeclaration -> FieldVariableDeclaration . ;

    ;               shift and go to state 72


state 44

    (16) PrimitiveType -> VOID .

    .               reduce using rule 16 (PrimitiveType -> VOID .)
    [               reduce using rule 16 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> VOID .)
    )               reduce using rule 16 (PrimitiveType -> VOID .)
    (               reduce using rule 16 (PrimitiveType -> VOID .)
    <               reduce using rule 16 (PrimitiveType -> VOID .)
    >               reduce using rule 16 (PrimitiveType -> VOID .)
    OP_LE           reduce using rule 16 (PrimitiveType -> VOID .)
    OP_GE           reduce using rule 16 (PrimitiveType -> VOID .)
    INSTANCEOF      reduce using rule 16 (PrimitiveType -> VOID .)
    OP_EQ           reduce using rule 16 (PrimitiveType -> VOID .)
    OP_NE           reduce using rule 16 (PrimitiveType -> VOID .)
    &               reduce using rule 16 (PrimitiveType -> VOID .)
    ^               reduce using rule 16 (PrimitiveType -> VOID .)
    |               reduce using rule 16 (PrimitiveType -> VOID .)
    OP_LAND         reduce using rule 16 (PrimitiveType -> VOID .)
    ?               reduce using rule 16 (PrimitiveType -> VOID .)
    OP_LOR          reduce using rule 16 (PrimitiveType -> VOID .)
    ;               reduce using rule 16 (PrimitiveType -> VOID .)
    :               reduce using rule 16 (PrimitiveType -> VOID .)
    ,               reduce using rule 16 (PrimitiveType -> VOID .)
    }               reduce using rule 16 (PrimitiveType -> VOID .)
    ]               reduce using rule 16 (PrimitiveType -> VOID .)


state 45

    (55) FieldDeclaration -> TypeDeclaration .

    ;               reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    }               reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    {               reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    INTERFACE       reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 55 (FieldDeclaration -> TypeDeclaration .)


state 46

    (4) TypeName -> PrimitiveType .

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    )               reduce using rule 4 (TypeName -> PrimitiveType .)
    <               reduce using rule 4 (TypeName -> PrimitiveType .)
    >               reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_LE           reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_GE           reduce using rule 4 (TypeName -> PrimitiveType .)
    INSTANCEOF      reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_EQ           reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_NE           reduce using rule 4 (TypeName -> PrimitiveType .)
    &               reduce using rule 4 (TypeName -> PrimitiveType .)
    ^               reduce using rule 4 (TypeName -> PrimitiveType .)
    |               reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_LAND         reduce using rule 4 (TypeName -> PrimitiveType .)
    ?               reduce using rule 4 (TypeName -> PrimitiveType .)
    OP_LOR          reduce using rule 4 (TypeName -> PrimitiveType .)
    ;               reduce using rule 4 (TypeName -> PrimitiveType .)
    :               reduce using rule 4 (TypeName -> PrimitiveType .)
    ,               reduce using rule 4 (TypeName -> PrimitiveType .)
    }               reduce using rule 4 (TypeName -> PrimitiveType .)
    ]               reduce using rule 4 (TypeName -> PrimitiveType .)
    (               reduce using rule 4 (TypeName -> PrimitiveType .)


state 47

    (53) FieldDeclaration -> StaticInitializer .

    ;               reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    }               reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    {               reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    INTERFACE       reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 53 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 53 (FieldDeclaration -> StaticInitializer .)


state 48

    (83) StaticInitializer -> STATIC . Block
    (42) Modifier -> STATIC .
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    IDENTIFIER      reduce using rule 42 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 42 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 42 (Modifier -> STATIC .)
    STATIC          reduce using rule 42 (Modifier -> STATIC .)
    CLASS           reduce using rule 42 (Modifier -> STATIC .)
    INTERFACE       reduce using rule 42 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 42 (Modifier -> STATIC .)
    CHAR            reduce using rule 42 (Modifier -> STATIC .)
    BYTE            reduce using rule 42 (Modifier -> STATIC .)
    SHORT           reduce using rule 42 (Modifier -> STATIC .)
    INT             reduce using rule 42 (Modifier -> STATIC .)
    LONG            reduce using rule 42 (Modifier -> STATIC .)
    FLOAT           reduce using rule 42 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 42 (Modifier -> STATIC .)
    VOID            reduce using rule 42 (Modifier -> STATIC .)
    {               shift and go to state 68

    Block                          shift and go to state 73

state 49

    (13) PrimitiveType -> LONG .

    .               reduce using rule 13 (PrimitiveType -> LONG .)
    [               reduce using rule 13 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> LONG .)
    )               reduce using rule 13 (PrimitiveType -> LONG .)
    (               reduce using rule 13 (PrimitiveType -> LONG .)
    <               reduce using rule 13 (PrimitiveType -> LONG .)
    >               reduce using rule 13 (PrimitiveType -> LONG .)
    OP_LE           reduce using rule 13 (PrimitiveType -> LONG .)
    OP_GE           reduce using rule 13 (PrimitiveType -> LONG .)
    INSTANCEOF      reduce using rule 13 (PrimitiveType -> LONG .)
    OP_EQ           reduce using rule 13 (PrimitiveType -> LONG .)
    OP_NE           reduce using rule 13 (PrimitiveType -> LONG .)
    &               reduce using rule 13 (PrimitiveType -> LONG .)
    ^               reduce using rule 13 (PrimitiveType -> LONG .)
    |               reduce using rule 13 (PrimitiveType -> LONG .)
    OP_LAND         reduce using rule 13 (PrimitiveType -> LONG .)
    ?               reduce using rule 13 (PrimitiveType -> LONG .)
    OP_LOR          reduce using rule 13 (PrimitiveType -> LONG .)
    ;               reduce using rule 13 (PrimitiveType -> LONG .)
    :               reduce using rule 13 (PrimitiveType -> LONG .)
    ,               reduce using rule 13 (PrimitiveType -> LONG .)
    }               reduce using rule 13 (PrimitiveType -> LONG .)
    ]               reduce using rule 13 (PrimitiveType -> LONG .)


state 50

    (54) FieldDeclaration -> NonStaticInitializer .

    ;               reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    }               reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    {               reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    INTERFACE       reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 54 (FieldDeclaration -> NonStaticInitializer .)


state 51

    (57) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (69) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (58) VariableDeclarators -> . VariableDeclarator
    (59) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (70) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (71) MethodDeclarator -> . DeclaratorName ( )
    (60) VariableDeclarator -> . DeclaratorName
    (61) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (75) DeclaratorName -> . IDENTIFIER
    (76) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    VariableDeclarators            shift and go to state 74
    DeclaratorName                 shift and go to state 75
    MethodDeclarator               shift and go to state 76
    VariableDeclarator             shift and go to state 78

state 52

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER

    [               reduce using rule 5 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    )               reduce using rule 5 (TypeName -> QualifiedName .)
    <               reduce using rule 5 (TypeName -> QualifiedName .)
    >               reduce using rule 5 (TypeName -> QualifiedName .)
    OP_LE           reduce using rule 5 (TypeName -> QualifiedName .)
    OP_GE           reduce using rule 5 (TypeName -> QualifiedName .)
    INSTANCEOF      reduce using rule 5 (TypeName -> QualifiedName .)
    OP_EQ           reduce using rule 5 (TypeName -> QualifiedName .)
    OP_NE           reduce using rule 5 (TypeName -> QualifiedName .)
    &               reduce using rule 5 (TypeName -> QualifiedName .)
    ^               reduce using rule 5 (TypeName -> QualifiedName .)
    |               reduce using rule 5 (TypeName -> QualifiedName .)
    OP_LAND         reduce using rule 5 (TypeName -> QualifiedName .)
    ?               reduce using rule 5 (TypeName -> QualifiedName .)
    OP_LOR          reduce using rule 5 (TypeName -> QualifiedName .)
    ;               reduce using rule 5 (TypeName -> QualifiedName .)
    :               reduce using rule 5 (TypeName -> QualifiedName .)
    ,               reduce using rule 5 (TypeName -> QualifiedName .)
    }               reduce using rule 5 (TypeName -> QualifiedName .)
    ]               reduce using rule 5 (TypeName -> QualifiedName .)
    (               reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 38


state 53

    (2) TypeSpecifier -> TypeName .
    (3) TypeSpecifier -> TypeName . Dims
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (190) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 2 (TypeSpecifier -> TypeName .)
    )               reduce using rule 2 (TypeSpecifier -> TypeName .)
    <               reduce using rule 2 (TypeSpecifier -> TypeName .)
    >               reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_LE           reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_GE           reduce using rule 2 (TypeSpecifier -> TypeName .)
    INSTANCEOF      reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_EQ           reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_NE           reduce using rule 2 (TypeSpecifier -> TypeName .)
    &               reduce using rule 2 (TypeSpecifier -> TypeName .)
    ^               reduce using rule 2 (TypeSpecifier -> TypeName .)
    |               reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_LAND         reduce using rule 2 (TypeSpecifier -> TypeName .)
    ?               reduce using rule 2 (TypeSpecifier -> TypeName .)
    OP_LOR          reduce using rule 2 (TypeSpecifier -> TypeName .)
    ;               reduce using rule 2 (TypeSpecifier -> TypeName .)
    :               reduce using rule 2 (TypeSpecifier -> TypeName .)
    ,               reduce using rule 2 (TypeSpecifier -> TypeName .)
    }               reduce using rule 2 (TypeSpecifier -> TypeName .)
    ]               reduce using rule 2 (TypeSpecifier -> TypeName .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 80
    Dims                           shift and go to state 81

state 54

    (81) ConstructorDeclarator -> IDENTIFIER . ( ParameterList )
    (82) ConstructorDeclarator -> IDENTIFIER . ( )
    (32) QualifiedName -> IDENTIFIER .

    (               shift and go to state 82
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 55

    (51) FieldDeclaration -> MethodDeclaration .

    ;               reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    }               reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    {               reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    INTERFACE       reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 51 (FieldDeclaration -> MethodDeclaration .)


state 56

    (9) PrimitiveType -> CHAR .

    .               reduce using rule 9 (PrimitiveType -> CHAR .)
    [               reduce using rule 9 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> CHAR .)
    )               reduce using rule 9 (PrimitiveType -> CHAR .)
    (               reduce using rule 9 (PrimitiveType -> CHAR .)
    <               reduce using rule 9 (PrimitiveType -> CHAR .)
    >               reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_LE           reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_GE           reduce using rule 9 (PrimitiveType -> CHAR .)
    INSTANCEOF      reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_EQ           reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_NE           reduce using rule 9 (PrimitiveType -> CHAR .)
    &               reduce using rule 9 (PrimitiveType -> CHAR .)
    ^               reduce using rule 9 (PrimitiveType -> CHAR .)
    |               reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_LAND         reduce using rule 9 (PrimitiveType -> CHAR .)
    ?               reduce using rule 9 (PrimitiveType -> CHAR .)
    OP_LOR          reduce using rule 9 (PrimitiveType -> CHAR .)
    ;               reduce using rule 9 (PrimitiveType -> CHAR .)
    :               reduce using rule 9 (PrimitiveType -> CHAR .)
    ,               reduce using rule 9 (PrimitiveType -> CHAR .)
    }               reduce using rule 9 (PrimitiveType -> CHAR .)
    ]               reduce using rule 9 (PrimitiveType -> CHAR .)


state 57

    (56) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (68) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (79) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Block
    (39) Modifiers -> Modifiers . Modifier
    (36) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    IDENTIFIER      shift and go to state 54
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    QualifiedName                  shift and go to state 52
    ConstructorDeclarator          shift and go to state 84
    PrimitiveType                  shift and go to state 46
    ClassWord                      shift and go to state 24
    TypeName                       shift and go to state 53
    Modifier                       shift and go to state 25
    TypeSpecifier                  shift and go to state 83

state 58

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations . }
    (47) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (48) FieldDeclarationOptSemi -> . FieldDeclaration
    (49) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (50) FieldDeclaration -> . FieldVariableDeclaration ;
    (51) FieldDeclaration -> . MethodDeclaration
    (52) FieldDeclaration -> . ConstructorDeclaration
    (53) FieldDeclaration -> . StaticInitializer
    (54) FieldDeclaration -> . NonStaticInitializer
    (55) FieldDeclaration -> . TypeDeclaration
    (56) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (57) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (68) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (69) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (79) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (80) ConstructorDeclaration -> . ConstructorDeclarator Block
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 86
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ConstructorDeclaration         shift and go to state 42
    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 85
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 59

    (84) NonStaticInitializer -> Block .

    ;               reduce using rule 84 (NonStaticInitializer -> Block .)
    }               reduce using rule 84 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 84 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 84 (NonStaticInitializer -> Block .)
    {               reduce using rule 84 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 84 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 84 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 84 (NonStaticInitializer -> Block .)
    INTERFACE       reduce using rule 84 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 84 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 84 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 84 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 84 (NonStaticInitializer -> Block .)
    INT             reduce using rule 84 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 84 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 84 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 84 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 84 (NonStaticInitializer -> Block .)


state 60

    (46) FieldDeclarations -> FieldDeclarationOptSemi .

    }               reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    {               reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 46 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 61

    (80) ConstructorDeclaration -> ConstructorDeclarator . Block
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 87

state 62

    (12) PrimitiveType -> INT .

    .               reduce using rule 12 (PrimitiveType -> INT .)
    [               reduce using rule 12 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> INT .)
    )               reduce using rule 12 (PrimitiveType -> INT .)
    (               reduce using rule 12 (PrimitiveType -> INT .)
    <               reduce using rule 12 (PrimitiveType -> INT .)
    >               reduce using rule 12 (PrimitiveType -> INT .)
    OP_LE           reduce using rule 12 (PrimitiveType -> INT .)
    OP_GE           reduce using rule 12 (PrimitiveType -> INT .)
    INSTANCEOF      reduce using rule 12 (PrimitiveType -> INT .)
    OP_EQ           reduce using rule 12 (PrimitiveType -> INT .)
    OP_NE           reduce using rule 12 (PrimitiveType -> INT .)
    &               reduce using rule 12 (PrimitiveType -> INT .)
    ^               reduce using rule 12 (PrimitiveType -> INT .)
    |               reduce using rule 12 (PrimitiveType -> INT .)
    OP_LAND         reduce using rule 12 (PrimitiveType -> INT .)
    ?               reduce using rule 12 (PrimitiveType -> INT .)
    OP_LOR          reduce using rule 12 (PrimitiveType -> INT .)
    ;               reduce using rule 12 (PrimitiveType -> INT .)
    :               reduce using rule 12 (PrimitiveType -> INT .)
    ,               reduce using rule 12 (PrimitiveType -> INT .)
    }               reduce using rule 12 (PrimitiveType -> INT .)
    ]               reduce using rule 12 (PrimitiveType -> INT .)


state 63

    (15) PrimitiveType -> DOUBLE .

    .               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    [               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> DOUBLE .)
    )               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    (               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    <               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    >               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_LE           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_GE           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    INSTANCEOF      reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_EQ           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_NE           reduce using rule 15 (PrimitiveType -> DOUBLE .)
    &               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ^               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    |               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_LAND         reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ?               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    OP_LOR          reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ;               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    :               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ,               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    }               reduce using rule 15 (PrimitiveType -> DOUBLE .)
    ]               reduce using rule 15 (PrimitiveType -> DOUBLE .)


state 64

    (14) PrimitiveType -> FLOAT .

    .               reduce using rule 14 (PrimitiveType -> FLOAT .)
    [               reduce using rule 14 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> FLOAT .)
    )               reduce using rule 14 (PrimitiveType -> FLOAT .)
    (               reduce using rule 14 (PrimitiveType -> FLOAT .)
    <               reduce using rule 14 (PrimitiveType -> FLOAT .)
    >               reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_LE           reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_GE           reduce using rule 14 (PrimitiveType -> FLOAT .)
    INSTANCEOF      reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_EQ           reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_NE           reduce using rule 14 (PrimitiveType -> FLOAT .)
    &               reduce using rule 14 (PrimitiveType -> FLOAT .)
    ^               reduce using rule 14 (PrimitiveType -> FLOAT .)
    |               reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_LAND         reduce using rule 14 (PrimitiveType -> FLOAT .)
    ?               reduce using rule 14 (PrimitiveType -> FLOAT .)
    OP_LOR          reduce using rule 14 (PrimitiveType -> FLOAT .)
    ;               reduce using rule 14 (PrimitiveType -> FLOAT .)
    :               reduce using rule 14 (PrimitiveType -> FLOAT .)
    ,               reduce using rule 14 (PrimitiveType -> FLOAT .)
    }               reduce using rule 14 (PrimitiveType -> FLOAT .)
    ]               reduce using rule 14 (PrimitiveType -> FLOAT .)


state 65

    (8) PrimitiveType -> BOOLEAN .

    .               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    [               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    )               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    (               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    <               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    >               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_LE           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_GE           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    INSTANCEOF      reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_EQ           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_NE           reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    &               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ^               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    |               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_LAND         reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ?               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    OP_LOR          reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ;               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    :               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ,               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    }               reduce using rule 8 (PrimitiveType -> BOOLEAN .)
    ]               reduce using rule 8 (PrimitiveType -> BOOLEAN .)


state 66

    (10) PrimitiveType -> BYTE .

    .               reduce using rule 10 (PrimitiveType -> BYTE .)
    [               reduce using rule 10 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> BYTE .)
    )               reduce using rule 10 (PrimitiveType -> BYTE .)
    (               reduce using rule 10 (PrimitiveType -> BYTE .)
    <               reduce using rule 10 (PrimitiveType -> BYTE .)
    >               reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_LE           reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_GE           reduce using rule 10 (PrimitiveType -> BYTE .)
    INSTANCEOF      reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_EQ           reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_NE           reduce using rule 10 (PrimitiveType -> BYTE .)
    &               reduce using rule 10 (PrimitiveType -> BYTE .)
    ^               reduce using rule 10 (PrimitiveType -> BYTE .)
    |               reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_LAND         reduce using rule 10 (PrimitiveType -> BYTE .)
    ?               reduce using rule 10 (PrimitiveType -> BYTE .)
    OP_LOR          reduce using rule 10 (PrimitiveType -> BYTE .)
    ;               reduce using rule 10 (PrimitiveType -> BYTE .)
    :               reduce using rule 10 (PrimitiveType -> BYTE .)
    ,               reduce using rule 10 (PrimitiveType -> BYTE .)
    }               reduce using rule 10 (PrimitiveType -> BYTE .)
    ]               reduce using rule 10 (PrimitiveType -> BYTE .)


state 67

    (48) FieldDeclarationOptSemi -> FieldDeclaration .
    (49) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    }               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    {               reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INTERFACE       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration .)
    ;               shift and go to state 20

    SemiColons                     shift and go to state 88

state 68

    (87) Block -> { . LocalVariableDeclarationsAndStatements }
    (88) Block -> { . }
    (89) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (90) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (91) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (92) LocalVariableDeclarationOrStatement -> . Statement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ;
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (244) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 165
    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 91
    AndExpression                  shift and go to state 92
    MultiplicativeExpression       shift and go to state 106
    TypeSpecifier                  shift and go to state 133
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    QualifiedName                  shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 105
    GuardingStatement              shift and go to state 144
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    TypeName                       shift and go to state 53
    ConditionalOrExpression        shift and go to state 137
    LocalVariableDeclarationStatement shift and go to state 156
    ExpressionStatement            shift and go to state 89
    SelectionStatement             shift and go to state 110
    LocalVariableDeclarationsAndStatements shift and go to state 158
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 90
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    LocalVariableDeclarationOrStatement shift and go to state 123
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 69

    (35) TypeDeclaration -> ClassHeader { } .

    ;               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    CLASS           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    INTERFACE       reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    PUBLIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    PRIVATE         reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    STATIC          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    $end            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    }               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    IDENTIFIER      reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    {               reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    BOOLEAN         reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    CHAR            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    BYTE            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    SHORT           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    INT             reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    LONG            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    FLOAT           reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    DOUBLE          reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)
    VOID            reduce using rule 35 (TypeDeclaration -> ClassHeader { } .)


state 70

    (31) ImportStatement -> IMPORT QualifiedName . * . SemiColons
    (17) SemiColons -> . ;
    (18) SemiColons -> . SemiColons ;

    ;               shift and go to state 20

    SemiColons                     shift and go to state 168

state 71

    (33) QualifiedName -> QualifiedName . IDENTIFIER .

    .               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    [               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    *               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    /               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    %               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    +               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    -               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_SOME        reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    <               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    >               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    INSTANCEOF      reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ?               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ;               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    )               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    :               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ,               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    }               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    ]               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    (               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    =               reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    OPT_EQ          reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> QualifiedName . IDENTIFIER .)


state 72

    (50) FieldDeclaration -> FieldVariableDeclaration ; .

    ;               reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    }               reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    STATIC          reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    IDENTIFIER      reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    {               reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PUBLIC          reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    PRIVATE         reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CLASS           reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INTERFACE       reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BOOLEAN         reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    CHAR            reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    BYTE            reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    SHORT           reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    INT             reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    LONG            reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    FLOAT           reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    DOUBLE          reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)
    VOID            reduce using rule 50 (FieldDeclaration -> FieldVariableDeclaration ; .)


state 73

    (83) StaticInitializer -> STATIC Block .

    ;               reduce using rule 83 (StaticInitializer -> STATIC Block .)
    }               reduce using rule 83 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 83 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 83 (StaticInitializer -> STATIC Block .)
    {               reduce using rule 83 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 83 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 83 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 83 (StaticInitializer -> STATIC Block .)
    INTERFACE       reduce using rule 83 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 83 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 83 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 83 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 83 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 83 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 83 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 83 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 83 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 83 (StaticInitializer -> STATIC Block .)


state 74

    (57) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (59) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 57 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 169


state 75

    (70) MethodDeclarator -> DeclaratorName . ( ParameterList )
    (71) MethodDeclarator -> DeclaratorName . ( )
    (60) VariableDeclarator -> DeclaratorName .
    (61) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (76) DeclaratorName -> DeclaratorName . OP_DIM
    (190) OP_DIM -> . [ ]

    (               shift and go to state 170
    ,               reduce using rule 60 (VariableDeclarator -> DeclaratorName .)
    ;               reduce using rule 60 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 171
    [               shift and go to state 79

    OP_DIM                         shift and go to state 172

state 76

    (69) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (77) MethodBody -> . Block
    (78) MethodBody -> . ;
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    ;               shift and go to state 174
    {               shift and go to state 68

    Block                          shift and go to state 175
    MethodBody                     shift and go to state 173

state 77

    (75) DeclaratorName -> IDENTIFIER .

    (               reduce using rule 75 (DeclaratorName -> IDENTIFIER .)
    =               reduce using rule 75 (DeclaratorName -> IDENTIFIER .)
    [               reduce using rule 75 (DeclaratorName -> IDENTIFIER .)
    ,               reduce using rule 75 (DeclaratorName -> IDENTIFIER .)
    ;               reduce using rule 75 (DeclaratorName -> IDENTIFIER .)
    )               reduce using rule 75 (DeclaratorName -> IDENTIFIER .)


state 78

    (58) VariableDeclarators -> VariableDeclarator .

    ,               reduce using rule 58 (VariableDeclarators -> VariableDeclarator .)
    ;               reduce using rule 58 (VariableDeclarators -> VariableDeclarator .)


state 79

    (190) OP_DIM -> [ . ]

    ]               shift and go to state 176


state 80

    (188) Dims -> OP_DIM .

    [               reduce using rule 188 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 188 (Dims -> OP_DIM .)
    <               reduce using rule 188 (Dims -> OP_DIM .)
    >               reduce using rule 188 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 188 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 188 (Dims -> OP_DIM .)
    INSTANCEOF      reduce using rule 188 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 188 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 188 (Dims -> OP_DIM .)
    &               reduce using rule 188 (Dims -> OP_DIM .)
    ^               reduce using rule 188 (Dims -> OP_DIM .)
    |               reduce using rule 188 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 188 (Dims -> OP_DIM .)
    ?               reduce using rule 188 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 188 (Dims -> OP_DIM .)
    ;               reduce using rule 188 (Dims -> OP_DIM .)
    )               reduce using rule 188 (Dims -> OP_DIM .)
    :               reduce using rule 188 (Dims -> OP_DIM .)
    ,               reduce using rule 188 (Dims -> OP_DIM .)
    }               reduce using rule 188 (Dims -> OP_DIM .)
    ]               reduce using rule 188 (Dims -> OP_DIM .)
    {               reduce using rule 188 (Dims -> OP_DIM .)
    .               reduce using rule 188 (Dims -> OP_DIM .)
    OPT_INC_DEC     reduce using rule 188 (Dims -> OP_DIM .)
    =               reduce using rule 188 (Dims -> OP_DIM .)
    OPT_EQ          reduce using rule 188 (Dims -> OP_DIM .)
    *               reduce using rule 188 (Dims -> OP_DIM .)
    /               reduce using rule 188 (Dims -> OP_DIM .)
    %               reduce using rule 188 (Dims -> OP_DIM .)
    +               reduce using rule 188 (Dims -> OP_DIM .)
    -               reduce using rule 188 (Dims -> OP_DIM .)
    OPT_SOME        reduce using rule 188 (Dims -> OP_DIM .)


state 81

    (3) TypeSpecifier -> TypeName Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    )               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    <               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    >               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_LE           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_GE           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    INSTANCEOF      reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_EQ           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_NE           reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    &               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ^               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    |               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_LAND         reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ?               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    OP_LOR          reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ;               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    :               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ,               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    }               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    ]               reduce using rule 3 (TypeSpecifier -> TypeName Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 177

state 82

    (81) ConstructorDeclarator -> IDENTIFIER ( . ParameterList )
    (82) ConstructorDeclarator -> IDENTIFIER ( . )
    (72) ParameterList -> . Parameter
    (73) ParameterList -> . ParameterList , Parameter
    (74) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 180
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 181
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 178
    TypeSpecifier                  shift and go to state 179

state 83

    (56) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (68) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (58) VariableDeclarators -> . VariableDeclarator
    (59) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (70) MethodDeclarator -> . DeclaratorName ( ParameterList )
    (71) MethodDeclarator -> . DeclaratorName ( )
    (60) VariableDeclarator -> . DeclaratorName
    (61) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (75) DeclaratorName -> . IDENTIFIER
    (76) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    VariableDeclarators            shift and go to state 182
    DeclaratorName                 shift and go to state 75
    MethodDeclarator               shift and go to state 183
    VariableDeclarator             shift and go to state 78

state 84

    (79) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Block
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 184

state 85

    (47) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    }               reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    {               reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INTERFACE       reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 47 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 86

    (34) TypeDeclaration -> ClassHeader { FieldDeclarations } .

    ;               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CLASS           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INTERFACE       reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PUBLIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    PRIVATE         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    STATIC          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    $end            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    }               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    IDENTIFIER      reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    {               reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BOOLEAN         reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    CHAR            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    BYTE            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    SHORT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    INT             reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    LONG            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    FLOAT           reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    DOUBLE          reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)
    VOID            reduce using rule 34 (TypeDeclaration -> ClassHeader { FieldDeclarations } .)


state 87

    (80) ConstructorDeclaration -> ConstructorDeclarator Block .

    ;               reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    }               reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    STATIC          reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    {               reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CLASS           reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CHAR            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BYTE            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SHORT           reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INT             reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LONG            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FLOAT           reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOID            reduce using rule 80 (ConstructorDeclaration -> ConstructorDeclarator Block .)


state 88

    (49) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (18) SemiColons -> SemiColons . ;

    }               reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    {               reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INTERFACE       reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 49 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    ;               shift and go to state 34


state 89

    (96) Statement -> ExpressionStatement . ;

    ;               shift and go to state 185


state 90

    (4) TypeName -> PrimitiveType .
    (161) FieldAccess -> PrimitiveType . . CLASS

    [               reduce using rule 4 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 4 (TypeName -> PrimitiveType .)
    .               shift and go to state 186


state 91

    (92) LocalVariableDeclarationOrStatement -> Statement .

    }               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    ;               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    SWITCH          reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CONTINUE        reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    THROW           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    SYNCHRONIZED    reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    TRY             reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    {               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    OPT_INC_DEC     reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    +               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    -               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    !               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    (               reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT_LITERAL   reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    INT_LITERAL     reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR_LITERAL    reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    STRING_LITERAL  reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOL            reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 92 (LocalVariableDeclarationOrStatement -> Statement .)


state 92

    (230) ExclusiveOrExpression -> AndExpression .
    (229) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    ?               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    )               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    ,               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    ]               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    }               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    ;               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    :               reduce using rule 230 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 187


state 93

    (145) ComplexPrimary -> ( . Expression )
    (204) CastExpression -> ( . PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> ( . ClassTypeExpression ) CastExpression
    (206) CastExpression -> ( . Expression ) LogicalUnaryExpression
    (244) Expression -> . AssignmentExpression
    (207) PrimitiveTypeExpression -> . PrimitiveType
    (208) PrimitiveTypeExpression -> . PrimitiveType Dims
    (209) ClassTypeExpression -> . QualifiedName Dims
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 188
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 190
    AdditiveExpression             shift and go to state 140
    PrimitiveTypeExpression        shift and go to state 191
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    ClassTypeExpression            shift and go to state 189
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 94

    (103) LabelStatement -> IDENTIFIER . :
    (32) QualifiedName -> IDENTIFIER .

    :               shift and go to state 193
    .               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    [               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    =               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_EQ          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    *               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    /               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    %               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    +               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    -               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OPT_SOME        reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    <               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    >               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    INSTANCEOF      reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    ;               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    (               reduce using rule 32 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 32 (QualifiedName -> IDENTIFIER .)


state 95

    (167) SpecialName -> THIS .

    .               reduce using rule 167 (SpecialName -> THIS .)
    OPT_INC_DEC     reduce using rule 167 (SpecialName -> THIS .)
    *               reduce using rule 167 (SpecialName -> THIS .)
    /               reduce using rule 167 (SpecialName -> THIS .)
    %               reduce using rule 167 (SpecialName -> THIS .)
    +               reduce using rule 167 (SpecialName -> THIS .)
    -               reduce using rule 167 (SpecialName -> THIS .)
    OPT_SOME        reduce using rule 167 (SpecialName -> THIS .)
    <               reduce using rule 167 (SpecialName -> THIS .)
    >               reduce using rule 167 (SpecialName -> THIS .)
    OP_LE           reduce using rule 167 (SpecialName -> THIS .)
    OP_GE           reduce using rule 167 (SpecialName -> THIS .)
    INSTANCEOF      reduce using rule 167 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 167 (SpecialName -> THIS .)
    OP_NE           reduce using rule 167 (SpecialName -> THIS .)
    &               reduce using rule 167 (SpecialName -> THIS .)
    ^               reduce using rule 167 (SpecialName -> THIS .)
    |               reduce using rule 167 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 167 (SpecialName -> THIS .)
    ?               reduce using rule 167 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 167 (SpecialName -> THIS .)
    ;               reduce using rule 167 (SpecialName -> THIS .)
    )               reduce using rule 167 (SpecialName -> THIS .)
    :               reduce using rule 167 (SpecialName -> THIS .)
    ,               reduce using rule 167 (SpecialName -> THIS .)
    }               reduce using rule 167 (SpecialName -> THIS .)
    ]               reduce using rule 167 (SpecialName -> THIS .)
    (               reduce using rule 167 (SpecialName -> THIS .)
    =               reduce using rule 167 (SpecialName -> THIS .)
    OPT_EQ          reduce using rule 167 (SpecialName -> THIS .)


state 96

    (149) ComplexPrimaryNoParenthesis -> CHAR_LITERAL .

    [               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    .               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OPT_INC_DEC     reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    =               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OPT_EQ          reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    *               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    /               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    %               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    +               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    -               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OPT_SOME        reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    <               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    >               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_LE           reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_GE           reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    INSTANCEOF      reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_EQ           reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_NE           reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    &               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ^               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    |               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_LAND         reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ?               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    OP_LOR          reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    )               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    (               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ;               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    :               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ,               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    }               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)
    ]               reduce using rule 149 (ComplexPrimaryNoParenthesis -> CHAR_LITERAL .)


state 97

    (236) ConditionalOrExpression -> ConditionalAndExpression .
    (235) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LOR          reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    )               reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    ;               reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    ,               reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    ]               reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    }               reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    :               reduce using rule 236 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 194


state 98

    (94) Statement -> EmptyStatement .

    WHILE           reduce using rule 94 (Statement -> EmptyStatement .)
    }               reduce using rule 94 (Statement -> EmptyStatement .)
    ;               reduce using rule 94 (Statement -> EmptyStatement .)
    IDENTIFIER      reduce using rule 94 (Statement -> EmptyStatement .)
    CASE            reduce using rule 94 (Statement -> EmptyStatement .)
    DEFAULT         reduce using rule 94 (Statement -> EmptyStatement .)
    IF              reduce using rule 94 (Statement -> EmptyStatement .)
    SWITCH          reduce using rule 94 (Statement -> EmptyStatement .)
    DO              reduce using rule 94 (Statement -> EmptyStatement .)
    FOR             reduce using rule 94 (Statement -> EmptyStatement .)
    BREAK           reduce using rule 94 (Statement -> EmptyStatement .)
    CONTINUE        reduce using rule 94 (Statement -> EmptyStatement .)
    RETURN          reduce using rule 94 (Statement -> EmptyStatement .)
    THROW           reduce using rule 94 (Statement -> EmptyStatement .)
    SYNCHRONIZED    reduce using rule 94 (Statement -> EmptyStatement .)
    TRY             reduce using rule 94 (Statement -> EmptyStatement .)
    {               reduce using rule 94 (Statement -> EmptyStatement .)
    BOOLEAN         reduce using rule 94 (Statement -> EmptyStatement .)
    CHAR            reduce using rule 94 (Statement -> EmptyStatement .)
    BYTE            reduce using rule 94 (Statement -> EmptyStatement .)
    SHORT           reduce using rule 94 (Statement -> EmptyStatement .)
    INT             reduce using rule 94 (Statement -> EmptyStatement .)
    LONG            reduce using rule 94 (Statement -> EmptyStatement .)
    FLOAT           reduce using rule 94 (Statement -> EmptyStatement .)
    DOUBLE          reduce using rule 94 (Statement -> EmptyStatement .)
    VOID            reduce using rule 94 (Statement -> EmptyStatement .)
    OPT_INC_DEC     reduce using rule 94 (Statement -> EmptyStatement .)
    +               reduce using rule 94 (Statement -> EmptyStatement .)
    -               reduce using rule 94 (Statement -> EmptyStatement .)
    ~               reduce using rule 94 (Statement -> EmptyStatement .)
    !               reduce using rule 94 (Statement -> EmptyStatement .)
    THIS            reduce using rule 94 (Statement -> EmptyStatement .)
    SUPER           reduce using rule 94 (Statement -> EmptyStatement .)
    NULL            reduce using rule 94 (Statement -> EmptyStatement .)
    (               reduce using rule 94 (Statement -> EmptyStatement .)
    FLOAT_LITERAL   reduce using rule 94 (Statement -> EmptyStatement .)
    INT_LITERAL     reduce using rule 94 (Statement -> EmptyStatement .)
    CHAR_LITERAL    reduce using rule 94 (Statement -> EmptyStatement .)
    STRING_LITERAL  reduce using rule 94 (Statement -> EmptyStatement .)
    BOOL            reduce using rule 94 (Statement -> EmptyStatement .)
    NEW             reduce using rule 94 (Statement -> EmptyStatement .)
    ELSE            reduce using rule 94 (Statement -> EmptyStatement .)


state 99

    (95) Statement -> LabelStatement .

    WHILE           reduce using rule 95 (Statement -> LabelStatement .)
    }               reduce using rule 95 (Statement -> LabelStatement .)
    ;               reduce using rule 95 (Statement -> LabelStatement .)
    IDENTIFIER      reduce using rule 95 (Statement -> LabelStatement .)
    CASE            reduce using rule 95 (Statement -> LabelStatement .)
    DEFAULT         reduce using rule 95 (Statement -> LabelStatement .)
    IF              reduce using rule 95 (Statement -> LabelStatement .)
    SWITCH          reduce using rule 95 (Statement -> LabelStatement .)
    DO              reduce using rule 95 (Statement -> LabelStatement .)
    FOR             reduce using rule 95 (Statement -> LabelStatement .)
    BREAK           reduce using rule 95 (Statement -> LabelStatement .)
    CONTINUE        reduce using rule 95 (Statement -> LabelStatement .)
    RETURN          reduce using rule 95 (Statement -> LabelStatement .)
    THROW           reduce using rule 95 (Statement -> LabelStatement .)
    SYNCHRONIZED    reduce using rule 95 (Statement -> LabelStatement .)
    TRY             reduce using rule 95 (Statement -> LabelStatement .)
    {               reduce using rule 95 (Statement -> LabelStatement .)
    BOOLEAN         reduce using rule 95 (Statement -> LabelStatement .)
    CHAR            reduce using rule 95 (Statement -> LabelStatement .)
    BYTE            reduce using rule 95 (Statement -> LabelStatement .)
    SHORT           reduce using rule 95 (Statement -> LabelStatement .)
    INT             reduce using rule 95 (Statement -> LabelStatement .)
    LONG            reduce using rule 95 (Statement -> LabelStatement .)
    FLOAT           reduce using rule 95 (Statement -> LabelStatement .)
    DOUBLE          reduce using rule 95 (Statement -> LabelStatement .)
    VOID            reduce using rule 95 (Statement -> LabelStatement .)
    OPT_INC_DEC     reduce using rule 95 (Statement -> LabelStatement .)
    +               reduce using rule 95 (Statement -> LabelStatement .)
    -               reduce using rule 95 (Statement -> LabelStatement .)
    ~               reduce using rule 95 (Statement -> LabelStatement .)
    !               reduce using rule 95 (Statement -> LabelStatement .)
    THIS            reduce using rule 95 (Statement -> LabelStatement .)
    SUPER           reduce using rule 95 (Statement -> LabelStatement .)
    NULL            reduce using rule 95 (Statement -> LabelStatement .)
    (               reduce using rule 95 (Statement -> LabelStatement .)
    FLOAT_LITERAL   reduce using rule 95 (Statement -> LabelStatement .)
    INT_LITERAL     reduce using rule 95 (Statement -> LabelStatement .)
    CHAR_LITERAL    reduce using rule 95 (Statement -> LabelStatement .)
    STRING_LITERAL  reduce using rule 95 (Statement -> LabelStatement .)
    BOOL            reduce using rule 95 (Statement -> LabelStatement .)
    NEW             reduce using rule 95 (Statement -> LabelStatement .)
    ELSE            reduce using rule 95 (Statement -> LabelStatement .)


state 100

    (127) JumpStatement -> RETURN . Expression ;
    (128) JumpStatement -> RETURN . ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 196
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 197
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 101

    (130) GuardingStatement -> SYNCHRONIZED . ( Expression ) Statement

    (               shift and go to state 199


state 102

    (192) PostfixExpression -> RealPostfixExpression .
    (158) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    *               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    /               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    %               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    +               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    -               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OPT_SOME        reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    <               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    >               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    INSTANCEOF      reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ?               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ;               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    )               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    :               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ,               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    }               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    ]               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    =               reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    OPT_EQ          reduce using rule 192 (PostfixExpression -> RealPostfixExpression .)
    .               shift and go to state 200


state 103

    (195) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 201
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    ClassAllocationExpression      shift and go to state 127
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 104

    (228) AndExpression -> EqualityExpression .
    (226) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (227) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 228 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 228 (AndExpression -> EqualityExpression .)
    |               reduce using rule 228 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 228 (AndExpression -> EqualityExpression .)
    ?               reduce using rule 228 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 228 (AndExpression -> EqualityExpression .)
    ,               reduce using rule 228 (AndExpression -> EqualityExpression .)
    ;               reduce using rule 228 (AndExpression -> EqualityExpression .)
    }               reduce using rule 228 (AndExpression -> EqualityExpression .)
    )               reduce using rule 228 (AndExpression -> EqualityExpression .)
    :               reduce using rule 228 (AndExpression -> EqualityExpression .)
    ]               reduce using rule 228 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 205
    OP_NE           shift and go to state 204


state 105

    (146) ComplexPrimary -> ComplexPrimaryNoParenthesis .
    (164) MethodAccess -> ComplexPrimaryNoParenthesis .

    [               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    .               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_INC_DEC     reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    =               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_EQ          reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    *               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    /               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    %               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    +               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    -               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OPT_SOME        reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    <               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    >               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    INSTANCEOF      reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ?               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    )               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ;               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    :               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ,               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    }               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ]               reduce using rule 146 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    (               reduce using rule 164 (MethodAccess -> ComplexPrimaryNoParenthesis .)


state 106

    (214) AdditiveExpression -> MultiplicativeExpression .
    (211) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (212) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (213) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    -               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    OPT_SOME        reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    <               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    >               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    ?               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    ;               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    ,               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    )               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    ]               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    :               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    }               reduce using rule 214 (AdditiveExpression -> MultiplicativeExpression .)
    *               shift and go to state 206
    /               shift and go to state 208
    %               shift and go to state 207


state 107

    (201) ArithmeticUnaryOperator -> + .

    (               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    OPT_INC_DEC     reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    +               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    -               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    ~               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    !               reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    IDENTIFIER      reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    THIS            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    SUPER           reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    NULL            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    FLOAT_LITERAL   reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    INT_LITERAL     reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    CHAR_LITERAL    reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    STRING_LITERAL  reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    BOOL            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    NEW             reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    BOOLEAN         reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    CHAR            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    BYTE            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    SHORT           reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    INT             reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    LONG            reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    FLOAT           reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    DOUBLE          reduce using rule 201 (ArithmeticUnaryOperator -> + .)
    VOID            reduce using rule 201 (ArithmeticUnaryOperator -> + .)


state 108

    (154) ComplexPrimaryNoParenthesis -> MethodCall .

    [               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    .               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_INC_DEC     reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    =               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_EQ          reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    *               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    /               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    %               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    +               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    -               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OPT_SOME        reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    <               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    >               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    INSTANCEOF      reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ?               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    )               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    (               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ;               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    :               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ,               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    }               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ]               reduce using rule 154 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 109

    (102) EmptyStatement -> ; .

    }               reduce using rule 102 (EmptyStatement -> ; .)
    ;               reduce using rule 102 (EmptyStatement -> ; .)
    IDENTIFIER      reduce using rule 102 (EmptyStatement -> ; .)
    CASE            reduce using rule 102 (EmptyStatement -> ; .)
    DEFAULT         reduce using rule 102 (EmptyStatement -> ; .)
    IF              reduce using rule 102 (EmptyStatement -> ; .)
    SWITCH          reduce using rule 102 (EmptyStatement -> ; .)
    WHILE           reduce using rule 102 (EmptyStatement -> ; .)
    DO              reduce using rule 102 (EmptyStatement -> ; .)
    FOR             reduce using rule 102 (EmptyStatement -> ; .)
    BREAK           reduce using rule 102 (EmptyStatement -> ; .)
    CONTINUE        reduce using rule 102 (EmptyStatement -> ; .)
    RETURN          reduce using rule 102 (EmptyStatement -> ; .)
    THROW           reduce using rule 102 (EmptyStatement -> ; .)
    SYNCHRONIZED    reduce using rule 102 (EmptyStatement -> ; .)
    TRY             reduce using rule 102 (EmptyStatement -> ; .)
    {               reduce using rule 102 (EmptyStatement -> ; .)
    BOOLEAN         reduce using rule 102 (EmptyStatement -> ; .)
    CHAR            reduce using rule 102 (EmptyStatement -> ; .)
    BYTE            reduce using rule 102 (EmptyStatement -> ; .)
    SHORT           reduce using rule 102 (EmptyStatement -> ; .)
    INT             reduce using rule 102 (EmptyStatement -> ; .)
    LONG            reduce using rule 102 (EmptyStatement -> ; .)
    FLOAT           reduce using rule 102 (EmptyStatement -> ; .)
    DOUBLE          reduce using rule 102 (EmptyStatement -> ; .)
    VOID            reduce using rule 102 (EmptyStatement -> ; .)
    OPT_INC_DEC     reduce using rule 102 (EmptyStatement -> ; .)
    +               reduce using rule 102 (EmptyStatement -> ; .)
    -               reduce using rule 102 (EmptyStatement -> ; .)
    ~               reduce using rule 102 (EmptyStatement -> ; .)
    !               reduce using rule 102 (EmptyStatement -> ; .)
    THIS            reduce using rule 102 (EmptyStatement -> ; .)
    SUPER           reduce using rule 102 (EmptyStatement -> ; .)
    NULL            reduce using rule 102 (EmptyStatement -> ; .)
    (               reduce using rule 102 (EmptyStatement -> ; .)
    FLOAT_LITERAL   reduce using rule 102 (EmptyStatement -> ; .)
    INT_LITERAL     reduce using rule 102 (EmptyStatement -> ; .)
    CHAR_LITERAL    reduce using rule 102 (EmptyStatement -> ; .)
    STRING_LITERAL  reduce using rule 102 (EmptyStatement -> ; .)
    BOOL            reduce using rule 102 (EmptyStatement -> ; .)
    NEW             reduce using rule 102 (EmptyStatement -> ; .)
    ELSE            reduce using rule 102 (EmptyStatement -> ; .)


state 110

    (97) Statement -> SelectionStatement .

    WHILE           reduce using rule 97 (Statement -> SelectionStatement .)
    }               reduce using rule 97 (Statement -> SelectionStatement .)
    ;               reduce using rule 97 (Statement -> SelectionStatement .)
    IDENTIFIER      reduce using rule 97 (Statement -> SelectionStatement .)
    CASE            reduce using rule 97 (Statement -> SelectionStatement .)
    DEFAULT         reduce using rule 97 (Statement -> SelectionStatement .)
    IF              reduce using rule 97 (Statement -> SelectionStatement .)
    SWITCH          reduce using rule 97 (Statement -> SelectionStatement .)
    DO              reduce using rule 97 (Statement -> SelectionStatement .)
    FOR             reduce using rule 97 (Statement -> SelectionStatement .)
    BREAK           reduce using rule 97 (Statement -> SelectionStatement .)
    CONTINUE        reduce using rule 97 (Statement -> SelectionStatement .)
    RETURN          reduce using rule 97 (Statement -> SelectionStatement .)
    THROW           reduce using rule 97 (Statement -> SelectionStatement .)
    SYNCHRONIZED    reduce using rule 97 (Statement -> SelectionStatement .)
    TRY             reduce using rule 97 (Statement -> SelectionStatement .)
    {               reduce using rule 97 (Statement -> SelectionStatement .)
    BOOLEAN         reduce using rule 97 (Statement -> SelectionStatement .)
    CHAR            reduce using rule 97 (Statement -> SelectionStatement .)
    BYTE            reduce using rule 97 (Statement -> SelectionStatement .)
    SHORT           reduce using rule 97 (Statement -> SelectionStatement .)
    INT             reduce using rule 97 (Statement -> SelectionStatement .)
    LONG            reduce using rule 97 (Statement -> SelectionStatement .)
    FLOAT           reduce using rule 97 (Statement -> SelectionStatement .)
    DOUBLE          reduce using rule 97 (Statement -> SelectionStatement .)
    VOID            reduce using rule 97 (Statement -> SelectionStatement .)
    OPT_INC_DEC     reduce using rule 97 (Statement -> SelectionStatement .)
    +               reduce using rule 97 (Statement -> SelectionStatement .)
    -               reduce using rule 97 (Statement -> SelectionStatement .)
    ~               reduce using rule 97 (Statement -> SelectionStatement .)
    !               reduce using rule 97 (Statement -> SelectionStatement .)
    THIS            reduce using rule 97 (Statement -> SelectionStatement .)
    SUPER           reduce using rule 97 (Statement -> SelectionStatement .)
    NULL            reduce using rule 97 (Statement -> SelectionStatement .)
    (               reduce using rule 97 (Statement -> SelectionStatement .)
    FLOAT_LITERAL   reduce using rule 97 (Statement -> SelectionStatement .)
    INT_LITERAL     reduce using rule 97 (Statement -> SelectionStatement .)
    CHAR_LITERAL    reduce using rule 97 (Statement -> SelectionStatement .)
    STRING_LITERAL  reduce using rule 97 (Statement -> SelectionStatement .)
    BOOL            reduce using rule 97 (Statement -> SelectionStatement .)
    NEW             reduce using rule 97 (Statement -> SelectionStatement .)
    ELSE            reduce using rule 97 (Statement -> SelectionStatement .)


state 111

    (244) Expression -> AssignmentExpression .

    ;               reduce using rule 244 (Expression -> AssignmentExpression .)
    )               reduce using rule 244 (Expression -> AssignmentExpression .)
    ,               reduce using rule 244 (Expression -> AssignmentExpression .)
    :               reduce using rule 244 (Expression -> AssignmentExpression .)
    }               reduce using rule 244 (Expression -> AssignmentExpression .)
    ]               reduce using rule 244 (Expression -> AssignmentExpression .)


state 112

    (113) IterationStatement -> FOR . ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> FOR . ( ForInit ForExpr ) Statement

    (               shift and go to state 209


state 113

    (131) GuardingStatement -> TRY . Block Finally
    (132) GuardingStatement -> TRY . Block Catches
    (133) GuardingStatement -> TRY . Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 210

state 114

    (194) UnaryExpression -> OPT_INC_DEC . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 211
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MethodCall                     shift and go to state 108
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    ArrayAllocationExpression      shift and go to state 117
    UnaryExpression                shift and go to state 212
    PrimaryExpression              shift and go to state 134
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 115

    (152) ComplexPrimaryNoParenthesis -> ArrayAccess .

    [               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    .               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_INC_DEC     reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    =               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_EQ          reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    *               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    /               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    %               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    +               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    -               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OPT_SOME        reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    <               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    >               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    INSTANCEOF      reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ?               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    )               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    (               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ;               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    :               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ,               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    }               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ]               reduce using rule 152 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 116

    (101) Statement -> Block .

    WHILE           reduce using rule 101 (Statement -> Block .)
    }               reduce using rule 101 (Statement -> Block .)
    ;               reduce using rule 101 (Statement -> Block .)
    IDENTIFIER      reduce using rule 101 (Statement -> Block .)
    CASE            reduce using rule 101 (Statement -> Block .)
    DEFAULT         reduce using rule 101 (Statement -> Block .)
    IF              reduce using rule 101 (Statement -> Block .)
    SWITCH          reduce using rule 101 (Statement -> Block .)
    DO              reduce using rule 101 (Statement -> Block .)
    FOR             reduce using rule 101 (Statement -> Block .)
    BREAK           reduce using rule 101 (Statement -> Block .)
    CONTINUE        reduce using rule 101 (Statement -> Block .)
    RETURN          reduce using rule 101 (Statement -> Block .)
    THROW           reduce using rule 101 (Statement -> Block .)
    SYNCHRONIZED    reduce using rule 101 (Statement -> Block .)
    TRY             reduce using rule 101 (Statement -> Block .)
    {               reduce using rule 101 (Statement -> Block .)
    BOOLEAN         reduce using rule 101 (Statement -> Block .)
    CHAR            reduce using rule 101 (Statement -> Block .)
    BYTE            reduce using rule 101 (Statement -> Block .)
    SHORT           reduce using rule 101 (Statement -> Block .)
    INT             reduce using rule 101 (Statement -> Block .)
    LONG            reduce using rule 101 (Statement -> Block .)
    FLOAT           reduce using rule 101 (Statement -> Block .)
    DOUBLE          reduce using rule 101 (Statement -> Block .)
    VOID            reduce using rule 101 (Statement -> Block .)
    OPT_INC_DEC     reduce using rule 101 (Statement -> Block .)
    +               reduce using rule 101 (Statement -> Block .)
    -               reduce using rule 101 (Statement -> Block .)
    ~               reduce using rule 101 (Statement -> Block .)
    !               reduce using rule 101 (Statement -> Block .)
    THIS            reduce using rule 101 (Statement -> Block .)
    SUPER           reduce using rule 101 (Statement -> Block .)
    NULL            reduce using rule 101 (Statement -> Block .)
    (               reduce using rule 101 (Statement -> Block .)
    FLOAT_LITERAL   reduce using rule 101 (Statement -> Block .)
    INT_LITERAL     reduce using rule 101 (Statement -> Block .)
    CHAR_LITERAL    reduce using rule 101 (Statement -> Block .)
    STRING_LITERAL  reduce using rule 101 (Statement -> Block .)
    BOOL            reduce using rule 101 (Statement -> Block .)
    NEW             reduce using rule 101 (Statement -> Block .)
    ELSE            reduce using rule 101 (Statement -> Block .)


state 117

    (174) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (176) PlainNewAllocationExpression -> ArrayAllocationExpression . { }
    (178) PlainNewAllocationExpression -> ArrayAllocationExpression . { ArrayInitializers }

    .               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_INC_DEC     reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    =               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_EQ          reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    *               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    /               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    %               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    +               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    -               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OPT_SOME        reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    <               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    >               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    INSTANCEOF      reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ?               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    }               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ,               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ;               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    )               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ]               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    :               reduce using rule 174 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    {               shift and go to state 213


state 118

    (162) MethodCall -> MethodAccess . ( ArgumentList )
    (163) MethodCall -> MethodAccess . ( )

    (               shift and go to state 214


state 119

    (232) InclusiveOrExpression -> ExclusiveOrExpression .
    (231) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ?               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ;               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    )               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ]               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    :               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    }               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ,               reduce using rule 232 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 215


state 120

    (225) EqualityExpression -> RelationalExpression .
    (220) RelationalExpression -> RelationalExpression . < ShiftExpression
    (221) RelationalExpression -> RelationalExpression . > ShiftExpression
    (222) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (223) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (224) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    ?               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    ]               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    :               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    }               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    ,               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    ;               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    )               reduce using rule 225 (EqualityExpression -> RelationalExpression .)
    <               shift and go to state 217
    >               shift and go to state 220
    OP_LE           shift and go to state 218
    OP_GE           shift and go to state 219
    INSTANCEOF      shift and go to state 216


state 121

    (172) NewAllocationExpression -> PlainNewAllocationExpression .

    .               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    =               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    *               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    /               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    %               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    +               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    -               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    <               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    >               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    INSTANCEOF      reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ?               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ;               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    )               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ,               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    }               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ]               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)
    :               reduce using rule 172 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 122

    (125) JumpStatement -> CONTINUE . IDENTIFIER ;
    (126) JumpStatement -> CONTINUE . ;

    IDENTIFIER      shift and go to state 221
    ;               shift and go to state 222


state 123

    (89) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    }               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SYNCHRONIZED    reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    TRY             reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    {               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    +               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    -               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    !               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    (               reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 89 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 124

    (142) NotJustName -> SpecialName .
    (165) MethodAccess -> SpecialName .

    .               reduce using rule 142 (NotJustName -> SpecialName .)
    OPT_INC_DEC     reduce using rule 142 (NotJustName -> SpecialName .)
    *               reduce using rule 142 (NotJustName -> SpecialName .)
    /               reduce using rule 142 (NotJustName -> SpecialName .)
    %               reduce using rule 142 (NotJustName -> SpecialName .)
    +               reduce using rule 142 (NotJustName -> SpecialName .)
    -               reduce using rule 142 (NotJustName -> SpecialName .)
    OPT_SOME        reduce using rule 142 (NotJustName -> SpecialName .)
    <               reduce using rule 142 (NotJustName -> SpecialName .)
    >               reduce using rule 142 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 142 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 142 (NotJustName -> SpecialName .)
    INSTANCEOF      reduce using rule 142 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 142 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 142 (NotJustName -> SpecialName .)
    &               reduce using rule 142 (NotJustName -> SpecialName .)
    ^               reduce using rule 142 (NotJustName -> SpecialName .)
    |               reduce using rule 142 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 142 (NotJustName -> SpecialName .)
    ?               reduce using rule 142 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 142 (NotJustName -> SpecialName .)
    ;               reduce using rule 142 (NotJustName -> SpecialName .)
    )               reduce using rule 142 (NotJustName -> SpecialName .)
    :               reduce using rule 142 (NotJustName -> SpecialName .)
    ,               reduce using rule 142 (NotJustName -> SpecialName .)
    }               reduce using rule 142 (NotJustName -> SpecialName .)
    ]               reduce using rule 142 (NotJustName -> SpecialName .)
    =               reduce using rule 142 (NotJustName -> SpecialName .)
    OPT_EQ          reduce using rule 142 (NotJustName -> SpecialName .)
    (               reduce using rule 165 (MethodAccess -> SpecialName .)


state 125

    (144) NotJustName -> ComplexPrimary .
    (156) ArrayAccess -> ComplexPrimary . [ Expression ]

    .               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OPT_INC_DEC     reduce using rule 144 (NotJustName -> ComplexPrimary .)
    *               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    /               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    %               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    +               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    -               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OPT_SOME        reduce using rule 144 (NotJustName -> ComplexPrimary .)
    <               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    >               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    INSTANCEOF      reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 144 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ?               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ;               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    )               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    :               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ,               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    }               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    ]               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    =               reduce using rule 144 (NotJustName -> ComplexPrimary .)
    OPT_EQ          reduce using rule 144 (NotJustName -> ComplexPrimary .)
    [               shift and go to state 223


state 126

    (197) LogicalUnaryExpression -> PostfixExpression .
    (193) RealPostfixExpression -> PostfixExpression . OPT_INC_DEC

    *               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    /               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    %               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    +               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    -               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_SOME        reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    <               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    >               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    INSTANCEOF      reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ?               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ;               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    )               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    :               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ,               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    }               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    ]               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    =               reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_EQ          reduce using rule 197 (LogicalUnaryExpression -> PostfixExpression .)
    OPT_INC_DEC     shift and go to state 224


state 127

    (175) PlainNewAllocationExpression -> ClassAllocationExpression .
    (177) PlainNewAllocationExpression -> ClassAllocationExpression . { }
    (179) PlainNewAllocationExpression -> ClassAllocationExpression . { FieldDeclarations }

    .               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_INC_DEC     reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    =               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_EQ          reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    *               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    /               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    %               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    +               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    -               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OPT_SOME        reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    <               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    >               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    INSTANCEOF      reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ?               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    }               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ,               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ;               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    )               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ]               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    :               reduce using rule 175 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    {               shift and go to state 225


state 128

    (105) LabelStatement -> DEFAULT . :

    :               shift and go to state 226


state 129

    (99) Statement -> JumpStatement .

    WHILE           reduce using rule 99 (Statement -> JumpStatement .)
    }               reduce using rule 99 (Statement -> JumpStatement .)
    ;               reduce using rule 99 (Statement -> JumpStatement .)
    IDENTIFIER      reduce using rule 99 (Statement -> JumpStatement .)
    CASE            reduce using rule 99 (Statement -> JumpStatement .)
    DEFAULT         reduce using rule 99 (Statement -> JumpStatement .)
    IF              reduce using rule 99 (Statement -> JumpStatement .)
    SWITCH          reduce using rule 99 (Statement -> JumpStatement .)
    DO              reduce using rule 99 (Statement -> JumpStatement .)
    FOR             reduce using rule 99 (Statement -> JumpStatement .)
    BREAK           reduce using rule 99 (Statement -> JumpStatement .)
    CONTINUE        reduce using rule 99 (Statement -> JumpStatement .)
    RETURN          reduce using rule 99 (Statement -> JumpStatement .)
    THROW           reduce using rule 99 (Statement -> JumpStatement .)
    SYNCHRONIZED    reduce using rule 99 (Statement -> JumpStatement .)
    TRY             reduce using rule 99 (Statement -> JumpStatement .)
    {               reduce using rule 99 (Statement -> JumpStatement .)
    BOOLEAN         reduce using rule 99 (Statement -> JumpStatement .)
    CHAR            reduce using rule 99 (Statement -> JumpStatement .)
    BYTE            reduce using rule 99 (Statement -> JumpStatement .)
    SHORT           reduce using rule 99 (Statement -> JumpStatement .)
    INT             reduce using rule 99 (Statement -> JumpStatement .)
    LONG            reduce using rule 99 (Statement -> JumpStatement .)
    FLOAT           reduce using rule 99 (Statement -> JumpStatement .)
    DOUBLE          reduce using rule 99 (Statement -> JumpStatement .)
    VOID            reduce using rule 99 (Statement -> JumpStatement .)
    OPT_INC_DEC     reduce using rule 99 (Statement -> JumpStatement .)
    +               reduce using rule 99 (Statement -> JumpStatement .)
    -               reduce using rule 99 (Statement -> JumpStatement .)
    ~               reduce using rule 99 (Statement -> JumpStatement .)
    !               reduce using rule 99 (Statement -> JumpStatement .)
    THIS            reduce using rule 99 (Statement -> JumpStatement .)
    SUPER           reduce using rule 99 (Statement -> JumpStatement .)
    NULL            reduce using rule 99 (Statement -> JumpStatement .)
    (               reduce using rule 99 (Statement -> JumpStatement .)
    FLOAT_LITERAL   reduce using rule 99 (Statement -> JumpStatement .)
    INT_LITERAL     reduce using rule 99 (Statement -> JumpStatement .)
    CHAR_LITERAL    reduce using rule 99 (Statement -> JumpStatement .)
    STRING_LITERAL  reduce using rule 99 (Statement -> JumpStatement .)
    BOOL            reduce using rule 99 (Statement -> JumpStatement .)
    NEW             reduce using rule 99 (Statement -> JumpStatement .)
    ELSE            reduce using rule 99 (Statement -> JumpStatement .)


state 130

    (111) IterationStatement -> WHILE . ( Expression ) Statement

    (               shift and go to state 227


state 131

    (182) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (184) ArrayAllocationExpression -> NEW . TypeName Dims
    (180) ClassAllocationExpression -> NEW . TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> NEW . TypeName ( )
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 228

state 132

    (147) ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .

    [               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    .               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OPT_INC_DEC     reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    =               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OPT_EQ          reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    *               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    /               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    %               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    +               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    -               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OPT_SOME        reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    <               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    >               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_LE           reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_GE           reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    INSTANCEOF      reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_EQ           reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_NE           reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    &               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ^               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    |               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_LAND         reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ?               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    OP_LOR          reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    )               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    (               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ;               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    :               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ,               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    }               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)
    ]               reduce using rule 147 (ComplexPrimaryNoParenthesis -> FLOAT_LITERAL .)


state 133

    (93) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators ;
    (58) VariableDeclarators -> . VariableDeclarator
    (59) VariableDeclarators -> . VariableDeclarators , VariableDeclarator
    (60) VariableDeclarator -> . DeclaratorName
    (61) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (75) DeclaratorName -> . IDENTIFIER
    (76) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    VariableDeclarators            shift and go to state 229
    DeclaratorName                 shift and go to state 230
    VariableDeclarator             shift and go to state 78

state 134

    (191) PostfixExpression -> PrimaryExpression .

    OPT_INC_DEC     reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    *               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    /               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    %               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    +               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    -               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OPT_SOME        reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    <               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    >               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    INSTANCEOF      reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ?               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ;               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    )               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    :               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ,               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    }               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    ]               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    =               reduce using rule 191 (PostfixExpression -> PrimaryExpression .)
    OPT_EQ          reduce using rule 191 (PostfixExpression -> PrimaryExpression .)


state 135

    (104) LabelStatement -> CASE . ConstantExpression :
    (245) ConstantExpression -> . ConditionalExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ConstantExpression             shift and go to state 232
    PostfixExpression              shift and go to state 126
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    ConditionalExpression          shift and go to state 231
    UnaryExpression                shift and go to state 203
    InclusiveOrExpression          shift and go to state 143
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 136

    (108) SelectionStatement -> SWITCH . ( Expression ) Block

    (               shift and go to state 233


state 137

    (238) ConditionalExpression -> ConditionalOrExpression .
    (239) ConditionalExpression -> ConditionalOrExpression . ? Expression : ConditionalExpression
    (237) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR ConditionalAndExpression

    )               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression .)
    ;               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression .)
    ,               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression .)
    :               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression .)
    }               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression .)
    ]               reduce using rule 238 (ConditionalExpression -> ConditionalOrExpression .)
    ?               shift and go to state 235
    OP_LOR          shift and go to state 234


state 138

    (143) NotJustName -> NewAllocationExpression .

    .               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    *               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    /               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    %               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    +               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    -               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OPT_SOME        reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    <               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    >               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    INSTANCEOF      reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ?               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ;               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    )               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    :               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ,               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    }               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    ]               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    =               reduce using rule 143 (NotJustName -> NewAllocationExpression .)
    OPT_EQ          reduce using rule 143 (NotJustName -> NewAllocationExpression .)


state 139

    (106) ExpressionStatement -> Expression .

    ;               reduce using rule 106 (ExpressionStatement -> Expression .)
    ,               reduce using rule 106 (ExpressionStatement -> Expression .)
    )               reduce using rule 106 (ExpressionStatement -> Expression .)


state 140

    (217) ShiftExpression -> AdditiveExpression .
    (215) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (216) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    <               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    >               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    INSTANCEOF      reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    ?               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    }               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    ,               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    ;               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    )               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    :               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    ]               reduce using rule 217 (ShiftExpression -> AdditiveExpression .)
    +               shift and go to state 236
    -               shift and go to state 237


state 141

    (240) AssignmentExpression -> ConditionalExpression .

    )               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    ;               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    ]               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    }               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    ,               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)
    :               reduce using rule 240 (AssignmentExpression -> ConditionalExpression .)


state 142

    (241) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (203) CastExpression -> UnaryExpression .
    (242) AssignmentOperator -> . =
    (243) AssignmentOperator -> . OPT_EQ

    *               reduce using rule 203 (CastExpression -> UnaryExpression .)
    /               reduce using rule 203 (CastExpression -> UnaryExpression .)
    %               reduce using rule 203 (CastExpression -> UnaryExpression .)
    +               reduce using rule 203 (CastExpression -> UnaryExpression .)
    -               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 203 (CastExpression -> UnaryExpression .)
    <               reduce using rule 203 (CastExpression -> UnaryExpression .)
    >               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    INSTANCEOF      reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    &               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 203 (CastExpression -> UnaryExpression .)
    |               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 203 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 203 (CastExpression -> UnaryExpression .)
    }               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 203 (CastExpression -> UnaryExpression .)
    )               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 203 (CastExpression -> UnaryExpression .)
    :               reduce using rule 203 (CastExpression -> UnaryExpression .)
    =               shift and go to state 240
    OPT_EQ          shift and go to state 239

    AssignmentOperator             shift and go to state 238

state 143

    (234) ConditionalAndExpression -> InclusiveOrExpression .
    (233) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    ?               reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    ;               reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    )               reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    ,               reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    }               reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    ]               reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    :               reduce using rule 234 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 241


state 144

    (100) Statement -> GuardingStatement .

    WHILE           reduce using rule 100 (Statement -> GuardingStatement .)
    }               reduce using rule 100 (Statement -> GuardingStatement .)
    ;               reduce using rule 100 (Statement -> GuardingStatement .)
    IDENTIFIER      reduce using rule 100 (Statement -> GuardingStatement .)
    CASE            reduce using rule 100 (Statement -> GuardingStatement .)
    DEFAULT         reduce using rule 100 (Statement -> GuardingStatement .)
    IF              reduce using rule 100 (Statement -> GuardingStatement .)
    SWITCH          reduce using rule 100 (Statement -> GuardingStatement .)
    DO              reduce using rule 100 (Statement -> GuardingStatement .)
    FOR             reduce using rule 100 (Statement -> GuardingStatement .)
    BREAK           reduce using rule 100 (Statement -> GuardingStatement .)
    CONTINUE        reduce using rule 100 (Statement -> GuardingStatement .)
    RETURN          reduce using rule 100 (Statement -> GuardingStatement .)
    THROW           reduce using rule 100 (Statement -> GuardingStatement .)
    SYNCHRONIZED    reduce using rule 100 (Statement -> GuardingStatement .)
    TRY             reduce using rule 100 (Statement -> GuardingStatement .)
    {               reduce using rule 100 (Statement -> GuardingStatement .)
    BOOLEAN         reduce using rule 100 (Statement -> GuardingStatement .)
    CHAR            reduce using rule 100 (Statement -> GuardingStatement .)
    BYTE            reduce using rule 100 (Statement -> GuardingStatement .)
    SHORT           reduce using rule 100 (Statement -> GuardingStatement .)
    INT             reduce using rule 100 (Statement -> GuardingStatement .)
    LONG            reduce using rule 100 (Statement -> GuardingStatement .)
    FLOAT           reduce using rule 100 (Statement -> GuardingStatement .)
    DOUBLE          reduce using rule 100 (Statement -> GuardingStatement .)
    VOID            reduce using rule 100 (Statement -> GuardingStatement .)
    OPT_INC_DEC     reduce using rule 100 (Statement -> GuardingStatement .)
    +               reduce using rule 100 (Statement -> GuardingStatement .)
    -               reduce using rule 100 (Statement -> GuardingStatement .)
    ~               reduce using rule 100 (Statement -> GuardingStatement .)
    !               reduce using rule 100 (Statement -> GuardingStatement .)
    THIS            reduce using rule 100 (Statement -> GuardingStatement .)
    SUPER           reduce using rule 100 (Statement -> GuardingStatement .)
    NULL            reduce using rule 100 (Statement -> GuardingStatement .)
    (               reduce using rule 100 (Statement -> GuardingStatement .)
    FLOAT_LITERAL   reduce using rule 100 (Statement -> GuardingStatement .)
    INT_LITERAL     reduce using rule 100 (Statement -> GuardingStatement .)
    CHAR_LITERAL    reduce using rule 100 (Statement -> GuardingStatement .)
    STRING_LITERAL  reduce using rule 100 (Statement -> GuardingStatement .)
    BOOL            reduce using rule 100 (Statement -> GuardingStatement .)
    NEW             reduce using rule 100 (Statement -> GuardingStatement .)
    ELSE            reduce using rule 100 (Statement -> GuardingStatement .)


state 145

    (123) JumpStatement -> BREAK . IDENTIFIER ;
    (124) JumpStatement -> BREAK . ;

    IDENTIFIER      shift and go to state 243
    ;               shift and go to state 242


state 146

    (151) ComplexPrimaryNoParenthesis -> BOOL .

    [               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    .               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OPT_INC_DEC     reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    =               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OPT_EQ          reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    *               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    /               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    %               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    +               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    -               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OPT_SOME        reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    <               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    >               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_LE           reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_GE           reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    INSTANCEOF      reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_EQ           reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_NE           reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    &               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    ^               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    |               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_LAND         reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    ?               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    OP_LOR          reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    )               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    (               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    ;               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    :               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    ,               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    }               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)
    ]               reduce using rule 151 (ComplexPrimaryNoParenthesis -> BOOL .)


state 147

    (153) ComplexPrimaryNoParenthesis -> FieldAccess .

    [               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    .               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_INC_DEC     reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    =               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_EQ          reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    *               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    /               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    %               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    +               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    -               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OPT_SOME        reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    <               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    >               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    INSTANCEOF      reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ?               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    )               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    (               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ;               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    :               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ,               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    }               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ]               reduce using rule 153 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 148

    (148) ComplexPrimaryNoParenthesis -> INT_LITERAL .

    [               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    .               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OPT_INC_DEC     reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    =               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OPT_EQ          reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    *               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    /               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    %               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    +               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    -               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OPT_SOME        reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    <               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    >               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_LE           reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_GE           reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    INSTANCEOF      reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_EQ           reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_NE           reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    &               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ^               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    |               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_LAND         reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ?               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    OP_LOR          reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    )               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    (               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ;               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    :               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ,               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    }               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)
    ]               reduce using rule 148 (ComplexPrimaryNoParenthesis -> INT_LITERAL .)


state 149

    (199) LogicalUnaryOperator -> ~ .

    OPT_INC_DEC     reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    +               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    -               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    !               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    (               reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    FLOAT_LITERAL   reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    INT_LITERAL     reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    CHAR_LITERAL    reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    STRING_LITERAL  reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    BOOL            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 199 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 199 (LogicalUnaryOperator -> ~ .)


state 150

    (112) IterationStatement -> DO . Statement WHILE ( Expression ) ;
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    ExpressionStatement            shift and go to state 89
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 244
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    GuardingStatement              shift and go to state 144
    ConditionalOrExpression        shift and go to state 137
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 151

    (210) MultiplicativeExpression -> CastExpression .

    *               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    /               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    %               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    +               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    -               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    OPT_SOME        reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    <               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    >               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    INSTANCEOF      reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    ?               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    ;               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    ,               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    )               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    ]               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    :               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)
    }               reduce using rule 210 (MultiplicativeExpression -> CastExpression .)


state 152

    (169) SpecialName -> NULL .

    .               reduce using rule 169 (SpecialName -> NULL .)
    OPT_INC_DEC     reduce using rule 169 (SpecialName -> NULL .)
    *               reduce using rule 169 (SpecialName -> NULL .)
    /               reduce using rule 169 (SpecialName -> NULL .)
    %               reduce using rule 169 (SpecialName -> NULL .)
    +               reduce using rule 169 (SpecialName -> NULL .)
    -               reduce using rule 169 (SpecialName -> NULL .)
    OPT_SOME        reduce using rule 169 (SpecialName -> NULL .)
    <               reduce using rule 169 (SpecialName -> NULL .)
    >               reduce using rule 169 (SpecialName -> NULL .)
    OP_LE           reduce using rule 169 (SpecialName -> NULL .)
    OP_GE           reduce using rule 169 (SpecialName -> NULL .)
    INSTANCEOF      reduce using rule 169 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 169 (SpecialName -> NULL .)
    OP_NE           reduce using rule 169 (SpecialName -> NULL .)
    &               reduce using rule 169 (SpecialName -> NULL .)
    ^               reduce using rule 169 (SpecialName -> NULL .)
    |               reduce using rule 169 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 169 (SpecialName -> NULL .)
    ?               reduce using rule 169 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 169 (SpecialName -> NULL .)
    ;               reduce using rule 169 (SpecialName -> NULL .)
    )               reduce using rule 169 (SpecialName -> NULL .)
    :               reduce using rule 169 (SpecialName -> NULL .)
    ,               reduce using rule 169 (SpecialName -> NULL .)
    }               reduce using rule 169 (SpecialName -> NULL .)
    ]               reduce using rule 169 (SpecialName -> NULL .)
    (               reduce using rule 169 (SpecialName -> NULL .)
    =               reduce using rule 169 (SpecialName -> NULL .)
    OPT_EQ          reduce using rule 169 (SpecialName -> NULL .)


state 153

    (200) LogicalUnaryOperator -> ! .

    OPT_INC_DEC     reduce using rule 200 (LogicalUnaryOperator -> ! .)
    +               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    -               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    ~               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    !               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    IDENTIFIER      reduce using rule 200 (LogicalUnaryOperator -> ! .)
    THIS            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    SUPER           reduce using rule 200 (LogicalUnaryOperator -> ! .)
    NULL            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    (               reduce using rule 200 (LogicalUnaryOperator -> ! .)
    FLOAT_LITERAL   reduce using rule 200 (LogicalUnaryOperator -> ! .)
    INT_LITERAL     reduce using rule 200 (LogicalUnaryOperator -> ! .)
    CHAR_LITERAL    reduce using rule 200 (LogicalUnaryOperator -> ! .)
    STRING_LITERAL  reduce using rule 200 (LogicalUnaryOperator -> ! .)
    BOOL            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    NEW             reduce using rule 200 (LogicalUnaryOperator -> ! .)
    BOOLEAN         reduce using rule 200 (LogicalUnaryOperator -> ! .)
    CHAR            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    BYTE            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    SHORT           reduce using rule 200 (LogicalUnaryOperator -> ! .)
    INT             reduce using rule 200 (LogicalUnaryOperator -> ! .)
    LONG            reduce using rule 200 (LogicalUnaryOperator -> ! .)
    FLOAT           reduce using rule 200 (LogicalUnaryOperator -> ! .)
    DOUBLE          reduce using rule 200 (LogicalUnaryOperator -> ! .)
    VOID            reduce using rule 200 (LogicalUnaryOperator -> ! .)


state 154

    (5) TypeName -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (140) PrimaryExpression -> QualifiedName .
    (173) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (155) ArrayAccess -> QualifiedName . [ Expression ]
    (159) FieldAccess -> QualifiedName . . THIS
    (160) FieldAccess -> QualifiedName . . CLASS
    (166) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for [ resolved as shift
    IDENTIFIER      reduce using rule 5 (TypeName -> QualifiedName .)
    .               shift and go to state 245
    OPT_INC_DEC     reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    [               shift and go to state 246
    (               reduce using rule 166 (MethodAccess -> QualifiedName .)

  ! [               [ reduce using rule 5 (TypeName -> QualifiedName .) ]


state 155

    (202) ArithmeticUnaryOperator -> - .

    (               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    OPT_INC_DEC     reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    +               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    -               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    ~               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    !               reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    IDENTIFIER      reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    THIS            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    SUPER           reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    NULL            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    FLOAT_LITERAL   reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    INT_LITERAL     reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    CHAR_LITERAL    reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    STRING_LITERAL  reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    BOOL            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    NEW             reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    BOOLEAN         reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    CHAR            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    BYTE            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    SHORT           reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    INT             reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    LONG            reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    FLOAT           reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    DOUBLE          reduce using rule 202 (ArithmeticUnaryOperator -> - .)
    VOID            reduce using rule 202 (ArithmeticUnaryOperator -> - .)


state 156

    (91) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    }               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ;               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SWITCH          reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THROW           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SYNCHRONIZED    reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    TRY             reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    {               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    +               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    -               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    !               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    (               reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 91 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 157

    (219) RelationalExpression -> ShiftExpression .
    (218) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    >               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    INSTANCEOF      reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    ?               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    ,               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    ;               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    )               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    :               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    }               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    ]               reduce using rule 219 (RelationalExpression -> ShiftExpression .)
    OPT_SOME        shift and go to state 247


state 158

    (87) Block -> { LocalVariableDeclarationsAndStatements . }
    (90) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (91) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (92) LocalVariableDeclarationOrStatement -> . Statement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ;
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (244) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 249
    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 91
    AndExpression                  shift and go to state 92
    MultiplicativeExpression       shift and go to state 106
    TypeSpecifier                  shift and go to state 133
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    QualifiedName                  shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 105
    GuardingStatement              shift and go to state 144
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    TypeName                       shift and go to state 53
    ConditionalOrExpression        shift and go to state 137
    LocalVariableDeclarationStatement shift and go to state 156
    ExpressionStatement            shift and go to state 89
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 90
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    LocalVariableDeclarationOrStatement shift and go to state 248
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 159

    (141) PrimaryExpression -> NotJustName .
    (157) FieldAccess -> NotJustName . . IDENTIFIER

    OPT_INC_DEC     reduce using rule 141 (PrimaryExpression -> NotJustName .)
    =               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OPT_EQ          reduce using rule 141 (PrimaryExpression -> NotJustName .)
    *               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    /               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    %               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    +               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    -               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OPT_SOME        reduce using rule 141 (PrimaryExpression -> NotJustName .)
    <               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    >               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    INSTANCEOF      reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 141 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ?               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ;               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    )               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ,               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    }               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    ]               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    :               reduce using rule 141 (PrimaryExpression -> NotJustName .)
    .               shift and go to state 250


state 160

    (198) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 211
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MethodCall                     shift and go to state 108
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    ArrayAllocationExpression      shift and go to state 117
    UnaryExpression                shift and go to state 251
    PrimaryExpression              shift and go to state 134
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 161

    (196) UnaryExpression -> LogicalUnaryExpression .

    =               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_EQ          reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    *               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    /               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    %               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    +               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    -               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OPT_SOME        reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    <               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    >               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    INSTANCEOF      reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ?               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ;               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    )               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ,               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    :               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    }               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)
    ]               reduce using rule 196 (UnaryExpression -> LogicalUnaryExpression .)


state 162

    (107) SelectionStatement -> IF . ( Expression ) Statement ElseOrNot

    (               shift and go to state 252


state 163

    (150) ComplexPrimaryNoParenthesis -> STRING_LITERAL .

    [               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    .               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OPT_INC_DEC     reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    =               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OPT_EQ          reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    *               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    /               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    %               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    +               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    -               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OPT_SOME        reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    <               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    >               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_LE           reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_GE           reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    INSTANCEOF      reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_EQ           reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_NE           reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    &               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ^               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    |               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_LAND         reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ?               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    OP_LOR          reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    )               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    (               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ;               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    :               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ,               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    }               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)
    ]               reduce using rule 150 (ComplexPrimaryNoParenthesis -> STRING_LITERAL .)


state 164

    (168) SpecialName -> SUPER .

    .               reduce using rule 168 (SpecialName -> SUPER .)
    OPT_INC_DEC     reduce using rule 168 (SpecialName -> SUPER .)
    *               reduce using rule 168 (SpecialName -> SUPER .)
    /               reduce using rule 168 (SpecialName -> SUPER .)
    %               reduce using rule 168 (SpecialName -> SUPER .)
    +               reduce using rule 168 (SpecialName -> SUPER .)
    -               reduce using rule 168 (SpecialName -> SUPER .)
    OPT_SOME        reduce using rule 168 (SpecialName -> SUPER .)
    <               reduce using rule 168 (SpecialName -> SUPER .)
    >               reduce using rule 168 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 168 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 168 (SpecialName -> SUPER .)
    INSTANCEOF      reduce using rule 168 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 168 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 168 (SpecialName -> SUPER .)
    &               reduce using rule 168 (SpecialName -> SUPER .)
    ^               reduce using rule 168 (SpecialName -> SUPER .)
    |               reduce using rule 168 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 168 (SpecialName -> SUPER .)
    ?               reduce using rule 168 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 168 (SpecialName -> SUPER .)
    ;               reduce using rule 168 (SpecialName -> SUPER .)
    )               reduce using rule 168 (SpecialName -> SUPER .)
    :               reduce using rule 168 (SpecialName -> SUPER .)
    ,               reduce using rule 168 (SpecialName -> SUPER .)
    }               reduce using rule 168 (SpecialName -> SUPER .)
    ]               reduce using rule 168 (SpecialName -> SUPER .)
    (               reduce using rule 168 (SpecialName -> SUPER .)
    =               reduce using rule 168 (SpecialName -> SUPER .)
    OPT_EQ          reduce using rule 168 (SpecialName -> SUPER .)


state 165

    (88) Block -> { } .

    ;               reduce using rule 88 (Block -> { } .)
    }               reduce using rule 88 (Block -> { } .)
    STATIC          reduce using rule 88 (Block -> { } .)
    IDENTIFIER      reduce using rule 88 (Block -> { } .)
    {               reduce using rule 88 (Block -> { } .)
    PUBLIC          reduce using rule 88 (Block -> { } .)
    PRIVATE         reduce using rule 88 (Block -> { } .)
    CLASS           reduce using rule 88 (Block -> { } .)
    INTERFACE       reduce using rule 88 (Block -> { } .)
    BOOLEAN         reduce using rule 88 (Block -> { } .)
    CHAR            reduce using rule 88 (Block -> { } .)
    BYTE            reduce using rule 88 (Block -> { } .)
    SHORT           reduce using rule 88 (Block -> { } .)
    INT             reduce using rule 88 (Block -> { } .)
    LONG            reduce using rule 88 (Block -> { } .)
    FLOAT           reduce using rule 88 (Block -> { } .)
    DOUBLE          reduce using rule 88 (Block -> { } .)
    VOID            reduce using rule 88 (Block -> { } .)
    CASE            reduce using rule 88 (Block -> { } .)
    DEFAULT         reduce using rule 88 (Block -> { } .)
    IF              reduce using rule 88 (Block -> { } .)
    SWITCH          reduce using rule 88 (Block -> { } .)
    WHILE           reduce using rule 88 (Block -> { } .)
    DO              reduce using rule 88 (Block -> { } .)
    FOR             reduce using rule 88 (Block -> { } .)
    BREAK           reduce using rule 88 (Block -> { } .)
    CONTINUE        reduce using rule 88 (Block -> { } .)
    RETURN          reduce using rule 88 (Block -> { } .)
    THROW           reduce using rule 88 (Block -> { } .)
    SYNCHRONIZED    reduce using rule 88 (Block -> { } .)
    TRY             reduce using rule 88 (Block -> { } .)
    OPT_INC_DEC     reduce using rule 88 (Block -> { } .)
    +               reduce using rule 88 (Block -> { } .)
    -               reduce using rule 88 (Block -> { } .)
    ~               reduce using rule 88 (Block -> { } .)
    !               reduce using rule 88 (Block -> { } .)
    THIS            reduce using rule 88 (Block -> { } .)
    SUPER           reduce using rule 88 (Block -> { } .)
    NULL            reduce using rule 88 (Block -> { } .)
    (               reduce using rule 88 (Block -> { } .)
    FLOAT_LITERAL   reduce using rule 88 (Block -> { } .)
    INT_LITERAL     reduce using rule 88 (Block -> { } .)
    CHAR_LITERAL    reduce using rule 88 (Block -> { } .)
    STRING_LITERAL  reduce using rule 88 (Block -> { } .)
    BOOL            reduce using rule 88 (Block -> { } .)
    NEW             reduce using rule 88 (Block -> { } .)
    ELSE            reduce using rule 88 (Block -> { } .)
    FINALLY         reduce using rule 88 (Block -> { } .)
    CATCH           reduce using rule 88 (Block -> { } .)


state 166

    (129) JumpStatement -> THROW . Expression ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 253
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 167

    (98) Statement -> IterationStatement .

    WHILE           reduce using rule 98 (Statement -> IterationStatement .)
    }               reduce using rule 98 (Statement -> IterationStatement .)
    ;               reduce using rule 98 (Statement -> IterationStatement .)
    IDENTIFIER      reduce using rule 98 (Statement -> IterationStatement .)
    CASE            reduce using rule 98 (Statement -> IterationStatement .)
    DEFAULT         reduce using rule 98 (Statement -> IterationStatement .)
    IF              reduce using rule 98 (Statement -> IterationStatement .)
    SWITCH          reduce using rule 98 (Statement -> IterationStatement .)
    DO              reduce using rule 98 (Statement -> IterationStatement .)
    FOR             reduce using rule 98 (Statement -> IterationStatement .)
    BREAK           reduce using rule 98 (Statement -> IterationStatement .)
    CONTINUE        reduce using rule 98 (Statement -> IterationStatement .)
    RETURN          reduce using rule 98 (Statement -> IterationStatement .)
    THROW           reduce using rule 98 (Statement -> IterationStatement .)
    SYNCHRONIZED    reduce using rule 98 (Statement -> IterationStatement .)
    TRY             reduce using rule 98 (Statement -> IterationStatement .)
    {               reduce using rule 98 (Statement -> IterationStatement .)
    BOOLEAN         reduce using rule 98 (Statement -> IterationStatement .)
    CHAR            reduce using rule 98 (Statement -> IterationStatement .)
    BYTE            reduce using rule 98 (Statement -> IterationStatement .)
    SHORT           reduce using rule 98 (Statement -> IterationStatement .)
    INT             reduce using rule 98 (Statement -> IterationStatement .)
    LONG            reduce using rule 98 (Statement -> IterationStatement .)
    FLOAT           reduce using rule 98 (Statement -> IterationStatement .)
    DOUBLE          reduce using rule 98 (Statement -> IterationStatement .)
    VOID            reduce using rule 98 (Statement -> IterationStatement .)
    OPT_INC_DEC     reduce using rule 98 (Statement -> IterationStatement .)
    +               reduce using rule 98 (Statement -> IterationStatement .)
    -               reduce using rule 98 (Statement -> IterationStatement .)
    ~               reduce using rule 98 (Statement -> IterationStatement .)
    !               reduce using rule 98 (Statement -> IterationStatement .)
    THIS            reduce using rule 98 (Statement -> IterationStatement .)
    SUPER           reduce using rule 98 (Statement -> IterationStatement .)
    NULL            reduce using rule 98 (Statement -> IterationStatement .)
    (               reduce using rule 98 (Statement -> IterationStatement .)
    FLOAT_LITERAL   reduce using rule 98 (Statement -> IterationStatement .)
    INT_LITERAL     reduce using rule 98 (Statement -> IterationStatement .)
    CHAR_LITERAL    reduce using rule 98 (Statement -> IterationStatement .)
    STRING_LITERAL  reduce using rule 98 (Statement -> IterationStatement .)
    BOOL            reduce using rule 98 (Statement -> IterationStatement .)
    NEW             reduce using rule 98 (Statement -> IterationStatement .)
    ELSE            reduce using rule 98 (Statement -> IterationStatement .)


state 168

    (31) ImportStatement -> IMPORT QualifiedName . * SemiColons .
    (18) SemiColons -> SemiColons . ;

    IMPORT          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    CLASS           reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    INTERFACE       reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PUBLIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    PRIVATE         reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    STATIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName . * SemiColons .)
    ;               shift and go to state 34


state 169

    (59) VariableDeclarators -> VariableDeclarators , . VariableDeclarator
    (60) VariableDeclarator -> . DeclaratorName
    (61) VariableDeclarator -> . DeclaratorName = VariableInitializer
    (75) DeclaratorName -> . IDENTIFIER
    (76) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    DeclaratorName                 shift and go to state 230
    VariableDeclarator             shift and go to state 254

state 170

    (70) MethodDeclarator -> DeclaratorName ( . ParameterList )
    (71) MethodDeclarator -> DeclaratorName ( . )
    (72) ParameterList -> . Parameter
    (73) ParameterList -> . ParameterList , Parameter
    (74) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    )               shift and go to state 255
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    ParameterList                  shift and go to state 256
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 178
    TypeSpecifier                  shift and go to state 179

state 171

    (61) VariableDeclarator -> DeclaratorName = . VariableInitializer
    (62) VariableInitializer -> . Expression
    (63) VariableInitializer -> . { }
    (64) VariableInitializer -> . { ArrayInitializers }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    {               shift and go to state 257
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    VariableInitializer            shift and go to state 258
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 259
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 172

    (76) DeclaratorName -> DeclaratorName OP_DIM .

    (               reduce using rule 76 (DeclaratorName -> DeclaratorName OP_DIM .)
    =               reduce using rule 76 (DeclaratorName -> DeclaratorName OP_DIM .)
    [               reduce using rule 76 (DeclaratorName -> DeclaratorName OP_DIM .)
    ,               reduce using rule 76 (DeclaratorName -> DeclaratorName OP_DIM .)
    ;               reduce using rule 76 (DeclaratorName -> DeclaratorName OP_DIM .)
    )               reduce using rule 76 (DeclaratorName -> DeclaratorName OP_DIM .)


state 173

    (69) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 69 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 174

    (78) MethodBody -> ; .

    ;               reduce using rule 78 (MethodBody -> ; .)
    }               reduce using rule 78 (MethodBody -> ; .)
    STATIC          reduce using rule 78 (MethodBody -> ; .)
    IDENTIFIER      reduce using rule 78 (MethodBody -> ; .)
    {               reduce using rule 78 (MethodBody -> ; .)
    PUBLIC          reduce using rule 78 (MethodBody -> ; .)
    PRIVATE         reduce using rule 78 (MethodBody -> ; .)
    CLASS           reduce using rule 78 (MethodBody -> ; .)
    INTERFACE       reduce using rule 78 (MethodBody -> ; .)
    BOOLEAN         reduce using rule 78 (MethodBody -> ; .)
    CHAR            reduce using rule 78 (MethodBody -> ; .)
    BYTE            reduce using rule 78 (MethodBody -> ; .)
    SHORT           reduce using rule 78 (MethodBody -> ; .)
    INT             reduce using rule 78 (MethodBody -> ; .)
    LONG            reduce using rule 78 (MethodBody -> ; .)
    FLOAT           reduce using rule 78 (MethodBody -> ; .)
    DOUBLE          reduce using rule 78 (MethodBody -> ; .)
    VOID            reduce using rule 78 (MethodBody -> ; .)


state 175

    (77) MethodBody -> Block .

    ;               reduce using rule 77 (MethodBody -> Block .)
    }               reduce using rule 77 (MethodBody -> Block .)
    STATIC          reduce using rule 77 (MethodBody -> Block .)
    IDENTIFIER      reduce using rule 77 (MethodBody -> Block .)
    {               reduce using rule 77 (MethodBody -> Block .)
    PUBLIC          reduce using rule 77 (MethodBody -> Block .)
    PRIVATE         reduce using rule 77 (MethodBody -> Block .)
    CLASS           reduce using rule 77 (MethodBody -> Block .)
    INTERFACE       reduce using rule 77 (MethodBody -> Block .)
    BOOLEAN         reduce using rule 77 (MethodBody -> Block .)
    CHAR            reduce using rule 77 (MethodBody -> Block .)
    BYTE            reduce using rule 77 (MethodBody -> Block .)
    SHORT           reduce using rule 77 (MethodBody -> Block .)
    INT             reduce using rule 77 (MethodBody -> Block .)
    LONG            reduce using rule 77 (MethodBody -> Block .)
    FLOAT           reduce using rule 77 (MethodBody -> Block .)
    DOUBLE          reduce using rule 77 (MethodBody -> Block .)
    VOID            reduce using rule 77 (MethodBody -> Block .)


state 176

    (190) OP_DIM -> [ ] .

    =               reduce using rule 190 (OP_DIM -> [ ] .)
    [               reduce using rule 190 (OP_DIM -> [ ] .)
    ;               reduce using rule 190 (OP_DIM -> [ ] .)
    ,               reduce using rule 190 (OP_DIM -> [ ] .)
    (               reduce using rule 190 (OP_DIM -> [ ] .)
    )               reduce using rule 190 (OP_DIM -> [ ] .)
    {               reduce using rule 190 (OP_DIM -> [ ] .)
    .               reduce using rule 190 (OP_DIM -> [ ] .)
    OPT_INC_DEC     reduce using rule 190 (OP_DIM -> [ ] .)
    OPT_EQ          reduce using rule 190 (OP_DIM -> [ ] .)
    *               reduce using rule 190 (OP_DIM -> [ ] .)
    /               reduce using rule 190 (OP_DIM -> [ ] .)
    %               reduce using rule 190 (OP_DIM -> [ ] .)
    +               reduce using rule 190 (OP_DIM -> [ ] .)
    -               reduce using rule 190 (OP_DIM -> [ ] .)
    OPT_SOME        reduce using rule 190 (OP_DIM -> [ ] .)
    <               reduce using rule 190 (OP_DIM -> [ ] .)
    >               reduce using rule 190 (OP_DIM -> [ ] .)
    OP_LE           reduce using rule 190 (OP_DIM -> [ ] .)
    OP_GE           reduce using rule 190 (OP_DIM -> [ ] .)
    INSTANCEOF      reduce using rule 190 (OP_DIM -> [ ] .)
    OP_EQ           reduce using rule 190 (OP_DIM -> [ ] .)
    OP_NE           reduce using rule 190 (OP_DIM -> [ ] .)
    &               reduce using rule 190 (OP_DIM -> [ ] .)
    ^               reduce using rule 190 (OP_DIM -> [ ] .)
    |               reduce using rule 190 (OP_DIM -> [ ] .)
    OP_LAND         reduce using rule 190 (OP_DIM -> [ ] .)
    ?               reduce using rule 190 (OP_DIM -> [ ] .)
    OP_LOR          reduce using rule 190 (OP_DIM -> [ ] .)
    :               reduce using rule 190 (OP_DIM -> [ ] .)
    }               reduce using rule 190 (OP_DIM -> [ ] .)
    ]               reduce using rule 190 (OP_DIM -> [ ] .)
    IDENTIFIER      reduce using rule 190 (OP_DIM -> [ ] .)


state 177

    (189) Dims -> Dims OP_DIM .

    [               reduce using rule 189 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 189 (Dims -> Dims OP_DIM .)
    <               reduce using rule 189 (Dims -> Dims OP_DIM .)
    >               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 189 (Dims -> Dims OP_DIM .)
    INSTANCEOF      reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 189 (Dims -> Dims OP_DIM .)
    &               reduce using rule 189 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 189 (Dims -> Dims OP_DIM .)
    |               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 189 (Dims -> Dims OP_DIM .)
    ?               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 189 (Dims -> Dims OP_DIM .)
    ;               reduce using rule 189 (Dims -> Dims OP_DIM .)
    )               reduce using rule 189 (Dims -> Dims OP_DIM .)
    :               reduce using rule 189 (Dims -> Dims OP_DIM .)
    ,               reduce using rule 189 (Dims -> Dims OP_DIM .)
    }               reduce using rule 189 (Dims -> Dims OP_DIM .)
    ]               reduce using rule 189 (Dims -> Dims OP_DIM .)
    {               reduce using rule 189 (Dims -> Dims OP_DIM .)
    .               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OPT_INC_DEC     reduce using rule 189 (Dims -> Dims OP_DIM .)
    =               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OPT_EQ          reduce using rule 189 (Dims -> Dims OP_DIM .)
    *               reduce using rule 189 (Dims -> Dims OP_DIM .)
    /               reduce using rule 189 (Dims -> Dims OP_DIM .)
    %               reduce using rule 189 (Dims -> Dims OP_DIM .)
    +               reduce using rule 189 (Dims -> Dims OP_DIM .)
    -               reduce using rule 189 (Dims -> Dims OP_DIM .)
    OPT_SOME        reduce using rule 189 (Dims -> Dims OP_DIM .)


state 178

    (72) ParameterList -> Parameter .

    )               reduce using rule 72 (ParameterList -> Parameter .)
    ,               reduce using rule 72 (ParameterList -> Parameter .)


state 179

    (74) Parameter -> TypeSpecifier . DeclaratorName
    (75) DeclaratorName -> . IDENTIFIER
    (76) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 77

    DeclaratorName                 shift and go to state 260

state 180

    (82) ConstructorDeclarator -> IDENTIFIER ( ) .

    {               reduce using rule 82 (ConstructorDeclarator -> IDENTIFIER ( ) .)


state 181

    (81) ConstructorDeclarator -> IDENTIFIER ( ParameterList . )
    (73) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 261
    ,               shift and go to state 262


state 182

    (56) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (59) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               reduce using rule 56 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    ,               shift and go to state 169


state 183

    (68) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (77) MethodBody -> . Block
    (78) MethodBody -> . ;
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    ;               shift and go to state 174
    {               shift and go to state 68

    MethodBody                     shift and go to state 263
    Block                          shift and go to state 175

state 184

    (79) ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .

    ;               reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    }               reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    STATIC          reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    {               reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CLASS           reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INTERFACE       reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CHAR            reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BYTE            reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SHORT           reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INT             reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LONG            reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FLOAT           reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOID            reduce using rule 79 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)


state 185

    (96) Statement -> ExpressionStatement ; .

    WHILE           reduce using rule 96 (Statement -> ExpressionStatement ; .)
    }               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    ;               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    IDENTIFIER      reduce using rule 96 (Statement -> ExpressionStatement ; .)
    CASE            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    DEFAULT         reduce using rule 96 (Statement -> ExpressionStatement ; .)
    IF              reduce using rule 96 (Statement -> ExpressionStatement ; .)
    SWITCH          reduce using rule 96 (Statement -> ExpressionStatement ; .)
    DO              reduce using rule 96 (Statement -> ExpressionStatement ; .)
    FOR             reduce using rule 96 (Statement -> ExpressionStatement ; .)
    BREAK           reduce using rule 96 (Statement -> ExpressionStatement ; .)
    CONTINUE        reduce using rule 96 (Statement -> ExpressionStatement ; .)
    RETURN          reduce using rule 96 (Statement -> ExpressionStatement ; .)
    THROW           reduce using rule 96 (Statement -> ExpressionStatement ; .)
    SYNCHRONIZED    reduce using rule 96 (Statement -> ExpressionStatement ; .)
    TRY             reduce using rule 96 (Statement -> ExpressionStatement ; .)
    {               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    BOOLEAN         reduce using rule 96 (Statement -> ExpressionStatement ; .)
    CHAR            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    BYTE            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    SHORT           reduce using rule 96 (Statement -> ExpressionStatement ; .)
    INT             reduce using rule 96 (Statement -> ExpressionStatement ; .)
    LONG            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    FLOAT           reduce using rule 96 (Statement -> ExpressionStatement ; .)
    DOUBLE          reduce using rule 96 (Statement -> ExpressionStatement ; .)
    VOID            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    OPT_INC_DEC     reduce using rule 96 (Statement -> ExpressionStatement ; .)
    +               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    -               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    ~               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    !               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    THIS            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    SUPER           reduce using rule 96 (Statement -> ExpressionStatement ; .)
    NULL            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    (               reduce using rule 96 (Statement -> ExpressionStatement ; .)
    FLOAT_LITERAL   reduce using rule 96 (Statement -> ExpressionStatement ; .)
    INT_LITERAL     reduce using rule 96 (Statement -> ExpressionStatement ; .)
    CHAR_LITERAL    reduce using rule 96 (Statement -> ExpressionStatement ; .)
    STRING_LITERAL  reduce using rule 96 (Statement -> ExpressionStatement ; .)
    BOOL            reduce using rule 96 (Statement -> ExpressionStatement ; .)
    NEW             reduce using rule 96 (Statement -> ExpressionStatement ; .)
    ELSE            reduce using rule 96 (Statement -> ExpressionStatement ; .)


state 186

    (161) FieldAccess -> PrimitiveType . . CLASS

    CLASS           shift and go to state 264


state 187

    (229) AndExpression -> AndExpression & . EqualityExpression
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 265
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 188

    (207) PrimitiveTypeExpression -> PrimitiveType .
    (208) PrimitiveTypeExpression -> PrimitiveType . Dims
    (161) FieldAccess -> PrimitiveType . . CLASS
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (190) OP_DIM -> . [ ]

    )               reduce using rule 207 (PrimitiveTypeExpression -> PrimitiveType .)
    .               shift and go to state 186
    [               shift and go to state 79

    Dims                           shift and go to state 266
    OP_DIM                         shift and go to state 80

state 189

    (205) CastExpression -> ( ClassTypeExpression . ) CastExpression

    )               shift and go to state 267


state 190

    (145) ComplexPrimary -> ( Expression . )
    (206) CastExpression -> ( Expression . ) LogicalUnaryExpression

    )               shift and go to state 268


state 191

    (204) CastExpression -> ( PrimitiveTypeExpression . ) CastExpression

    )               shift and go to state 269


state 192

    (209) ClassTypeExpression -> QualifiedName . Dims
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (140) PrimaryExpression -> QualifiedName .
    (173) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (155) ArrayAccess -> QualifiedName . [ Expression ]
    (159) FieldAccess -> QualifiedName . . THIS
    (160) FieldAccess -> QualifiedName . . CLASS
    (166) MethodAccess -> QualifiedName .
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (190) OP_DIM -> . [ ]

    .               shift and go to state 245
    OPT_INC_DEC     reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    )               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    [               shift and go to state 271
    (               reduce using rule 166 (MethodAccess -> QualifiedName .)

    Dims                           shift and go to state 270
    OP_DIM                         shift and go to state 80

state 193

    (103) LabelStatement -> IDENTIFIER : .

    }               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    ;               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    IDENTIFIER      reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CASE            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    DEFAULT         reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    IF              reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    SWITCH          reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    WHILE           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    DO              reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    FOR             reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BREAK           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CONTINUE        reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    RETURN          reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    THROW           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    SYNCHRONIZED    reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    TRY             reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    {               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BOOLEAN         reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CHAR            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BYTE            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    SHORT           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    INT             reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    LONG            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    FLOAT           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    DOUBLE          reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    VOID            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    OPT_INC_DEC     reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    +               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    -               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    ~               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    !               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    THIS            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    SUPER           reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    NULL            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    (               reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    FLOAT_LITERAL   reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    INT_LITERAL     reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    CHAR_LITERAL    reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    STRING_LITERAL  reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    BOOL            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    NEW             reduce using rule 103 (LabelStatement -> IDENTIFIER : .)
    ELSE            reduce using rule 103 (LabelStatement -> IDENTIFIER : .)


state 194

    (235) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . InclusiveOrExpression
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    InclusiveOrExpression          shift and go to state 272
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 119
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 195

    (161) FieldAccess -> PrimitiveType . . CLASS

    .               shift and go to state 186


state 196

    (128) JumpStatement -> RETURN ; .

    }               reduce using rule 128 (JumpStatement -> RETURN ; .)
    ;               reduce using rule 128 (JumpStatement -> RETURN ; .)
    IDENTIFIER      reduce using rule 128 (JumpStatement -> RETURN ; .)
    CASE            reduce using rule 128 (JumpStatement -> RETURN ; .)
    DEFAULT         reduce using rule 128 (JumpStatement -> RETURN ; .)
    IF              reduce using rule 128 (JumpStatement -> RETURN ; .)
    SWITCH          reduce using rule 128 (JumpStatement -> RETURN ; .)
    WHILE           reduce using rule 128 (JumpStatement -> RETURN ; .)
    DO              reduce using rule 128 (JumpStatement -> RETURN ; .)
    FOR             reduce using rule 128 (JumpStatement -> RETURN ; .)
    BREAK           reduce using rule 128 (JumpStatement -> RETURN ; .)
    CONTINUE        reduce using rule 128 (JumpStatement -> RETURN ; .)
    RETURN          reduce using rule 128 (JumpStatement -> RETURN ; .)
    THROW           reduce using rule 128 (JumpStatement -> RETURN ; .)
    SYNCHRONIZED    reduce using rule 128 (JumpStatement -> RETURN ; .)
    TRY             reduce using rule 128 (JumpStatement -> RETURN ; .)
    {               reduce using rule 128 (JumpStatement -> RETURN ; .)
    BOOLEAN         reduce using rule 128 (JumpStatement -> RETURN ; .)
    CHAR            reduce using rule 128 (JumpStatement -> RETURN ; .)
    BYTE            reduce using rule 128 (JumpStatement -> RETURN ; .)
    SHORT           reduce using rule 128 (JumpStatement -> RETURN ; .)
    INT             reduce using rule 128 (JumpStatement -> RETURN ; .)
    LONG            reduce using rule 128 (JumpStatement -> RETURN ; .)
    FLOAT           reduce using rule 128 (JumpStatement -> RETURN ; .)
    DOUBLE          reduce using rule 128 (JumpStatement -> RETURN ; .)
    VOID            reduce using rule 128 (JumpStatement -> RETURN ; .)
    OPT_INC_DEC     reduce using rule 128 (JumpStatement -> RETURN ; .)
    +               reduce using rule 128 (JumpStatement -> RETURN ; .)
    -               reduce using rule 128 (JumpStatement -> RETURN ; .)
    ~               reduce using rule 128 (JumpStatement -> RETURN ; .)
    !               reduce using rule 128 (JumpStatement -> RETURN ; .)
    THIS            reduce using rule 128 (JumpStatement -> RETURN ; .)
    SUPER           reduce using rule 128 (JumpStatement -> RETURN ; .)
    NULL            reduce using rule 128 (JumpStatement -> RETURN ; .)
    (               reduce using rule 128 (JumpStatement -> RETURN ; .)
    FLOAT_LITERAL   reduce using rule 128 (JumpStatement -> RETURN ; .)
    INT_LITERAL     reduce using rule 128 (JumpStatement -> RETURN ; .)
    CHAR_LITERAL    reduce using rule 128 (JumpStatement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 128 (JumpStatement -> RETURN ; .)
    BOOL            reduce using rule 128 (JumpStatement -> RETURN ; .)
    NEW             reduce using rule 128 (JumpStatement -> RETURN ; .)
    ELSE            reduce using rule 128 (JumpStatement -> RETURN ; .)


state 197

    (127) JumpStatement -> RETURN Expression . ;

    ;               shift and go to state 273


state 198

    (140) PrimaryExpression -> QualifiedName .
    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (173) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (155) ArrayAccess -> QualifiedName . [ Expression ]
    (159) FieldAccess -> QualifiedName . . THIS
    (160) FieldAccess -> QualifiedName . . CLASS
    (166) MethodAccess -> QualifiedName .

    OPT_INC_DEC     reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    *               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    /               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    %               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    +               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    -               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_SOME        reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    <               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    >               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    INSTANCEOF      reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ;               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    )               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ,               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    }               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    ]               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    :               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    =               reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    OPT_EQ          reduce using rule 140 (PrimaryExpression -> QualifiedName .)
    .               shift and go to state 245
    [               shift and go to state 246
    (               reduce using rule 166 (MethodAccess -> QualifiedName .)


state 199

    (130) GuardingStatement -> SYNCHRONIZED ( . Expression ) Statement
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 274
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 200

    (158) FieldAccess -> RealPostfixExpression . . IDENTIFIER

    IDENTIFIER      shift and go to state 275


state 201

    (195) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    =               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_EQ          reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    *               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    /               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    %               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    +               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    -               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OPT_SOME        reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    <               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    >               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    INSTANCEOF      reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ?               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ;               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    )               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ,               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    :               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    }               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ]               reduce using rule 195 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 202

    (204) CastExpression -> ( . PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> ( . ClassTypeExpression ) CastExpression
    (206) CastExpression -> ( . Expression ) LogicalUnaryExpression
    (145) ComplexPrimary -> ( . Expression )
    (207) PrimitiveTypeExpression -> . PrimitiveType
    (208) PrimitiveTypeExpression -> . PrimitiveType Dims
    (209) ClassTypeExpression -> . QualifiedName Dims
    (244) Expression -> . AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 188
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 192
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 276
    AdditiveExpression             shift and go to state 140
    PrimitiveTypeExpression        shift and go to state 191
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    ClassTypeExpression            shift and go to state 189
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 203

    (203) CastExpression -> UnaryExpression .

    *               reduce using rule 203 (CastExpression -> UnaryExpression .)
    /               reduce using rule 203 (CastExpression -> UnaryExpression .)
    %               reduce using rule 203 (CastExpression -> UnaryExpression .)
    +               reduce using rule 203 (CastExpression -> UnaryExpression .)
    -               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OPT_SOME        reduce using rule 203 (CastExpression -> UnaryExpression .)
    <               reduce using rule 203 (CastExpression -> UnaryExpression .)
    >               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    INSTANCEOF      reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 203 (CastExpression -> UnaryExpression .)
    &               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 203 (CastExpression -> UnaryExpression .)
    |               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 203 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 203 (CastExpression -> UnaryExpression .)
    ;               reduce using rule 203 (CastExpression -> UnaryExpression .)
    )               reduce using rule 203 (CastExpression -> UnaryExpression .)
    :               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ,               reduce using rule 203 (CastExpression -> UnaryExpression .)
    }               reduce using rule 203 (CastExpression -> UnaryExpression .)
    ]               reduce using rule 203 (CastExpression -> UnaryExpression .)
    =               reduce using rule 203 (CastExpression -> UnaryExpression .)
    OPT_EQ          reduce using rule 203 (CastExpression -> UnaryExpression .)


state 204

    (227) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    RelationalExpression           shift and go to state 277
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 205

    (226) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    RelationalExpression           shift and go to state 278
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 206

    (211) MultiplicativeExpression -> MultiplicativeExpression * . CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 279
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    PrimaryExpression              shift and go to state 134
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 207

    (213) MultiplicativeExpression -> MultiplicativeExpression % . CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 280
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    PrimaryExpression              shift and go to state 134
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 208

    (212) MultiplicativeExpression -> MultiplicativeExpression / . CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 281
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    PrimaryExpression              shift and go to state 134
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 209

    (113) IterationStatement -> FOR ( . ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> FOR ( . ForInit ForExpr ) Statement
    (115) ForInit -> . ExpressionStatements ;
    (116) ForInit -> . LocalVariableDeclarationStatement
    (117) ForInit -> . ;
    (121) ExpressionStatements -> . ExpressionStatement
    (122) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (93) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators ;
    (106) ExpressionStatement -> . Expression
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (244) Expression -> . AssignmentExpression
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 283
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    ArithmeticUnaryOperator        shift and go to state 103
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ExpressionStatement            shift and go to state 282
    PrimitiveType                  shift and go to state 90
    RealPostfixExpression          shift and go to state 102
    AndExpression                  shift and go to state 92
    MultiplicativeExpression       shift and go to state 106
    TypeSpecifier                  shift and go to state 133
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    QualifiedName                  shift and go to state 154
    ComplexPrimaryNoParenthesis    shift and go to state 105
    TypeName                       shift and go to state 53
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    LocalVariableDeclarationStatement shift and go to state 286
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    LogicalUnaryOperator           shift and go to state 160
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    ForInit                        shift and go to state 284
    InclusiveOrExpression          shift and go to state 143
    PrimaryExpression              shift and go to state 134
    ExpressionStatements           shift and go to state 285
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 210

    (131) GuardingStatement -> TRY Block . Finally
    (132) GuardingStatement -> TRY Block . Catches
    (133) GuardingStatement -> TRY Block . Catches Finally
    (139) Finally -> . FINALLY Block
    (134) Catches -> . Catch
    (135) Catches -> . Catches Catch
    (136) Catch -> . CatchHeader Block
    (137) CatchHeader -> . CATCH ( TypeSpecifier IDENTIFIER )
    (138) CatchHeader -> . CATCH ( TypeSpecifier )

    FINALLY         shift and go to state 288
    CATCH           shift and go to state 289

    Catches                        shift and go to state 287
    CatchHeader                    shift and go to state 290
    Finally                        shift and go to state 291
    Catch                          shift and go to state 292

state 211

    (145) ComplexPrimary -> ( . Expression )
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 293
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 212

    (194) UnaryExpression -> OPT_INC_DEC UnaryExpression .

    =               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_EQ          reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    *               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    /               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    %               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    +               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    -               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OPT_SOME        reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    <               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    >               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LE           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_GE           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    INSTANCEOF      reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_EQ           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_NE           reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    &               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ^               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    |               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LAND         reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ?               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    OP_LOR          reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ;               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    )               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ,               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    :               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    }               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)
    ]               reduce using rule 194 (UnaryExpression -> OPT_INC_DEC UnaryExpression .)


state 213

    (176) PlainNewAllocationExpression -> ArrayAllocationExpression { . }
    (178) PlainNewAllocationExpression -> ArrayAllocationExpression { . ArrayInitializers }
    (65) ArrayInitializers -> . VariableInitializer
    (66) ArrayInitializers -> . ArrayInitializers , VariableInitializer
    (67) ArrayInitializers -> . ArrayInitializers ,
    (62) VariableInitializer -> . Expression
    (63) VariableInitializer -> . { }
    (64) VariableInitializer -> . { ArrayInitializers }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 294
    {               shift and go to state 257
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    VariableInitializer            shift and go to state 296
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ArrayInitializers              shift and go to state 295
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 259
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 214

    (162) MethodCall -> MethodAccess ( . ArgumentList )
    (163) MethodCall -> MethodAccess ( . )
    (170) ArgumentList -> . Expression
    (171) ArgumentList -> . ArgumentList , Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    )               shift and go to state 299
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    FieldAccess                    shift and go to state 147
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    ArgumentList                   shift and go to state 297
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 298
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    SpecialName                    shift and go to state 124

state 215

    (231) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 300
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 216

    (224) RelationalExpression -> RelationalExpression INSTANCEOF . TypeSpecifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    PrimitiveType                  shift and go to state 46
    TypeSpecifier                  shift and go to state 301

state 217

    (220) RelationalExpression -> RelationalExpression < . ShiftExpression
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 302
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 218

    (222) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 303
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 219

    (223) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 304
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 220

    (221) RelationalExpression -> RelationalExpression > . ShiftExpression
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 305
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 221

    (125) JumpStatement -> CONTINUE IDENTIFIER . ;

    ;               shift and go to state 306


state 222

    (126) JumpStatement -> CONTINUE ; .

    }               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    ;               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CASE            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    DEFAULT         reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    IF              reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    SWITCH          reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    WHILE           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    DO              reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    FOR             reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BREAK           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CONTINUE        reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    RETURN          reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    THROW           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    SYNCHRONIZED    reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    TRY             reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    {               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BOOLEAN         reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CHAR            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BYTE            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    SHORT           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    INT             reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    LONG            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    FLOAT           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    DOUBLE          reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    VOID            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    OPT_INC_DEC     reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    +               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    -               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    ~               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    !               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    THIS            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    SUPER           reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    NULL            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    (               reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    FLOAT_LITERAL   reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    INT_LITERAL     reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    CHAR_LITERAL    reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    BOOL            reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    NEW             reduce using rule 126 (JumpStatement -> CONTINUE ; .)
    ELSE            reduce using rule 126 (JumpStatement -> CONTINUE ; .)


state 223

    (156) ArrayAccess -> ComplexPrimary [ . Expression ]
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    ComplexPrimary                 shift and go to state 125
    PostfixExpression              shift and go to state 126
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 307
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 224

    (193) RealPostfixExpression -> PostfixExpression OPT_INC_DEC .

    .               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_INC_DEC     reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    =               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_EQ          reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    *               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    /               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    %               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    +               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    -               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OPT_SOME        reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    <               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    >               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LE           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_GE           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    INSTANCEOF      reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_EQ           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_NE           reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    &               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ^               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    |               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LAND         reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ?               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    OP_LOR          reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ;               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    )               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    :               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ,               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    }               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)
    ]               reduce using rule 193 (RealPostfixExpression -> PostfixExpression OPT_INC_DEC .)


state 225

    (177) PlainNewAllocationExpression -> ClassAllocationExpression { . }
    (179) PlainNewAllocationExpression -> ClassAllocationExpression { . FieldDeclarations }
    (46) FieldDeclarations -> . FieldDeclarationOptSemi
    (47) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (48) FieldDeclarationOptSemi -> . FieldDeclaration
    (49) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (50) FieldDeclaration -> . FieldVariableDeclaration ;
    (51) FieldDeclaration -> . MethodDeclaration
    (52) FieldDeclaration -> . ConstructorDeclaration
    (53) FieldDeclaration -> . StaticInitializer
    (54) FieldDeclaration -> . NonStaticInitializer
    (55) FieldDeclaration -> . TypeDeclaration
    (56) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (57) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (68) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (69) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (79) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (80) ConstructorDeclaration -> . ConstructorDeclarator Block
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 309
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    ConstructorDeclaration         shift and go to state 42
    FieldDeclarations              shift and go to state 308
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 60
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 226

    (105) LabelStatement -> DEFAULT : .

    }               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    ;               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    IDENTIFIER      reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CASE            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    DEFAULT         reduce using rule 105 (LabelStatement -> DEFAULT : .)
    IF              reduce using rule 105 (LabelStatement -> DEFAULT : .)
    SWITCH          reduce using rule 105 (LabelStatement -> DEFAULT : .)
    WHILE           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    DO              reduce using rule 105 (LabelStatement -> DEFAULT : .)
    FOR             reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BREAK           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CONTINUE        reduce using rule 105 (LabelStatement -> DEFAULT : .)
    RETURN          reduce using rule 105 (LabelStatement -> DEFAULT : .)
    THROW           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    SYNCHRONIZED    reduce using rule 105 (LabelStatement -> DEFAULT : .)
    TRY             reduce using rule 105 (LabelStatement -> DEFAULT : .)
    {               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BOOLEAN         reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CHAR            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BYTE            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    SHORT           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    INT             reduce using rule 105 (LabelStatement -> DEFAULT : .)
    LONG            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    FLOAT           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    DOUBLE          reduce using rule 105 (LabelStatement -> DEFAULT : .)
    VOID            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    OPT_INC_DEC     reduce using rule 105 (LabelStatement -> DEFAULT : .)
    +               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    -               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    ~               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    !               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    THIS            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    SUPER           reduce using rule 105 (LabelStatement -> DEFAULT : .)
    NULL            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    (               reduce using rule 105 (LabelStatement -> DEFAULT : .)
    FLOAT_LITERAL   reduce using rule 105 (LabelStatement -> DEFAULT : .)
    INT_LITERAL     reduce using rule 105 (LabelStatement -> DEFAULT : .)
    CHAR_LITERAL    reduce using rule 105 (LabelStatement -> DEFAULT : .)
    STRING_LITERAL  reduce using rule 105 (LabelStatement -> DEFAULT : .)
    BOOL            reduce using rule 105 (LabelStatement -> DEFAULT : .)
    NEW             reduce using rule 105 (LabelStatement -> DEFAULT : .)
    ELSE            reduce using rule 105 (LabelStatement -> DEFAULT : .)


state 227

    (111) IterationStatement -> WHILE ( . Expression ) Statement
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 310
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 228

    (182) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (183) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (184) ArrayAllocationExpression -> NEW TypeName . Dims
    (180) ClassAllocationExpression -> NEW TypeName . ( ArgumentList )
    (181) ClassAllocationExpression -> NEW TypeName . ( )
    (185) DimExprs -> . DimExpr
    (186) DimExprs -> . DimExprs DimExpr
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (187) DimExpr -> . [ Expression ]
    (190) OP_DIM -> . [ ]

    (               shift and go to state 311
    [               shift and go to state 314

    Dims                           shift and go to state 313
    DimExpr                        shift and go to state 315
    DimExprs                       shift and go to state 312
    OP_DIM                         shift and go to state 80

state 229

    (93) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . ;
    (59) VariableDeclarators -> VariableDeclarators . , VariableDeclarator

    ;               shift and go to state 316
    ,               shift and go to state 169


state 230

    (60) VariableDeclarator -> DeclaratorName .
    (61) VariableDeclarator -> DeclaratorName . = VariableInitializer
    (76) DeclaratorName -> DeclaratorName . OP_DIM
    (190) OP_DIM -> . [ ]

    ,               reduce using rule 60 (VariableDeclarator -> DeclaratorName .)
    ;               reduce using rule 60 (VariableDeclarator -> DeclaratorName .)
    =               shift and go to state 171
    [               shift and go to state 79

    OP_DIM                         shift and go to state 172

state 231

    (245) ConstantExpression -> ConditionalExpression .

    :               reduce using rule 245 (ConstantExpression -> ConditionalExpression .)


state 232

    (104) LabelStatement -> CASE ConstantExpression . :

    :               shift and go to state 317


state 233

    (108) SelectionStatement -> SWITCH ( . Expression ) Block
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 318
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 234

    (237) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . ConditionalAndExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    InclusiveOrExpression          shift and go to state 143
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 319
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 235

    (239) ConditionalExpression -> ConditionalOrExpression ? . Expression : ConditionalExpression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 320
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 236

    (215) AdditiveExpression -> AdditiveExpression + . MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 321
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    PrimaryExpression              shift and go to state 134
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 237

    (216) AdditiveExpression -> AdditiveExpression - . MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 322
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    PrimaryExpression              shift and go to state 134
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 238

    (241) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 323
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 239

    (243) AssignmentOperator -> OPT_EQ .

    OPT_INC_DEC     reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    +               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    -               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    ~               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    !               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    IDENTIFIER      reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    THIS            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    SUPER           reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    NULL            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    (               reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    FLOAT_LITERAL   reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    INT_LITERAL     reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    CHAR_LITERAL    reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    STRING_LITERAL  reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    BOOL            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    NEW             reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    BOOLEAN         reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    CHAR            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    BYTE            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    SHORT           reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    INT             reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    LONG            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    FLOAT           reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    DOUBLE          reduce using rule 243 (AssignmentOperator -> OPT_EQ .)
    VOID            reduce using rule 243 (AssignmentOperator -> OPT_EQ .)


state 240

    (242) AssignmentOperator -> = .

    OPT_INC_DEC     reduce using rule 242 (AssignmentOperator -> = .)
    +               reduce using rule 242 (AssignmentOperator -> = .)
    -               reduce using rule 242 (AssignmentOperator -> = .)
    ~               reduce using rule 242 (AssignmentOperator -> = .)
    !               reduce using rule 242 (AssignmentOperator -> = .)
    IDENTIFIER      reduce using rule 242 (AssignmentOperator -> = .)
    THIS            reduce using rule 242 (AssignmentOperator -> = .)
    SUPER           reduce using rule 242 (AssignmentOperator -> = .)
    NULL            reduce using rule 242 (AssignmentOperator -> = .)
    (               reduce using rule 242 (AssignmentOperator -> = .)
    FLOAT_LITERAL   reduce using rule 242 (AssignmentOperator -> = .)
    INT_LITERAL     reduce using rule 242 (AssignmentOperator -> = .)
    CHAR_LITERAL    reduce using rule 242 (AssignmentOperator -> = .)
    STRING_LITERAL  reduce using rule 242 (AssignmentOperator -> = .)
    BOOL            reduce using rule 242 (AssignmentOperator -> = .)
    NEW             reduce using rule 242 (AssignmentOperator -> = .)
    BOOLEAN         reduce using rule 242 (AssignmentOperator -> = .)
    CHAR            reduce using rule 242 (AssignmentOperator -> = .)
    BYTE            reduce using rule 242 (AssignmentOperator -> = .)
    SHORT           reduce using rule 242 (AssignmentOperator -> = .)
    INT             reduce using rule 242 (AssignmentOperator -> = .)
    LONG            reduce using rule 242 (AssignmentOperator -> = .)
    FLOAT           reduce using rule 242 (AssignmentOperator -> = .)
    DOUBLE          reduce using rule 242 (AssignmentOperator -> = .)
    VOID            reduce using rule 242 (AssignmentOperator -> = .)


state 241

    (233) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 324
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 242

    (124) JumpStatement -> BREAK ; .

    }               reduce using rule 124 (JumpStatement -> BREAK ; .)
    ;               reduce using rule 124 (JumpStatement -> BREAK ; .)
    IDENTIFIER      reduce using rule 124 (JumpStatement -> BREAK ; .)
    CASE            reduce using rule 124 (JumpStatement -> BREAK ; .)
    DEFAULT         reduce using rule 124 (JumpStatement -> BREAK ; .)
    IF              reduce using rule 124 (JumpStatement -> BREAK ; .)
    SWITCH          reduce using rule 124 (JumpStatement -> BREAK ; .)
    WHILE           reduce using rule 124 (JumpStatement -> BREAK ; .)
    DO              reduce using rule 124 (JumpStatement -> BREAK ; .)
    FOR             reduce using rule 124 (JumpStatement -> BREAK ; .)
    BREAK           reduce using rule 124 (JumpStatement -> BREAK ; .)
    CONTINUE        reduce using rule 124 (JumpStatement -> BREAK ; .)
    RETURN          reduce using rule 124 (JumpStatement -> BREAK ; .)
    THROW           reduce using rule 124 (JumpStatement -> BREAK ; .)
    SYNCHRONIZED    reduce using rule 124 (JumpStatement -> BREAK ; .)
    TRY             reduce using rule 124 (JumpStatement -> BREAK ; .)
    {               reduce using rule 124 (JumpStatement -> BREAK ; .)
    BOOLEAN         reduce using rule 124 (JumpStatement -> BREAK ; .)
    CHAR            reduce using rule 124 (JumpStatement -> BREAK ; .)
    BYTE            reduce using rule 124 (JumpStatement -> BREAK ; .)
    SHORT           reduce using rule 124 (JumpStatement -> BREAK ; .)
    INT             reduce using rule 124 (JumpStatement -> BREAK ; .)
    LONG            reduce using rule 124 (JumpStatement -> BREAK ; .)
    FLOAT           reduce using rule 124 (JumpStatement -> BREAK ; .)
    DOUBLE          reduce using rule 124 (JumpStatement -> BREAK ; .)
    VOID            reduce using rule 124 (JumpStatement -> BREAK ; .)
    OPT_INC_DEC     reduce using rule 124 (JumpStatement -> BREAK ; .)
    +               reduce using rule 124 (JumpStatement -> BREAK ; .)
    -               reduce using rule 124 (JumpStatement -> BREAK ; .)
    ~               reduce using rule 124 (JumpStatement -> BREAK ; .)
    !               reduce using rule 124 (JumpStatement -> BREAK ; .)
    THIS            reduce using rule 124 (JumpStatement -> BREAK ; .)
    SUPER           reduce using rule 124 (JumpStatement -> BREAK ; .)
    NULL            reduce using rule 124 (JumpStatement -> BREAK ; .)
    (               reduce using rule 124 (JumpStatement -> BREAK ; .)
    FLOAT_LITERAL   reduce using rule 124 (JumpStatement -> BREAK ; .)
    INT_LITERAL     reduce using rule 124 (JumpStatement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 124 (JumpStatement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 124 (JumpStatement -> BREAK ; .)
    BOOL            reduce using rule 124 (JumpStatement -> BREAK ; .)
    NEW             reduce using rule 124 (JumpStatement -> BREAK ; .)
    ELSE            reduce using rule 124 (JumpStatement -> BREAK ; .)


state 243

    (123) JumpStatement -> BREAK IDENTIFIER . ;

    ;               shift and go to state 325


state 244

    (112) IterationStatement -> DO Statement . WHILE ( Expression ) ;

    WHILE           shift and go to state 326


state 245

    (33) QualifiedName -> QualifiedName . . IDENTIFIER
    (173) NewAllocationExpression -> QualifiedName . . PlainNewAllocationExpression
    (159) FieldAccess -> QualifiedName . . THIS
    (160) FieldAccess -> QualifiedName . . CLASS
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )

    IDENTIFIER      shift and go to state 71
    THIS            shift and go to state 327
    CLASS           shift and go to state 329
    NEW             shift and go to state 131

    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    PlainNewAllocationExpression   shift and go to state 328

state 246

    (155) ArrayAccess -> QualifiedName [ . Expression ]
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    QualifiedName                  shift and go to state 198
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    LogicalUnaryOperator           shift and go to state 160
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 330
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 247

    (218) ShiftExpression -> ShiftExpression OPT_SOME . AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 331
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 248

    (90) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    }               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ;               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SWITCH          reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THROW           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SYNCHRONIZED    reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    TRY             reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    {               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OPT_INC_DEC     reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    +               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    -               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    !               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    (               reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT_LITERAL   reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT_LITERAL     reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR_LITERAL    reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    STRING_LITERAL  reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOL            reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 90 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 249

    (87) Block -> { LocalVariableDeclarationsAndStatements } .

    ;               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    }               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    STATIC          reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    IDENTIFIER      reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    {               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    PUBLIC          reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    PRIVATE         reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CLASS           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INTERFACE       reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BOOLEAN         reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CHAR            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BYTE            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SHORT           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INT             reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    LONG            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DOUBLE          reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    VOID            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CASE            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DEFAULT         reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    IF              reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SWITCH          reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    WHILE           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    DO              reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FOR             reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BREAK           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CONTINUE        reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    RETURN          reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    THROW           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SYNCHRONIZED    reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    TRY             reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    OPT_INC_DEC     reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    +               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    -               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    ~               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    !               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    THIS            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    SUPER           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    NULL            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    (               reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FLOAT_LITERAL   reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    INT_LITERAL     reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CHAR_LITERAL    reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    STRING_LITERAL  reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    BOOL            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    NEW             reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    ELSE            reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    FINALLY         reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)
    CATCH           reduce using rule 87 (Block -> { LocalVariableDeclarationsAndStatements } .)


state 250

    (157) FieldAccess -> NotJustName . . IDENTIFIER

    IDENTIFIER      shift and go to state 332


state 251

    (198) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    *               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    /               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    %               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    +               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    -               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_SOME        reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    <               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    >               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    INSTANCEOF      reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ?               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ;               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    )               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    :               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ,               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    }               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ]               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    =               reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OPT_EQ          reduce using rule 198 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 252

    (107) SelectionStatement -> IF ( . Expression ) Statement ElseOrNot
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 333
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 253

    (129) JumpStatement -> THROW Expression . ;

    ;               shift and go to state 334


state 254

    (59) VariableDeclarators -> VariableDeclarators , VariableDeclarator .

    ,               reduce using rule 59 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)
    ;               reduce using rule 59 (VariableDeclarators -> VariableDeclarators , VariableDeclarator .)


state 255

    (71) MethodDeclarator -> DeclaratorName ( ) .

    ;               reduce using rule 71 (MethodDeclarator -> DeclaratorName ( ) .)
    {               reduce using rule 71 (MethodDeclarator -> DeclaratorName ( ) .)


state 256

    (70) MethodDeclarator -> DeclaratorName ( ParameterList . )
    (73) ParameterList -> ParameterList . , Parameter

    )               shift and go to state 335
    ,               shift and go to state 262


state 257

    (63) VariableInitializer -> { . }
    (64) VariableInitializer -> { . ArrayInitializers }
    (65) ArrayInitializers -> . VariableInitializer
    (66) ArrayInitializers -> . ArrayInitializers , VariableInitializer
    (67) ArrayInitializers -> . ArrayInitializers ,
    (62) VariableInitializer -> . Expression
    (63) VariableInitializer -> . { }
    (64) VariableInitializer -> . { ArrayInitializers }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               shift and go to state 336
    {               shift and go to state 257
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    VariableInitializer            shift and go to state 296
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ArrayInitializers              shift and go to state 337
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 259
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 258

    (61) VariableDeclarator -> DeclaratorName = VariableInitializer .

    ,               reduce using rule 61 (VariableDeclarator -> DeclaratorName = VariableInitializer .)
    ;               reduce using rule 61 (VariableDeclarator -> DeclaratorName = VariableInitializer .)


state 259

    (62) VariableInitializer -> Expression .

    ,               reduce using rule 62 (VariableInitializer -> Expression .)
    ;               reduce using rule 62 (VariableInitializer -> Expression .)
    }               reduce using rule 62 (VariableInitializer -> Expression .)


state 260

    (74) Parameter -> TypeSpecifier DeclaratorName .
    (76) DeclaratorName -> DeclaratorName . OP_DIM
    (190) OP_DIM -> . [ ]

    )               reduce using rule 74 (Parameter -> TypeSpecifier DeclaratorName .)
    ,               reduce using rule 74 (Parameter -> TypeSpecifier DeclaratorName .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 172

state 261

    (81) ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .

    {               reduce using rule 81 (ConstructorDeclarator -> IDENTIFIER ( ParameterList ) .)


state 262

    (73) ParameterList -> ParameterList , . Parameter
    (74) Parameter -> . TypeSpecifier DeclaratorName
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 46
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 338
    TypeSpecifier                  shift and go to state 179

state 263

    (68) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    ;               reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    }               reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    {               reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INTERFACE       reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 68 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 264

    (161) FieldAccess -> PrimitiveType . CLASS .

    [               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    .               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_INC_DEC     reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    =               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_EQ          reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    *               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    /               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    %               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    +               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    -               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OPT_SOME        reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    <               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    >               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LE           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_GE           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    INSTANCEOF      reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_EQ           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_NE           reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    &               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ^               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    |               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LAND         reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ?               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    OP_LOR          reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    )               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    (               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ;               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    :               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ,               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    }               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)
    ]               reduce using rule 161 (FieldAccess -> PrimitiveType . CLASS .)


state 265

    (229) AndExpression -> AndExpression & EqualityExpression .
    (226) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (227) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    ?               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    ,               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    ;               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    }               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    )               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    :               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    ]               reduce using rule 229 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 205
    OP_NE           shift and go to state 204


state 266

    (208) PrimitiveTypeExpression -> PrimitiveType Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    )               reduce using rule 208 (PrimitiveTypeExpression -> PrimitiveType Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 177

state 267

    (205) CastExpression -> ( ClassTypeExpression ) . CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    CastExpression                 shift and go to state 339
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 268

    (145) ComplexPrimary -> ( Expression ) .
    (206) CastExpression -> ( Expression ) . LogicalUnaryExpression
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    [               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    INSTANCEOF      reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 211
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    MethodCall                     shift and go to state 108
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    ArrayAccess                    shift and go to state 115
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 340
    ArrayAllocationExpression      shift and go to state 117
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 269

    (204) CastExpression -> ( PrimitiveTypeExpression ) . CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 341
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    ClassAllocationExpression      shift and go to state 127
    QualifiedName                  shift and go to state 198
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    ArrayAllocationExpression      shift and go to state 117
    MethodCall                     shift and go to state 108
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 203
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 270

    (209) ClassTypeExpression -> QualifiedName Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    )               reduce using rule 209 (ClassTypeExpression -> QualifiedName Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 177

state 271

    (155) ArrayAccess -> QualifiedName [ . Expression ]
    (190) OP_DIM -> [ . ]
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ]               shift and go to state 176
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    QualifiedName                  shift and go to state 198
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    LogicalUnaryOperator           shift and go to state 160
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 330
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 272

    (235) ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .
    (233) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ?               reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    OP_LOR          reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ;               reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    )               reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ,               reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    }               reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ]               reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    :               reduce using rule 235 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    |               shift and go to state 241


state 273

    (127) JumpStatement -> RETURN Expression ; .

    }               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    ;               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    IDENTIFIER      reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CASE            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    DEFAULT         reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    IF              reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    SWITCH          reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    WHILE           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    DO              reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    FOR             reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BREAK           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CONTINUE        reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    RETURN          reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    THROW           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    SYNCHRONIZED    reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    TRY             reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    {               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BOOLEAN         reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CHAR            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BYTE            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    SHORT           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    INT             reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    LONG            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    FLOAT           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    DOUBLE          reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    VOID            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    OPT_INC_DEC     reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    +               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    -               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    ~               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    !               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    THIS            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    SUPER           reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    NULL            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    (               reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    FLOAT_LITERAL   reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    INT_LITERAL     reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    CHAR_LITERAL    reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    STRING_LITERAL  reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    BOOL            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    NEW             reduce using rule 127 (JumpStatement -> RETURN Expression ; .)
    ELSE            reduce using rule 127 (JumpStatement -> RETURN Expression ; .)


state 274

    (130) GuardingStatement -> SYNCHRONIZED ( Expression . ) Statement

    )               shift and go to state 342


state 275

    (158) FieldAccess -> RealPostfixExpression . IDENTIFIER .

    [               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    .               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    =               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_EQ          reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    *               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    /               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    %               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    +               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    -               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OPT_SOME        reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    <               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    >               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LE           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_GE           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    INSTANCEOF      reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_EQ           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_NE           reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    &               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ^               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    |               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LAND         reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ?               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    OP_LOR          reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    )               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    (               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ;               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    :               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ,               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    }               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)
    ]               reduce using rule 158 (FieldAccess -> RealPostfixExpression . IDENTIFIER .)


state 276

    (206) CastExpression -> ( Expression . ) LogicalUnaryExpression
    (145) ComplexPrimary -> ( Expression . )

    )               shift and go to state 343


state 277

    (227) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (220) RelationalExpression -> RelationalExpression . < ShiftExpression
    (221) RelationalExpression -> RelationalExpression . > ShiftExpression
    (222) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (223) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (224) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ?               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ]               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    :               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    }               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ,               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ;               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    )               reduce using rule 227 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    <               shift and go to state 217
    >               shift and go to state 220
    OP_LE           shift and go to state 218
    OP_GE           shift and go to state 219
    INSTANCEOF      shift and go to state 216


state 278

    (226) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (220) RelationalExpression -> RelationalExpression . < ShiftExpression
    (221) RelationalExpression -> RelationalExpression . > ShiftExpression
    (222) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (223) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression
    (224) RelationalExpression -> RelationalExpression . INSTANCEOF TypeSpecifier

    OP_EQ           reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ?               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ]               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    :               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    }               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ,               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ;               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    )               reduce using rule 226 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    <               shift and go to state 217
    >               shift and go to state 220
    OP_LE           shift and go to state 218
    OP_GE           shift and go to state 219
    INSTANCEOF      shift and go to state 216


state 279

    (211) MultiplicativeExpression -> MultiplicativeExpression * CastExpression .

    *               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    /               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    %               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    +               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    -               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OPT_SOME        reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    <               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    >               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LE           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_GE           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    INSTANCEOF      reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_EQ           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_NE           reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    &               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ^               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    |               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LAND         reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ?               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    OP_LOR          reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ;               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ,               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    )               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    ]               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    :               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)
    }               reduce using rule 211 (MultiplicativeExpression -> MultiplicativeExpression * CastExpression .)


state 280

    (213) MultiplicativeExpression -> MultiplicativeExpression % CastExpression .

    *               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    /               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    %               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    +               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    -               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OPT_SOME        reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    <               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    >               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LE           reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_GE           reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    INSTANCEOF      reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_EQ           reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_NE           reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    &               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ^               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    |               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LAND         reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ?               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    OP_LOR          reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ;               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ,               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    )               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    ]               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    :               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)
    }               reduce using rule 213 (MultiplicativeExpression -> MultiplicativeExpression % CastExpression .)


state 281

    (212) MultiplicativeExpression -> MultiplicativeExpression / CastExpression .

    *               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    /               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    %               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    +               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    -               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OPT_SOME        reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    <               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    >               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LE           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_GE           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    INSTANCEOF      reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_EQ           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_NE           reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    &               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ^               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    |               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LAND         reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ?               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    OP_LOR          reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ;               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ,               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    )               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    ]               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    :               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)
    }               reduce using rule 212 (MultiplicativeExpression -> MultiplicativeExpression / CastExpression .)


state 282

    (121) ExpressionStatements -> ExpressionStatement .

    ,               reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)
    )               reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)
    ;               reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)


state 283

    (117) ForInit -> ; .

    ;               reduce using rule 117 (ForInit -> ; .)
    OPT_INC_DEC     reduce using rule 117 (ForInit -> ; .)
    +               reduce using rule 117 (ForInit -> ; .)
    -               reduce using rule 117 (ForInit -> ; .)
    ~               reduce using rule 117 (ForInit -> ; .)
    !               reduce using rule 117 (ForInit -> ; .)
    IDENTIFIER      reduce using rule 117 (ForInit -> ; .)
    THIS            reduce using rule 117 (ForInit -> ; .)
    SUPER           reduce using rule 117 (ForInit -> ; .)
    NULL            reduce using rule 117 (ForInit -> ; .)
    (               reduce using rule 117 (ForInit -> ; .)
    FLOAT_LITERAL   reduce using rule 117 (ForInit -> ; .)
    INT_LITERAL     reduce using rule 117 (ForInit -> ; .)
    CHAR_LITERAL    reduce using rule 117 (ForInit -> ; .)
    STRING_LITERAL  reduce using rule 117 (ForInit -> ; .)
    BOOL            reduce using rule 117 (ForInit -> ; .)
    NEW             reduce using rule 117 (ForInit -> ; .)
    BOOLEAN         reduce using rule 117 (ForInit -> ; .)
    CHAR            reduce using rule 117 (ForInit -> ; .)
    BYTE            reduce using rule 117 (ForInit -> ; .)
    SHORT           reduce using rule 117 (ForInit -> ; .)
    INT             reduce using rule 117 (ForInit -> ; .)
    LONG            reduce using rule 117 (ForInit -> ; .)
    FLOAT           reduce using rule 117 (ForInit -> ; .)
    DOUBLE          reduce using rule 117 (ForInit -> ; .)
    VOID            reduce using rule 117 (ForInit -> ; .)


state 284

    (113) IterationStatement -> FOR ( ForInit . ForExpr ForIncr ) Statement
    (114) IterationStatement -> FOR ( ForInit . ForExpr ) Statement
    (118) ForExpr -> . Expression ;
    (119) ForExpr -> . ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 345
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ForExpr                        shift and go to state 344
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 346
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 285

    (115) ForInit -> ExpressionStatements . ;
    (122) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    ;               shift and go to state 347
    ,               shift and go to state 348


state 286

    (116) ForInit -> LocalVariableDeclarationStatement .

    ;               reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    OPT_INC_DEC     reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    +               reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    -               reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    !               reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    (               reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT_LITERAL   reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    INT_LITERAL     reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR_LITERAL    reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    STRING_LITERAL  reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    BOOL            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)


state 287

    (132) GuardingStatement -> TRY Block Catches .
    (133) GuardingStatement -> TRY Block Catches . Finally
    (135) Catches -> Catches . Catch
    (139) Finally -> . FINALLY Block
    (136) Catch -> . CatchHeader Block
    (137) CatchHeader -> . CATCH ( TypeSpecifier IDENTIFIER )
    (138) CatchHeader -> . CATCH ( TypeSpecifier )

    }               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    ;               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    IDENTIFIER      reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    CASE            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    DEFAULT         reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    IF              reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    SWITCH          reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    WHILE           reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    DO              reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    FOR             reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    BREAK           reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    CONTINUE        reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    RETURN          reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    THROW           reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    SYNCHRONIZED    reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    TRY             reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    {               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    BOOLEAN         reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    CHAR            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    BYTE            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    SHORT           reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    INT             reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    LONG            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    FLOAT           reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    DOUBLE          reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    VOID            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    OPT_INC_DEC     reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    +               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    -               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    ~               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    !               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    THIS            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    SUPER           reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    NULL            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    (               reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    FLOAT_LITERAL   reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    INT_LITERAL     reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    CHAR_LITERAL    reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    STRING_LITERAL  reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    BOOL            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    NEW             reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    ELSE            reduce using rule 132 (GuardingStatement -> TRY Block Catches .)
    FINALLY         shift and go to state 288
    CATCH           shift and go to state 289

    CatchHeader                    shift and go to state 290
    Finally                        shift and go to state 349
    Catch                          shift and go to state 350

state 288

    (139) Finally -> FINALLY . Block
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 351

state 289

    (137) CatchHeader -> CATCH . ( TypeSpecifier IDENTIFIER )
    (138) CatchHeader -> CATCH . ( TypeSpecifier )

    (               shift and go to state 352


state 290

    (136) Catch -> CatchHeader . Block
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 353

state 291

    (131) GuardingStatement -> TRY Block Finally .

    }               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    ;               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    IDENTIFIER      reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    CASE            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    DEFAULT         reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    IF              reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    SWITCH          reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    WHILE           reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    DO              reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    FOR             reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    BREAK           reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    CONTINUE        reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    RETURN          reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    THROW           reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    SYNCHRONIZED    reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    TRY             reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    {               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    BOOLEAN         reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    CHAR            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    BYTE            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    SHORT           reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    INT             reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    LONG            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    FLOAT           reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    DOUBLE          reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    VOID            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    OPT_INC_DEC     reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    +               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    -               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    ~               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    !               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    THIS            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    SUPER           reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    NULL            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    (               reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    FLOAT_LITERAL   reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    INT_LITERAL     reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    CHAR_LITERAL    reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    STRING_LITERAL  reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    BOOL            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    NEW             reduce using rule 131 (GuardingStatement -> TRY Block Finally .)
    ELSE            reduce using rule 131 (GuardingStatement -> TRY Block Finally .)


state 292

    (134) Catches -> Catch .

    FINALLY         reduce using rule 134 (Catches -> Catch .)
    CATCH           reduce using rule 134 (Catches -> Catch .)
    }               reduce using rule 134 (Catches -> Catch .)
    ;               reduce using rule 134 (Catches -> Catch .)
    IDENTIFIER      reduce using rule 134 (Catches -> Catch .)
    CASE            reduce using rule 134 (Catches -> Catch .)
    DEFAULT         reduce using rule 134 (Catches -> Catch .)
    IF              reduce using rule 134 (Catches -> Catch .)
    SWITCH          reduce using rule 134 (Catches -> Catch .)
    WHILE           reduce using rule 134 (Catches -> Catch .)
    DO              reduce using rule 134 (Catches -> Catch .)
    FOR             reduce using rule 134 (Catches -> Catch .)
    BREAK           reduce using rule 134 (Catches -> Catch .)
    CONTINUE        reduce using rule 134 (Catches -> Catch .)
    RETURN          reduce using rule 134 (Catches -> Catch .)
    THROW           reduce using rule 134 (Catches -> Catch .)
    SYNCHRONIZED    reduce using rule 134 (Catches -> Catch .)
    TRY             reduce using rule 134 (Catches -> Catch .)
    {               reduce using rule 134 (Catches -> Catch .)
    BOOLEAN         reduce using rule 134 (Catches -> Catch .)
    CHAR            reduce using rule 134 (Catches -> Catch .)
    BYTE            reduce using rule 134 (Catches -> Catch .)
    SHORT           reduce using rule 134 (Catches -> Catch .)
    INT             reduce using rule 134 (Catches -> Catch .)
    LONG            reduce using rule 134 (Catches -> Catch .)
    FLOAT           reduce using rule 134 (Catches -> Catch .)
    DOUBLE          reduce using rule 134 (Catches -> Catch .)
    VOID            reduce using rule 134 (Catches -> Catch .)
    OPT_INC_DEC     reduce using rule 134 (Catches -> Catch .)
    +               reduce using rule 134 (Catches -> Catch .)
    -               reduce using rule 134 (Catches -> Catch .)
    ~               reduce using rule 134 (Catches -> Catch .)
    !               reduce using rule 134 (Catches -> Catch .)
    THIS            reduce using rule 134 (Catches -> Catch .)
    SUPER           reduce using rule 134 (Catches -> Catch .)
    NULL            reduce using rule 134 (Catches -> Catch .)
    (               reduce using rule 134 (Catches -> Catch .)
    FLOAT_LITERAL   reduce using rule 134 (Catches -> Catch .)
    INT_LITERAL     reduce using rule 134 (Catches -> Catch .)
    CHAR_LITERAL    reduce using rule 134 (Catches -> Catch .)
    STRING_LITERAL  reduce using rule 134 (Catches -> Catch .)
    BOOL            reduce using rule 134 (Catches -> Catch .)
    NEW             reduce using rule 134 (Catches -> Catch .)
    ELSE            reduce using rule 134 (Catches -> Catch .)


state 293

    (145) ComplexPrimary -> ( Expression . )

    )               shift and go to state 354


state 294

    (176) PlainNewAllocationExpression -> ArrayAllocationExpression { } .

    .               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    =               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_EQ          reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    *               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    /               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    %               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    +               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    -               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OPT_SOME        reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    <               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    >               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LE           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_GE           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    INSTANCEOF      reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_EQ           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_NE           reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    &               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ^               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    |               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LAND         reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ?               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    OP_LOR          reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    }               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ,               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ;               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    )               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    ]               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)
    :               reduce using rule 176 (PlainNewAllocationExpression -> ArrayAllocationExpression { } .)


state 295

    (178) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers . }
    (66) ArrayInitializers -> ArrayInitializers . , VariableInitializer
    (67) ArrayInitializers -> ArrayInitializers . ,

    }               shift and go to state 356
    ,               shift and go to state 355


state 296

    (65) ArrayInitializers -> VariableInitializer .

    }               reduce using rule 65 (ArrayInitializers -> VariableInitializer .)
    ,               reduce using rule 65 (ArrayInitializers -> VariableInitializer .)


state 297

    (162) MethodCall -> MethodAccess ( ArgumentList . )
    (171) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 357
    ,               shift and go to state 358


state 298

    (170) ArgumentList -> Expression .

    )               reduce using rule 170 (ArgumentList -> Expression .)
    ,               reduce using rule 170 (ArgumentList -> Expression .)


state 299

    (163) MethodCall -> MethodAccess ( ) .

    [               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    .               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OPT_INC_DEC     reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    =               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OPT_EQ          reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    *               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    /               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    %               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    +               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    -               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OPT_SOME        reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    <               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    >               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_LE           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_GE           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    INSTANCEOF      reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_EQ           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_NE           reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    &               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ^               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    |               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_LAND         reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ?               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    OP_LOR          reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ;               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    (               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    )               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    }               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ,               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    :               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)
    ]               reduce using rule 163 (MethodCall -> MethodAccess ( ) .)


state 300

    (231) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (229) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ?               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    )               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ,               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ]               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    }               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ;               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    :               reduce using rule 231 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 187


state 301

    (224) RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .

    <               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    >               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LE           reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_GE           reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    INSTANCEOF      reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_EQ           reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_NE           reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    &               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ^               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    |               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LAND         reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ?               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    OP_LOR          reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ,               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ;               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    )               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    :               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    }               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)
    ]               reduce using rule 224 (RelationalExpression -> RelationalExpression INSTANCEOF TypeSpecifier .)


state 302

    (220) RelationalExpression -> RelationalExpression < ShiftExpression .
    (218) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    >               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LE           reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_GE           reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    INSTANCEOF      reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_EQ           reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_NE           reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    &               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ^               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    |               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LAND         reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ?               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OP_LOR          reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ,               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ;               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    )               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    :               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    }               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    ]               reduce using rule 220 (RelationalExpression -> RelationalExpression < ShiftExpression .)
    OPT_SOME        shift and go to state 247


state 303

    (222) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (218) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    >               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    INSTANCEOF      reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ?               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ,               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ;               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    )               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    :               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    }               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ]               reduce using rule 222 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OPT_SOME        shift and go to state 247


state 304

    (223) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (218) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    >               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    INSTANCEOF      reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ?               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ,               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ;               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    )               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    :               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    }               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ]               reduce using rule 223 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OPT_SOME        shift and go to state 247


state 305

    (221) RelationalExpression -> RelationalExpression > ShiftExpression .
    (218) ShiftExpression -> ShiftExpression . OPT_SOME AdditiveExpression

    <               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    >               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LE           reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_GE           reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    INSTANCEOF      reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_EQ           reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_NE           reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    &               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ^               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    |               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LAND         reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ?               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OP_LOR          reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ,               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ;               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    )               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    :               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    }               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    ]               reduce using rule 221 (RelationalExpression -> RelationalExpression > ShiftExpression .)
    OPT_SOME        shift and go to state 247


state 306

    (125) JumpStatement -> CONTINUE IDENTIFIER ; .

    }               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ;               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CASE            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DEFAULT         reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    IF              reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SWITCH          reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    WHILE           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DO              reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FOR             reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BREAK           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CONTINUE        reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    RETURN          reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THROW           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SYNCHRONIZED    reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    TRY             reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    {               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOLEAN         reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BYTE            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SHORT           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT             reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    LONG            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    DOUBLE          reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    VOID            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    +               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    -               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ~               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    !               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    THIS            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    SUPER           reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NULL            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    (               reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    BOOL            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    NEW             reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)
    ELSE            reduce using rule 125 (JumpStatement -> CONTINUE IDENTIFIER ; .)


state 307

    (156) ArrayAccess -> ComplexPrimary [ Expression . ]

    ]               shift and go to state 359


state 308

    (179) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations . }
    (47) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (48) FieldDeclarationOptSemi -> . FieldDeclaration
    (49) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (50) FieldDeclaration -> . FieldVariableDeclaration ;
    (51) FieldDeclaration -> . MethodDeclaration
    (52) FieldDeclaration -> . ConstructorDeclaration
    (53) FieldDeclaration -> . StaticInitializer
    (54) FieldDeclaration -> . NonStaticInitializer
    (55) FieldDeclaration -> . TypeDeclaration
    (56) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (57) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (68) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (69) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (79) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (80) ConstructorDeclaration -> . ConstructorDeclarator Block
    (83) StaticInitializer -> . STATIC Block
    (84) NonStaticInitializer -> . Block
    (34) TypeDeclaration -> . ClassHeader { FieldDeclarations }
    (35) TypeDeclaration -> . ClassHeader { }
    (38) Modifiers -> . Modifier
    (39) Modifiers -> . Modifiers Modifier
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (81) ConstructorDeclarator -> . IDENTIFIER ( ParameterList )
    (82) ConstructorDeclarator -> . IDENTIFIER ( )
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (36) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (37) ClassHeader -> . ClassWord IDENTIFIER
    (40) Modifier -> . PUBLIC
    (41) Modifier -> . PRIVATE
    (42) Modifier -> . STATIC
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (43) ClassWord -> . CLASS
    (44) ClassWord -> . INTERFACE
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    }               shift and go to state 360
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    {               shift and go to state 68
    PUBLIC          shift and go to state 19
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    INTERFACE       shift and go to state 18
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    FieldVariableDeclaration       shift and go to state 43
    TypeDeclaration                shift and go to state 45
    PrimitiveType                  shift and go to state 46
    StaticInitializer              shift and go to state 47
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 57
    ConstructorDeclaration         shift and go to state 42
    Modifier                       shift and go to state 12
    Block                          shift and go to state 59
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 85
    ConstructorDeclarator          shift and go to state 61
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 67

state 309

    (177) PlainNewAllocationExpression -> ClassAllocationExpression { } .

    .               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_INC_DEC     reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    =               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_EQ          reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    *               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    /               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    %               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    +               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    -               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OPT_SOME        reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    <               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    >               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LE           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_GE           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    INSTANCEOF      reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_EQ           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_NE           reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    &               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ^               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    |               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LAND         reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ?               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    OP_LOR          reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    }               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ,               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ;               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    )               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    ]               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)
    :               reduce using rule 177 (PlainNewAllocationExpression -> ClassAllocationExpression { } .)


state 310

    (111) IterationStatement -> WHILE ( Expression . ) Statement

    )               shift and go to state 361


state 311

    (180) ClassAllocationExpression -> NEW TypeName ( . ArgumentList )
    (181) ClassAllocationExpression -> NEW TypeName ( . )
    (170) ArgumentList -> . Expression
    (171) ArgumentList -> . ArgumentList , Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    )               shift and go to state 363
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    ArgumentList                   shift and go to state 362
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 298
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 312

    (182) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (183) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (186) DimExprs -> DimExprs . DimExpr
    (188) Dims -> . OP_DIM
    (189) Dims -> . Dims OP_DIM
    (187) DimExpr -> . [ Expression ]
    (190) OP_DIM -> . [ ]

    {               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    .               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_INC_DEC     reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    =               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_EQ          reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    *               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    /               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    %               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    +               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    -               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OPT_SOME        reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    <               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    >               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    INSTANCEOF      reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ?               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    )               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ,               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ]               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ;               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    :               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    }               reduce using rule 183 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    [               shift and go to state 314

    DimExpr                        shift and go to state 364
    Dims                           shift and go to state 365
    OP_DIM                         shift and go to state 80

state 313

    (184) ArrayAllocationExpression -> NEW TypeName Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    {               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    .               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_INC_DEC     reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    =               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_EQ          reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    *               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    /               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    %               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    +               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    -               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OPT_SOME        reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    <               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    >               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    INSTANCEOF      reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ?               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    )               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ,               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ]               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ;               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    :               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    }               reduce using rule 184 (ArrayAllocationExpression -> NEW TypeName Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 177

state 314

    (187) DimExpr -> [ . Expression ]
    (190) OP_DIM -> [ . ]
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ]               shift and go to state 176
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 366
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 315

    (185) DimExprs -> DimExpr .

    [               reduce using rule 185 (DimExprs -> DimExpr .)
    {               reduce using rule 185 (DimExprs -> DimExpr .)
    .               reduce using rule 185 (DimExprs -> DimExpr .)
    OPT_INC_DEC     reduce using rule 185 (DimExprs -> DimExpr .)
    =               reduce using rule 185 (DimExprs -> DimExpr .)
    OPT_EQ          reduce using rule 185 (DimExprs -> DimExpr .)
    *               reduce using rule 185 (DimExprs -> DimExpr .)
    /               reduce using rule 185 (DimExprs -> DimExpr .)
    %               reduce using rule 185 (DimExprs -> DimExpr .)
    +               reduce using rule 185 (DimExprs -> DimExpr .)
    -               reduce using rule 185 (DimExprs -> DimExpr .)
    OPT_SOME        reduce using rule 185 (DimExprs -> DimExpr .)
    <               reduce using rule 185 (DimExprs -> DimExpr .)
    >               reduce using rule 185 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 185 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 185 (DimExprs -> DimExpr .)
    INSTANCEOF      reduce using rule 185 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 185 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 185 (DimExprs -> DimExpr .)
    &               reduce using rule 185 (DimExprs -> DimExpr .)
    ^               reduce using rule 185 (DimExprs -> DimExpr .)
    |               reduce using rule 185 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 185 (DimExprs -> DimExpr .)
    ?               reduce using rule 185 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 185 (DimExprs -> DimExpr .)
    ;               reduce using rule 185 (DimExprs -> DimExpr .)
    )               reduce using rule 185 (DimExprs -> DimExpr .)
    :               reduce using rule 185 (DimExprs -> DimExpr .)
    ,               reduce using rule 185 (DimExprs -> DimExpr .)
    }               reduce using rule 185 (DimExprs -> DimExpr .)
    ]               reduce using rule 185 (DimExprs -> DimExpr .)


state 316

    (93) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .

    ;               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    OPT_INC_DEC     reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    +               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    -               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    ~               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    !               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    IDENTIFIER      reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    THIS            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SUPER           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    NULL            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    (               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    FLOAT_LITERAL   reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    INT_LITERAL     reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CHAR_LITERAL    reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    STRING_LITERAL  reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BOOL            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    NEW             reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BOOLEAN         reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CHAR            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BYTE            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SHORT           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    INT             reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    LONG            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    FLOAT           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    DOUBLE          reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    VOID            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    }               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CASE            reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    DEFAULT         reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    IF              reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SWITCH          reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    WHILE           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    DO              reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    FOR             reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    BREAK           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    CONTINUE        reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    RETURN          reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    THROW           reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    SYNCHRONIZED    reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    TRY             reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)
    {               reduce using rule 93 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators ; .)


state 317

    (104) LabelStatement -> CASE ConstantExpression : .

    }               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    ;               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    IDENTIFIER      reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    CASE            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    DEFAULT         reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    IF              reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    SWITCH          reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    WHILE           reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    DO              reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    FOR             reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    BREAK           reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    CONTINUE        reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    RETURN          reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    THROW           reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    SYNCHRONIZED    reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    TRY             reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    {               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    BOOLEAN         reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    CHAR            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    BYTE            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    SHORT           reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    INT             reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    LONG            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    FLOAT           reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    DOUBLE          reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    VOID            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    OPT_INC_DEC     reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    +               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    -               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    ~               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    !               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    THIS            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    SUPER           reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    NULL            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    (               reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    FLOAT_LITERAL   reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    INT_LITERAL     reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    CHAR_LITERAL    reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    STRING_LITERAL  reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    BOOL            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    NEW             reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)
    ELSE            reduce using rule 104 (LabelStatement -> CASE ConstantExpression : .)


state 318

    (108) SelectionStatement -> SWITCH ( Expression . ) Block

    )               shift and go to state 367


state 319

    (237) ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .
    (235) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LOR          reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    )               reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    ;               reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    ,               reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    ]               reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    }               reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    :               reduce using rule 237 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LAND         shift and go to state 194


state 320

    (239) ConditionalExpression -> ConditionalOrExpression ? Expression . : ConditionalExpression

    :               shift and go to state 368


state 321

    (215) AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .
    (211) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (212) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (213) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    -               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OPT_SOME        reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    <               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    >               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LE           reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_GE           reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_EQ           reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_NE           reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    &               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ^               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    |               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LAND         reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ?               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    OP_LOR          reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ;               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ,               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    )               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    ]               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    :               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    }               reduce using rule 215 (AdditiveExpression -> AdditiveExpression + MultiplicativeExpression .)
    *               shift and go to state 206
    /               shift and go to state 208
    %               shift and go to state 207


state 322

    (216) AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .
    (211) MultiplicativeExpression -> MultiplicativeExpression . * CastExpression
    (212) MultiplicativeExpression -> MultiplicativeExpression . / CastExpression
    (213) MultiplicativeExpression -> MultiplicativeExpression . % CastExpression

    +               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    -               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OPT_SOME        reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    <               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    >               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LE           reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_GE           reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    INSTANCEOF      reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_EQ           reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_NE           reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    &               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ^               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    |               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LAND         reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ?               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    OP_LOR          reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ;               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ,               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    )               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    ]               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    :               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    }               reduce using rule 216 (AdditiveExpression -> AdditiveExpression - MultiplicativeExpression .)
    *               shift and go to state 206
    /               shift and go to state 208
    %               shift and go to state 207


state 323

    (241) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    )               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ;               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ]               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    }               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    ,               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    :               reduce using rule 241 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 324

    (233) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (231) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ?               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ;               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    )               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ]               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    :               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    }               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ,               reduce using rule 233 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 215


state 325

    (123) JumpStatement -> BREAK IDENTIFIER ; .

    }               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    ;               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CASE            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    DEFAULT         reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    IF              reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    SWITCH          reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    WHILE           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    DO              reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    FOR             reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BREAK           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CONTINUE        reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    RETURN          reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    THROW           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    SYNCHRONIZED    reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    TRY             reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    {               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOLEAN         reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BYTE            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    SHORT           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT             reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    LONG            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    DOUBLE          reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    VOID            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    OPT_INC_DEC     reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    +               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    -               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    ~               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    !               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    THIS            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    SUPER           reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    NULL            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    (               reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    FLOAT_LITERAL   reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    INT_LITERAL     reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    CHAR_LITERAL    reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    BOOL            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    NEW             reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)
    ELSE            reduce using rule 123 (JumpStatement -> BREAK IDENTIFIER ; .)


state 326

    (112) IterationStatement -> DO Statement WHILE . ( Expression ) ;

    (               shift and go to state 369


state 327

    (159) FieldAccess -> QualifiedName . THIS .

    [               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    .               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OPT_INC_DEC     reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    =               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OPT_EQ          reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    *               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    /               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    %               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    +               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    -               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OPT_SOME        reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    <               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    >               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_LE           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_GE           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    INSTANCEOF      reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_EQ           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_NE           reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    &               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ^               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    |               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_LAND         reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ?               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    OP_LOR          reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    )               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    (               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ;               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    :               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ,               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    }               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)
    ]               reduce using rule 159 (FieldAccess -> QualifiedName . THIS .)


state 328

    (173) NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .

    .               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_INC_DEC     reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    =               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_EQ          reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    *               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    /               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    %               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    +               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    -               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OPT_SOME        reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    <               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    >               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LE           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_GE           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    INSTANCEOF      reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_NE           reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    &               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ^               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    |               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ?               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ;               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    )               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ,               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    }               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    ]               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)
    :               reduce using rule 173 (NewAllocationExpression -> QualifiedName . PlainNewAllocationExpression .)


state 329

    (160) FieldAccess -> QualifiedName . CLASS .

    [               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    .               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OPT_INC_DEC     reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    =               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OPT_EQ          reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    *               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    /               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    %               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    +               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    -               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OPT_SOME        reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    <               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    >               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_LE           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_GE           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    INSTANCEOF      reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_EQ           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_NE           reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    &               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ^               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    |               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_LAND         reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ?               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    OP_LOR          reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    )               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    (               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ;               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    :               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ,               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    }               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)
    ]               reduce using rule 160 (FieldAccess -> QualifiedName . CLASS .)


state 330

    (155) ArrayAccess -> QualifiedName [ Expression . ]

    ]               shift and go to state 370


state 331

    (218) ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .
    (215) AdditiveExpression -> AdditiveExpression . + MultiplicativeExpression
    (216) AdditiveExpression -> AdditiveExpression . - MultiplicativeExpression

    OPT_SOME        reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    <               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    >               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LE           reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_GE           reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    INSTANCEOF      reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_EQ           reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_NE           reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    &               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ^               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    |               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LAND         reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ?               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    OP_LOR          reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    }               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ,               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ;               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    )               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    :               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    ]               reduce using rule 218 (ShiftExpression -> ShiftExpression OPT_SOME AdditiveExpression .)
    +               shift and go to state 236
    -               shift and go to state 237


state 332

    (157) FieldAccess -> NotJustName . IDENTIFIER .

    [               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    .               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_INC_DEC     reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    =               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_EQ          reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    *               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    /               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    %               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    +               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    -               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OPT_SOME        reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    <               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    >               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LE           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_GE           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    INSTANCEOF      reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_EQ           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_NE           reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    &               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ^               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    |               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LAND         reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ?               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    OP_LOR          reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    )               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    (               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ;               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    :               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ,               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    }               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)
    ]               reduce using rule 157 (FieldAccess -> NotJustName . IDENTIFIER .)


state 333

    (107) SelectionStatement -> IF ( Expression . ) Statement ElseOrNot

    )               shift and go to state 371


state 334

    (129) JumpStatement -> THROW Expression ; .

    }               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    ;               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    IDENTIFIER      reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CASE            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    DEFAULT         reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    IF              reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    SWITCH          reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    WHILE           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    DO              reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    FOR             reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BREAK           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CONTINUE        reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    RETURN          reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    THROW           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    SYNCHRONIZED    reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    TRY             reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    {               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BOOLEAN         reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CHAR            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BYTE            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    SHORT           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    INT             reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    LONG            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    FLOAT           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    DOUBLE          reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    VOID            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    OPT_INC_DEC     reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    +               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    -               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    ~               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    !               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    THIS            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    SUPER           reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    NULL            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    (               reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    FLOAT_LITERAL   reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    INT_LITERAL     reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    CHAR_LITERAL    reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    STRING_LITERAL  reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    BOOL            reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    NEW             reduce using rule 129 (JumpStatement -> THROW Expression ; .)
    ELSE            reduce using rule 129 (JumpStatement -> THROW Expression ; .)


state 335

    (70) MethodDeclarator -> DeclaratorName ( ParameterList ) .

    ;               reduce using rule 70 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)
    {               reduce using rule 70 (MethodDeclarator -> DeclaratorName ( ParameterList ) .)


state 336

    (63) VariableInitializer -> { } .

    ,               reduce using rule 63 (VariableInitializer -> { } .)
    ;               reduce using rule 63 (VariableInitializer -> { } .)
    }               reduce using rule 63 (VariableInitializer -> { } .)


state 337

    (64) VariableInitializer -> { ArrayInitializers . }
    (66) ArrayInitializers -> ArrayInitializers . , VariableInitializer
    (67) ArrayInitializers -> ArrayInitializers . ,

    }               shift and go to state 372
    ,               shift and go to state 355


state 338

    (73) ParameterList -> ParameterList , Parameter .

    )               reduce using rule 73 (ParameterList -> ParameterList , Parameter .)
    ,               reduce using rule 73 (ParameterList -> ParameterList , Parameter .)


state 339

    (205) CastExpression -> ( ClassTypeExpression ) CastExpression .

    *               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    /               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    %               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    +               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    -               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OPT_SOME        reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    <               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    >               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_LE           reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_GE           reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    INSTANCEOF      reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_EQ           reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_NE           reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    &               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ^               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    |               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_LAND         reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ?               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OP_LOR          reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    }               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ,               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ;               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    )               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    :               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    ]               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    =               reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)
    OPT_EQ          reduce using rule 205 (CastExpression -> ( ClassTypeExpression ) CastExpression .)


state 340

    (206) CastExpression -> ( Expression ) LogicalUnaryExpression .

    *               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    /               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    %               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    +               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    -               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OPT_SOME        reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    <               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    >               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_LE           reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_GE           reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    INSTANCEOF      reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_EQ           reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_NE           reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    &               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ^               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    |               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_LAND         reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ?               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OP_LOR          reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    }               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ,               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ;               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    )               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    :               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    ]               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    =               reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)
    OPT_EQ          reduce using rule 206 (CastExpression -> ( Expression ) LogicalUnaryExpression .)


state 341

    (204) CastExpression -> ( PrimitiveTypeExpression ) CastExpression .

    *               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    /               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    %               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    +               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    -               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OPT_SOME        reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    <               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    >               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_LE           reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_GE           reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    INSTANCEOF      reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_EQ           reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_NE           reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    &               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ^               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    |               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_LAND         reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ?               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OP_LOR          reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    }               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ,               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ;               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    )               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    :               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    ]               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    =               reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)
    OPT_EQ          reduce using rule 204 (CastExpression -> ( PrimitiveTypeExpression ) CastExpression .)


state 342

    (130) GuardingStatement -> SYNCHRONIZED ( Expression ) . Statement
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    ExpressionStatement            shift and go to state 89
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 373
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    GuardingStatement              shift and go to state 144
    ConditionalOrExpression        shift and go to state 137
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 343

    (206) CastExpression -> ( Expression ) . LogicalUnaryExpression
    (145) ComplexPrimary -> ( Expression ) .
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    [               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    INSTANCEOF      reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 211
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    MethodCall                     shift and go to state 108
    ClassAllocationExpression      shift and go to state 127
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    ArrayAccess                    shift and go to state 115
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 340
    ArrayAllocationExpression      shift and go to state 117
    FieldAccess                    shift and go to state 147
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 344

    (113) IterationStatement -> FOR ( ForInit ForExpr . ForIncr ) Statement
    (114) IterationStatement -> FOR ( ForInit ForExpr . ) Statement
    (120) ForIncr -> . ExpressionStatements
    (121) ExpressionStatements -> . ExpressionStatement
    (122) ExpressionStatements -> . ExpressionStatements , ExpressionStatement
    (106) ExpressionStatement -> . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    )               shift and go to state 376
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ExpressionStatement            shift and go to state 282
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExpressionStatements           shift and go to state 375
    ConditionalAndExpression       shift and go to state 97
    ForIncr                        shift and go to state 374
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 345

    (119) ForExpr -> ; .

    )               reduce using rule 119 (ForExpr -> ; .)
    OPT_INC_DEC     reduce using rule 119 (ForExpr -> ; .)
    +               reduce using rule 119 (ForExpr -> ; .)
    -               reduce using rule 119 (ForExpr -> ; .)
    ~               reduce using rule 119 (ForExpr -> ; .)
    !               reduce using rule 119 (ForExpr -> ; .)
    IDENTIFIER      reduce using rule 119 (ForExpr -> ; .)
    THIS            reduce using rule 119 (ForExpr -> ; .)
    SUPER           reduce using rule 119 (ForExpr -> ; .)
    NULL            reduce using rule 119 (ForExpr -> ; .)
    (               reduce using rule 119 (ForExpr -> ; .)
    FLOAT_LITERAL   reduce using rule 119 (ForExpr -> ; .)
    INT_LITERAL     reduce using rule 119 (ForExpr -> ; .)
    CHAR_LITERAL    reduce using rule 119 (ForExpr -> ; .)
    STRING_LITERAL  reduce using rule 119 (ForExpr -> ; .)
    BOOL            reduce using rule 119 (ForExpr -> ; .)
    NEW             reduce using rule 119 (ForExpr -> ; .)
    BOOLEAN         reduce using rule 119 (ForExpr -> ; .)
    CHAR            reduce using rule 119 (ForExpr -> ; .)
    BYTE            reduce using rule 119 (ForExpr -> ; .)
    SHORT           reduce using rule 119 (ForExpr -> ; .)
    INT             reduce using rule 119 (ForExpr -> ; .)
    LONG            reduce using rule 119 (ForExpr -> ; .)
    FLOAT           reduce using rule 119 (ForExpr -> ; .)
    DOUBLE          reduce using rule 119 (ForExpr -> ; .)
    VOID            reduce using rule 119 (ForExpr -> ; .)


state 346

    (118) ForExpr -> Expression . ;

    ;               shift and go to state 377


state 347

    (115) ForInit -> ExpressionStatements ; .

    ;               reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    OPT_INC_DEC     reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    +               reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    -               reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    ~               reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    !               reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    IDENTIFIER      reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    THIS            reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    SUPER           reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    NULL            reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    (               reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    FLOAT_LITERAL   reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    INT_LITERAL     reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    CHAR_LITERAL    reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    STRING_LITERAL  reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    BOOL            reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    NEW             reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    BOOLEAN         reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    CHAR            reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    BYTE            reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    SHORT           reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    INT             reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    LONG            reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    FLOAT           reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    DOUBLE          reduce using rule 115 (ForInit -> ExpressionStatements ; .)
    VOID            reduce using rule 115 (ForInit -> ExpressionStatements ; .)


state 348

    (122) ExpressionStatements -> ExpressionStatements , . ExpressionStatement
    (106) ExpressionStatement -> . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ExpressionStatement            shift and go to state 378
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 139
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 349

    (133) GuardingStatement -> TRY Block Catches Finally .

    }               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    ;               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    IDENTIFIER      reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    CASE            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    DEFAULT         reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    IF              reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    SWITCH          reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    WHILE           reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    DO              reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    FOR             reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    BREAK           reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    CONTINUE        reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    RETURN          reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    THROW           reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    SYNCHRONIZED    reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    TRY             reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    {               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    BOOLEAN         reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    CHAR            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    BYTE            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    SHORT           reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    INT             reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    LONG            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    FLOAT           reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    DOUBLE          reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    VOID            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    OPT_INC_DEC     reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    +               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    -               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    ~               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    !               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    THIS            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    SUPER           reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    NULL            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    (               reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    FLOAT_LITERAL   reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    INT_LITERAL     reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    CHAR_LITERAL    reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    STRING_LITERAL  reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    BOOL            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    NEW             reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)
    ELSE            reduce using rule 133 (GuardingStatement -> TRY Block Catches Finally .)


state 350

    (135) Catches -> Catches Catch .

    FINALLY         reduce using rule 135 (Catches -> Catches Catch .)
    CATCH           reduce using rule 135 (Catches -> Catches Catch .)
    }               reduce using rule 135 (Catches -> Catches Catch .)
    ;               reduce using rule 135 (Catches -> Catches Catch .)
    IDENTIFIER      reduce using rule 135 (Catches -> Catches Catch .)
    CASE            reduce using rule 135 (Catches -> Catches Catch .)
    DEFAULT         reduce using rule 135 (Catches -> Catches Catch .)
    IF              reduce using rule 135 (Catches -> Catches Catch .)
    SWITCH          reduce using rule 135 (Catches -> Catches Catch .)
    WHILE           reduce using rule 135 (Catches -> Catches Catch .)
    DO              reduce using rule 135 (Catches -> Catches Catch .)
    FOR             reduce using rule 135 (Catches -> Catches Catch .)
    BREAK           reduce using rule 135 (Catches -> Catches Catch .)
    CONTINUE        reduce using rule 135 (Catches -> Catches Catch .)
    RETURN          reduce using rule 135 (Catches -> Catches Catch .)
    THROW           reduce using rule 135 (Catches -> Catches Catch .)
    SYNCHRONIZED    reduce using rule 135 (Catches -> Catches Catch .)
    TRY             reduce using rule 135 (Catches -> Catches Catch .)
    {               reduce using rule 135 (Catches -> Catches Catch .)
    BOOLEAN         reduce using rule 135 (Catches -> Catches Catch .)
    CHAR            reduce using rule 135 (Catches -> Catches Catch .)
    BYTE            reduce using rule 135 (Catches -> Catches Catch .)
    SHORT           reduce using rule 135 (Catches -> Catches Catch .)
    INT             reduce using rule 135 (Catches -> Catches Catch .)
    LONG            reduce using rule 135 (Catches -> Catches Catch .)
    FLOAT           reduce using rule 135 (Catches -> Catches Catch .)
    DOUBLE          reduce using rule 135 (Catches -> Catches Catch .)
    VOID            reduce using rule 135 (Catches -> Catches Catch .)
    OPT_INC_DEC     reduce using rule 135 (Catches -> Catches Catch .)
    +               reduce using rule 135 (Catches -> Catches Catch .)
    -               reduce using rule 135 (Catches -> Catches Catch .)
    ~               reduce using rule 135 (Catches -> Catches Catch .)
    !               reduce using rule 135 (Catches -> Catches Catch .)
    THIS            reduce using rule 135 (Catches -> Catches Catch .)
    SUPER           reduce using rule 135 (Catches -> Catches Catch .)
    NULL            reduce using rule 135 (Catches -> Catches Catch .)
    (               reduce using rule 135 (Catches -> Catches Catch .)
    FLOAT_LITERAL   reduce using rule 135 (Catches -> Catches Catch .)
    INT_LITERAL     reduce using rule 135 (Catches -> Catches Catch .)
    CHAR_LITERAL    reduce using rule 135 (Catches -> Catches Catch .)
    STRING_LITERAL  reduce using rule 135 (Catches -> Catches Catch .)
    BOOL            reduce using rule 135 (Catches -> Catches Catch .)
    NEW             reduce using rule 135 (Catches -> Catches Catch .)
    ELSE            reduce using rule 135 (Catches -> Catches Catch .)


state 351

    (139) Finally -> FINALLY Block .

    }               reduce using rule 139 (Finally -> FINALLY Block .)
    ;               reduce using rule 139 (Finally -> FINALLY Block .)
    IDENTIFIER      reduce using rule 139 (Finally -> FINALLY Block .)
    CASE            reduce using rule 139 (Finally -> FINALLY Block .)
    DEFAULT         reduce using rule 139 (Finally -> FINALLY Block .)
    IF              reduce using rule 139 (Finally -> FINALLY Block .)
    SWITCH          reduce using rule 139 (Finally -> FINALLY Block .)
    WHILE           reduce using rule 139 (Finally -> FINALLY Block .)
    DO              reduce using rule 139 (Finally -> FINALLY Block .)
    FOR             reduce using rule 139 (Finally -> FINALLY Block .)
    BREAK           reduce using rule 139 (Finally -> FINALLY Block .)
    CONTINUE        reduce using rule 139 (Finally -> FINALLY Block .)
    RETURN          reduce using rule 139 (Finally -> FINALLY Block .)
    THROW           reduce using rule 139 (Finally -> FINALLY Block .)
    SYNCHRONIZED    reduce using rule 139 (Finally -> FINALLY Block .)
    TRY             reduce using rule 139 (Finally -> FINALLY Block .)
    {               reduce using rule 139 (Finally -> FINALLY Block .)
    BOOLEAN         reduce using rule 139 (Finally -> FINALLY Block .)
    CHAR            reduce using rule 139 (Finally -> FINALLY Block .)
    BYTE            reduce using rule 139 (Finally -> FINALLY Block .)
    SHORT           reduce using rule 139 (Finally -> FINALLY Block .)
    INT             reduce using rule 139 (Finally -> FINALLY Block .)
    LONG            reduce using rule 139 (Finally -> FINALLY Block .)
    FLOAT           reduce using rule 139 (Finally -> FINALLY Block .)
    DOUBLE          reduce using rule 139 (Finally -> FINALLY Block .)
    VOID            reduce using rule 139 (Finally -> FINALLY Block .)
    OPT_INC_DEC     reduce using rule 139 (Finally -> FINALLY Block .)
    +               reduce using rule 139 (Finally -> FINALLY Block .)
    -               reduce using rule 139 (Finally -> FINALLY Block .)
    ~               reduce using rule 139 (Finally -> FINALLY Block .)
    !               reduce using rule 139 (Finally -> FINALLY Block .)
    THIS            reduce using rule 139 (Finally -> FINALLY Block .)
    SUPER           reduce using rule 139 (Finally -> FINALLY Block .)
    NULL            reduce using rule 139 (Finally -> FINALLY Block .)
    (               reduce using rule 139 (Finally -> FINALLY Block .)
    FLOAT_LITERAL   reduce using rule 139 (Finally -> FINALLY Block .)
    INT_LITERAL     reduce using rule 139 (Finally -> FINALLY Block .)
    CHAR_LITERAL    reduce using rule 139 (Finally -> FINALLY Block .)
    STRING_LITERAL  reduce using rule 139 (Finally -> FINALLY Block .)
    BOOL            reduce using rule 139 (Finally -> FINALLY Block .)
    NEW             reduce using rule 139 (Finally -> FINALLY Block .)
    ELSE            reduce using rule 139 (Finally -> FINALLY Block .)


state 352

    (137) CatchHeader -> CATCH ( . TypeSpecifier IDENTIFIER )
    (138) CatchHeader -> CATCH ( . TypeSpecifier )
    (2) TypeSpecifier -> . TypeName
    (3) TypeSpecifier -> . TypeName Dims
    (4) TypeName -> . PrimitiveType
    (5) TypeName -> . QualifiedName
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER

    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44
    IDENTIFIER      shift and go to state 23

    TypeName                       shift and go to state 53
    QualifiedName                  shift and go to state 52
    TypeSpecifier                  shift and go to state 379
    PrimitiveType                  shift and go to state 46

state 353

    (136) Catch -> CatchHeader Block .

    FINALLY         reduce using rule 136 (Catch -> CatchHeader Block .)
    CATCH           reduce using rule 136 (Catch -> CatchHeader Block .)
    }               reduce using rule 136 (Catch -> CatchHeader Block .)
    ;               reduce using rule 136 (Catch -> CatchHeader Block .)
    IDENTIFIER      reduce using rule 136 (Catch -> CatchHeader Block .)
    CASE            reduce using rule 136 (Catch -> CatchHeader Block .)
    DEFAULT         reduce using rule 136 (Catch -> CatchHeader Block .)
    IF              reduce using rule 136 (Catch -> CatchHeader Block .)
    SWITCH          reduce using rule 136 (Catch -> CatchHeader Block .)
    WHILE           reduce using rule 136 (Catch -> CatchHeader Block .)
    DO              reduce using rule 136 (Catch -> CatchHeader Block .)
    FOR             reduce using rule 136 (Catch -> CatchHeader Block .)
    BREAK           reduce using rule 136 (Catch -> CatchHeader Block .)
    CONTINUE        reduce using rule 136 (Catch -> CatchHeader Block .)
    RETURN          reduce using rule 136 (Catch -> CatchHeader Block .)
    THROW           reduce using rule 136 (Catch -> CatchHeader Block .)
    SYNCHRONIZED    reduce using rule 136 (Catch -> CatchHeader Block .)
    TRY             reduce using rule 136 (Catch -> CatchHeader Block .)
    {               reduce using rule 136 (Catch -> CatchHeader Block .)
    BOOLEAN         reduce using rule 136 (Catch -> CatchHeader Block .)
    CHAR            reduce using rule 136 (Catch -> CatchHeader Block .)
    BYTE            reduce using rule 136 (Catch -> CatchHeader Block .)
    SHORT           reduce using rule 136 (Catch -> CatchHeader Block .)
    INT             reduce using rule 136 (Catch -> CatchHeader Block .)
    LONG            reduce using rule 136 (Catch -> CatchHeader Block .)
    FLOAT           reduce using rule 136 (Catch -> CatchHeader Block .)
    DOUBLE          reduce using rule 136 (Catch -> CatchHeader Block .)
    VOID            reduce using rule 136 (Catch -> CatchHeader Block .)
    OPT_INC_DEC     reduce using rule 136 (Catch -> CatchHeader Block .)
    +               reduce using rule 136 (Catch -> CatchHeader Block .)
    -               reduce using rule 136 (Catch -> CatchHeader Block .)
    ~               reduce using rule 136 (Catch -> CatchHeader Block .)
    !               reduce using rule 136 (Catch -> CatchHeader Block .)
    THIS            reduce using rule 136 (Catch -> CatchHeader Block .)
    SUPER           reduce using rule 136 (Catch -> CatchHeader Block .)
    NULL            reduce using rule 136 (Catch -> CatchHeader Block .)
    (               reduce using rule 136 (Catch -> CatchHeader Block .)
    FLOAT_LITERAL   reduce using rule 136 (Catch -> CatchHeader Block .)
    INT_LITERAL     reduce using rule 136 (Catch -> CatchHeader Block .)
    CHAR_LITERAL    reduce using rule 136 (Catch -> CatchHeader Block .)
    STRING_LITERAL  reduce using rule 136 (Catch -> CatchHeader Block .)
    BOOL            reduce using rule 136 (Catch -> CatchHeader Block .)
    NEW             reduce using rule 136 (Catch -> CatchHeader Block .)
    ELSE            reduce using rule 136 (Catch -> CatchHeader Block .)


state 354

    (145) ComplexPrimary -> ( Expression ) .

    [               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    .               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_INC_DEC     reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    =               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_EQ          reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    *               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    /               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    %               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    +               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    -               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OPT_SOME        reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    <               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    >               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_GE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    INSTANCEOF      reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_EQ           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_NE           reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    &               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ^               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    |               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LAND         reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ?               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    OP_LOR          reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ;               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    )               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    :               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ,               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    }               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)
    ]               reduce using rule 145 (ComplexPrimary -> ( Expression ) .)


state 355

    (66) ArrayInitializers -> ArrayInitializers , . VariableInitializer
    (67) ArrayInitializers -> ArrayInitializers , .
    (62) VariableInitializer -> . Expression
    (63) VariableInitializer -> . { }
    (64) VariableInitializer -> . { ArrayInitializers }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    }               reduce using rule 67 (ArrayInitializers -> ArrayInitializers , .)
    ,               reduce using rule 67 (ArrayInitializers -> ArrayInitializers , .)
    {               shift and go to state 257
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    VariableInitializer            shift and go to state 380
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 259
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 356

    (178) PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .

    .               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_INC_DEC     reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    =               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_EQ          reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    *               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    /               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    %               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    +               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    -               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OPT_SOME        reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    <               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    >               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LE           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_GE           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    INSTANCEOF      reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_EQ           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_NE           reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    &               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ^               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    |               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LAND         reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ?               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    OP_LOR          reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    }               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ,               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ;               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    )               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    ]               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)
    :               reduce using rule 178 (PlainNewAllocationExpression -> ArrayAllocationExpression { ArrayInitializers } .)


state 357

    (162) MethodCall -> MethodAccess ( ArgumentList ) .

    [               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    .               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    =               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_EQ          reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    *               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    /               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    %               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    +               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    -               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OPT_SOME        reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    <               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    >               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LE           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_GE           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    INSTANCEOF      reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_EQ           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_NE           reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    &               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ^               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    |               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LAND         reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ?               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    OP_LOR          reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ;               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    (               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    )               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    }               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ,               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    :               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)
    ]               reduce using rule 162 (MethodCall -> MethodAccess ( ArgumentList ) .)


state 358

    (171) ArgumentList -> ArgumentList , . Expression
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 381
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 359

    (156) ArrayAccess -> ComplexPrimary [ Expression ] .

    [               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    .               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_INC_DEC     reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    *               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    /               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    %               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    +               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    -               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_SOME        reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    <               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    >               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LE           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_GE           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    INSTANCEOF      reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_EQ           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_NE           reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    &               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ^               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    |               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LAND         reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ?               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OP_LOR          reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ;               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    )               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    :               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ,               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    }               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    ]               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    (               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    =               reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)
    OPT_EQ          reduce using rule 156 (ArrayAccess -> ComplexPrimary [ Expression ] .)


state 360

    (179) PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .

    .               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_INC_DEC     reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    =               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_EQ          reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    *               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    /               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    %               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    +               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    -               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OPT_SOME        reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    <               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    >               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LE           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_GE           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    INSTANCEOF      reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_EQ           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_NE           reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    &               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ^               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    |               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LAND         reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ?               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    OP_LOR          reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    }               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ,               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ;               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    )               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    ]               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)
    :               reduce using rule 179 (PlainNewAllocationExpression -> ClassAllocationExpression { FieldDeclarations } .)


state 361

    (111) IterationStatement -> WHILE ( Expression ) . Statement
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    ExpressionStatement            shift and go to state 89
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 382
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    GuardingStatement              shift and go to state 144
    ConditionalOrExpression        shift and go to state 137
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 362

    (180) ClassAllocationExpression -> NEW TypeName ( ArgumentList . )
    (171) ArgumentList -> ArgumentList . , Expression

    )               shift and go to state 383
    ,               shift and go to state 358


state 363

    (181) ClassAllocationExpression -> NEW TypeName ( ) .

    {               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    .               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_INC_DEC     reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    =               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_EQ          reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    *               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    /               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    %               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    +               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    -               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OPT_SOME        reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    <               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    >               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LE           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_GE           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    INSTANCEOF      reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_EQ           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_NE           reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    &               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ^               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    |               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LAND         reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ?               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    OP_LOR          reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ;               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ,               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    )               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    :               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    }               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)
    ]               reduce using rule 181 (ClassAllocationExpression -> NEW TypeName ( ) .)


state 364

    (186) DimExprs -> DimExprs DimExpr .

    [               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    {               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    .               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OPT_INC_DEC     reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    =               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OPT_EQ          reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    *               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    /               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    %               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    +               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    -               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OPT_SOME        reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    <               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    >               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    INSTANCEOF      reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ?               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ;               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    )               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    :               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ,               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    }               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)
    ]               reduce using rule 186 (DimExprs -> DimExprs DimExpr .)


state 365

    (182) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (189) Dims -> Dims . OP_DIM
    (190) OP_DIM -> . [ ]

    {               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    .               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_INC_DEC     reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    =               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_EQ          reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    *               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    /               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    %               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    +               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    -               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OPT_SOME        reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    <               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    >               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    INSTANCEOF      reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ?               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    )               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ,               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ]               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ;               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    :               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    }               reduce using rule 182 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    [               shift and go to state 79

    OP_DIM                         shift and go to state 177

state 366

    (187) DimExpr -> [ Expression . ]

    ]               shift and go to state 384


state 367

    (108) SelectionStatement -> SWITCH ( Expression ) . Block
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }

    {               shift and go to state 68

    Block                          shift and go to state 385

state 368

    (239) ConditionalExpression -> ConditionalOrExpression ? Expression : . ConditionalExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName

    (               shift and go to state 202
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    CastExpression                 shift and go to state 151
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    ArithmeticUnaryOperator        shift and go to state 103
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    PrimaryExpression              shift and go to state 134
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ArrayAllocationExpression      shift and go to state 117
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    AdditiveExpression             shift and go to state 140
    ConditionalExpression          shift and go to state 386
    UnaryExpression                shift and go to state 203
    InclusiveOrExpression          shift and go to state 143
    FieldAccess                    shift and go to state 147
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    MethodAccess                   shift and go to state 118
    SpecialName                    shift and go to state 124

state 369

    (112) IterationStatement -> DO Statement WHILE ( . Expression ) ;
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    IDENTIFIER      shift and go to state 23
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    ComplexPrimary                 shift and go to state 125
    PrimaryExpression              shift and go to state 134
    PrimitiveType                  shift and go to state 195
    RealPostfixExpression          shift and go to state 102
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    ConditionalOrExpression        shift and go to state 137
    ShiftExpression                shift and go to state 157
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    LogicalUnaryExpression         shift and go to state 161
    Expression                     shift and go to state 387
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    UnaryExpression                shift and go to state 142
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    SpecialName                    shift and go to state 124

state 370

    (155) ArrayAccess -> QualifiedName [ Expression ] .

    [               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    .               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_INC_DEC     reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    *               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    /               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    %               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    +               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    -               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_SOME        reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    <               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    >               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LE           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_GE           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    INSTANCEOF      reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_EQ           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_NE           reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    &               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ^               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    |               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LAND         reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ?               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OP_LOR          reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ;               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    )               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    :               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ,               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    }               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    ]               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    (               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    =               reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)
    OPT_EQ          reduce using rule 155 (ArrayAccess -> QualifiedName [ Expression ] .)


state 371

    (107) SelectionStatement -> IF ( Expression ) . Statement ElseOrNot
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 388
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    GuardingStatement              shift and go to state 144
    ConditionalOrExpression        shift and go to state 137
    ExpressionStatement            shift and go to state 89
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 372

    (64) VariableInitializer -> { ArrayInitializers } .

    ,               reduce using rule 64 (VariableInitializer -> { ArrayInitializers } .)
    ;               reduce using rule 64 (VariableInitializer -> { ArrayInitializers } .)
    }               reduce using rule 64 (VariableInitializer -> { ArrayInitializers } .)


state 373

    (130) GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .

    }               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    ;               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    IDENTIFIER      reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CASE            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    DEFAULT         reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    IF              reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SWITCH          reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    WHILE           reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    DO              reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    FOR             reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BREAK           reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CONTINUE        reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    RETURN          reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    THROW           reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SYNCHRONIZED    reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    TRY             reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    {               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BOOLEAN         reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CHAR            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BYTE            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SHORT           reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    INT             reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    LONG            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    FLOAT           reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    DOUBLE          reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    VOID            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    OPT_INC_DEC     reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    +               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    -               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    ~               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    !               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    THIS            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    SUPER           reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    NULL            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    (               reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    FLOAT_LITERAL   reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    INT_LITERAL     reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    CHAR_LITERAL    reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    STRING_LITERAL  reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    BOOL            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    NEW             reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)
    ELSE            reduce using rule 130 (GuardingStatement -> SYNCHRONIZED ( Expression ) Statement .)


state 374

    (113) IterationStatement -> FOR ( ForInit ForExpr ForIncr . ) Statement

    )               shift and go to state 389


state 375

    (120) ForIncr -> ExpressionStatements .
    (122) ExpressionStatements -> ExpressionStatements . , ExpressionStatement

    )               reduce using rule 120 (ForIncr -> ExpressionStatements .)
    ,               shift and go to state 348


state 376

    (114) IterationStatement -> FOR ( ForInit ForExpr ) . Statement
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    ExpressionStatement            shift and go to state 89
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 390
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    GuardingStatement              shift and go to state 144
    ConditionalOrExpression        shift and go to state 137
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 377

    (118) ForExpr -> Expression ; .

    )               reduce using rule 118 (ForExpr -> Expression ; .)
    OPT_INC_DEC     reduce using rule 118 (ForExpr -> Expression ; .)
    +               reduce using rule 118 (ForExpr -> Expression ; .)
    -               reduce using rule 118 (ForExpr -> Expression ; .)
    ~               reduce using rule 118 (ForExpr -> Expression ; .)
    !               reduce using rule 118 (ForExpr -> Expression ; .)
    IDENTIFIER      reduce using rule 118 (ForExpr -> Expression ; .)
    THIS            reduce using rule 118 (ForExpr -> Expression ; .)
    SUPER           reduce using rule 118 (ForExpr -> Expression ; .)
    NULL            reduce using rule 118 (ForExpr -> Expression ; .)
    (               reduce using rule 118 (ForExpr -> Expression ; .)
    FLOAT_LITERAL   reduce using rule 118 (ForExpr -> Expression ; .)
    INT_LITERAL     reduce using rule 118 (ForExpr -> Expression ; .)
    CHAR_LITERAL    reduce using rule 118 (ForExpr -> Expression ; .)
    STRING_LITERAL  reduce using rule 118 (ForExpr -> Expression ; .)
    BOOL            reduce using rule 118 (ForExpr -> Expression ; .)
    NEW             reduce using rule 118 (ForExpr -> Expression ; .)
    BOOLEAN         reduce using rule 118 (ForExpr -> Expression ; .)
    CHAR            reduce using rule 118 (ForExpr -> Expression ; .)
    BYTE            reduce using rule 118 (ForExpr -> Expression ; .)
    SHORT           reduce using rule 118 (ForExpr -> Expression ; .)
    INT             reduce using rule 118 (ForExpr -> Expression ; .)
    LONG            reduce using rule 118 (ForExpr -> Expression ; .)
    FLOAT           reduce using rule 118 (ForExpr -> Expression ; .)
    DOUBLE          reduce using rule 118 (ForExpr -> Expression ; .)
    VOID            reduce using rule 118 (ForExpr -> Expression ; .)


state 378

    (122) ExpressionStatements -> ExpressionStatements , ExpressionStatement .

    ,               reduce using rule 122 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    )               reduce using rule 122 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)
    ;               reduce using rule 122 (ExpressionStatements -> ExpressionStatements , ExpressionStatement .)


state 379

    (137) CatchHeader -> CATCH ( TypeSpecifier . IDENTIFIER )
    (138) CatchHeader -> CATCH ( TypeSpecifier . )

    IDENTIFIER      shift and go to state 391
    )               shift and go to state 392


state 380

    (66) ArrayInitializers -> ArrayInitializers , VariableInitializer .

    }               reduce using rule 66 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)
    ,               reduce using rule 66 (ArrayInitializers -> ArrayInitializers , VariableInitializer .)


state 381

    (171) ArgumentList -> ArgumentList , Expression .

    )               reduce using rule 171 (ArgumentList -> ArgumentList , Expression .)
    ,               reduce using rule 171 (ArgumentList -> ArgumentList , Expression .)


state 382

    (111) IterationStatement -> WHILE ( Expression ) Statement .

    }               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    ;               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    IDENTIFIER      reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    CASE            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    DEFAULT         reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    IF              reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    SWITCH          reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    WHILE           reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    DO              reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    FOR             reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    BREAK           reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    CONTINUE        reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    RETURN          reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    THROW           reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    SYNCHRONIZED    reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    TRY             reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    {               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    BOOLEAN         reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    CHAR            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    BYTE            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    SHORT           reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    INT             reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    LONG            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    FLOAT           reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    DOUBLE          reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    VOID            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    OPT_INC_DEC     reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    +               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    -               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    ~               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    !               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    THIS            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    SUPER           reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    NULL            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    (               reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    FLOAT_LITERAL   reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    INT_LITERAL     reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    CHAR_LITERAL    reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    STRING_LITERAL  reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    BOOL            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    NEW             reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)
    ELSE            reduce using rule 111 (IterationStatement -> WHILE ( Expression ) Statement .)


state 383

    (180) ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .

    {               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    .               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_INC_DEC     reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    =               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_EQ          reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    *               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    /               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    %               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    +               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    -               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OPT_SOME        reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    <               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    >               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LE           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_GE           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    INSTANCEOF      reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_EQ           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_NE           reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    &               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ^               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    |               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LAND         reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ?               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    OP_LOR          reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ;               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ,               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    )               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    :               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    }               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)
    ]               reduce using rule 180 (ClassAllocationExpression -> NEW TypeName ( ArgumentList ) .)


state 384

    (187) DimExpr -> [ Expression ] .

    [               reduce using rule 187 (DimExpr -> [ Expression ] .)
    {               reduce using rule 187 (DimExpr -> [ Expression ] .)
    .               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OPT_INC_DEC     reduce using rule 187 (DimExpr -> [ Expression ] .)
    =               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OPT_EQ          reduce using rule 187 (DimExpr -> [ Expression ] .)
    *               reduce using rule 187 (DimExpr -> [ Expression ] .)
    /               reduce using rule 187 (DimExpr -> [ Expression ] .)
    %               reduce using rule 187 (DimExpr -> [ Expression ] .)
    +               reduce using rule 187 (DimExpr -> [ Expression ] .)
    -               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OPT_SOME        reduce using rule 187 (DimExpr -> [ Expression ] .)
    <               reduce using rule 187 (DimExpr -> [ Expression ] .)
    >               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_LE           reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_GE           reduce using rule 187 (DimExpr -> [ Expression ] .)
    INSTANCEOF      reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_EQ           reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_NE           reduce using rule 187 (DimExpr -> [ Expression ] .)
    &               reduce using rule 187 (DimExpr -> [ Expression ] .)
    ^               reduce using rule 187 (DimExpr -> [ Expression ] .)
    |               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_LAND         reduce using rule 187 (DimExpr -> [ Expression ] .)
    ?               reduce using rule 187 (DimExpr -> [ Expression ] .)
    OP_LOR          reduce using rule 187 (DimExpr -> [ Expression ] .)
    ;               reduce using rule 187 (DimExpr -> [ Expression ] .)
    )               reduce using rule 187 (DimExpr -> [ Expression ] .)
    :               reduce using rule 187 (DimExpr -> [ Expression ] .)
    ,               reduce using rule 187 (DimExpr -> [ Expression ] .)
    }               reduce using rule 187 (DimExpr -> [ Expression ] .)
    ]               reduce using rule 187 (DimExpr -> [ Expression ] .)


state 385

    (108) SelectionStatement -> SWITCH ( Expression ) Block .

    WHILE           reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    }               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    ;               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    IDENTIFIER      reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CASE            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    DEFAULT         reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    IF              reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SWITCH          reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    DO              reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    FOR             reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BREAK           reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CONTINUE        reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    RETURN          reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    THROW           reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SYNCHRONIZED    reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    TRY             reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    {               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BOOLEAN         reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CHAR            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BYTE            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SHORT           reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    INT             reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    LONG            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    FLOAT           reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    DOUBLE          reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    VOID            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    OPT_INC_DEC     reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    +               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    -               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    ~               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    !               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    THIS            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    SUPER           reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    NULL            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    (               reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    FLOAT_LITERAL   reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    INT_LITERAL     reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    CHAR_LITERAL    reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    STRING_LITERAL  reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    BOOL            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    NEW             reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)
    ELSE            reduce using rule 108 (SelectionStatement -> SWITCH ( Expression ) Block .)


state 386

    (239) ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .

    )               reduce using rule 239 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    ;               reduce using rule 239 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    ,               reduce using rule 239 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    :               reduce using rule 239 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    }               reduce using rule 239 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)
    ]               reduce using rule 239 (ConditionalExpression -> ConditionalOrExpression ? Expression : ConditionalExpression .)


state 387

    (112) IterationStatement -> DO Statement WHILE ( Expression . ) ;

    )               shift and go to state 393


state 388

    (107) SelectionStatement -> IF ( Expression ) Statement . ElseOrNot
    (109) ElseOrNot -> . ELSE Statement
    (110) ElseOrNot -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 395
    }               reduce using rule 110 (ElseOrNot -> .)
    ;               reduce using rule 110 (ElseOrNot -> .)
    IDENTIFIER      reduce using rule 110 (ElseOrNot -> .)
    CASE            reduce using rule 110 (ElseOrNot -> .)
    DEFAULT         reduce using rule 110 (ElseOrNot -> .)
    IF              reduce using rule 110 (ElseOrNot -> .)
    SWITCH          reduce using rule 110 (ElseOrNot -> .)
    WHILE           reduce using rule 110 (ElseOrNot -> .)
    DO              reduce using rule 110 (ElseOrNot -> .)
    FOR             reduce using rule 110 (ElseOrNot -> .)
    BREAK           reduce using rule 110 (ElseOrNot -> .)
    CONTINUE        reduce using rule 110 (ElseOrNot -> .)
    RETURN          reduce using rule 110 (ElseOrNot -> .)
    THROW           reduce using rule 110 (ElseOrNot -> .)
    SYNCHRONIZED    reduce using rule 110 (ElseOrNot -> .)
    TRY             reduce using rule 110 (ElseOrNot -> .)
    {               reduce using rule 110 (ElseOrNot -> .)
    BOOLEAN         reduce using rule 110 (ElseOrNot -> .)
    CHAR            reduce using rule 110 (ElseOrNot -> .)
    BYTE            reduce using rule 110 (ElseOrNot -> .)
    SHORT           reduce using rule 110 (ElseOrNot -> .)
    INT             reduce using rule 110 (ElseOrNot -> .)
    LONG            reduce using rule 110 (ElseOrNot -> .)
    FLOAT           reduce using rule 110 (ElseOrNot -> .)
    DOUBLE          reduce using rule 110 (ElseOrNot -> .)
    VOID            reduce using rule 110 (ElseOrNot -> .)
    OPT_INC_DEC     reduce using rule 110 (ElseOrNot -> .)
    +               reduce using rule 110 (ElseOrNot -> .)
    -               reduce using rule 110 (ElseOrNot -> .)
    ~               reduce using rule 110 (ElseOrNot -> .)
    !               reduce using rule 110 (ElseOrNot -> .)
    THIS            reduce using rule 110 (ElseOrNot -> .)
    SUPER           reduce using rule 110 (ElseOrNot -> .)
    NULL            reduce using rule 110 (ElseOrNot -> .)
    (               reduce using rule 110 (ElseOrNot -> .)
    FLOAT_LITERAL   reduce using rule 110 (ElseOrNot -> .)
    INT_LITERAL     reduce using rule 110 (ElseOrNot -> .)
    CHAR_LITERAL    reduce using rule 110 (ElseOrNot -> .)
    STRING_LITERAL  reduce using rule 110 (ElseOrNot -> .)
    BOOL            reduce using rule 110 (ElseOrNot -> .)
    NEW             reduce using rule 110 (ElseOrNot -> .)

  ! ELSE            [ reduce using rule 110 (ElseOrNot -> .) ]

    ElseOrNot                      shift and go to state 394

state 389

    (113) IterationStatement -> FOR ( ForInit ForExpr ForIncr ) . Statement
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    ExpressionStatement            shift and go to state 89
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 396
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    GuardingStatement              shift and go to state 144
    ConditionalOrExpression        shift and go to state 137
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 390

    (114) IterationStatement -> FOR ( ForInit ForExpr ) Statement .

    }               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    ;               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    IDENTIFIER      reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CASE            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    DEFAULT         reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    IF              reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SWITCH          reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    WHILE           reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    DO              reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    FOR             reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BREAK           reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CONTINUE        reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    RETURN          reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    THROW           reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SYNCHRONIZED    reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    TRY             reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    {               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BOOLEAN         reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CHAR            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BYTE            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SHORT           reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    INT             reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    LONG            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    FLOAT           reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    DOUBLE          reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    VOID            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    OPT_INC_DEC     reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    +               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    -               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    ~               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    !               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    THIS            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    SUPER           reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    NULL            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    (               reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    FLOAT_LITERAL   reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    INT_LITERAL     reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    CHAR_LITERAL    reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    STRING_LITERAL  reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    BOOL            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    NEW             reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)
    ELSE            reduce using rule 114 (IterationStatement -> FOR ( ForInit ForExpr ) Statement .)


state 391

    (137) CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER . )

    )               shift and go to state 397


state 392

    (138) CatchHeader -> CATCH ( TypeSpecifier ) .

    {               reduce using rule 138 (CatchHeader -> CATCH ( TypeSpecifier ) .)


state 393

    (112) IterationStatement -> DO Statement WHILE ( Expression ) . ;

    ;               shift and go to state 398


state 394

    (107) SelectionStatement -> IF ( Expression ) Statement ElseOrNot .

    WHILE           reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    }               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    ;               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    IDENTIFIER      reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CASE            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    DEFAULT         reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    IF              reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SWITCH          reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    DO              reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    FOR             reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BREAK           reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CONTINUE        reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    RETURN          reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    THROW           reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SYNCHRONIZED    reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    TRY             reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    {               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BOOLEAN         reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CHAR            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BYTE            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SHORT           reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    INT             reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    LONG            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    FLOAT           reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    DOUBLE          reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    VOID            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    OPT_INC_DEC     reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    +               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    -               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    ~               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    !               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    THIS            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    SUPER           reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    NULL            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    (               reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    FLOAT_LITERAL   reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    INT_LITERAL     reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    CHAR_LITERAL    reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    STRING_LITERAL  reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    BOOL            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    NEW             reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)
    ELSE            reduce using rule 107 (SelectionStatement -> IF ( Expression ) Statement ElseOrNot .)


state 395

    (109) ElseOrNot -> ELSE . Statement
    (94) Statement -> . EmptyStatement
    (95) Statement -> . LabelStatement
    (96) Statement -> . ExpressionStatement ;
    (97) Statement -> . SelectionStatement
    (98) Statement -> . IterationStatement
    (99) Statement -> . JumpStatement
    (100) Statement -> . GuardingStatement
    (101) Statement -> . Block
    (102) EmptyStatement -> . ;
    (103) LabelStatement -> . IDENTIFIER :
    (104) LabelStatement -> . CASE ConstantExpression :
    (105) LabelStatement -> . DEFAULT :
    (106) ExpressionStatement -> . Expression
    (107) SelectionStatement -> . IF ( Expression ) Statement ElseOrNot
    (108) SelectionStatement -> . SWITCH ( Expression ) Block
    (111) IterationStatement -> . WHILE ( Expression ) Statement
    (112) IterationStatement -> . DO Statement WHILE ( Expression ) ;
    (113) IterationStatement -> . FOR ( ForInit ForExpr ForIncr ) Statement
    (114) IterationStatement -> . FOR ( ForInit ForExpr ) Statement
    (123) JumpStatement -> . BREAK IDENTIFIER ;
    (124) JumpStatement -> . BREAK ;
    (125) JumpStatement -> . CONTINUE IDENTIFIER ;
    (126) JumpStatement -> . CONTINUE ;
    (127) JumpStatement -> . RETURN Expression ;
    (128) JumpStatement -> . RETURN ;
    (129) JumpStatement -> . THROW Expression ;
    (130) GuardingStatement -> . SYNCHRONIZED ( Expression ) Statement
    (131) GuardingStatement -> . TRY Block Finally
    (132) GuardingStatement -> . TRY Block Catches
    (133) GuardingStatement -> . TRY Block Catches Finally
    (87) Block -> . { LocalVariableDeclarationsAndStatements }
    (88) Block -> . { }
    (244) Expression -> . AssignmentExpression
    (240) AssignmentExpression -> . ConditionalExpression
    (241) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (238) ConditionalExpression -> . ConditionalOrExpression
    (239) ConditionalExpression -> . ConditionalOrExpression ? Expression : ConditionalExpression
    (194) UnaryExpression -> . OPT_INC_DEC UnaryExpression
    (195) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (196) UnaryExpression -> . LogicalUnaryExpression
    (236) ConditionalOrExpression -> . ConditionalAndExpression
    (237) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (201) ArithmeticUnaryOperator -> . +
    (202) ArithmeticUnaryOperator -> . -
    (197) LogicalUnaryExpression -> . PostfixExpression
    (198) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (234) ConditionalAndExpression -> . InclusiveOrExpression
    (235) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (191) PostfixExpression -> . PrimaryExpression
    (192) PostfixExpression -> . RealPostfixExpression
    (199) LogicalUnaryOperator -> . ~
    (200) LogicalUnaryOperator -> . !
    (232) InclusiveOrExpression -> . ExclusiveOrExpression
    (233) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (140) PrimaryExpression -> . QualifiedName
    (141) PrimaryExpression -> . NotJustName
    (193) RealPostfixExpression -> . PostfixExpression OPT_INC_DEC
    (230) ExclusiveOrExpression -> . AndExpression
    (231) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (32) QualifiedName -> . IDENTIFIER
    (33) QualifiedName -> . QualifiedName . IDENTIFIER
    (142) NotJustName -> . SpecialName
    (143) NotJustName -> . NewAllocationExpression
    (144) NotJustName -> . ComplexPrimary
    (228) AndExpression -> . EqualityExpression
    (229) AndExpression -> . AndExpression & EqualityExpression
    (167) SpecialName -> . THIS
    (168) SpecialName -> . SUPER
    (169) SpecialName -> . NULL
    (172) NewAllocationExpression -> . PlainNewAllocationExpression
    (173) NewAllocationExpression -> . QualifiedName . PlainNewAllocationExpression
    (145) ComplexPrimary -> . ( Expression )
    (146) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (225) EqualityExpression -> . RelationalExpression
    (226) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (227) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (174) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (175) PlainNewAllocationExpression -> . ClassAllocationExpression
    (176) PlainNewAllocationExpression -> . ArrayAllocationExpression { }
    (177) PlainNewAllocationExpression -> . ClassAllocationExpression { }
    (178) PlainNewAllocationExpression -> . ArrayAllocationExpression { ArrayInitializers }
    (179) PlainNewAllocationExpression -> . ClassAllocationExpression { FieldDeclarations }
    (147) ComplexPrimaryNoParenthesis -> . FLOAT_LITERAL
    (148) ComplexPrimaryNoParenthesis -> . INT_LITERAL
    (149) ComplexPrimaryNoParenthesis -> . CHAR_LITERAL
    (150) ComplexPrimaryNoParenthesis -> . STRING_LITERAL
    (151) ComplexPrimaryNoParenthesis -> . BOOL
    (152) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (153) ComplexPrimaryNoParenthesis -> . FieldAccess
    (154) ComplexPrimaryNoParenthesis -> . MethodCall
    (219) RelationalExpression -> . ShiftExpression
    (220) RelationalExpression -> . RelationalExpression < ShiftExpression
    (221) RelationalExpression -> . RelationalExpression > ShiftExpression
    (222) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (223) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (224) RelationalExpression -> . RelationalExpression INSTANCEOF TypeSpecifier
    (182) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (183) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (184) ArrayAllocationExpression -> . NEW TypeName Dims
    (180) ClassAllocationExpression -> . NEW TypeName ( ArgumentList )
    (181) ClassAllocationExpression -> . NEW TypeName ( )
    (155) ArrayAccess -> . QualifiedName [ Expression ]
    (156) ArrayAccess -> . ComplexPrimary [ Expression ]
    (157) FieldAccess -> . NotJustName . IDENTIFIER
    (158) FieldAccess -> . RealPostfixExpression . IDENTIFIER
    (159) FieldAccess -> . QualifiedName . THIS
    (160) FieldAccess -> . QualifiedName . CLASS
    (161) FieldAccess -> . PrimitiveType . CLASS
    (162) MethodCall -> . MethodAccess ( ArgumentList )
    (163) MethodCall -> . MethodAccess ( )
    (217) ShiftExpression -> . AdditiveExpression
    (218) ShiftExpression -> . ShiftExpression OPT_SOME AdditiveExpression
    (8) PrimitiveType -> . BOOLEAN
    (9) PrimitiveType -> . CHAR
    (10) PrimitiveType -> . BYTE
    (11) PrimitiveType -> . SHORT
    (12) PrimitiveType -> . INT
    (13) PrimitiveType -> . LONG
    (14) PrimitiveType -> . FLOAT
    (15) PrimitiveType -> . DOUBLE
    (16) PrimitiveType -> . VOID
    (164) MethodAccess -> . ComplexPrimaryNoParenthesis
    (165) MethodAccess -> . SpecialName
    (166) MethodAccess -> . QualifiedName
    (214) AdditiveExpression -> . MultiplicativeExpression
    (215) AdditiveExpression -> . AdditiveExpression + MultiplicativeExpression
    (216) AdditiveExpression -> . AdditiveExpression - MultiplicativeExpression
    (210) MultiplicativeExpression -> . CastExpression
    (211) MultiplicativeExpression -> . MultiplicativeExpression * CastExpression
    (212) MultiplicativeExpression -> . MultiplicativeExpression / CastExpression
    (213) MultiplicativeExpression -> . MultiplicativeExpression % CastExpression
    (203) CastExpression -> . UnaryExpression
    (204) CastExpression -> . ( PrimitiveTypeExpression ) CastExpression
    (205) CastExpression -> . ( ClassTypeExpression ) CastExpression
    (206) CastExpression -> . ( Expression ) LogicalUnaryExpression

    ;               shift and go to state 109
    IDENTIFIER      shift and go to state 94
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 128
    IF              shift and go to state 162
    SWITCH          shift and go to state 136
    WHILE           shift and go to state 130
    DO              shift and go to state 150
    FOR             shift and go to state 112
    BREAK           shift and go to state 145
    CONTINUE        shift and go to state 122
    RETURN          shift and go to state 100
    THROW           shift and go to state 166
    SYNCHRONIZED    shift and go to state 101
    TRY             shift and go to state 113
    {               shift and go to state 68
    OPT_INC_DEC     shift and go to state 114
    +               shift and go to state 107
    -               shift and go to state 155
    ~               shift and go to state 149
    !               shift and go to state 153
    THIS            shift and go to state 95
    SUPER           shift and go to state 164
    NULL            shift and go to state 152
    (               shift and go to state 93
    FLOAT_LITERAL   shift and go to state 132
    INT_LITERAL     shift and go to state 148
    CHAR_LITERAL    shift and go to state 96
    STRING_LITERAL  shift and go to state 163
    BOOL            shift and go to state 146
    NEW             shift and go to state 131
    BOOLEAN         shift and go to state 65
    CHAR            shift and go to state 56
    BYTE            shift and go to state 66
    SHORT           shift and go to state 41
    INT             shift and go to state 62
    LONG            shift and go to state 49
    FLOAT           shift and go to state 64
    DOUBLE          shift and go to state 63
    VOID            shift and go to state 44

    PostfixExpression              shift and go to state 126
    LabelStatement                 shift and go to state 99
    ArithmeticUnaryOperator        shift and go to state 103
    AssignmentExpression           shift and go to state 111
    ExpressionStatement            shift and go to state 89
    JumpStatement                  shift and go to state 129
    RealPostfixExpression          shift and go to state 102
    Statement                      shift and go to state 399
    AndExpression                  shift and go to state 92
    ArrayAccess                    shift and go to state 115
    CastExpression                 shift and go to state 151
    EqualityExpression             shift and go to state 104
    LogicalUnaryOperator           shift and go to state 160
    ComplexPrimaryNoParenthesis    shift and go to state 105
    MultiplicativeExpression       shift and go to state 106
    ClassAllocationExpression      shift and go to state 127
    MethodCall                     shift and go to state 108
    GuardingStatement              shift and go to state 144
    ConditionalOrExpression        shift and go to state 137
    SelectionStatement             shift and go to state 110
    NewAllocationExpression        shift and go to state 138
    NotJustName                    shift and go to state 159
    QualifiedName                  shift and go to state 198
    ComplexPrimary                 shift and go to state 125
    PrimitiveType                  shift and go to state 195
    LogicalUnaryExpression         shift and go to state 161
    UnaryExpression                shift and go to state 142
    Expression                     shift and go to state 139
    Block                          shift and go to state 116
    AdditiveExpression             shift and go to state 140
    ArrayAllocationExpression      shift and go to state 117
    ConditionalExpression          shift and go to state 141
    InclusiveOrExpression          shift and go to state 143
    MethodAccess                   shift and go to state 118
    PrimaryExpression              shift and go to state 134
    ExclusiveOrExpression          shift and go to state 119
    ConditionalAndExpression       shift and go to state 97
    ShiftExpression                shift and go to state 157
    RelationalExpression           shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 121
    FieldAccess                    shift and go to state 147
    EmptyStatement                 shift and go to state 98
    SpecialName                    shift and go to state 124
    IterationStatement             shift and go to state 167

state 396

    (113) IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .

    }               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    ;               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    IDENTIFIER      reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CASE            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    DEFAULT         reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    IF              reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SWITCH          reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    WHILE           reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    DO              reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    FOR             reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BREAK           reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CONTINUE        reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    RETURN          reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    THROW           reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SYNCHRONIZED    reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    TRY             reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    {               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BOOLEAN         reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CHAR            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BYTE            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SHORT           reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    INT             reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    LONG            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    FLOAT           reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    DOUBLE          reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    VOID            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    OPT_INC_DEC     reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    +               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    -               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    ~               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    !               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    THIS            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    SUPER           reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    NULL            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    (               reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    FLOAT_LITERAL   reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    INT_LITERAL     reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    CHAR_LITERAL    reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    STRING_LITERAL  reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    BOOL            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    NEW             reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)
    ELSE            reduce using rule 113 (IterationStatement -> FOR ( ForInit ForExpr ForIncr ) Statement .)


state 397

    (137) CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER ) .

    {               reduce using rule 137 (CatchHeader -> CATCH ( TypeSpecifier IDENTIFIER ) .)


state 398

    (112) IterationStatement -> DO Statement WHILE ( Expression ) ; .

    }               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    ;               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    IDENTIFIER      reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CASE            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    DEFAULT         reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    IF              reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SWITCH          reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    WHILE           reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    DO              reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    FOR             reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BREAK           reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CONTINUE        reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    RETURN          reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    THROW           reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SYNCHRONIZED    reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    TRY             reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    {               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BOOLEAN         reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CHAR            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BYTE            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SHORT           reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    INT             reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    LONG            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    FLOAT           reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    DOUBLE          reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    VOID            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    OPT_INC_DEC     reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    +               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    -               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    ~               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    !               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    THIS            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    SUPER           reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    NULL            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    (               reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    FLOAT_LITERAL   reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    INT_LITERAL     reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    CHAR_LITERAL    reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    STRING_LITERAL  reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    BOOL            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    NEW             reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)
    ELSE            reduce using rule 112 (IterationStatement -> DO Statement WHILE ( Expression ) ; .)


state 399

    (109) ElseOrNot -> ELSE Statement .

    }               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    ;               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    IDENTIFIER      reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    CASE            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    DEFAULT         reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    IF              reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    SWITCH          reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    WHILE           reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    DO              reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    FOR             reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    BREAK           reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    CONTINUE        reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    RETURN          reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    THROW           reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    SYNCHRONIZED    reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    TRY             reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    {               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    BOOLEAN         reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    CHAR            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    BYTE            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    SHORT           reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    INT             reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    LONG            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    FLOAT           reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    DOUBLE          reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    VOID            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    OPT_INC_DEC     reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    +               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    -               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    ~               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    !               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    THIS            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    SUPER           reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    NULL            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    (               reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    FLOAT_LITERAL   reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    INT_LITERAL     reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    CHAR_LITERAL    reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    STRING_LITERAL  reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    BOOL            reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    NEW             reduce using rule 109 (ElseOrNot -> ELSE Statement .)
    ELSE            reduce using rule 109 (ElseOrNot -> ELSE Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 154 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 388 resolved as shift
